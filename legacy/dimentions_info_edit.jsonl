{"idx": "3d_1", "instruction": "There is a reference image for you and I also have a set of data about body movement positions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# raw data\n# data for the first person\nap1 = np.array(\n[\n[\n0.0054,\n-0.0432,\n-0.0456,\n-0.0084,\n0.0558,\n0.0222,\n0.03,\n0.0138,\n-0.0048,\n-0.033,\n-0.012,\n0.0768,\n0.0966,\n0.0822,\n-0.063,\n-0.1038,\n-0.0834,\n],\n[\n0.0102,\n0.0702,\n0.048,\n0.0906,\n-0.0492,\n-0.0648,\n-0.0372,\n0.015,\n0.0,\n-0.0342,\n-0.0198,\n-0.0552,\n-0.1152,\n-0.1278,\n0.066,\n0.1278,\n0.081,\n],\n[\n0.222,\n0.2556,\n-0.0612,\n-0.3162,\n0.2544,\n-0.0606,\n-0.3174,\n0.3576,\n0.501,\n0.5334,\n0.606,\n0.4872,\n0.3744,\n0.2982,\n0.489,\n0.3948,\n0.2982,\n],\n]\n)\n\n# data for the second person\nap2 = np.array(\n[\n[\n0.6108,\n0.5136,\n0.5088,\n0.5832,\n0.7116,\n0.6444,\n0.66,\n0.6276,\n0.5904,\n0.534,\n0.576,\n0.7536,\n0.7932,\n0.7644,\n0.474,\n0.3924,\n0.4332,\n],\n[\n0.2604,\n0.3804,\n0.336,\n0.4212,\n0.1416,\n0.1104,\n0.1656,\n0.27,\n0.24,\n0.1716,\n0.2004,\n0.1296,\n0.0096,\n-0.0156,\n0.372,\n0.4956,\n0.402,\n],\n[\n0.804,\n0.8712,\n0.2376,\n-0.2724,\n0.8688,\n0.2388,\n-0.2748,\n1.0752,\n1.362,\n1.4268,\n1.572,\n1.3344,\n1.1088,\n0.9564,\n1.338,\n1.1496,\n0.9564,\n],\n]\n)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# raw data\n# data for the first person\nap1 = np.array(\n    [\n        [\n            0.0054,\n            -0.0432,\n            -0.0456,\n            -0.0084,\n            0.0558,\n            0.0222,\n            0.03,\n            0.0138,\n            -0.0048,\n            -0.033,\n            -0.012,\n            0.0768,\n            0.0966,\n            0.0822,\n            -0.063,\n            -0.1038,\n            -0.0834,\n        ],\n        [\n            0.0102,\n            0.0702,\n            0.048,\n            0.0906,\n            -0.0492,\n            -0.0648,\n            -0.0372,\n            0.015,\n            0.0,\n            -0.0342,\n            -0.0198,\n            -0.0552,\n            -0.1152,\n            -0.1278,\n            0.066,\n            0.1278,\n            0.081,\n        ],\n        [\n            0.222,\n            0.2556,\n            -0.0612,\n            -0.3162,\n            0.2544,\n            -0.0606,\n            -0.3174,\n            0.3576,\n            0.501,\n            0.5334,\n            0.606,\n            0.4872,\n            0.3744,\n            0.2982,\n            0.489,\n            0.3948,\n            0.2982,\n        ],\n    ]\n)\n\n# data for the second person\nap2 = np.array(\n    [\n        [\n            0.6108,\n            0.5136,\n            0.5088,\n            0.5832,\n            0.7116,\n            0.6444,\n            0.66,\n            0.6276,\n            0.5904,\n            0.534,\n            0.576,\n            0.7536,\n            0.7932,\n            0.7644,\n            0.474,\n            0.3924,\n            0.4332,\n        ],\n        [\n            0.2604,\n            0.3804,\n            0.336,\n            0.4212,\n            0.1416,\n            0.1104,\n            0.1656,\n            0.27,\n            0.24,\n            0.1716,\n            0.2004,\n            0.1296,\n            0.0096,\n            -0.0156,\n            0.372,\n            0.4956,\n            0.402,\n        ],\n        [\n            0.804,\n            0.8712,\n            0.2376,\n            -0.2724,\n            0.8688,\n            0.2388,\n            -0.2748,\n            1.0752,\n            1.362,\n            1.4268,\n            1.572,\n            1.3344,\n            1.1088,\n            0.9564,\n            1.338,\n            1.1496,\n            0.9564,\n        ],\n    ]\n)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n\n# data for the first person\nxp = ap1[0]\nyp = ap2[1]\nzp = ap2[2]\n\n# data for the second person\nxp2 = ap2[0]\nyp2 = ap2[1]\nzp2 = ap2[2]\n\nfig, ax = plt.subplots(figsize=(7, 7), subplot_kw={\"projection\": \"3d\"})\n\nradius = 1\nax.set_xlim3d([0, radius])\nax.set_ylim3d([0, radius])\nax.set_zlim3d([0, radius * 1.5])\nax.view_init(elev=15.0, azim=70)\nax.dist = 7.5\n\n# 3D scatter\nax.scatter3D(xp, yp, zp, color=\"darkorange\", label=\"Targets\")\n\n# draw the body\n# left leg\nax.plot(xp[0:4], yp[0:4], zp[0:4], ls=\"-\", color=\"orange\")\n# right leg\nax.plot(\n    np.hstack((xp[0], xp[4:7])),\n    np.hstack((yp[0], yp[4:7])),\n    np.hstack((zp[0], zp[4:7])),\n    ls=\"-\",\n    color=\"orange\",\n)\n# spine\nax.plot(\n    np.hstack((xp[0], xp[7:11])),\n    np.hstack((yp[0], yp[7:11])),\n    np.hstack((zp[0], zp[7:11])),\n    ls=\"-\",\n    color=\"orange\",\n)\n# right arm\nax.plot(\n    np.hstack((xp[8], xp[11:14])),\n    np.hstack((yp[8], yp[11:14])),\n    np.hstack((zp[8], zp[11:14])),\n    ls=\"-\",\n    color=\"orange\",\n)\n# left arm\nax.plot(\n    np.hstack((xp[8], xp[14:])),\n    np.hstack((yp[8], yp[14:])),\n    np.hstack((zp[8], zp[14:])),\n    ls=\"-\",\n    color=\"orange\",\n)\n\n# second person\nax.scatter3D(xp2, yp2, zp2, color=\"blue\", label=\"Predictions\")\n#\n# left leg\nax.plot(xp2[0:4], yp2[0:4], zp2[0:4], ls=\"-\", color=\"blue\")\n# right leg\nax.plot(\n    np.hstack((xp2[0], xp2[4:7])),\n    np.hstack((yp2[0], yp2[4:7])),\n    np.hstack((zp2[0], zp2[4:7])),\n    ls=\"-\",\n    color=\"blue\",\n)\n# spine\nax.plot(\n    np.hstack((xp2[0], xp2[7:11])),\n    np.hstack((yp2[0], yp2[7:11])),\n    np.hstack((zp2[0], zp2[7:11])),\n    ls=\"-\",\n    color=\"blue\",\n)\n# right arm\nax.plot(\n    np.hstack((xp2[8], xp2[11:14])),\n    np.hstack((yp2[8], yp2[11:14])),\n    np.hstack((zp2[8], zp2[11:14])),\n    ls=\"-\",\n    color=\"blue\",\n)\n# left arm\nax.plot(\n    np.hstack((xp2[8], xp2[14:])),\n    np.hstack((yp2[8], yp2[14:])),\n    np.hstack((zp2[8], zp2[14:])),\n    ls=\"-\",\n    color=\"blue\",\n)\n\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_1.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_3", "instruction": "There is a reference image for you and I also have a set of data about CIFAR10 Spiking ResNet18 performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting\nK = np.array(\n[\n[1, 2, 3, 4, 5, 6],\n[1, 2, 3, 4, 5, 6],\n[1, 2, 3, 4, 5, 6],\n[1, 2, 3, 4, 5, 6],\n[1, 2, 3, 4, 5, 6],\n[1, 2, 3, 4, 5, 6],\n]\n)\ntau = np.array(\n[\n[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n[1.1, 1.1, 1.1, 1.1, 1.1, 1.1],\n[1.3, 1.3, 1.3, 1.3, 1.3, 1.3],\n[1.5, 1.5, 1.5, 1.5, 1.5, 1.5],\n[1.8, 1.8, 1.8, 1.8, 1.8, 1.8],\n[2.0, 2.0, 2.0, 2.0, 2.0, 2.0],\n]\n)\naccuracy = np.array(\n[\n[80, 86, 96, 28, 80, 89],\n[80, 83, 77, 29, 21, 87],\n[80, 82, 48, 50, 42, 88],\n[80, 84, 69, 61, 83, 89],\n[80, 82, 92, 62, 84, 87],\n[80, 83, 91, 53, 75, 88],\n]\n)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nK = np.array(\n    [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n    ]\n)\ntau = np.array(\n    [\n        [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n        [1.1, 1.1, 1.1, 1.1, 1.1, 1.1],\n        [1.3, 1.3, 1.3, 1.3, 1.3, 1.3],\n        [1.5, 1.5, 1.5, 1.5, 1.5, 1.5],\n        [1.8, 1.8, 1.8, 1.8, 1.8, 1.8],\n        [2.0, 2.0, 2.0, 2.0, 2.0, 2.0],\n    ]\n)\naccuracy = np.array(\n    [\n        [80, 86, 96, 28, 80, 89],\n        [80, 83, 77, 29, 21, 87],\n        [80, 82, 48, 50, 42, 88],\n        [80, 84, 69, 61, 83, 89],\n        [80, 82, 92, 62, 84, 87],\n        [80, 83, 91, 53, 75, 88],\n    ]\n)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig = plt.figure(\n    figsize=(10, 6)\n)  # Adjusting figure size to match original image's dimensions\nax = fig.add_subplot(111, projection=\"3d\")\n\n# Plot a 3D surface\nsurf = ax.plot_surface(K, tau, accuracy, cmap=\"viridis\", edgecolor=\"black\")\n\n# Labels and title\nax.set_xlabel(\"K\")\nax.set_ylabel(\"tau\")\nax.set_zlabel(\"Accuracy (%)\")\nax.set_title(\"CIFAR10 Spiking ResNet18\\nT = 6\", y=1.00)\nax.set_box_aspect(aspect=None, zoom=0.9)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Saving the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig(\"3d_3.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_4", "instruction": "There is a reference image for you and I also have a set of data about surface plots representing different mathematical functions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the data for the surface plots (assuming some function f(m, n))\nm = np.linspace(-150, 300, 200) # Increased resolution\nn = np.linspace(-100, 200, 200) # Increased resolution\nm, n = np.meshgrid(m, n)\nz1 = 0.01 * (m**2 + n**2) # Adjust the function to create a concave shape\nz2 = 0.01 * (m**2 + n**2)\nz3 = np.sqrt(m**2 + n**2)\nz4 = np.log(m**2 + n**2 + 1)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 15.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for the surface plots (assuming some function f(m, n))\nm = np.linspace(-150, 300, 200)  # Increased resolution\nn = np.linspace(-100, 200, 200)  # Increased resolution\nm, n = np.meshgrid(m, n)\nz1 = 0.01 * (m**2 + n**2)  # Adjust the function to create a concave shape\nz2 = 0.01 * (m**2 + n**2)\nz3 = np.sqrt(m**2 + n**2)\nz4 = np.log(m**2 + n**2 + 1)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with specified size to match the original image's dimensions\nfig = plt.figure(figsize=(15, 10))\n\n# Plot the first subplot\nax1 = fig.add_subplot(\n    141, projection=\"3d\", facecolor=\"white\"\n)  # Set background to white\nsurf1 = ax1.plot_surface(m, n, z1, cmap=\"viridis\")\nax1.set_title(\"Origin\", fontsize=12, y=-0.1)\nax1.set_xlabel(\"m\", fontsize=12)  # Increased font size\nax1.set_ylabel(\"n\", fontsize=12)  # Increased font size\nax1.set_zlabel(\"FREEDOM\", fontsize=12)  # Increased font size\n\n# Plot the second subplot\nax2 = fig.add_subplot(142, projection=\"3d\", facecolor=\"white\")\nsurf2 = ax2.plot_surface(m, n, z2, cmap=\"viridis\")\nax2.set_title(\"MG (ours)\", fontsize=14, y=-0.1)\nax2.set_xlabel(\"m\", fontsize=12)\nax2.set_ylabel(\"n\", fontsize=12)\nax2.set_zlabel(\"FREEDOM\", fontsize=12, y=-0.3, rotation=0)\n\n# Plot the third subplot\nax3 = fig.add_subplot(143, projection=\"3d\", facecolor=\"white\")\nsurf3 = ax3.plot_surface(m, n, z3, cmap=\"viridis\")\nax3.set_title(\"Origin\", fontsize=14, y=-0.1)\nax3.set_xlabel(\"m\", fontsize=12)\nax3.set_ylabel(\"n\", fontsize=12)\nax3.set_zlabel(\"BM3\", fontsize=12, rotation=90)\n\n# Plot the fourth subplot\nax4 = fig.add_subplot(144, projection=\"3d\", facecolor=\"white\")\nsurf4 = ax4.plot_surface(m, n, z4, cmap=\"viridis\")\nax4.set_title(\"MG (ours)\", fontsize=14, y=-0.1)\nax4.set_xlabel(\"m\", fontsize=12)\nax4.set_ylabel(\"n\", fontsize=12)\nax4.set_zlabel(\"BM3\", fontsize=12, rotation=90, x=-100)\n\n# Zoom all the subplots\nax1.set_box_aspect(aspect=None, zoom=0.83)\nax2.set_box_aspect(aspect=None, zoom=0.83)\nax3.set_box_aspect(aspect=None, zoom=0.83)\nax4.set_box_aspect(aspect=None, zoom=0.83)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and spacing\nplt.tight_layout()\n\n# Show the plot\nplt.savefig(\"3d_4.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_5", "instruction": "There is a reference image for you and I also have a set of data about human body joint positions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# data\nap = np.array(\n[\n[\n0.06,\n0.01,\n-0.0,\n0.01,\n0.11,\n0.04,\n0.08,\n0.05,\n0.04,\n0.01,\n0.05,\n0.16,\n0.2,\n0.16,\n-0.03,\n-0.17,\n-0.07,\n],\n[\n0.07,\n0.19,\n0.14,\n0.21,\n-0.04,\n-0.04,\n-0.02,\n0.11,\n0.1,\n-0.02,\n0.05,\n-0.04,\n-0.14,\n-0.12,\n0.12,\n0.22,\n0.14,\n],\n[\n0.37,\n0.43,\n-0.1,\n-0.53,\n0.42,\n-0.1,\n-0.53,\n0.6,\n0.84,\n0.89,\n1.01,\n0.81,\n0.62,\n0.5,\n0.82,\n0.66,\n0.5,\n],\n]\n)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# data\nap = np.array(\n    [\n        [\n            0.06,\n            0.01,\n            -0.0,\n            0.01,\n            0.11,\n            0.04,\n            0.08,\n            0.05,\n            0.04,\n            0.01,\n            0.05,\n            0.16,\n            0.2,\n            0.16,\n            -0.03,\n            -0.17,\n            -0.07,\n        ],\n        [\n            0.07,\n            0.19,\n            0.14,\n            0.21,\n            -0.04,\n            -0.04,\n            -0.02,\n            0.11,\n            0.1,\n            -0.02,\n            0.05,\n            -0.04,\n            -0.14,\n            -0.12,\n            0.12,\n            0.22,\n            0.14,\n        ],\n        [\n            0.37,\n            0.43,\n            -0.1,\n            -0.53,\n            0.42,\n            -0.1,\n            -0.53,\n            0.6,\n            0.84,\n            0.89,\n            1.01,\n            0.81,\n            0.62,\n            0.5,\n            0.82,\n            0.66,\n            0.5,\n        ],\n    ]\n)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nxp = ap[0]\nyp = ap[1]\nzp = ap[2]\nfig, ax = plt.subplots(figsize=(7, 7), subplot_kw={\"projection\": \"3d\"})\n\nradius = 1\nax.set_xlim3d([0, radius])\nax.set_ylim3d([0, radius])\nax.set_zlim3d([0, radius * 1.5])\nax.view_init(elev=15.0, azim=70)\nax.dist = 7.5\n\n# 3D scatter\nax.scatter3D(xp, yp, zp, color=\"darkorange\", label=\"Targets\")\n\n# draw the body\n# left leg\nax.plot(xp[0:4], yp[0:4], zp[0:4], ls=\"-\", color=\"orange\")\n# right leg\nax.plot(\n    np.hstack((xp[0], xp[4:7])),\n    np.hstack((yp[0], yp[4:7])),\n    np.hstack((zp[0], zp[4:7])),\n    ls=\"-\",\n    color=\"orange\",\n)\n# spine\nax.plot(\n    np.hstack((xp[0], xp[7:11])),\n    np.hstack((yp[0], yp[7:11])),\n    np.hstack((zp[0], zp[7:11])),\n    ls=\"-\",\n    color=\"orange\",\n)\n# right arm\nax.plot(\n    np.hstack((xp[8], xp[11:14])),\n    np.hstack((yp[8], yp[11:14])),\n    np.hstack((zp[8], zp[11:14])),\n    ls=\"-\",\n    color=\"orange\",\n)\n# left arm\nax.plot(\n    np.hstack((xp[8], xp[14:])),\n    np.hstack((yp[8], yp[14:])),\n    np.hstack((zp[8], zp[14:])),\n    ls=\"-\",\n    color=\"orange\",\n)\n\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_5.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_7", "instruction": "There is a reference image for you and I also have a set of data about **histogram frequencies**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Fixing random state for reproducibility\nhist = np.array(\n[\n[8.0, 7.0, 5.0, 8.0],\n[4.0, 5.0, 9.0, 6.0],\n[2.0, 4.0, 3.0, 7.0],\n[4.0, 5.0, 3.0, 8.0],\n]\n)\nxedges = np.array([0.0, 1.25, 2.5, 3.75, 5.0])\nyedges = np.array([0.0, 1.25, 2.5, 3.75, 5.0])\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Fixing random state for reproducibility\nhist = np.array(\n    [\n        [8.0, 7.0, 5.0, 8.0],\n        [4.0, 5.0, 9.0, 6.0],\n        [2.0, 4.0, 3.0, 7.0],\n        [4.0, 5.0, 3.0, 8.0],\n    ]\n)\nxedges = np.array([0.0, 1.25, 2.5, 3.75, 5.0])\nyedges = np.array([0.0, 1.25, 2.5, 3.75, 5.0])\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n\n# Construct arrays for the anchor positions of the 16 bars.\nxpos, ypos = np.meshgrid(xedges[:-1] + 0.25, yedges[:-1] + 0.25, indexing=\"ij\")\nxpos = xpos.ravel()\nypos = ypos.ravel()\nzpos = 0\n\n# Construct arrays with the dimensions for the 16 bars.\ndx = dy = 0.5 * np.ones_like(zpos)\ndz = hist.ravel()\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(projection=\"3d\")\n\n# Create a colormap for the color bar\ncolors = plt.cm.viridis(dz / 10)\nbar3d = ax.bar3d(xpos, ypos, zpos, dx, dy, dz, zsort=\"average\", color=colors)\n\n# Add color bar which maps values to colors.\nsm = plt.cm.ScalarMappable(\n    cmap=plt.cm.viridis, norm=plt.Normalize(vmin=dz.min(), vmax=dz.max())\n)\nsm.set_array([])\nfig.colorbar(sm, ax=ax, shrink=0.5, aspect=10)  # Adjust colorbar position and size\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_7.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_8", "instruction": "There is a reference image for you and I also have a set of data about age, income, and debt. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nred = np.array(\n[\n[24.0, 30.0, 21.0, 16.0, 18.0, 27.0, 32.0, 32.0, 27.0, 25.0],\n[46.0, 46.0, 52.0, 52.0, 57.0, 58.0, 40.0, 48.0, 41.0, 50.0],\n[-38.0, -34.0, -33.0, -45.0, -38.0, -36.0, -33.0, -35.0, -38.0, -40.0],\n]\n)\nblue = np.array(\n[\n[29.0, 29.0, 33.0, 22.0, 33.0, 32.0, 30.0, 33.0, 33.0, 31.0],\n[103.0, 85.0, 105.0, 82.0, 94.0, 68.0, 74.0, 71.0, 77.0, 74.0],\n[-33.0, -21.0, -27.0, -31.0, -17.0, -18.0, -19.0, -30.0, -29.0, -16.0],\n]\n)\norange = np.array(\n[\n[24.0, 19.0, 21.0, 26.0, 23.0, 11.0, 19.0, 18.0, 19.0, 16.0],\n[27.0, 28.0, 25.0, 30.0, 13.0, 14.0, 17.0, 26.0, 28.0, 23.0],\n[-53.0, -39.0, -41.0, -46.0, -38.0, -51.0, -49.0, -42.0, -37.0, -39.0],\n]\n)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n# ===================\n# Part 2: Data Preparation\n# ===================\nred = np.array(\n    [\n        [24.0, 30.0, 21.0, 16.0, 18.0, 27.0, 32.0, 32.0, 27.0, 25.0],\n        [46.0, 46.0, 52.0, 52.0, 57.0, 58.0, 40.0, 48.0, 41.0, 50.0],\n        [-38.0, -34.0, -33.0, -45.0, -38.0, -36.0, -33.0, -35.0, -38.0, -40.0],\n    ]\n)\nblue = np.array(\n    [\n        [29.0, 29.0, 33.0, 22.0, 33.0, 32.0, 30.0, 33.0, 33.0, 31.0],\n        [103.0, 85.0, 105.0, 82.0, 94.0, 68.0, 74.0, 71.0, 77.0, 74.0],\n        [-33.0, -21.0, -27.0, -31.0, -17.0, -18.0, -19.0, -30.0, -29.0, -16.0],\n    ]\n)\norange = np.array(\n    [\n        [24.0, 19.0, 21.0, 26.0, 23.0, 11.0, 19.0, 18.0, 19.0, 16.0],\n        [27.0, 28.0, 25.0, 30.0, 13.0, 14.0, 17.0, 26.0, 28.0, 23.0],\n        [-53.0, -39.0, -41.0, -46.0, -38.0, -51.0, -49.0, -42.0, -37.0, -39.0],\n    ]\n)\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(projection=\"3d\")\n\nax.scatter(red[0], red[1], red[2], marker=\"o\", color=\"red\", depthshade=False)\nax.scatter(blue[0], blue[1], blue[2], marker=\"^\", color=\"blue\", depthshade=False)\nax.scatter(\n    orange[0], orange[1], orange[2], marker=\"s\", color=\"orange\", depthshade=False\n)\nax.set_xlabel(\"Age\")\nax.set_ylabel(\"Income\")\nax.set_zlabel(\"Debt\")\n\nax.set_xticks([10, 15, 20, 25, 30, 35, 40])\nax.set_yticks([10, 30, 50, 70, 90])\nax.set_zticks([-50, -40, -30, -20])\n\nax.set_box_aspect(aspect=None, zoom=0.8)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_8.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_9", "instruction": "There is a reference image for you and I also have a set of data about temperature, time, and depth measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nred = np.array([[40.0, 20.0], [10.0, 40.0], [-50.0, -40.0]])\nblue = np.array([[40.0, 30.0], [40.0, 70.0], [-40.0, -30.0]])\norange = np.array([[30.0, 40.0], [80.0, 90.0], [-20.0, -10.0]])\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nred = np.array([[40.0, 20.0], [10.0, 40.0], [-50.0, -40.0]])\nblue = np.array([[40.0, 30.0], [40.0, 70.0], [-40.0, -30.0]])\norange = np.array([[30.0, 40.0], [80.0, 90.0], [-20.0, -10.0]])\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(projection=\"3d\")\n\nax.plot(red[0], red[1], red[2], color=\"red\")\nax.plot(blue[0], blue[1], blue[2], color=\"blue\")\nax.plot(orange[0], orange[1], orange[2], color=\"orange\")\n\nax.set_xlabel(\"Temperature (\u2103)\")\nax.set_ylabel(\"Time (s)\")\nax.set_zlabel(\"Depth (m)\")\n\nax.set_xticks([10, 15, 20, 25, 30, 35, 40])\nax.set_yticks([10, 30, 50, 70, 90])\nax.set_zticks([-50, -40, -30, -20])\n\nax.set_box_aspect(aspect=None, zoom=0.8)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_9.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_11", "instruction": "There is a reference image for you and I also have a set of data about elliptical shapes in a 3D space. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Make data\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 15 * np.outer(np.cos(u), np.sin(v))\ny = 20 * np.outer(np.sin(u), np.sin(v))\nz = 5 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Make data\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 15 * np.outer(np.cos(u), np.sin(v))\ny = 20 * np.outer(np.sin(u), np.sin(v))\nz = 5 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(projection=\"3d\")\n\n# Plot the surface\nax.plot_surface(x, y, z, color=\"dodgerblue\")\n\n# Set an equal aspect ratio\nax.set_aspect(\"equal\")\n\nax.set_xticks(np.arange(int(x.min()) - 1, int(x.max()) + 2, 5))\nax.set_yticks(np.arange(int(y.min()) - 1, int(y.max()) + 2, 5))\nax.set_zticks(np.arange(int(z.min()) - 1, int(z.max()) + 2, 5))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig(\"3d_11.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_12", "instruction": "There is a reference image for you and I also have a set of data about the relationship between temperature, pressure, and volume. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nx = np.array([-5.0, -4.0, -3.0, -1.0, -0.0, 1.0, 2.0, 4.0, 5.0, 6.0])\ny = np.array([8.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, -1.0, -2.0, -3.0])\nz = np.array([7.06, 2.82, 6.36, 12.63, 12.36, 2.2, 11.13, 7.95, 9.36, 12.64])\nz_fit = np.array([5.99, 6.44, 6.89, 7.78, 8.23, 8.67, 9.12, 10.02, 10.46, 10.91])\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nx = np.array([-5.0, -4.0, -3.0, -1.0, -0.0, 1.0, 2.0, 4.0, 5.0, 6.0])\ny = np.array([8.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, -1.0, -2.0, -3.0])\nz = np.array([7.06, 2.82, 6.36, 12.63, 12.36, 2.2, 11.13, 7.95, 9.36, 12.64])\nz_fit = np.array([5.99, 6.44, 6.89, 7.78, 8.23, 8.67, 9.12, 10.02, 10.46, 10.91])\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111, projection=\"3d\")\n\nax.scatter(x, y, z, color=\"r\", label=\"Discrete Points\", marker=\"o\")\nax.plot(x, y, z_fit, color=\"b\", label=\"Fit Line\")\n\nax.set_xlabel(\"Temperature (\u00b0C)\")\nax.set_ylabel(\"Pressure (kPa)\")\nax.set_zlabel(\"Volume (L)\")\nax.legend()\n\nax.set_box_aspect(aspect=None, zoom=0.8)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_12.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_13", "instruction": "There is a reference image for you and I also have a set of data about car manufacturers' profit ratios over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nyticklabels = [\"BMW\", \"Audi\"]\nyears = np.array([2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019])\nbmw = np.array([0.98, 0.8, 0.46, 0.78, 0.12, 0.64, 0.14, 0.94, 0.52, 0.41])\naudi = np.array([0.16, 0.11, 0.66, 0.14, 0.2, 0.37, 0.82, 0.1, 0.84, 0.1])\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n\nyticklabels = [\"BMW\", \"Audi\"]\nyears = np.array([2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019])\nbmw = np.array([0.98, 0.8, 0.46, 0.78, 0.12, 0.64, 0.14, 0.94, 0.52, 0.41])\naudi = np.array([0.16, 0.11, 0.66, 0.14, 0.2, 0.37, 0.82, 0.1, 0.84, 0.1])\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(projection=\"3d\")\n\nax.bar(years, bmw, zs=0, zdir=\"y\", color=\"sandybrown\", alpha=0.8)\nax.bar(years, audi, zs=1, zdir=\"y\", color=\"skyblue\", alpha=0.8)\n\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Type\")\nax.set_zlabel(\"Profit Ratio\")\n\nax.set_yticks([0, 1])\nax.set_yticklabels(yticklabels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_13.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_14", "instruction": "There is a reference image for you and I also have a set of data about vaccination incidence rates by age. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Fixing random state for reproducibility\ndef polygon_under_graph(x, y):\n\"\"\"\nConstruct the vertex list which defines the polygon filling the space under\nthe (x, y) line graph. This assumes x is in ascending order.\n\"\"\"\nreturn [(x[0], 0.0), *zip(x, y), (x[-1], 0.0)]\nx = np.linspace(0.0, 10.0, 31)\nvaccination_numbers = range(1, 4)\n\n# verts[i] is a list of (x, y) pairs defining polygon i.\ngamma = np.vectorize(math.gamma)\nverts = [\npolygon_under_graph(x, v**x * np.exp(-v - 0.5) / gamma(x + 1))\nfor v in vaccination_numbers\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import math\nimport matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\nfrom matplotlib.collections import PolyCollection\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Fixing random state for reproducibility\ndef polygon_under_graph(x, y):\n    \"\"\"\n    Construct the vertex list which defines the polygon filling the space under\n    the (x, y) line graph. This assumes x is in ascending order.\n    \"\"\"\n    return [(x[0], 0.0), *zip(x, y), (x[-1], 0.0)]\n\n\nx = np.linspace(0.0, 10.0, 31)\nvaccination_numbers = range(1, 4)\n\n# verts[i] is a list of (x, y) pairs defining polygon i.\ngamma = np.vectorize(math.gamma)\nverts = [\n    polygon_under_graph(x, v**x * np.exp(-v - 0.5) / gamma(x + 1))\n    for v in vaccination_numbers\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nax = plt.figure(figsize=(8, 6)).add_subplot(projection=\"3d\")\nfacecolors = plt.colormaps[\"viridis_r\"](np.linspace(0, 1, len(verts)))\n\npoly = PolyCollection(verts, facecolors=facecolors, alpha=0.7)\nax.add_collection3d(poly, zs=vaccination_numbers, zdir=\"y\")\n\nax.set(\n    xlim=(0, 10),\n    ylim=(1, 4),\n    zlim=(0, 0.35),\n    xlabel=\"Age\",\n    ylabel=\"Vaccination Number\",\n    zlabel=\"Incidence Rate\",\n)\n\nax.set_yticks([1, 2, 3])\nax.set_box_aspect(aspect=None, zoom=0.8)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"3d_14.pdf\", bbox_inches=\"tight\")"}
{"idx": "3d_15", "instruction": "There is a reference image for you and I also have a set of data about investment trends in China and America over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Function to create polygon under graph\ndef polygon_under_graph(x, y):\nreturn [(x[0], 0.0), *zip(x, y), (x[-1], 0.0)]\n# Data for bar chart\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\nChina = [1.23, 1.45, 1.67, 2.34, 0.89, 0.67, 0.45, 2.56, 2.78, 3.01]\nAmerica = [2.34, 2.56, 2.78, 3.01, 1.23, 1.45, 1.67, 2.34, 0.89, 0.67]\n# Data for distribution graph\nx = np.linspace(0.0, 10.0, 31)\ntechnology_levels = range(1, 4)\nexp = np.exp\nverts = [\npolygon_under_graph(x, exp(-0.5 * (x - t) ** 1.5)) for t in technology_levels\n] # Gaussian distributions\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\nfrom matplotlib.collections import PolyCollection\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Function to create polygon under graph\ndef polygon_under_graph(x, y):\n    return [(x[0], 0.0), *zip(x, y), (x[-1], 0.0)]\n\n\n# Data for bar chart\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\nChina = [1.23, 1.45, 1.67, 2.34, 0.89, 0.67, 0.45, 2.56, 2.78, 3.01]\nAmerica = [2.34, 2.56, 2.78, 3.01, 1.23, 1.45, 1.67, 2.34, 0.89, 0.67]\n# Data for distribution graph\nx = np.linspace(0.0, 10.0, 31)\ntechnology_levels = range(1, 4)\nexp = np.exp\nverts = [\n    polygon_under_graph(x, exp(-0.5 * (x - t) ** 1.5)) for t in technology_levels\n]  # Gaussian distributions\nfacecolors = plt.colormaps[\"plasma\"](np.linspace(0, 1, len(verts)))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Data for bar chart\n# Initialize figure and axes\nfig = plt.figure(figsize=(10, 8))\nax1 = fig.add_subplot(121, projection=\"3d\")  # 3D bar chart\nax2 = fig.add_subplot(122, projection=\"3d\")  # 3D distribution graph\n\n\nax1.bar(years, China, zs=0, zdir=\"y\", color=\"#8ac926\", alpha=0.8)\nax1.bar(years, America, zs=1, zdir=\"y\", color=\"#00b4d8\", alpha=0.8)\n\n# Set labels and ticks for bar chart\nax1.set_xlabel(\"Year\")\nax1.set_ylabel(\"Country\")\nax1.set_zlabel(\"Investment (Billion USD)\")\nax1.set_yticks([0, 1])\nax1.set_yticklabels([\"China\", \"America\"])\n\n# Add polygons to the plot\npoly = PolyCollection(verts, facecolors=facecolors, alpha=0.7)\nax2.add_collection3d(poly, zs=technology_levels, zdir=\"y\")\n\n# Set labels and limits for distribution graph\nax2.set(\n    xlim=(0, 10),\n    ylim=(1, 4),\n    zlim=(0, 1),\n    xlabel=\"Time Since Introduction (Years)\",\n    ylabel=\"Technology Level\",\n    zlabel=\"Adoption Rate\",\n)\nax2.set_yticks([1, 2, 3])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and save the figure\nplt.tight_layout()\nax1.set_box_aspect(aspect=None, zoom=0.9)\nax2.set_box_aspect(aspect=None, zoom=0.8)\nplt.savefig(\"3d_15.pdf\", bbox_inches=\"tight\")"}
{"idx": "CB_2", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics including usage, efficiency, emissions, and usage trend for different vehicles such as Bike, Car, Bus, Train, Airplane, and Ship. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nvehicles = [\"Bike\", \"Car\", \"Bus\", \"Train\", \"Airplane\", \"Ship\"]\nusage = [80, 60, 80, 120, 420, 260]\nefficiency = [120, 160, 40, 180, 100, 40]\nemissions = [80, 120, 200, 260, 200, 220]\nusage_trend = [80, 60, 80, 120, 420, 260]\nlabels = [\"Usage\", \"Efficiency\", \"Emissions\", \"Usage Trend\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nvehicles = [\"Bike\", \"Car\", \"Bus\", \"Train\", \"Airplane\", \"Ship\"]\nusage = [80, 60, 80, 120, 420, 260]\nefficiency = [120, 160, 40, 180, 100, 40]\nemissions = [80, 120, 200, 260, 200, 220]\nusage_trend = [80, 60, 80, 120, 420, 260]\nlabels = [\"Usage\", \"Efficiency\", \"Emissions\", \"Usage Trend\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(8, 5)\n)  # Adjusting figure size to match the original image's dimensions\n\nbar_width = 0.25\nindex = np.arange(len(vehicles))\n\nbar1 = ax.bar(\n    index, usage, bar_width, label=labels[0], color=\"#db7a6e\", edgecolor=\"grey\"\n)\nbar2 = ax.bar(\n    index + bar_width,\n    efficiency,\n    bar_width,\n    label=labels[1],\n    color=\"#e5a893\",\n    edgecolor=\"grey\",\n)\nbar3 = ax.bar(\n    index + 2 * bar_width,\n    emissions,\n    bar_width,\n    label=labels[2],\n    color=\"#f9ebe7\",\n    edgecolor=\"grey\",\n)\n\n# Trend line for 'Usage Trend'\nax.plot(\n    index,\n    usage_trend,\n    color=\"#cb56ae\",\n    marker=\"o\",\n    linestyle=\"dashed\",\n    label=labels[3],\n)\n\n# Adding percentages on top of the bars\nfor i, rect in enumerate(bar1 + bar2 + bar3):\n    height = rect.get_height()\n    ax.text(\n        rect.get_x() + rect.get_width() / 2.0,\n        height,\n        f\"{height}%\",\n        ha=\"center\",\n        va=\"bottom\",\n    )\n\n# Labels, title and custom x-axis tick labels\nax.set_xlabel(\"Vehicle\")\nax.set_ylabel(\"Metric Value\")\nax.set_yticks(np.arange(0, 601, 100))\nax.set_title(\"Transportation Metrics by Vehicle Type\")\nax.set_xticks(index + bar_width)\nax.set_xticklabels(vehicles, rotation=30)\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('CB_2.pdf', bbox_inches='tight')"}
{"idx": "CB_3", "instruction": "There is a reference image for you and I also have a set of data about vehicle fuel efficiency and CO2 emissions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Fixing random state for reproducibility\n# some random data\nfuel_efficiency = np.random.rand(100)\n\n# linear relationship between fuel_efficiency and CO2 emissions\nCO2_emissions = 150 - (fuel_efficiency * 100) + np.random.rand(100) * 30\n\n# add a line on ax\nline_x = [0.2, 0.6, 0.7, 0.9, 1.0]\nline_y = [180, 140, 130, 110, 90]\ndiagonal_line = [[0, 1], [200, 0]]\n\nscatters_name = \"Vehicle Data\"\nbin_edges_name = \"Efficiency Bins\"\ncalibration_curve_name = \"Efficiency Trend\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "# ===================\n# Part 1: Importing Libraries\n# ===================\nimport matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom matplotlib.lines import Line2D\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Fixing random state for reproducibility\n# some random data\nfuel_efficiency = np.random.rand(100)\n\n# linear relationship between fuel_efficiency and CO2 emissions\nCO2_emissions = 150 - (fuel_efficiency * 100) + np.random.rand(100) * 30\n\n# add a line on ax\nline_x = [0.2, 0.6, 0.7, 0.9, 1.0]\nline_y = [180, 140, 130, 110, 90]\ndiagonal_line = [[0, 1], [200, 0]]\n\nscatters_name = \"Vehicle Data\"\nbin_edges_name = \"Efficiency Bins\"\ncalibration_curve_name = \"Efficiency Trend\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Draw the scatter plot and marginals.\n\n# Start with a square Figure.\nfig = plt.figure(figsize=(6, 6))\ngs = fig.add_gridspec(\n    2,\n    1,\n    height_ratios=(1, 4),\n    left=0.1,\n    right=0.9,\n    bottom=0.1,\n    top=0.9,\n    wspace=0.0,\n    hspace=0.0,\n)\n# Create the Axes.\nax = fig.add_subplot(gs[1, 0])\nax_histx = fig.add_subplot(gs[0, 0], sharex=ax)\n\n# no labels\nax_histx.tick_params(axis=\"x\", labelbottom=False)\n\n# the scatter plot:\n# add different colors to the scatter plot\nsc = ax.scatter(\n    fuel_efficiency, CO2_emissions, c=fuel_efficiency, cmap=\"autumn\", s=50, edgecolor=\"black\", alpha=0.7\n)\n\n# # add a line on ax\nax.plot(\n    line_x,\n    line_y,\n    color=\"black\",\n    linewidth=2,\n    marker=\"o\",\n    markersize=6,\n    label=\"Efficiency Trend\",\n)\n\n# draw a diagonal line\nax.plot(diagonal_line[0], diagonal_line[1], color=\"black\", linestyle=\"--\")\n\n# now determine nice limits by hand:\nbinwidth = 0.05\nxymax = max(np.max(np.abs(fuel_efficiency)), np.max(np.abs(CO2_emissions / 200)))\nlim = (int(xymax / binwidth) + 1) * binwidth\nbins = np.arange(0, lim + binwidth, binwidth)\nax_histx.hist(fuel_efficiency, bins=bins, color=\"#d6a3b3\", edgecolor=\"black\")\n\n# remove the y-axis labels\nax_histx.set_yticks([])\n\n# remove the top, left, and right spines\nax_histx.spines[\"top\"].set_visible(False)\nax_histx.spines[\"left\"].set_visible(False)\nax_histx.spines[\"right\"].set_visible(False)\n\nax.set_xlabel(\"Fuel Efficiency\")\nax.set_ylabel(\"CO2 Emissions (g/km)\")\n\nax.set_xticks([0.00, 0.25, 0.50, 0.75, 1.00])\nax.set_yticks([0.00, 50.00, 100.00, 150.00, 200.00])\nax.set_xlim(-0.05, 1.05)\nax.set_ylim(-5, 205)\n\n# draw bin edges\nfor i in bins:\n    ax.axvline(i, color=\"gray\", linewidth=0.5, linestyle=\"--\", zorder=0, alpha=0.5)\n\n# Create an axes on the top side of ax_heatmap_top for the colorbar.\nax_colorbar = fig.add_axes(\n    [ax.get_position().width * 1.15, 0.1, 0.05, ax.get_position().y1 * 0.86]\n)\ncbar = plt.colorbar(sc, cax=ax_colorbar, orientation=\"vertical\")\n\n# Create a Line2D instance for bin edges\nbin_edge_line = Line2D(\n    [0], [0], color=\"gray\", linewidth=0.5, linestyle=\"--\"\n)\n\n# Create a Line2D instance for efficiency trend\ncalibration_curve_line = Line2D(\n    [0],\n    [0],\n    color=\"black\",\n    linewidth=2,\n    marker=\"o\",\n    markersize=6,\n)\n\n# Update legend to include the new Line2D instances\nax.legend(\n    handles=[sc, bin_edge_line, calibration_curve_line],\n    labels=[scatters_name, bin_edges_name, calibration_curve_name],\n    loc=\"upper right\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('CB_3.pdf', bbox_inches='tight')"}
{"idx": "CB_4", "instruction": "There is a reference image for you and I also have a set of data about various energy sources and their associated costs, emissions, efficiency, setup time, and output. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nsources = [\n\"Solar\",\n\"Wind\",\n\"Hydropower\",\n\"Nuclear\",\n\"Coal\",\n\"Natural Gas\",\n]\ncost_per_kwh = [0.06, 0.04, 0.05, 0.09, 0.12, 0.08]\nemissions_per_kwh = [0.02, 0.02, 0.01, 0.0, 0.3, 0.2]\nefficiency = [0.2, 0.3, 0.4, 0.35, 0.25, 0.3]\nsetup_time_years = [1, 2, 3, 5, 2, 3]\noutput_mwh = [250, 300, 400, 350, 200, 300]\nlabels = [\"Cost per kWh ($)\", \"Emissions per kWh (kg CO2)\", \"Efficiency (%)\", \"Setup Time (years)\"]\nx_name = \"Energy Sources\"\nbar_name = \"Normalized Metrics (lower is better)\"\nline_name = \"Output (MWh)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "# ===================\n# Part 1: Importing Libraries\n# ===================\nimport matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nsources = [\n    \"Solar\",\n    \"Wind\",\n    \"Hydropower\",\n    \"Nuclear\",\n    \"Coal\",\n    \"Natural Gas\",\n]\ncost_per_kwh = [0.06, 0.04, 0.05, 0.09, 0.12, 0.08]\nemissions_per_kwh = [0.02, 0.02, 0.01, 0.0, 0.3, 0.2]\nefficiency = [0.2, 0.3, 0.4, 0.35, 0.25, 0.3]\nsetup_time_years = [1, 2, 3, 5, 2, 3]\noutput_mwh = [250, 300, 400, 350, 200, 300]\nlabels = [\"Cost per kWh ($)\", \"Emissions per kWh (kg CO2)\", \"Efficiency (%)\", \"Setup Time (years)\"]\nx_name = \"Energy Sources\"\nbar_name = \"Normalized Metrics (lower is better)\"\nline_name = \"Output (MWh)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match original image's dimensions\nfig, ax1 = plt.subplots(figsize=(10, 5))\n\n# Bar plot\nbar_width = 0.2\nindex = np.arange(len(sources))\nbar1 = ax1.bar(\n    index, cost_per_kwh, bar_width, label=labels[0], color=\"#3b76af\"\n)\nbar2 = ax1.bar(\n    index + bar_width,\n    emissions_per_kwh,\n    bar_width,\n    label=labels[1],\n    color=\"#ef8636\",\n)\nbar3 = ax1.bar(\n    index + 2 * bar_width, efficiency, bar_width, label=labels[2], color=\"#529e3f\"\n)\nbar4 = ax1.bar(\n    index + 3 * bar_width,\n    setup_time_years,\n    bar_width,\n    label=labels[3],\n    color=\"#c53a32\",\n)\n\n# Line plot\nax2 = ax1.twinx()\nline = ax2.plot(\n    index + bar_width + bar_width / 2,\n    output_mwh,\n    label=\"Output\",\n    color=\"black\",\n    marker=\"o\",\n    markersize=14,\n    linewidth=2,\n    markeredgecolor=\"white\",\n)\n\n# Labels, title and legend\nax1.set_xlabel(x_name, fontsize=12)\nax1.set_ylabel(bar_name, fontsize=12)\nax1.set_xticks(index + bar_width + bar_width / 2)\nax1.set_xticklabels(sources, fontsize=12)\nax1.legend(loc=\"upper left\")\nax2.legend(loc=\"upper right\")\nax2.set_ylabel(line_name, fontsize=12)\n\nax1.tick_params(axis=\"y\", labelsize=12)\nax2.tick_params(axis=\"y\", labelsize=12)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('CB_4.pdf', bbox_inches='tight')"}
{"idx": "CB_5", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency and CO2 emissions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Fixing random state for reproducibility\n# some random data\nx = np.random.exponential(1 / 2, 300) * 3 + 0.3\ny = np.random.exponential(1 / 6, 300) * 8 + 0.5\nxlabel = \"Fuel Efficiency (km/l)\"\nylabel = \"CO2 Emissions (g/km)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Fixing random state for reproducibility\n# some random data\nx = np.random.exponential(1 / 2, 300) * 3 + 0.3\ny = np.random.exponential(1 / 6, 300) * 8 + 0.5\nxlabel = \"Fuel Efficiency (km/l)\"\nylabel = \"CO2 Emissions (g/km)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Start with a square Figure.\nfig = plt.figure(figsize=(6, 6))\n# Add a gridspec with two rows and two columns and a ratio of 1 to 4 between\n# the size of the marginal axes and the main axes in both directions.\n# Also adjust the subplot parameters for a square plot.\ngs = fig.add_gridspec(\n    2,\n    2,\n    width_ratios=(4, 1),\n    height_ratios=(1, 4),\n    left=0.1,\n    right=0.9,\n    bottom=0.1,\n    top=0.9,\n    wspace=0.0,\n    hspace=0.0,\n)\n# Create the Axes.\nax = fig.add_subplot(gs[1, 0])\nax_histx = fig.add_subplot(gs[0, 0], sharex=ax)\nax_histy = fig.add_subplot(gs[1, 1], sharey=ax)\n\n# Draw the scatter plot and marginals.\n# no labels\nax_histx.tick_params(axis=\"x\", labelbottom=False)\nax_histy.tick_params(axis=\"y\", labelleft=False)\n\n# the scatter plot:\nax.scatter(x, y, color=\"#3b76af\", alpha=0.6)\n\n# now determine nice limits by hand:\nbinwidth = 0.05\nxymax = max(np.max(np.abs(x)), np.max(np.abs(y)))\nlim = (int(xymax / binwidth) + 1) * binwidth\n\nbins = np.arange(0, lim + binwidth, binwidth)\nax_histx.hist(x, bins=bins, color=\"white\", edgecolor=\"#3b76af\")\nax_histy.hist(\n    y, bins=bins, orientation=\"horizontal\", color=\"white\", edgecolor=\"#3b76af\"\n)\n\n# remove the y-axis labels\nax_histx.set_yticks([])\nax_histy.set_xticks([])\n\n# remove the top, left, and right spines\nax_histx.spines[\"top\"].set_visible(False)\nax_histx.spines[\"left\"].set_visible(False)\nax_histx.spines[\"right\"].set_visible(False)\nax_histy.spines[\"top\"].set_visible(False)\nax_histy.spines[\"bottom\"].set_visible(False)\nax_histy.spines[\"right\"].set_visible(False)\n\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_5.pdf', bbox_inches='tight')"}
{"idx": "CB_6", "instruction": "There is a reference image for you and I also have a set of data about different vehicle types and their speed and fuel consumption. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define parameters for three Gaussian distributions\ndistributions = {\n\"bicycles\": {\"mean\": [15, 50], \"cov\": [[2, 10], [10, 30]]},\n\"cars\": {\"mean\": [30, 100], \"cov\": [[3, 20], [20, 40]]},\n\"trains\": {\"mean\": [50, 150], \"cov\": [[4, 25], [25, 50]]},\n}\nkeys = ['bicycles', 'cars', 'trains']\n# Generate samples\nsamples = {\nvehicle: np.random.multivariate_normal(dist[\"mean\"], dist[\"cov\"], 100)\nfor vehicle, dist in distributions.items()\n}\n\nxlabel = \"Speed (km/h)\" \nylabel = \"Fuel Consumption (l/100 km)\"\ntitle = \"Vehicle Types\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define parameters for three Gaussian distributions\ndistributions = {\n    \"bicycles\": {\"mean\": [15, 50], \"cov\": [[2, 10], [10, 30]]},\n    \"cars\": {\"mean\": [30, 100], \"cov\": [[3, 20], [20, 40]]},\n    \"trains\": {\"mean\": [50, 150], \"cov\": [[4, 25], [25, 50]]},\n}\nkeys = ['bicycles', 'cars', 'trains']\n# Generate samples\nsamples = {\n    vehicle: np.random.multivariate_normal(dist[\"mean\"], dist[\"cov\"], 100)\n    for vehicle, dist in distributions.items()\n}\n\nxlabel = \"Speed (km/h)\" \nylabel = \"Fuel Consumption (l/100 km)\"\ntitle = \"Vehicle Types\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plotting grid\nfig = plt.figure(figsize=(10, 8))\ngrid = plt.GridSpec(4, 4, hspace=0, wspace=0)\n\n# Main scatter plot\nmain_ax = fig.add_subplot(grid[1:, :-1])\ncolors = {keys[0]: \"r\", keys[1]: \"g\", keys[2]: \"b\"}\nfor species, color in colors.items():\n    subset = samples[species]\n    main_ax.scatter(subset[:, 0], subset[:, 1], c=color, label=species, alpha=0.6)\nmain_ax.set_xlabel(xlabel)\nmain_ax.set_ylabel(ylabel)\n\n# Top density plot\ntop_ax = fig.add_subplot(grid[0, :-1], sharex=main_ax)\nall_samples = np.concatenate([samples[species] for species in samples], axis=0)\nx_min, x_max = all_samples[:, 0].min(), all_samples[:, 0].max()\nxs = np.linspace(x_min, x_max, 200)\nfor species, color in colors.items():\n    density = gaussian_kde(samples[species][:, 0])\n    top_ax.fill_between(xs, density(xs), alpha=0.6, color=color)\n\n# Right density plot\nright_ax = fig.add_subplot(grid[1:, -1], sharey=main_ax)\ny_min, y_max = all_samples[:, 1].min(), all_samples[:, 1].max()\nys = np.linspace(y_min, y_max, 200)\nfor species, color in colors.items():\n    density = gaussian_kde(samples[species][:, 1])\n    right_ax.fill_betweenx(ys, density(ys), alpha=0.6, color=color)\n\n# Hide the spines\ntop_ax.spines[\"top\"].set_visible(False)\ntop_ax.spines[\"right\"].set_visible(False)\ntop_ax.spines[\"left\"].set_visible(False)\nright_ax.spines[\"top\"].set_visible(False)\nright_ax.spines[\"right\"].set_visible(False)\nright_ax.spines[\"bottom\"].set_visible(False)\n\n# Remove the labels from the top and right axes\ntop_ax.tick_params(axis=\"x\", which=\"both\", top=False, bottom=False, labelbottom=False)\nright_ax.tick_params(axis=\"y\", which=\"both\", left=False, right=False, labelleft=False)\n\n# Remove all ticks from the right axis\ntop_ax.set_yticks([])\nright_ax.set_xticks([])\n\nmain_ax.legend(title=title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('CB_6.pdf', bbox_inches='tight')"}
{"idx": "CB_8", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency and CO2 emissions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\nx = np.random.exponential(1 / 8, 1000) + 0.2\ny = np.random.rand(1000)\nxlabel = \"Fuel Efficiency (km/l)\"\nylabel = \"CO2 Emissions (g/km)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.gridspec as gridspec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\nx = np.random.exponential(1 / 8, 1000) + 0.2\ny = np.random.rand(1000)\nxlabel = \"Fuel Efficiency (km/l)\"\nylabel = \"CO2 Emissions (g/km)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and gridspec\nfig = plt.figure(figsize=(8, 8))\ngs = gridspec.GridSpec(2, 2, width_ratios=[5, 1], height_ratios=[1, 5])\n\n# Main hexbin plot\nax = plt.subplot(gs[1, 0])\nax.hexbin(x, y, gridsize=25, cmap=\"Blues\", mincnt=1)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_xlim(0.2, 1.0)\nax.set_ylim(0, 0.6)\nax.axhline(0.5, color=\"gray\", linestyle=\"--\", linewidth=1)\nax.axvline(0.5, color=\"gray\", linestyle=\"--\", linewidth=1)\n\n# Histogram on the top\nax_histx = plt.subplot(gs[0, 0], sharex=ax)\nax_histx.hist(x, bins=25, color=\"white\", edgecolor=\"#3b76af\", linewidth=2)\nax_histx.axis(\"off\")  # Hide axis\n\n# Histogram on the right\nax_histy = plt.subplot(gs[1, 1], sharey=ax)\nax_histy.hist(\n    y,\n    bins=25,\n    orientation=\"horizontal\",\n    color=\"white\",\n    edgecolor=\"#3b76af\",\n    linewidth=2,\n)\nax_histy.axis(\"off\")  # Hide axis\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and save the figure\nplt.tight_layout()\nplt.savefig('CB_8.pdf', bbox_inches='tight')"}
{"idx": "CB_9", "instruction": "There is a reference image for you and I also have a set of data about modes of transportation and their fuel efficiency, emissions, and a combined score. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmodes = [\"Car\", \"Bus\", \"Train\", \"Bike\"]\nfuel_efficiency = [0.25, 0.50, 0.70, 0.95]\nemissions = [0.80, 0.60, 0.40, 0.10]\ncombined_score = [1.05, 1.10, 1.10, 1.05]\nlabels = [\"Fuel Efficiency (km/l)\", \"Emissions (kg CO2/km)\", \"Combined Score (Efficiency + Emissions)\"]\nxlabel = \"Modes of Transportation\"\nylabel = \"Values\"\ntitle = \"Fuel Efficiency and Emissions with Combined Score for Different Transportation Modes\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodes = [\"Car\", \"Bus\", \"Train\", \"Bike\"]\nfuel_efficiency = [0.25, 0.50, 0.70, 0.95]\nemissions = [0.80, 0.60, 0.40, 0.10]\ncombined_score = [1.05, 1.10, 1.10, 1.05]\nlabels = [\"Fuel Efficiency (km/l)\", \"Emissions (kg CO2/km)\", \"Combined Score (Efficiency + Emissions)\"]\nxlabel = \"Modes of Transportation\"\nylabel = \"Values\"\ntitle = \"Fuel Efficiency and Emissions with Combined Score for Different Transportation Modes\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Bar plot\nfig, ax1 = plt.subplots(\n    figsize=(10, 6)\n)  # Adjust the figsize to match the original image's dimensions\n\nbar_width = 0.35\nindex = np.arange(len(modes))\n\nbar1 = ax1.bar(index, fuel_efficiency, bar_width, label=labels[0], color=\"blue\")\nbar2 = ax1.bar(index + bar_width, emissions, bar_width, label=labels[1], color=\"green\")\n\n# Line plot\nax2 = ax1.twinx()\n(line,) = ax2.plot(\n    index + bar_width / 2, combined_score, color=\"red\", marker=\"o\", label=labels[2]\n)\n\n# Annotate bars with values\nfor rect, value in zip(bar1, fuel_efficiency):\n    height = rect.get_height()\n    ax1.text(\n        rect.get_x() + rect.get_width() / 2,\n        height + 0.01,\n        f\"{value:.2f}\",\n        ha=\"center\",\n        va=\"bottom\",\n    )\n\nfor rect, value in zip(bar2, emissions):\n    height = rect.get_height()\n    ax1.text(\n        rect.get_x() + rect.get_width() / 2,\n        height + 0.01,\n        f\"{value:.2f}\",\n        ha=\"center\",\n        va=\"bottom\",\n    )\n\n# Labels, title and legend\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabel)\nax1.set_title(title)\nax1.set_xticks(index + bar_width / 2)\nax1.set_xticklabels(modes)\nax1.set_ylim(0, 1)\nax1.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\nax2.set_ylim(1.00, 1.15)\nax2.set_yticks([1.05, 1.10, 1.15])\nax1.legend(loc=\"upper left\")\nax2.legend(loc=\"upper right\")\n\nax1.yaxis.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust figure size to match original image's dimensions\nfig.set_size_inches(10, 6)\n\n# Show plot\nplt.tight_layout()\nplt.savefig('CB_9.pdf', bbox_inches='tight')"}
{"idx": "CB_10", "instruction": "There is a reference image for you and I also have a set of data about temperature and precipitation. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample (x,y) for the scatter plot\ndata = {\n\"Low\": [[np.random.randint(0, 10), np.random.rand() + 20] for _ in range(10)],\n\"Middle\": [[np.random.randint(10, 20), np.random.rand() + 25] for _ in range(2)],\n\"High\": [[np.random.randint(20, 30), np.random.rand() + 30] for _ in range(10)],\n}\n\nline_x = np.array([0, 5, 10, 15, 20, 25, 30])\nline_y = np.array([20, 22, 24, 26, 28, 30, 32])\n\nlabels = [\"Low\", \"Middle\", \"High\"]\ncorrelation = 0.65\nxlabel = \"Temperature (\u00b0C)\"\nylabel = \"Precipitation (mm)\"\nlegend_title = \"Precipitation Intensity\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample (x,y) for the scatter plot\ndata = {\n    \"Low\": [[np.random.randint(0, 10), np.random.rand() + 20] for _ in range(10)],\n    \"Middle\": [[np.random.randint(10, 20), np.random.rand() + 25] for _ in range(2)],\n    \"High\": [[np.random.randint(20, 30), np.random.rand() + 30] for _ in range(10)],\n}\n\nline_x = np.array([0, 5, 10, 15, 20, 25, 30])\nline_y = np.array([20, 22, 24, 26, 28, 30, 32])\n\ncolors = [\"#3171ad\", \"#d39334\", \"#469c76\"]  # Use HEX color codes for muted colors\nlabels = [\"Low\", \"Middle\", \"High\"]\ncorrelation = 0.65\nxlabel = \"Temperature (\u00b0C)\"\nylabel = \"Precipitation (mm)\"\nlegend_title = \"Precipitation Intensity\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create scatter plot\nplt.figure(figsize=(7, 5))  # Adjust figure size to match original image dimensions\n\nfor key in data:\n    x = [item[0] for item in data[key]]\n    y = [item[1] for item in data[key]]\n    plt.scatter(x, y, color=colors[labels.index(key)], label=key)\n\n# Add regression line\nplt.plot(line_x, line_y, color=\"black\")\n\n# Add shaded area for standard deviation\nstd_dev = 0.5\nplt.fill_between(line_x, line_y - std_dev, line_y + std_dev, color=\"black\", alpha=0.1)\n\n# Add legend inside the plot area\nplt.legend(title=legend_title, loc=\"lower right\")\n\n# Add correlation text with a box inside the plot area\nplt.text(line_x[-2], line_y[-2], f\"Correlation: {correlation:.2f}\", fontsize=9)\n\n# Set labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\nplt.yticks(np.arange(line_y.min(), line_y.max() + 2, 2))\n\n# Set grid\nplt.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('CB_10.pdf', bbox_inches='tight')"}
{"idx": "CB_11", "instruction": "There is a reference image for you and I also have a set of data about traffic speeds at different times of the day. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample (x,y) for the scatter plot\ndata = {\n\"morning\": [[np.random.rand() * 10 + 20, np.random.rand() * 10 + 40] for _ in range(10)],\n\"noon\": [[np.random.rand() * 10 + 30, np.random.rand() * 10 + 30] for _ in range(2)],\n\"evening\": [[np.random.rand() * 10 + 40, np.random.rand() * 10 + 20] for _ in range(10)],\n\"night\": [[np.random.rand() * 10 + 50, np.random.rand() * 10 + 10] for _ in range(10)],\n}\n\nline_x = np.array([20, 60])\nline_y = np.array([10, 50])\nlabels = [\"morning\", \"noon\", \"evening\", \"night\"]\ncorrelation = 0.65\nxlabel = \"Time of Day\"\nylabel = \"Traffic Speed (km/h)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample (x,y) for the scatter plot\ndata = {\n    \"morning\": [[np.random.rand() * 10 + 20, np.random.rand() * 10 + 40] for _ in range(10)],\n    \"noon\": [[np.random.rand() * 10 + 30, np.random.rand() * 10 + 30] for _ in range(2)],\n    \"evening\": [[np.random.rand() * 10 + 40, np.random.rand() * 10 + 20] for _ in range(10)],\n    \"night\": [[np.random.rand() * 10 + 50, np.random.rand() * 10 + 10] for _ in range(10)],\n}\n\nline_x = np.array([20, 60])\nline_y = np.array([10, 50])\n\ncolors = [\n    \"#c76526\",\n    \"#469c76\",\n    \"#d39334\",\n    \"#3171ad\",\n]  # Use HEX color codes for muted colors\nlabels = [\"morning\", \"noon\", \"evening\", \"night\"]\ncorrelation = 0.65\nxlabel = \"Time of Day\"\nylabel = \"Traffic Speed (km/h)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create scatter plot\nplt.figure(figsize=(7, 5))  # Adjust figure size to match original image dimensions\n\nfor key in data:\n    x = [item[0] for item in data[key]]\n    y = [item[1] for item in data[key]]\n    plt.scatter(x, y, color=colors[labels.index(key)], label=key)\n\n# Add regression line\nplt.plot(line_x, line_y, color=\"black\")\n\n# Add shaded area for standard deviation\nstd_dev = 0.5\nplt.fill_between(line_x, line_y - std_dev, line_y + std_dev, color=\"black\", alpha=0.1)\n\n# Add legend inside the plot area\nplt.legend(loc=\"center left\")\n\n# Add correlation text with a box inside the plot area\nplt.text(line_x.mean(), line_y.mean(), f\"Correlation: {correlation:.2f}\", fontsize=9)\n\n# Set labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Set grid\nplt.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('CB_11.pdf', bbox_inches='tight')"}
{"idx": "CB_12", "instruction": "There is a reference image for you and I also have a set of data about renewable energy outputs, specifically solar and wind energy. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\nsolar_energy_data = np.random.beta(a=3, b=9, size=1000) * 100 # Solar energy output in kWh\nwind_energy_data = np.random.beta(a=5, b=5, size=1000) * 100 # Wind energy output in kWh\n\n# Compute KDE for both datasets\nkde_solar = gaussian_kde(solar_energy_data)\nkde_wind = gaussian_kde(wind_energy_data)\n\n# Create an array of values for plotting KDE\nx_eval = np.linspace(\nmin(np.concatenate([solar_energy_data, wind_energy_data])),\nmax(np.concatenate([solar_energy_data, wind_energy_data])),\n1000,\n)\nlabels = [\"Solar Energy\", \"Wind Energy\", \"Solar KDE\", \"Wind KDE\"]\np_text = \"T-test p-value = 0.0000\"\nx_label = \"Energy Output (kWh)\"\ny_label = \"Density\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\nsolar_energy_data = np.random.beta(a=3, b=9, size=1000) * 100  # Solar energy output in kWh\nwind_energy_data = np.random.beta(a=5, b=5, size=1000) * 100   # Wind energy output in kWh\n\n# Compute KDE for both datasets\nkde_solar = gaussian_kde(solar_energy_data)\nkde_wind = gaussian_kde(wind_energy_data)\n\n# Create an array of values for plotting KDE\nx_eval = np.linspace(\n    min(np.concatenate([solar_energy_data, wind_energy_data])),\n    max(np.concatenate([solar_energy_data, wind_energy_data])),\n    1000,\n)\nlabels = [\"Solar Energy\", \"Wind Energy\", \"Solar KDE\", \"Wind KDE\"]\np_text = \"T-test p-value = 0.0000\"\nx_label = \"Energy Output (kWh)\"\ny_label = \"Density\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(8, 6))\n\n# Plot histograms\nplt.hist(\n    wind_energy_data, density=True, bins=30, color=\"salmon\", alpha=0.8, label=labels[0]\n)\nplt.hist(solar_energy_data, density=True, bins=30, color=\"#bad7b5\", alpha=0.8, label=labels[1])\n\n# Plot KDEs\nplt.plot(\n    x_eval,\n    kde_wind(x_eval),\n    linestyle=\"dashed\",\n    color=\"darkred\",\n    label=labels[2],\n)\nplt.plot(\n    x_eval,\n    kde_solar(x_eval),\n    linestyle=\"dashed\",\n    color=\"darkgreen\",\n    label=labels[3],\n)\n\n# Add legend\nplt.legend()\n\n# Add T-test p-value text\nplt.text(25, 0.035, p_text, fontsize=10)\n\n# Set labels and title\nplt.xlabel(x_label)\nplt.ylabel(y_label)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_12.pdf', bbox_inches='tight')"}
{"idx": "CB_13", "instruction": "There is a reference image for you and I also have a set of data about transportation model performance scores across different tasks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ntasks = [\"route_planning\", \"traffic_analysis\", \"fuel_efficiency\", \"vehicle_counting\"]\nscores_step1 = [0.75, 0.68, 0.72, 0.74]\nscores_step1_APE = [0.77, 0.7, 0.74, 0.76]\nscores_step2 = [0.85, 0.78, 0.82, 0.84]\nscores_step2_APE = [0.87, 0.8, 0.84, 0.86]\nscores_best = [0.85, 0.81, 0.79, 0.77]\nscores_iterative_best = [0.83, 0.83, 0.84, 0.82]\nscores_sum_best = [0.87, 0.8, 0.84, 0.76]\ntrend = [0.8, 0.83, 0.81, 0.79]\ntitle = \"Comparison of Transportation Models\"\nlabels = [\"Step1\", \"Step1-APE\", \"Step2\", \"Step2-APE\", \"Best\", \"Iterative Best\", \"Sum Best\", \"Trend\"]\nx_label = \"Tasks\"\ny_label = \"Scores\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ntasks = [\"route_planning\", \"traffic_analysis\", \"fuel_efficiency\", \"vehicle_counting\"]\nscores_step1 = [0.75, 0.68, 0.72, 0.74]\nscores_step1_APE = [0.77, 0.7, 0.74, 0.76]\nscores_step2 = [0.85, 0.78, 0.82, 0.84]\nscores_step2_APE = [0.87, 0.8, 0.84, 0.86]\nscores_best = [0.85, 0.81, 0.79, 0.77]\nscores_iterative_best = [0.83, 0.83, 0.84, 0.82]\nscores_sum_best = [0.87, 0.8, 0.84, 0.76]\ntrend = [0.8, 0.83, 0.81, 0.79]\ntitle = \"Comparison of Transportation Models\"\nlabels = [\"Step1\", \"Step1-APE\", \"Step2\", \"Step2-APE\", \"Best\", \"Iterative Best\", \"Sum Best\", \"Trend\"]\nx_label = \"Tasks\"\ny_label = \"Scores\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(10, 4))\n\n# Bar width\nbarWidth = 0.1\n\n# Set position of bar on X axis\nr1 = np.arange(len(scores_step1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\nr5 = [x + barWidth for x in r4]\nr6 = [x + barWidth for x in r5]\nr7 = [x + barWidth for x in r6]\n\n# Make the plot\nplt.bar(\n    r1,\n    scores_step1,\n    color=\"#b7cdde\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=labels[0],\n)\nplt.bar(\n    r2,\n    scores_step1_APE,\n    color=\"#b7cdde\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=labels[1],\n    hatch=\"\\\\\",\n)\nplt.bar(\n    r3,\n    scores_step2,\n    color=\"#81aac8\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=labels[2],\n)\nplt.bar(\n    r4,\n    scores_step2_APE,\n    color=\"#81aac8\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=labels[3],\n    hatch=\"\\\\\",\n)\nplt.bar(\n    r5,\n    scores_best,\n    color=\"#5584af\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=labels[4],\n)\nplt.bar(\n    r6,\n    scores_iterative_best,\n    color=\"#666666\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=labels[5],\n)\nplt.bar(\n    r7,\n    scores_sum_best,\n    color=\"#4a8f74\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=labels[6],\n)\n\n# Add trend line\nplt.plot(\n    tasks,\n    trend,\n    color=\"gray\",\n    marker=\"o\",\n    linestyle=\"--\",\n    linewidth=2,\n    markersize=6,\n    label=labels[7],\n)\n\n# Add xticks on the middle of the group bars\nplt.xlabel(x_label)\nplt.ylabel(y_label)\nplt.xticks([r + barWidth * 3 for r in range(len(scores_step1))], tasks)\nplt.ylim(0.3, 0.9)\nplt.yticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create legend & Show graphic\nplt.title(title)\nplt.legend(loc=\"upper center\", ncol=4)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('CB_13.pdf', bbox_inches='tight')"}
{"idx": "CB_14", "instruction": "There is a reference image for you and I also have a set of data about traffic flow patterns on weekdays and weekends. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data (replace with actual data)\ntraffic_flow_weekday = np.random.normal(1400, 200, 1000)\ntraffic_flow_weekend = np.random.normal(1000, 200, 1000)\n\nmin_bin = min(min(traffic_flow_weekday), min(traffic_flow_weekend))\nmax_bin = max(max(traffic_flow_weekday), max(traffic_flow_weekend))\n\nbins = np.linspace(min_bin, max_bin, 30)\nbin_width = bins[1] - bins[0]\nlabels = [\"Weekday Traffic\", \"Weekend Traffic\"]\nlegend_title = \"Traffic Type\"\ntitle = \"Traffic Flow Distribution\"\nxlabel = \"Traffic Flow (vehicles per hour)\"\nylabel = \"Frequency\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual data)\ntraffic_flow_weekday = np.random.normal(1400, 200, 1000)\ntraffic_flow_weekend = np.random.normal(1000, 200, 1000)\n\nmin_bin = min(min(traffic_flow_weekday), min(traffic_flow_weekend))\nmax_bin = max(max(traffic_flow_weekday), max(traffic_flow_weekend))\n\nbins = np.linspace(min_bin, max_bin, 30)\nbin_width = bins[1] - bins[0]\nlabels = [\"Weekday Traffic\", \"Weekend Traffic\"]\nlegend_title = \"Traffic Type\"\ntitle = \"Traffic Flow Distribution\"\nxlabel = \"Traffic Flow (vehicles per hour)\"\nylabel = \"Frequency\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfigure = plt.figure(figsize=(10, 6))\n\n# Create histogram\ncount_weekday, bins_weekday, _ = plt.hist(\n    traffic_flow_weekday,\n    bins=bins,\n    color=\"#a7c4f2\",\n    alpha=0.7,\n    label=labels[0],\n    edgecolor=\"black\",\n    linewidth=1.25,\n)\ncount_weekend, bins_weekend, _ = plt.hist(\n    traffic_flow_weekend,\n    bins=bins,\n    alpha=0.7,\n    color=\"#fdabd2\",\n    label=labels[1],\n    edgecolor=\"black\",\n    linewidth=1.25,\n)\n\n# Create line plot on top of the histogram and set edge color\nplt.plot(bins_weekday[:-1] + bin_width * 0.5, count_weekday, color=\"#568ce6\", linewidth=1.5)\nplt.plot(bins_weekend[:-1] + bin_width * 0.5, count_weekend, color=\"#fc5fa9\", linewidth=1.5)\n\n# Add legend, title, and labels\nplt.legend(loc=\"upper left\", title=legend_title)\nplt.title(title)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('CB_14.pdf', bbox_inches='tight')"}
{"idx": "CB_15", "instruction": "There is a reference image for you and I also have a set of data about patient satisfaction and common health conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for pie chart\npie_labels = [\"Excellent\", \"Good\", \"Poor\"]\npie_sizes = [60.0, 30.0, 10.0]\npie_counts = [120, 60, 20]\n\n# Data for stacked bar chart\nbar_labels = [\"High Blood Pressure\", \"Diabetes\", \"Heart Disease\"]\nbar_sizes = [50.0, 35.0, 15.0]\nbar_counts = [50, 35, 15]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for pie chart\npie_labels = [\"Excellent\", \"Good\", \"Poor\"]\npie_sizes = [60.0, 30.0, 10.0]\npie_counts = [120, 60, 20]\npie_colors = [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"]\n\n# Data for stacked bar chart\nbar_labels = [\"High Blood Pressure\", \"Diabetes\", \"Heart Disease\"]\nbar_sizes = [50.0, 35.0, 15.0]\nbar_counts = [50, 35, 15]\nbar_colors = [\"#FF9F40\", \"#FF6384\", \"#4BC0C0\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n# Pie chart\nax1.pie(\n    pie_sizes,\n    labels=pie_labels,\n    colors=pie_colors,\n    autopct=lambda p: \"{:.1f}%\\n({})\".format(p, int(round(p * sum(pie_counts) / 100))),\n    startangle=140,\n)\nax1.axis(\"equal\")  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Stacked bar chart\nbar_positions = [0]  # Single bar at position 0\nbottom = 0  # Initial bottom is 0 for the first bar segment\n\nfor size, color, count, bar_label in zip(bar_sizes, bar_colors, bar_counts, bar_labels):\n    ax2.bar(\n        bar_positions,\n        [size],\n        color=color,\n        edgecolor=None,\n        bottom=[bottom],\n        label=bar_label,\n        width=0.5,\n    )\n    # Calculate the middle position for the text\n    mid_pos = bottom + (size / 2)\n    # Add text annotation inside the bar\n    ax2.text(\n        0,\n        mid_pos,\n        \"{}% ({})\".format(size, count),\n        color=\"black\",\n        ha=\"center\",\n        va=\"center\",\n    )\n    bottom += size  # Update bottom for the next bar segment\n\nax2.set_ylim(0, 100)\nax2.set_xlim(-0.5, 0.5)  # Narrow x-axis limits to make the single bar more visible\nax2.set_xticks([])  # Remove x-ticks as they are not necessary\nax2.set_yticks(range(0, 101, 10))  # Set y-ticks to show percentage\nax2.set_yticklabels([\"{}%\".format(i) for i in range(0, 101, 10)])\nax2.legend(loc=\"upper right\", bbox_to_anchor=(1.5, 1))\nax2.set_axis_off()\n\n# set the title\nax2.set_title(\"Incomparable\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('CB_15.pdf', bbox_inches='tight')"}
{"idx": "CB_16", "instruction": "There is a reference image for you and I also have a set of data about processing times for two different algorithms. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate random data to simulate the plot\ndata_algo1 = np.random.normal(15, 2, 50) # Simulating processing time for Algo1 in seconds\ndata_algo2 = np.random.normal(18, 2.5, 50) # Simulating processing time for Algo2 in seconds\n\n# Combine data into a list\ndata = [data_algo1, data_algo2]\n\n# Create positions for each box plot\npositions = [0, 1]\nxticks = [\"Algo1\", \"Algo2\"]\nxlabel = \"Algorithms\"\nylabel = \"Processing Time (Seconds)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate random data to simulate the plot\ndata_algo1 = np.random.normal(15, 2, 50)  # Simulating processing time for Algo1 in seconds\ndata_algo2 = np.random.normal(18, 2.5, 50)  # Simulating processing time for Algo2 in seconds\n\n# Combine data into a list\ndata = [data_algo1, data_algo2]\n\n# Create positions for each box plot\npositions = [0, 1]\nxticks = [\"Algo1\", \"Algo2\"]\nxlabel = \"Algorithms\"\nylabel = \"Processing Time (Seconds)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(7, 5))\n\n# Calculate the kernel density estimate and plot the density plot for each dataset\ncolors = [\"#68ad98\", \"#e58a6d\"]\nfor i, d in enumerate(data):\n    # Calculate KDE\n    kde = gaussian_kde(d)\n    # Create an array of values covering the entire range of data for KDE\n    kde_x = np.linspace(min(d), max(d), 300)\n    kde_y = kde(kde_x)\n    # Scale KDE values to match the position of the boxplot\n    kde_y_scaled = kde_y / kde_y.max() * 0.1  # Scale factor can be adjusted\n    # Plot filled density plot to the left of the boxplot\n    offset = 0.2\n    plt.fill_betweenx(\n        kde_x,\n        positions[i] - kde_y_scaled - offset,\n        positions[i] - offset,\n        color=colors[i],\n        edgecolor=\"black\",\n    )\n\n# Create box plots inside the violin plots\nfor i, d in enumerate(data):\n    plt.boxplot(\n        d,\n        positions=[positions[i]],\n        widths=0.15,\n        patch_artist=True,\n        medianprops=dict(color=\"black\"),\n        boxprops=dict(facecolor=\"none\", color=\"black\"),\n    )\n\n# Add scatter plot for individual data points with grey color\nfor i, d in enumerate(data):\n    x = np.random.normal(positions[i], 0.04, size=len(d))\n    plt.scatter(\n        x, d, color=colors[i], s=10\n    )\n\n# Set the x-axis labels and add title\nplt.xticks([0, 1], xticks)\nplt.xlabel(xlabel)\n\n# Set the y-axis label\nplt.ylabel(ylabel)\n\n# Adjust the y-axis limits\nplt.ylim(10, 25)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_16.pdf', bbox_inches='tight')"}
{"idx": "CB_18", "instruction": "There is a reference image for you and I also have a set of data about internet speed trends over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nyears = np.array([2010, 2012, 2014, 2016, 2018, 2020, 2022, 2024])\nfiber_optic_speed = np.array([20, 40, 60, 80, 100, 150, 200, 250]) # Mbps\ndsl_speed = np.array([10])\nerror = np.array([2])\nlabels = [\"Fiber Optic\", \"DSL\"]\nxlabel = \"Year\"\nylabel = \"Average Speed (Mbps)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nyears = np.array([2010, 2012, 2014, 2016, 2018, 2020, 2022, 2024])\nfiber_optic_speed = np.array([20, 40, 60, 80, 100, 150, 200, 250])  # Mbps\ndsl_speed = np.array([10])\nerror = np.array([2])\nlabels = [\"Fiber Optic\", \"DSL\"]\nxlabel = \"Year\"\nylabel = \"Average Speed (Mbps)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(figsize=(6, 4))  # Adjusting figure size to 432x288 pixels\n\n# Fiber Optic Internet Speed\nax.plot(\n    years,\n    fiber_optic_speed,\n    marker=\"o\",\n    color=\"blue\",\n    label=labels[0],\n)\nax.fill_between(\n    years, fiber_optic_speed - 5, fiber_optic_speed + 5, color=\"#e1eff4\"\n)\n\n# DSL Internet Speed with error\nax.errorbar(\n    years[0],\n    dsl_speed,\n    yerr=error,\n    fmt=\"o\",\n    color=\"red\",\n    label=labels[1],\n    capsize=3,\n)\n\n# Customizing the plot\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_xlim(2008, 2026)\nax.set_ylim(0, 260)  # Adjusted y-axis limit to match the new data range\nax.legend(loc=\"lower right\")\nax.grid(True)\nax.set_xticks(years)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('CB_18.pdf', bbox_inches='tight')"}
{"idx": "CB_19", "instruction": "There is a reference image for you and I also have a set of data about model performance in terms of Exact Match (EM) percentage across different trainable parameter sizes for LLaMA 7B and LLaMA 13B models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nem_7b_trainable_parameter_size = [8, 20, 25, 40, 173]\nEM_7B = [51.49, 54.18, 68.46, 74.55, 78.32]\nem_13b_trainable_parameter_size = [73]\nEM_13B = [79.64]\nmodels_7b = [\"Carbon Lite\", \"Carbon Attn\", \"Carbon FFN\", \"Carbon\", \"Carbon Plus\"]\nmodels_13b = [\"Carbon Large\"]\nlabels = [\"LLaMA 7B\", \"LLaMA 13B\"]\nylabel = \"EM (%)\"\nxlabel = \"Trainable Parameter Size (M)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nem_7b_trainable_parameter_size = [8, 20, 25, 40, 173]\nEM_7B = [51.49, 54.18, 68.46, 74.55, 78.32]\nem_13b_trainable_parameter_size = [73]\nEM_13B = [79.64]\nmodels_7b = [\"Carbon Lite\", \"Carbon Attn\", \"Carbon FFN\", \"Carbon\", \"Carbon Plus\"]\nmodels_13b = [\"Carbon Large\"]\nlabels = [\"LLaMA 7B\", \"LLaMA 13B\"]\nylabel = \"EM (%)\"\nxlabel = \"Trainable Parameter Size (M)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(7, 7)\n)  # Adjusting figure size to match original dimensions\nax.plot(\n    em_7b_trainable_parameter_size,\n    EM_7B,\n    \"o-r\",\n    label=labels[0],\n    marker=\"o\",\n    markersize=5,\n)\nax.plot(\n    em_13b_trainable_parameter_size,\n    EM_13B,\n    \"o-b\",\n    label=labels[1],\n    marker=\"*\",\n    markersize=10,\n)\n\n# Annotating data points\nfor i, txt in enumerate(models_7b):\n    ax.annotate(\n        f\"{EM_7B[i]:.2f}\\n{txt}\",\n        (em_7b_trainable_parameter_size[i], EM_7B[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 10),\n        ha=\"center\",\n    )\n\nfor i, txt in enumerate(models_13b):\n    ax.annotate(\n        f\"{EM_13B[i]:.2f}\\n{txt}\",\n        (em_13b_trainable_parameter_size[i], EM_13B[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 10),\n        ha=\"center\",\n    )\n\n# Legend\nax.legend(loc=\"lower right\")\n\n# Labels and Title\nax.set_ylabel(ylabel)\nax.set_xlabel(xlabel)\n# ax.set_title('Model Performance by Parameter Size')\nax.set_yticks([50, 55, 60, 65, 70, 75, 80, 85])\nax.set_ylim([48, 85])\nax.set_xlim([-5, 180])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('CB_19.pdf', bbox_inches='tight')"}
{"idx": "CB_20", "instruction": "There is a reference image for you and I also have a set of data about vehicle speed and fuel efficiency. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Fixing random state for reproducibility\n# Transportation-related random data\nx = np.random.rand(100) * 40 + 10 # Vehicle speed in km/h\ny = np.random.rand(100) * 15 + 5 # Fuel efficiency in km/l\nline_x = [15, 25, 35, 45, 55]\nline_y = [8, 9, 10, 11, 12]\nscatter_name = \"Vehicle data\"\nline_name = \"Efficiency trend\"\nxlabel = \"Vehicle speed (km/h)\"\nylabel = \"Fuel efficiency (km/l)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Fixing random state for reproducibility\n# Transportation-related random data\nx = np.random.rand(100) * 40 + 10  # Vehicle speed in km/h\ny = np.random.rand(100) * 15 + 5   # Fuel efficiency in km/l\nline_x = [15, 25, 35, 45, 55]\nline_y = [8, 9, 10, 11, 12]\nscatter_name = \"Vehicle data\"\nline_name = \"Efficiency trend\"\nxlabel = \"Vehicle speed (km/h)\"\nylabel = \"Fuel efficiency (km/l)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Start with a square Figure.\nfig = plt.figure(figsize=(6, 6))\ngs = fig.add_gridspec(\n    2,\n    1,\n    height_ratios=(1, 4),\n    left=0.1,\n    right=0.9,\n    bottom=0.1,\n    top=0.9,\n    wspace=0.0,\n    hspace=0.0,\n)\n# Create the Axes.\nax = fig.add_subplot(gs[1, 0])\nax_histx = fig.add_subplot(gs[0, 0], sharex=ax)\n\n# Draw the scatter plot and marginals.\n# no labels\nax_histx.tick_params(axis=\"x\", labelbottom=False)\n\n# the scatter plot:\nax.scatter(x, y, color=\"#e3b388\", edgecolor=\"white\", s=50, label=scatter_name)\n\n# add a line on ax\nax.plot(\n    line_x,\n    line_y,\n    color=\"black\",\n    linewidth=2,\n    marker=\"o\",\n    markersize=6,\n    label=line_name,\n)\n\n# draw a diagonal line\nax.plot([10, 60], [5, 20], color=\"black\", linestyle=\"--\")\n\n# now determine nice limits by hand:\nbinwidth = 5\nxymax = max(np.max(np.abs(x)), np.max(np.abs(y)))\nlim = (int(xymax / binwidth) + 1) * binwidth\nbins = np.arange(10, lim + binwidth, binwidth)\nax_histx.hist(x, bins=bins, color=\"#d6a3b3\", edgecolor=\"black\")\n\n# remove the y-axis labels\nax_histx.set_yticks([])\n\n# remove the top, left, and right spines\nax_histx.spines[\"top\"].set_visible(False)\nax_histx.spines[\"left\"].set_visible(False)\nax_histx.spines[\"right\"].set_visible(False)\n\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\nax.set_xticks([10, 20, 30, 40, 50, 60])\nax.set_yticks([0, 5, 10, 15, 20])\nax.set_xlim(10, 60)\nax.set_ylim(0, 20)\n\nax.legend(loc=\"lower right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('CB_20.pdf', bbox_inches='tight')"}
{"idx": "CB_21", "instruction": "There is a reference image for you and I also have a set of data about traffic speed at different times of the day. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for the line plot\ntraffic_speed_am = np.random.normal(30, 5, 100)\ntraffic_speed_pm = np.random.normal(25, 7, 100)\ntraffic_speed_night = np.random.normal(35, 6, 100)\n\nkde_am = gaussian_kde(traffic_speed_am)\nkde_pm = gaussian_kde(traffic_speed_pm)\nkde_night = gaussian_kde(traffic_speed_night)\n\nx_range = np.linspace(0, 60, 50)\nlabels = [\"Morning\", \"Evening\", \"Night\"]\ntitle = \"Time of Day\"\nxlabel = \"Speed (mph)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the line plot\ntraffic_speed_am = np.random.normal(30, 5, 100)\ntraffic_speed_pm = np.random.normal(25, 7, 100)\ntraffic_speed_night = np.random.normal(35, 6, 100)\n\nkde_am = gaussian_kde(traffic_speed_am)\nkde_pm = gaussian_kde(traffic_speed_pm)\nkde_night = gaussian_kde(traffic_speed_night)\n\nx_range = np.linspace(0, 60, 50)\nlabels = [\"Morning\", \"Evening\", \"Night\"]\ntitle = \"Time of Day\"\nxlabel = \"Speed (mph)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with specific size to match the original image's dimensions\nfig, (ax1, ax2) = plt.subplots(\n    2, 1, figsize=(8, 4), gridspec_kw={\"height_ratios\": [3, 2]}\n)\n\n# Line plot\nax1.fill_between(x_range, kde_am(x_range), color=\"skyblue\", alpha=0.4)\nax1.fill_between(x_range, kde_pm(x_range), color=\"sandybrown\", alpha=0.5)\nax1.fill_between(x_range, kde_night(x_range), color=\"olivedrab\", alpha=0.3)\nax1.plot(x_range, kde_am(x_range), label=labels[0], color=\"blue\")\nax1.plot(x_range, kde_pm(x_range), label=labels[1], color=\"orange\")\nax1.plot(x_range, kde_night(x_range), label=labels[2], color=\"green\")\nax1.legend(title=title, loc=\"upper left\")\nax1.set_xticks([])\nax1.set_yticks([])\n\n# Box plot\nbox = ax2.boxplot(\n    [traffic_speed_am, traffic_speed_pm, traffic_speed_night], vert=False, patch_artist=True, medianprops={\"color\": \"black\"}\n)\ncolors = [\"skyblue\", \"sandybrown\", \"olivedrab\"]\nfor patch, color in zip(box[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\nax2.set_xlabel(xlabel)\nax2.set_yticks([])\nax2.set_xlim(0, 60)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_21.pdf', bbox_inches='tight')"}
{"idx": "CB_22", "instruction": "There is a reference image for you and I also have a set of data about travel statistics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the data for each subplot using random numbers and normal distribution\ntotal_distance_data = np.random.normal(500, 50, 1000) # Total Distance Traveled in miles\naverage_speed_data = np.random.normal(60, 5, 1000) # Average Speed in mph\nfuel_consumption_data = np.random.normal(15, 2, 1000) # Fuel Consumption in gallons\ntravel_time_data = np.random.normal(8, 1, 1000) # Travel Time in hours\n\ntitles = [\"Total Distance Traveled\", \"Average Speed\", \"Fuel Consumption\", \"Travel Time\"]\nxlabels = [\"Miles\", \"Miles per hour\", \"Gallons\", \"Hours\"]\nylabels = [\"Probability\", \"Probability\", \"Probability\", \"Probability\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\nnp.random.seed(0)\n\nfrom scipy.stats import norm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for each subplot using random numbers and normal distribution\ntotal_distance_data = np.random.normal(500, 50, 1000)  # Total Distance Traveled in miles\naverage_speed_data = np.random.normal(60, 5, 1000)     # Average Speed in mph\nfuel_consumption_data = np.random.normal(15, 2, 1000)  # Fuel Consumption in gallons\ntravel_time_data = np.random.normal(8, 1, 1000)        # Travel Time in hours\n\ntitles = [\"Total Distance Traveled\", \"Average Speed\", \"Fuel Consumption\", \"Travel Time\"]\nxlabels = [\"Miles\", \"Miles per hour\", \"Gallons\", \"Hours\"]\nylabels = [\"Probability\", \"Probability\", \"Probability\", \"Probability\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(10, 8))\n\n# Define the subplot grid with reduced space between subplots\ngrid = plt.GridSpec(2, 2, wspace=0.4, hspace=0.5)\n\n# Total Distance Traveled subplot\nax_total_distance = plt.subplot(grid[0, 0])\nax_total_distance.hist(\n    total_distance_data, bins=20, color=\"#0c279f\", edgecolor=\"black\", density=True, linewidth=1\n)\nax_total_distance.plot(\n    np.sort(total_distance_data),\n    norm.pdf(np.sort(total_distance_data), np.mean(total_distance_data), np.std(total_distance_data)),\n    color=\"#3a809d\",\n)\nax_total_distance.set_title(titles[0])\nax_total_distance.set_xlabel(xlabels[0])\nax_total_distance.set_ylabel(ylabels[0])\nax_total_distance.set_ylim(0, 0.010)\nax_total_distance.text(\n    0.7,\n    0.8,\n    f\"$\\mu = {np.mean(total_distance_data):.2f}$\\n$\\sigma = {np.std(total_distance_data):.2f}$\",\n    transform=ax_total_distance.transAxes,\n    fontsize=9,\n)\n\n# Average Speed subplot\nax_average_speed = plt.subplot(grid[0, 1])\nax_average_speed.hist(\n    average_speed_data,\n    bins=20,\n    color=\"#cd6838\",\n    edgecolor=\"black\",\n    density=True,\n    linewidth=1,\n)\nax_average_speed.plot(\n    np.sort(average_speed_data),\n    norm.pdf(np.sort(average_speed_data), np.mean(average_speed_data), np.std(average_speed_data)),\n    color=\"#3a809d\",\n)\nax_average_speed.set_title(titles[1])\nax_average_speed.set_xlabel(xlabels[1])\nax_average_speed.set_ylabel(ylabels[1])\nax_average_speed.set_ylim(0, 0.08)\nax_average_speed.text(\n    0.7,\n    0.8,\n    f\"$\\mu = {np.mean(average_speed_data):.2f}$\\n$\\sigma = {np.std(average_speed_data):.2f}$\",\n    transform=ax_average_speed.transAxes,\n    fontsize=9,\n)\n\n# Fuel Consumption subplot\nax_fuel_consumption = plt.subplot(grid[1, 0])\nax_fuel_consumption.hist(\n    fuel_consumption_data,\n    bins=20,\n    color=\"#9cc25c\",\n    edgecolor=\"black\",\n    density=True,\n    linewidth=1,\n)\nax_fuel_consumption.plot(\n    np.sort(fuel_consumption_data),\n    norm.pdf(np.sort(fuel_consumption_data), np.mean(fuel_consumption_data), np.std(fuel_consumption_data)),\n    color=\"#3a809d\",\n)\nax_fuel_consumption.set_title(titles[2])\nax_fuel_consumption.set_xlabel(xlabels[2])\nax_fuel_consumption.set_ylabel(ylabels[2])\nax_fuel_consumption.set_ylim(0, 0.25)\nax_fuel_consumption.text(\n    0.7,\n    0.8,\n    f\"$\\mu = {np.mean(fuel_consumption_data):.2f}$\\n$\\sigma = {np.std(fuel_consumption_data):.2f}$\",\n    transform=ax_fuel_consumption.transAxes,\n    fontsize=9,\n)\n\n# Travel Time subplot\nax_travel_time = plt.subplot(grid[1, 1])\nax_travel_time.hist(\n    travel_time_data, bins=20, color=\"#f9df4b\", edgecolor=\"black\", density=True, linewidth=1\n)\nax_travel_time.plot(\n    np.sort(travel_time_data),\n    norm.pdf(np.sort(travel_time_data), np.mean(travel_time_data), np.std(travel_time_data)),\n    color=\"#3a809d\",\n)\nax_travel_time.set_title(titles[3])\nax_travel_time.set_xlabel(xlabels[3])\nax_travel_time.set_ylabel(ylabels[3])\nax_travel_time.set_ylim(0, 0.5)\nax_travel_time.text(\n    0.7,\n    0.8,\n    f\"$\\mu = {np.mean(travel_time_data):.2f}$\\n$\\sigma = {np.std(travel_time_data):.2f}$\",\n    transform=ax_travel_time.transAxes,\n    fontsize=9,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_22.pdf', bbox_inches='tight')"}
{"idx": "CB_24", "instruction": "There is a reference image for you and I also have a set of data about travel time distributions for different routes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\nx1 = np.linspace(10, 30, 100)\ny1 = norm.pdf(x1, 20, 3)\nx2 = np.linspace(30, 50, 100)\ny2 = norm.pdf(x2, 40, 3)\nx3 = np.linspace(50, 70, 100)\ny3 = norm.pdf(x3, 60, 3)\nlabels = [\"Route A\", \"Route B\", \"Route C\"]\nxlabel = \"Travel Time (minutes)\"\nylabel = \"Density\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nfrom scipy.stats import norm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\nx1 = np.linspace(10, 30, 100)\ny1 = norm.pdf(x1, 20, 3)\nx2 = np.linspace(30, 50, 100)\ny2 = norm.pdf(x2, 40, 3)\nx3 = np.linspace(50, 70, 100)\ny3 = norm.pdf(x3, 60, 3)\nlabels = [\"Route A\", \"Route B\", \"Route C\"]\nxlabel = \"Travel Time (minutes)\"\nylabel = \"Density\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot the distributions\nax.plot(x1, y1, \"r--\", label=labels[0])\nax.plot(x2, y2, \"orange\", label=labels[1])\nax.plot(x3, y3, \"b:\", label=labels[2])\n\n# according to the above distribution and draw histogram for each distribution\n# set filled color\nax.hist(np.random.normal(20, 3, 1000), bins=5, density=True, color=\"pink\")\nax.hist(np.random.normal(40, 3, 1000), bins=5, density=True, color=\"bisque\")\nax.hist(np.random.normal(60, 3, 1000), bins=5, density=True, color=\"lightblue\")\n\n# Add annotations\nax.annotate(\n    \"\",\n    xy=(20, 0.12),\n    xytext=(40, 0.12),\n    arrowprops=dict(facecolor=\"black\", arrowstyle=\"<->\"),\n)\nax.annotate(\n    \"\",\n    xy=(20, 0.14),\n    xytext=(60, 0.14),\n    arrowprops=dict(facecolor=\"black\", arrowstyle=\"<->\"),\n)\nax.annotate(\n    \"\",\n    xy=(40, 0.10),\n    xytext=(60, 0.10),\n    arrowprops=dict(facecolor=\"black\", arrowstyle=\"<->\"),\n)\n\n# add text on 30, 0.12\nax.text(30, 0.121, \"20\", fontsize=12, ha=\"center\")\nax.text(40, 0.141, \"40\", fontsize=12, ha=\"center\")\nax.text(50, 0.101, \"20\", fontsize=12, ha=\"center\")\n\n# Set labels and title\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\nax.set_ylim(0.00, 0.20)\nax.set_yticks([0.00, 0.05, 0.10, 0.15, 0.20])\n\n# Add legend\nax.legend(ncol=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('CB_24.pdf', bbox_inches='tight')"}
{"idx": "CB_25", "instruction": "There is a reference image for you and I also have a set of data about transportation usage in different cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Sample data\ncities = [\n\"City A\",\n\"City B\",\n\"City C\",\n\"City D\",\n\"City E\",\n\"City F\",\n\"City G\",\n\"City H\",\n]\ncar_usage = [30, 40, 35, 50, 60, 45, 70, 80]\nbike_usage = [20, 25, 30, 35, 40, 45, 50, 55]\npublic_transport = [25, 30, 35, 40, 45, 50, 55, 60]\nwalking = [25, 20, 25, 30, 35, 40, 45, 50]\nyearly_change = [0.05, 0.03, 0.04, 0.02, 0.01, 0.00, -0.01, -0.02]\nlabels = [\"Car Usage\", \"Bike Usage\", \"Public Transport\", \"Walking\"]\nxlabel = \"Cities\"\nylabel1 = \"Usage Percentage\"\nylabel2 = \"Yearly Change %\"\nlegend_title = \"Transportation Modes\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\ncities = [\n    \"City A\",\n    \"City B\",\n    \"City C\",\n    \"City D\",\n    \"City E\",\n    \"City F\",\n    \"City G\",\n    \"City H\",\n]\ncar_usage = [30, 40, 35, 50, 60, 45, 70, 80]\nbike_usage = [20, 25, 30, 35, 40, 45, 50, 55]\npublic_transport = [25, 30, 35, 40, 45, 50, 55, 60]\nwalking = [25, 20, 25, 30, 35, 40, 45, 50]\nyearly_change = [0.05, 0.03, 0.04, 0.02, 0.01, 0.00, -0.01, -0.02]\nlabels = [\"Car Usage\", \"Bike Usage\", \"Public Transport\", \"Walking\"]\nxlabel = \"Cities\"\nylabel1 = \"Usage Percentage\"\nylabel2 = \"Yearly Change %\"\nlegend_title = \"Transportation Modes\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(8, 5))\n\n# Bar plot\nbar_width = 0.2\nindex = np.arange(len(cities))\nax1.bar(index, car_usage, bar_width, label=labels[0], color=\"limegreen\")\nax1.bar(index + bar_width, bike_usage, bar_width, label=labels[1], color=\"sandybrown\")\nax1.bar(index + 2 * bar_width, public_transport, bar_width, label=labels[2], color=\"cornflowerblue\")\nax1.bar(index + 3 * bar_width, walking, bar_width, label=labels[3], color=\"plum\")\n\n# Line plot\nax2 = ax1.twinx()\nax2.plot(\n    cities,\n    yearly_change,\n    color=\"orangered\",\n    marker=\"o\",\n    linestyle=\"-\",\n    linewidth=2,\n    markersize=5,\n)\n\n# Annotate yearly change percentages\nfor i, change in enumerate(yearly_change):\n    ax2.annotate(\n        f\"{change*100:.0f}%\",\n        (index[i] + bar_width * 1.2, change),\n        textcoords=\"offset points\",\n        xytext=(0, 0),\n        ha=\"center\",\n        color=\"orangered\",\n    )\n\n# Set labels and title\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabel1)\nax2.set_ylabel(ylabel2)\n\n# Set x-axis tick labels\nax1.set_xticks(index + bar_width * 1.5)\nax1.set_xticklabels(cities)\n\n# Add legend\nax1.legend(loc=\"lower center\", ncol=4, bbox_to_anchor=(0.5, -0.3), title=legend_title)\nax1.grid(axis=\"y\")\nax1.set_axisbelow(True)\n\n# set ax2.yticklabels to be percentage\nax2.set_yticklabels([f\"{x*100:.0f}%\" for x in ax2.get_yticks()])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('CB_25.pdf', bbox_inches='tight')"}
{"idx": "CB_26", "instruction": "There is a reference image for you and I also have a set of data about travel time costs for different routes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(7, 5))\n\n# Generate random data to simulate the plot\ndata_route_a = np.random.normal(loc=30, scale=5, size=100)\ndata_route_b = np.random.normal(loc=35, scale=6, size=100)\n\n# Combine data into a list\ndata = [data_route_a, data_route_b]\n\n# Create positions for each box plot\npositions = [0, 1]\nxlabel = \"Routes\"\nylabel = \"Time Cost (Minutes)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(7, 5))\n\n# Generate random data to simulate the plot\ndata_route_a = np.random.normal(loc=30, scale=5, size=100)\ndata_route_b = np.random.normal(loc=35, scale=6, size=100)\n\n# Combine data into a list\ndata = [data_route_a, data_route_b]\n\n# Create positions for each box plot\npositions = [0, 1]\nxticks = [\"Route A\", \"Route B\"]\nxlabel = \"Routes\"\nylabel = \"Time Cost (Minutes)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Calculate the kernel density estimate and plot the density plot for each dataset\ncolors = [\"seagreen\", \"darkorange\"]\nfor i, d in enumerate(data):\n    # Calculate KDE\n    kde = gaussian_kde(d)\n    # Create an array of values covering the entire range of data for KDE\n    kde_x = np.linspace(min(d), max(d), 300)\n    kde_y = kde(kde_x)\n    # Scale KDE values to match the position of the boxplot\n    kde_y_scaled = kde_y / kde_y.max() * 0.1  # Scale factor can be adjusted\n    # Plot filled density plot to the left of the boxplot\n    offset = 0.2\n    plt.fill_betweenx(\n        kde_x,\n        positions[i] - kde_y_scaled - offset,\n        positions[i] - offset,\n        alpha=0.5,\n        color=colors[i],\n        edgecolor=\"black\",\n    )\n\n# Create box plots inside the violin plots\nfor i, d in enumerate(data):\n    plt.boxplot(\n        d,\n        positions=[positions[i]],\n        widths=0.05,\n        patch_artist=True,\n        medianprops=dict(color=\"black\"),\n        boxprops=dict(facecolor=\"none\", color=\"black\"),\n    )\n\n# Add scatter plot for individual data points with grey color\nfor i, d in enumerate(data):\n    x = np.random.normal(positions[i], 0.04, size=len(d))\n    plt.scatter(\n        x,\n        d,\n        alpha=0.3,\n        color=colors[i],\n    )\n\n# Set the x-axis labels and add title\nplt.xticks([0, 1], xticks)\nplt.xlabel(xlabel)\n\n# Set the y-axis label\nplt.ylabel(ylabel)\n\n# Adjust the y-axis limits\nplt.ylim(10, 60)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_26.pdf', bbox_inches='tight')"}
{"idx": "CB_27", "instruction": "There is a reference image for you and I also have a set of data about average commute times for different transportation modes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Setting a seed for reproducibility\n\n# Generating random data to represent the average commute time (in minutes) for different transportation modes\ndata_bus = np.random.normal(40, 10, 100) # Bus\ndata_train = np.random.normal(30, 5, 100) # Train\ndata_bike = np.random.normal(25, 8, 100) # Bike\ndata_car = np.random.normal(35, 7, 100) # Car\n\n# Packing the data into a list\ndata = [data_bus, data_train, data_bike, data_car]\nlegend_labels = [\"Bus\", \"Train\", \"Bike\", \"Car\"]\nline_label = \"Median Commute Time\"\nylabel = \"Commute Time (Minutes)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Setting a seed for reproducibility\n\n# Generating random data to represent the average commute time (in minutes) for different transportation modes\ndata_bus = np.random.normal(40, 10, 100)  # Bus\ndata_train = np.random.normal(30, 5, 100)  # Train\ndata_bike = np.random.normal(25, 8, 100)  # Bike\ndata_car = np.random.normal(35, 7, 100)  # Car\n\n# Packing the data into a list\ndata = [data_bus, data_train, data_bike, data_car]\nlegend_labels = [\"Bus\", \"Train\", \"Bike\", \"Car\"]\nline_label = \"Median Commute Time\"\nylabel = \"Commute Time (Minutes)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Creating a box plot\nfig, ax1 = plt.subplots(figsize=(10, 6))\nbp = ax1.boxplot(\n    data, patch_artist=True, notch=False, showfliers=False, positions=[1, 2, 3, 4]\n)\n\n# Customizing the boxplot colors\ncolors = [\"#17c3b2\", \"#ffcb77\", \"#fe6d73\", \"#00b4d8\"]\nfor patch, color in zip(bp[\"boxes\"], colors):\n    patch.set_facecolor(color)\nfor median in bp[\"medians\"]:\n    median.set(color=\"black\", zorder=2)\n\n# Extracting medians for the line graph\nmedians = [np.median(d) for d in data]\n\n# Creating the line graph on the same axes\nax1.plot(\n    [1, 2, 3, 4],\n    medians,\n    \"-*\",\n    color=\"black\",\n    label=\"Median Commute Time\",\n    ms=20,\n    markerfacecolor=\"#d90368\",\n)\n\n# Setting legend for the boxplot\nlegend_patches = [\n    mpatches.Patch(color=color, label=label)\n    for color, label in zip(colors, legend_labels)\n]\nax1.legend(\n    handles=legend_patches\n    + [mpatches.Patch(color=\"#d90368\", label=line_label)],\n    loc=\"upper right\",\n)\n\n# Setting labels for the x-axis\nax1.set_xticklabels(legend_labels)\n\n# Setting the y-axis label\nax1.set_ylabel(ylabel)\n\n# Setting y-axis limits and adding grid lines\nax1.set_ylim(10, 60)\nax1.yaxis.grid(True, which=\"major\", linestyle=\"--\", color=\"grey\", alpha=0.5)\n\n# Removing top and right spines for aesthetics\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_27.pdf', bbox_inches='tight')"}
{"idx": "CB_28", "instruction": "There is a reference image for you and I also have a set of data about traffic volume trends over three different decades. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generating sample data representing traffic trends for three different decades\ntraffic_90s = np.random.normal(50, 5, 100) # Traffic in the 1990s\ntraffic_00s = np.random.normal(60, 7, 100) # Traffic in the 2000s\ntraffic_10s = np.random.normal(70, 9, 100) # Traffic in the 2010s\n\n# Creating KDE for each sample data set to estimate the density of data points\nkde_90s = gaussian_kde(traffic_90s)\nkde_00s = gaussian_kde(traffic_00s)\nkde_10s = gaussian_kde(traffic_10s)\n\ntraffic_range = np.linspace(30, 90, 50) # Defining the range of traffic volume for plotting\nlabels = [\"1990s\", \"2000s\", \"2010s\"]\nax1_legend_title = \"Decade\"\nax1_xlabel = \"Density\"\nax2_ylabel = \"Traffic Volume\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generating sample data representing traffic trends for three different decades\ntraffic_90s = np.random.normal(50, 5, 100)  # Traffic in the 1990s\ntraffic_00s = np.random.normal(60, 7, 100)  # Traffic in the 2000s\ntraffic_10s = np.random.normal(70, 9, 100)  # Traffic in the 2010s\n\n# Creating KDE for each sample data set to estimate the density of data points\nkde_90s = gaussian_kde(traffic_90s)\nkde_00s = gaussian_kde(traffic_00s)\nkde_10s = gaussian_kde(traffic_10s)\n\ntraffic_range = np.linspace(30, 90, 50)  # Defining the range of traffic volume for plotting\nlabels = [\"1990s\", \"2000s\", \"2010s\"]\nax1_legend_title = \"Decade\"\nax1_xlabel = \"Density\"\nax2_ylabel = \"Traffic Volume\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Setting up the figure and axes for a 1 x 2 layout\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# First subplot: Fill between plot along y-axis (KDE Plot)\nax1.fill_betweenx(traffic_range, kde_90s(traffic_range), color=\"skyblue\", alpha=0.4)\nax1.fill_betweenx(traffic_range, kde_00s(traffic_range), color=\"sandybrown\", alpha=0.5)\nax1.fill_betweenx(traffic_range, kde_10s(traffic_range), color=\"olivedrab\", alpha=0.3)\nax1.plot(kde_90s(traffic_range), traffic_range, label=labels[0], color=\"blue\")\nax1.plot(kde_00s(traffic_range), traffic_range, label=labels[1], color=\"orange\")\nax1.plot(kde_10s(traffic_range), traffic_range, label=labels[2], color=\"green\")\nax1.legend(title=ax1_legend_title, loc=\"upper right\")\nax1.set_xlabel(ax1_xlabel)\nax1.set_yticks([])  # Hiding y-axis ticks for clarity\n\n# Second subplot: Box plot for the same datasets along y-axis\nbox = ax2.boxplot(\n    [traffic_90s, traffic_00s, traffic_10s], vert=True, patch_artist=True, medianprops={\"color\": \"black\"}\n)\ncolors = [\"skyblue\", \"sandybrown\", \"olivedrab\"]  # Color matching with KDE plot\nfor patch, color in zip(box[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\nax2.set_ylabel(ax2_ylabel)\nax2.set_xticks([])  # Hiding x-axis ticks for clarity\nax2.set_ylim(30, 90)  # Setting limits for y-axis to align with the KDE plot\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_28.pdf', bbox_inches='tight')"}
{"idx": "CB_29", "instruction": "There is a reference image for you and I also have a set of data about transportation modes and the number of registered vehicles in 2013 and 2022. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Transportation modes\ntransport_modes = [\n\"Automobiles\",\n\"Bicycles\",\n\"Buses\",\n\"Trains\",\n\"Planes\",\n\"Ships\",\n\"Motorcycles\",\n\"Scooters\",\n\"Trams\",\n\"Helicopters\",\n]\n\n# Number of registered vehicles in 2013 (in thousands)\nvehicles_2013 = [50000, 10000, 15000, 20000, 8000, 3000, 7000, 5000, 2000, 1000]\n# Number of registered vehicles in 2022 (in thousands)\nvehicles_2022 = [55000, 12000, 16000, 22000, 9000, 3500, 7500, 6000, 2500, 1200]\nx_label = \"Number of Registered Vehicles (in thousands)\"\ny_label = \"Transportation Mode\"\nax1_title = \"Registered Vehicles in 2013\"\nax2_title = \"Registered Vehicles in 2022\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Transportation modes\ntransport_modes = [\n    \"Automobiles\",\n    \"Bicycles\",\n    \"Buses\",\n    \"Trains\",\n    \"Planes\",\n    \"Ships\",\n    \"Motorcycles\",\n    \"Scooters\",\n    \"Trams\",\n    \"Helicopters\",\n]\n\n# Number of registered vehicles in 2013 (in thousands)\nvehicles_2013 = [50000, 10000, 15000, 20000, 8000, 3000, 7000, 5000, 2000, 1000]\n# Number of registered vehicles in 2022 (in thousands)\nvehicles_2022 = [55000, 12000, 16000, 22000, 9000, 3500, 7500, 6000, 2500, 1200]\nx_label = \"Number of Registered Vehicles (in thousands)\"\ny_label = \"Transportation Mode\"\nax1_title = \"Registered Vehicles in 2013\"\nax2_title = \"Registered Vehicles in 2022\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with two subplots (1x2) and shared y-axis\nfig, axes = plt.subplots(1, 2, figsize=(10, 5), sharey=True)\ncolors = [\"skyblue\", \"salmon\"]\n\n# Plotting the bar graphs\nfor i, (vehicles, color) in enumerate(zip([vehicles_2013, vehicles_2022], colors)):\n    axes[i].barh(transport_modes, vehicles, color=color, edgecolor=\"gray\")\n    axes[i].set_xlabel(x_label)\n    # Adding line graph on the same axes\n    axes[i].plot(vehicles, transport_modes, \"o-\", color=\"#f7b267\")\n\n# Adding data labels\nfor ax, vehicles in zip(axes, [vehicles_2013, vehicles_2022]):\n    for index, value in enumerate(vehicles):\n        ax.text(value + 50, index, f\" {value}\", va=\"center\")\n\n# Set labels and titles\naxes[0].set_title(ax1_title)\naxes[1].set_title(ax2_title)\naxes[0].set_ylabel(y_label)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent clipping and overlap\nplt.tight_layout()\nplt.savefig('CB_29.pdf', bbox_inches='tight')"}
{"idx": "CB_30", "instruction": "There is a reference image for you and I also have a set of data about transportation statistics across different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Sample transportation data\nquarters = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nregionA = [1200, 1250, 1300, 1350]\nregionB = [1100, 1150, 1200, 1250]\nregionC = [900, 950, 1000, 1050]\nregionD = [800, 850, 900, 950]\ngrowth = [0.05, 0.20, 0.15, 0.10]\n\n# Errors (e.g., standard deviation)\nerrorA = [50, 45, 40, 35]\nerrorB = [55, 50, 45, 40]\nerrorC = [60, 55, 50, 45]\nerrorD = [65, 60, 55, 50]\nerror_growth = [0.02, 0.03, 0.04, 0.01]\nlabels = [\"Region A\", \"Region B\", \"Region C\", \"Region D\"]\nxlabel = \"Quarter\"\nylabel1 = \"Vehicle Count\"\nylabel2 = \"Growth %\"\nlegend_title = \"Regions\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample transportation data\nquarters = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nregionA = [1200, 1250, 1300, 1350]\nregionB = [1100, 1150, 1200, 1250]\nregionC = [900, 950, 1000, 1050]\nregionD = [800, 850, 900, 950]\ngrowth = [0.05, 0.20, 0.15, 0.10]\n\n# Errors (e.g., standard deviation)\nerrorA = [50, 45, 40, 35]\nerrorB = [55, 50, 45, 40]\nerrorC = [60, 55, 50, 45]\nerrorD = [65, 60, 55, 50]\nerror_growth = [0.02, 0.03, 0.04, 0.01]\nlabels = [\"Region A\", \"Region B\", \"Region C\", \"Region D\"]\nxlabel = \"Quarter\"\nylabel1 = \"Vehicle Count\"\nylabel2 = \"Growth %\"\nlegend_title = \"Regions\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(8, 6))\n\n# Bar plot with error bars\nbar_width = 0.2\nindex = np.arange(len(quarters))\nax1.bar(\n    index,\n    regionA,\n    bar_width,\n    label=labels[0],\n    color=\"limegreen\",\n    yerr=errorA,\n    capsize=5,\n    ecolor=\"gray\",\n)\nax1.bar(\n    index + bar_width,\n    regionB,\n    bar_width,\n    label=labels[1],\n    color=\"sandybrown\",\n    yerr=errorB,\n    capsize=5,\n    ecolor=\"gray\",\n)\nax1.bar(\n    index + 2 * bar_width,\n    regionC,\n    bar_width,\n    label=labels[2],\n    color=\"cornflowerblue\",\n    yerr=errorC,\n    capsize=5,\n    ecolor=\"gray\",\n)\nax1.bar(\n    index + 3 * bar_width,\n    regionD,\n    bar_width,\n    label=labels[3],\n    color=\"plum\",\n    yerr=errorD,\n    capsize=5,\n    ecolor=\"gray\",\n)\n\n# Line plot with error bars\nax2 = ax1.twinx()\nax2.errorbar(\n    index + 1.5 * bar_width,\n    growth,\n    yerr=error_growth,\n    fmt=\"o-\",\n    color=\"#f72585\",\n    label=\"Growth\",\n    linewidth=2,\n    markersize=5,\n    capsize=5,\n)\n\n# Set labels and title\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabel1)\nax2.set_ylabel(ylabel2)\n\n# Set x-axis tick labels\nax1.set_xticks(index + 1.5 * bar_width)\nax1.set_xticklabels(quarters)\n\n# Add legends\nax1.legend(loc=\"lower center\", ncol=4, bbox_to_anchor=(0.5, -0.25), title=legend_title)\nax2.legend(loc=\"upper left\", ncol=1)\n\n# Set ax2.yticklabels to be percentage\nax2.set_ylim(0, 0.25)\nax2.set_yticks(np.linspace(0, 0.25, 6))\nax2.set_yticklabels([f\"{x*100:.0f}%\" for x in ax2.get_yticks()])\n\n# Grid and layout adjustment\nax1.grid(axis=\"y\")\nax1.set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('CB_30.pdf', bbox_inches='tight')"}
{"idx": "bar_2", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency for different types of vehicles over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\ntime = np.arange(0, 45, 5)\nsedan = np.array([26, 27, 28, 29, 28, 27, 26, 27, 28])\nsuv = np.array([20, 19, 24, 18, 19, 20, 12, 18, 19])\ntruck = np.array([15, 14, 9, 13, 13, 14, 15, 14, 15])\nmotorcycle = np.array([29, 32, 33, 32, 31, 30, 39, 31, 30])\nelectric_car = np.array([10, 8, 6, 8, 9, 9, 8, 10, 8])\n\nbarlabel = [\"Sedan\", \"SUV\", \"Truck\", \"Motorcycle\", \"Electric Car\"]\n# Labels\nxlabel = \"Time (s)\"\nylabel = \"Fuel Efficiency (%)\"\ntitle = \"Fuel Efficiency Distribution Over Time: Transportation Study\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\ntime = np.arange(0, 45, 5)\nsedan = np.array([26, 27, 28, 29, 28, 27, 26, 27, 28])\nsuv = np.array([20, 19, 24, 18, 19, 20, 12, 18, 19])\ntruck = np.array([15, 14, 9, 13, 13, 14, 15, 14, 15])\nmotorcycle = np.array([29, 32, 33, 32, 31, 30, 39, 31, 30])\nelectric_car = np.array([10, 8, 6, 8, 9, 9, 8, 10, 8])\nwidth = 2\n\nbarlabel = [\"Sedan\", \"SUV\", \"Truck\", \"Motorcycle\", \"Electric Car\"]\n# Labels\nxticks = [0, 10, 20, 30, 40]\nxlabel = \"Time (s)\"\nylabel = \"Fuel Efficiency (%)\"\ntitle = \"Fuel Efficiency Distribution Over Time: Transportation Study\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Stacked bar chart\nplt.figure(figsize=(6, 3))  # Adjusting figure size to match original image dimensions\nplt.bar(time, sedan, width, color=\"#529e3f\", label=barlabel[0])\nplt.bar(time, suv, width, bottom=sedan, color=\"#c53a32\", label=barlabel[1])\nplt.bar(time, truck, width, bottom=sedan + suv, color=\"#8e69b8\", label=barlabel[2])\nplt.bar(time, motorcycle, width, bottom=sedan + suv + truck, color=\"#85594e\", label=barlabel[3])\nplt.bar(\n    time,\n    electric_car,\n    width,\n    bottom=sedan + suv + truck + motorcycle,\n    color=\"#7f7f7f\",\n    label=barlabel[4],\n)\n\n# Labels and title\nplt.xticks(xticks)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\n\n# Legend\nplt.legend(loc=\"upper right\", bbox_to_anchor=(1.4, 1))\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_2.pdf', bbox_inches='tight')"}
{"idx": "bar_3", "instruction": "There is a reference image for you and I also have a set of data about customer satisfaction ratings for different household appliances. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for each subplot\ndatasets = [\"Refrigerator\", \"Washing Machine\", \"Microwave\", \"Vacuum Cleaner\"]\nmodels = [\"Basic Model\", \"Advanced Model\", \"ML Model\", \"Comprehensive Analysis\"]\nPLCC_data = {\n\"Refrigerator\": [0.854, 0.868, 0.866, 0.872],\n\"Washing Machine\": [0.890, 0.895, 0.900, 0.915],\n\"Microwave\": [0.815, 0.825, 0.830, 0.840],\n\"Vacuum Cleaner\": [0.880, 0.886, 0.890, 0.892],\n}\nSROCC_data = {\n\"Refrigerator\": [0.856, 0.870, 0.868, 0.870],\n\"Washing Machine\": [0.895, 0.900, 0.905, 0.919],\n\"Microwave\": [0.800, 0.810, 0.815, 0.825],\n\"Vacuum Cleaner\": [0.886, 0.890, 0.894, 0.894],\n}\nlabel = [\"PLCC\", \"SROCC\"]\nylabel = \"Satisfaction Ratings\"\ntitle = \"Customer Satisfaction Analysis by Models\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for each subplot\ndatasets = [\"Refrigerator\", \"Washing Machine\", \"Microwave\", \"Vacuum Cleaner\"]\nmodels = [\"Basic Model\", \"Advanced Model\", \"ML Model\", \"Comprehensive Analysis\"]\ncolors = [\"#5377ca\", \"#e08a57\", \"#91c4df\", \"#d1bc73\"]\nPLCC_data = {\n    \"Refrigerator\": [0.854, 0.868, 0.866, 0.872],\n    \"Washing Machine\": [0.890, 0.895, 0.900, 0.915],\n    \"Microwave\": [0.815, 0.825, 0.830, 0.840],\n    \"Vacuum Cleaner\": [0.880, 0.886, 0.890, 0.892],\n}\nSROCC_data = {\n    \"Refrigerator\": [0.856, 0.870, 0.868, 0.870],\n    \"Washing Machine\": [0.895, 0.900, 0.905, 0.919],\n    \"Microwave\": [0.800, 0.810, 0.815, 0.825],\n    \"Vacuum Cleaner\": [0.886, 0.890, 0.894, 0.894],\n}\nlims = [(0.850, 0.880), (0.885, 0.920), (0.800, 0.845), (0.875, 0.895)]\nlabel = [\"PLCC\", \"SROCC\"]\nylabel = \"Satisfaction Ratings\"\ntitle = \"Customer Satisfaction Analysis by Models\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, axs = plt.subplots(1, 4, figsize=(10, 3))\n\n# Plot each subplot\nfor i, dataset in enumerate(datasets):\n    x = [3, 6]  # the label locations\n    width = 0.5  # the width of the bars\n    for j in range(len(PLCC_data)):\n        # PLCC bars\n        axs[i].bar(\n            x[0] + (j - 1.5) * width,\n            PLCC_data[dataset][j],\n            width,\n            label=label[0],\n            color=colors[j],\n            edgecolor=\"white\",\n        )\n        # SROCC bars\n        axs[i].bar(\n            x[1] + (j - 1.5) * width,\n            SROCC_data[dataset][j],\n            width,\n            label=label[1],\n            color=colors[j],\n            edgecolor=\"white\",\n        )\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    axs[i].set_ylabel(ylabel)\n    axs[i].set_ylim(lims[i][0], lims[i][1])\n    axs[i].set_title(dataset)\n    axs[i].set_xticks(x)\n    axs[i].set_xticklabels(label)\n\n# Add legend\nlegend_handles = [\n    mpatches.Patch(color=color, label=label) for color, label in zip(colors, models)\n]\n# Create legend\nfig.legend(\n    handles=legend_handles,\n    loc=\"upper center\",\n    title=title,\n    ncol=4,\n    bbox_to_anchor=(0.5, 1.15),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_3.pdf', bbox_inches='tight')"}
{"idx": "bar_5", "instruction": "There is a reference image for you and I also have a set of data about average calories burned in different exercise activities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the bar chart\nlevels = [\"Beginner\", \"Intermediate\", \"Advanced\"]\nyoga = [550, 300, 350]\ncardio = [300, 450, 400]\nstrength_training = [600, 550, 600]\n\nlabels = [\"Yoga\", \"Cardio\", \"Strength Training\"]\nylabel = \"Avg. Calories Burned\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar chart\nlevels = [\"Beginner\", \"Intermediate\", \"Advanced\"]\nyoga = [550, 300, 350]\ncardio = [300, 450, 400]\nstrength_training = [600, 550, 600]\n\nlabels = [\"Yoga\", \"Cardio\", \"Strength Training\"]\nylabel = \"Avg. Calories Burned\"\nylim = [0, 650]\n\nyindex = [0, 100, 200, 300, 400, 500]\nylabel_ticks = [\"0\", \"100\", \"200\", \"300\", \"400\", \"500\"]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(8, 3))\n\n# Create the bar chart\nbar_width = 0.25\nindex = range(len(levels))\n\nplt.bar(\n    [i - bar_width for i in index],\n    yoga,\n    width=bar_width,\n    color=\"#ffffbd\",\n    edgecolor=\"black\",\n    label=labels[0],\n)\nplt.bar(index, cardio, width=bar_width, color=\"#97ccfb\", edgecolor=\"black\", label=labels[1])\nplt.bar(\n    [i + bar_width for i in index],\n    strength_training,\n    width=bar_width,\n    color=\"#ea8777\",\n    edgecolor=\"black\",\n    label=labels[2],\n)\n\n# Add the text labels on top of the bars\nfor i in index:\n    plt.text(\n        i - bar_width,\n        yoga[i] + 10,\n        f\"{yoga[i]/100:.1f}k\",\n        ha=\"center\",\n    )\n    plt.text(i, cardio[i] + 10, f\"{cardio[i]/100:.1f}k\", ha=\"center\")\n    plt.text(i + bar_width, strength_training[i] + 10, f\"{strength_training[i]/100:.1f}k\", ha=\"center\")\n\n# Set the x-axis labels, y-axis label, and chart title\nplt.xticks(index, levels)\nplt.ylabel(ylabel)\nplt.ylim(ylim)\nplt.yticks(yindex, ylabel_ticks)\n\n# Add a legend\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.15), ncol=3)\n\n# Hide the right and top spines\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"top\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_5.pdf', bbox_inches='tight')"}
{"idx": "bar_6", "instruction": "There is a reference image for you and I also have a set of data about transportation mode usage frequencies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Emotion labels\ntransport_modes = [\n\"Bicycle\",\n\"Scooter\",\n\"Bus\",\n\"Taxi\",\n\"Motorbike\",\n\"Subway\",\n\"Tram\",\n\"Train\",\n\"Car\",\n\"Ride-Sharing\",\n\"Walking\",\n\"Carpooling\",\n\"Electric Bike\",\n\"Ferry\",\n\"Helicopter\"\n]\n\n# Approximate usage frequency values for different transport modes\nfrequencies = [\n2.1,\n2.7,\n3.0,\n3.5,\n3.5,\n3.8,\n4.0,\n4.0,\n6.0,\n6.0,\n6.0,\n6.6,\n6.7,\n7.0,\n7.6,\n]\n\nxlabel = \"Frequency (%)\"\nylabel = \"Transport Mode\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Emotion labels\ntransport_modes = [\n    \"Bicycle\",\n    \"Scooter\",\n    \"Bus\",\n    \"Taxi\",\n    \"Motorbike\",\n    \"Subway\",\n    \"Tram\",\n    \"Train\",\n    \"Car\",\n    \"Ride-Sharing\",\n    \"Walking\",\n    \"Carpooling\",\n    \"Electric Bike\",\n    \"Ferry\",\n    \"Helicopter\"\n]\n\n# Approximate usage frequency values for different transport modes\nfrequencies = [\n    2.1,\n    2.7,\n    3.0,\n    3.5,\n    3.5,\n    3.8,\n    4.0,\n    4.0,\n    6.0,\n    6.0,\n    6.0,\n    6.6,\n    6.7,\n    7.0,\n    7.6,\n]\n\nxlabel = \"Frequency (%)\"\nylabel = \"Transport Mode\"\nxticks = [0, 2, 4, 6, 8]\nxlim = [0, 8.5]\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nplt.figure(figsize=(8, 8))  # Adjust figure size\nplt.barh(transport_modes, frequencies, color=\"#84ade3\")\n\n# Set x-axis limits\nplt.xlim(xlim)\n\n# Set x-axis ticks\nplt.xticks(xticks)\n\n# Set labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_6.pdf', bbox_inches='tight')"}
{"idx": "bar_7", "instruction": "There is a reference image for you and I also have a set of data about different teaching methods and their impact on student satisfaction, knowledge retention, and engagement level. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\"Traditional Classroom\", \"Blended Learning\", \"Online Learning\"]\nstudent_satisfaction = [85, 78, 72]\nknowledge_retention = [90, 82, 75]\nengagement_level = [0.83, 0.75, 0.65]\n\nlabels = [\"Student Satisfaction (%)\", \"Knowledge Retention (%)\", \"Engagement Level\"]\nxlabel = \"Teaching Methods\"\nylabel = \"Percentage (%)\"\nylabel2 = \"Engagement Level\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Traditional Classroom\", \"Blended Learning\", \"Online Learning\"]\nstudent_satisfaction = [85, 78, 72]\nknowledge_retention = [90, 82, 75]\nengagement_level = [0.83, 0.75, 0.65]\n\nlabels = [\"Student Satisfaction (%)\", \"Knowledge Retention (%)\", \"Engagement Level\"]\nxlabel = \"Teaching Methods\"\nylabel = \"Percentage (%)\"\nylabel2 = \"Engagement Level\"\nxticks = [0, 1, 2]\nylim = [0, 100]\nylim2 = [0, 1]\nyticks = [0, 20, 40, 60, 80, 100]\nyticks2 = [0, 0.25, 0.5, 0.75, 1]\n\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, ax1 = plt.subplots(\n    figsize=(8, 6)\n)  # Adjusted to match the original image's dimensions\n# Create a second y-axis\nax2 = ax1.twinx()\n\n# Bar plots\nbar_width = 0.25\nindex = np.arange(len(categories))\n\nbar1 = ax1.bar(\n    index,\n    student_satisfaction,\n    bar_width,\n    label=labels[0],\n    color=\"#6e7a5f\",\n    edgecolor=\"black\",\n    zorder=3,\n)\nbar2 = ax1.bar(\n    index + bar_width,\n    knowledge_retention,\n    bar_width,\n    label=labels[1],\n    color=\"#b8b7a5\",\n    edgecolor=\"black\",\n    zorder=3,\n)\nbar3 = ax2.bar(\n    index + 2 * bar_width,\n    engagement_level,\n    bar_width,\n    label=labels[2],\n    color=\"#f4f1e0\",\n    edgecolor=\"black\",\n    zorder=3,\n)\n\n# Add values on top of the bars\nfor bars in [bar1, bar2]:\n    for bar in bars:\n        height = bar.get_height()\n        ax1.annotate(\n            \"{}\".format(height),\n            xy=(bar.get_x() + bar.get_width() / 2, height - 4),\n            xytext=(0, 3),  # 3 points vertical offset\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"top\",\n        )\nfor bars in [bar3]:\n    for bar in bars:\n        height = bar.get_height()\n        ax2.annotate(\n            \"{}\".format(height),\n            xy=(bar.get_x() + bar.get_width() / 2, height),\n            xytext=(0, 3),  # 3 points vertical offset\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"bottom\",\n        )\n\n# Set the axes background color and add grid lines\nfor ax in [ax1, ax2]:\n    ax.set_facecolor(\"#e6e6e6\")  # Set the axes background color\n    ax.grid(True, color=\"white\", zorder=2)  # Add grid lines\n\n# Axes labels and title\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabel)\n# ax1.set_title('Comparison of FGT and Feature Embedding Distance')\nax2.set_ylabel(ylabel2)\n\n# Set x-axis category labels\nax1.set_ylim(ylim)\nax2.set_ylim(ylim2)\nax1.set_xticks(index + bar_width)\nax1.set_xticklabels(categories)\n\n# Calculate the number of y-ticks on the left y-axis\n\nax1.set_yticks(yticks)\nax2.set_yticks(yticks2)\n\n# Create legend & Show plot\nhandles, labels = ax1.get_legend_handles_labels()\nhandles2, labels2 = ax2.get_legend_handles_labels()\nfig.legend(\n    handles + handles2,\n    labels + labels2,\n    loc=\"lower right\",\n    bbox_to_anchor=(0.9, 0.1),\n    frameon=False,\n    framealpha=0,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the subplot layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_7.pdf', bbox_inches='tight')"}
{"idx": "bar_8", "instruction": "There is a reference image for you and I also have a set of data about the health impact accuracy of different diet habits. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the bar chart\ndiet_habits = [\n\"Mediterranean Diet\",\n\"DASH Diet\",\n\"Plant-Based Diet\",\n\"Low-Carb Diet\",\n\"Paleo Diet\",\n\"Vegan Diet\",\n\"Vegetarian Diet\",\n\"Ketogenic Diet\",\n\"Flexitarian Diet\",\n\"Whole30 Diet\"\n]\naccuracies = [0.9, 0.83, 0.86, 0.84, 0.7, 0.85, 0.93, 0.89, 0.88, 1.0]\n\nxlabel = \"Top-10 Diet Habits\"\nylabel = \"Health Impact Accuracy\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar chart\ndiet_habits = [\n    \"Mediterranean Diet\",\n    \"DASH Diet\",\n    \"Plant-Based Diet\",\n    \"Low-Carb Diet\",\n    \"Paleo Diet\",\n    \"Vegan Diet\",\n    \"Vegetarian Diet\",\n    \"Ketogenic Diet\",\n    \"Flexitarian Diet\",\n    \"Whole30 Diet\"\n]\naccuracies = [0.9, 0.83, 0.86, 0.84, 0.7, 0.85, 0.93, 0.89, 0.88, 1.0]\n\nxlabel = \"Top-10 Diet Habits\"\nylabel = \"Health Impact Accuracy\"\nylim = [0.0, 1.1]\nyticks = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the bar chart\nplt.figure(\n    figsize=(10, 6)\n)  # Adjusting figure size to match the original image's dimensions\nplt.bar(diet_habits, accuracies, color=\"#7fa9cc\")\n\n# Add a horizontal line for the average accuracy\naverage_accuracy = sum(accuracies) / len(accuracies)\nplt.axhline(y=average_accuracy, color=\"red\", linestyle=\"--\")\n\n# Add labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Set y-axis limits\nplt.ylim(ylim)\n# Set x-axis,y-axis ticks\nplt.xticks(diet_habits, rotation=45, ha=\"right\")\nplt.yticks(yticks)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_8.pdf', bbox_inches='tight')"}
{"idx": "bar_9", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics improvement percentages. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for BC5CDR\ntransportation_categories = [\"Infrastructure\", \"Vehicle Safety\", \"Emissions\", \"Public Transport Usage\", \"Total\"]\ntransportation_manual_mapping = [70, 50, 90, 30, 70]\ntransportation_llm_revision = [60, 40, 80, 20, 60]\ntransportation_llm_revision_wcot = [85, 65, 95, 35, 85]\ntransportation_verifner = [95, 75, 85, 45, 95]\n\nlabels = [\"Manual Mapping\", \"LLM-revision\", \"LLM-revision w/CoT\", \"VerifNER\"]\ntitle = \"Improvement in Transportation Metrics (%)\"\ntitle1 = \"City Transport\"\ntitle2 = \"Nationwide Transport\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for BC5CDR\ntransportation_categories = [\"Infrastructure\", \"Vehicle Safety\", \"Emissions\", \"Public Transport Usage\", \"Total\"]\ntransportation_manual_mapping = [70, 50, 90, 30, 70]\ntransportation_llm_revision = [60, 40, 80, 20, 60]\ntransportation_llm_revision_wcot = [85, 65, 95, 35, 85]\ntransportation_verifner = [95, 75, 85, 45, 95]\n\nlabels = [\"Manual Mapping\", \"LLM-revision\", \"LLM-revision w/CoT\", \"VerifNER\"]\ntitle = \"Improvement in Transportation Metrics (%)\"\ntitle1 = \"City Transport\"\ntitle2 = \"Nationwide Transport\"\n\nylim1 = [0, 100]\nyticks1 = np.arange(0, 101, 20)\nylim2 = [0, 100]\nyticks2 = np.arange(0, 101, 20)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure and axes\nfig, axs = plt.subplots(2, 1, figsize=(9, 6))  # Width, Height in inches\n\n# Plot for GENIA\nx = np.arange(len(transportation_categories))\nwidth = 0.18  # Adjust this value to change the width of the bars\nspacing = 0.2  # Adjust this value to change the spacing between the bars\n\naxs[0].bar(\n    x - spacing * 1.5,\n    transportation_manual_mapping,\n    width,\n    label=labels[0],\n    color=\"#e19e9c\",\n)\naxs[0].bar(\n    x - spacing / 2, transportation_llm_revision, width, label=labels[1], color=\"#f7ce91\"\n)\naxs[0].bar(\n    x + spacing / 2,\n    transportation_llm_revision_wcot,\n    width,\n    label=labels[2],\n    color=\"#de6560\",\n)\naxs[0].bar(x + spacing * 1.5, transportation_verifner, width, label=labels[3], color=\"#94d4ac\")\n# axs[0].set_ylabel('Error correction rate (%)')\naxs[0].set_title(title1)\naxs[0].set_xticks(x)\naxs[0].set_xticklabels(transportation_categories)\naxs[0].set_ylim(ylim1)\naxs[0].set_yticks(yticks1)\naxs[0].legend(loc=\"upper right\", ncol=2)\n\n# Plot for BC5CDR\nx = np.arange(len(transportation_categories))\naxs[1].bar(x - spacing * 1.5, transportation_manual_mapping, width, color=\"#e19e9c\")\naxs[1].bar(x - spacing / 2, transportation_llm_revision, width, color=\"#f7ce91\")\naxs[1].bar(x + spacing / 2, transportation_llm_revision_wcot, width, color=\"#de6560\")\naxs[1].bar(x + spacing * 1.5, transportation_verifner, width, color=\"#94d4ac\")\n# axs[1].set_ylabel('Error correction rate (%)')\naxs[1].set_title(title2)\naxs[1].set_xticks(x)\naxs[1].set_xticklabels(transportation_categories)\naxs[1].set_ylim(ylim2)\naxs[1].set_yticks(yticks2)\n\n# Add a common y-axis label\nfig.text(\n    0.0001,\n    0.5,\n    title,\n    va=\"center\",\n    rotation=\"vertical\",\n    fontsize=12,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_9.pdf', bbox_inches='tight')"}
{"idx": "bar_12", "instruction": "There is a reference image for you and I also have a set of data about energy efficiency improvements for different models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the plots\nmodels = [\"SolarMax\", \"WindFlow\", \"HydroBoost\", \"EnergyNet\", \"EcoModel\"]\nsolar_values = [15.2, 20.4, 3.0, 12.1, 2.5]\nwind_values = [3.5, 3.2, 4.5, 5.3, 3.4]\nhydro_values = [6.9, -1.3, -0.2, 5.5, -0.4]\n\ntitle1 = \"Solar Energy\"\naxvline1 = 0\ntitle2 = \"Wind Energy\"\naxvline2 = 0\ntitle3 = \"Hydro Energy\"\naxvline3 = 0\n\nxlabel = \"Efficiency Improvement (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plots\nmodels = [\"SolarMax\", \"WindFlow\", \"HydroBoost\", \"EnergyNet\", \"EcoModel\"]\nsolar_values = [15.2, 20.4, 3.0, 12.1, 2.5]\nwind_values = [3.5, 3.2, 4.5, 5.3, 3.4]\nhydro_values = [6.9, -1.3, -0.2, 5.5, -0.4]\n\ntitle1 = \"Solar Energy\"\naxvline1 = 0\ntitle2 = \"Wind Energy\"\naxvline2 = 0\ntitle3 = \"Hydro Energy\"\naxvline3 = 0\n\nxticks1 = [0, 5, 10, 15, 20]\nxticks2 = [0, 5, 10]\nxticks3 = [0, 5, 10, 15, 20]\n\nxlabel = \"Efficiency Improvement (%)\"\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, axes = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot for Beauty\naxes[0].barh(models, solar_values, color=\"white\", edgecolor=\"black\")\naxes[0].set_title(title1)\nfor i, v in enumerate(solar_values):\n    axes[0].text(\n        v - 0.5 if v < 0 else v + 0.5,\n        i,\n        f\"{v}%\",\n        color=\"black\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\naxes[0].axvline(axvline1, color=\"black\")\n\n# Plot for MovieLens-1M\naxes[1].barh(models, wind_values, color=\"white\", edgecolor=\"black\")\naxes[1].set_title(title2)\nfor i, v in enumerate(wind_values):\n    axes[1].text(\n        v - 0.2 if v < 0 else v + 0.2,\n        i,\n        f\"{v}%\",\n        color=\"black\" if v > 0 else \"red\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\naxes[1].axvline(axvline2, color=\"black\")\naxes[1].set_xticks(xticks1)\n\n# Plot for Yelp\naxes[2].barh(models, hydro_values, color=\"white\", edgecolor=\"black\")\naxes[2].set_title(title3)\nfor i, v in enumerate(hydro_values):\n    axes[2].text(\n        v - 0.5 if v < 0 else v + 0.5,\n        i,\n        f\"{v}%\",\n        color=\"black\" if v > 0 else \"red\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\naxes[2].axvline(axvline3, color=\"black\")\naxes[2].set_xticks(xticks2)\n\n# Hide all axes except the bottom one\nfor ax in axes:\n    for spine in [\"left\", \"right\", \"top\"]:\n        ax.spines[spine].set_visible(False)\n\n# Hide y-axis labels for axes[1] and axes[2]\naxes[1].set_yticks([])\naxes[1].set_yticklabels([])\naxes[2].set_yticks([])\naxes[2].set_yticklabels([])\n\n# Add x-axis label for all axes\nfor ax in axes:\n    ax.set_xlabel(xlabel)\n\nplt.subplots_adjust(wspace=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_12.pdf', bbox_inches='tight')"}
{"idx": "bar_13", "instruction": "There is a reference image for you and I also have a set of data about energy efficiency improvements across different models and types of renewable energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmodels = [\"SolarBoost\", \"WindStream\", \"HydroFlow\", \"GeoThermal\"]\nenergy_types = [\"Solar\", \"Wind\", \"Hydro\", \"Geothermal\", \"Bioenergy\"]\nimprovements = {\n\"Solar\": [5, 1.5, 1.3, 3.5],\n\"Wind\": [2.5, 2.3, -2.2, 2.8],\n\"Hydro\": [4.4, 0.8, -1, 1.3],\n\"Geothermal\": [4.0, 1.5, -2, 1.3],\n\"Bioenergy\": [4.4, -0.7, -3.9, 1.3],\n}\n\nxlabel = \"Model\"\nylabel = \"Efficiency Improvement [%]\"\nlegendtitle = \"Energy Type\"\ntitle = \"Energy Efficiency Improvement by Model and Energy Type\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodels = [\"SolarBoost\", \"WindStream\", \"HydroFlow\", \"GeoThermal\"]\nenergy_types = [\"Solar\", \"Wind\", \"Hydro\", \"Geothermal\", \"Bioenergy\"]\nimprovements = {\n    \"Solar\": [5, 1.5, 1.3, 3.5],\n    \"Wind\": [2.5, 2.3, -2.2, 2.8],\n    \"Hydro\": [4.4, 0.8, -1, 1.3],\n    \"Geothermal\": [4.0, 1.5, -2, 1.3],\n    \"Bioenergy\": [4.4, -0.7, -3.9, 1.3],\n}\n\n# Colors for each energy type\ncolors = [\"#8171d7\", \"#af4b3d\", \"#d07035\", \"#d6a741\", \"#639b48\"]\n\nxlabel = \"Model\"\nylabel = \"Efficiency Improvement [%]\"\nlegendtitle = \"Energy Type\"\ntitle = \"Energy Efficiency Improvement by Model and Energy Type\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Bar width\nbar_width = 0.15\n\n# Positions of the bars on the x-axis\nr = np.arange(len(models))\n\nfor i, language in enumerate(energy_types):\n    # Plot bars\n    bars = plt.bar(\n        r,\n        improvements[language],\n        color=colors[i],\n        hatch=\"//\",\n        width=bar_width,\n        edgecolor=\"white\",\n        label=language,\n    )\n    # Add text labels\n    for bar, val in zip(bars, improvements[language]):\n        height = bar.get_height()\n        ax.text(\n            bar.get_x() + bar.get_width() / 2,\n            height + (0.1 if val > 0 else -0.4),\n            str(val),\n            ha=\"center\",\n        )\n\n    # Move the position for the next set of bars\n    r = [x + bar_width for x in r]\n# Add xticks on the middle of the group bars\nplt.xlabel(xlabel)\nplt.xticks([r + bar_width for r in range(len(models))], models)\n\n# Add ylabel\nplt.ylabel(ylabel)\n\nplt.gca().grid(color=\"gray\", linewidth=0.5)\nplt.gca().set_axisbelow(True)\n\n# Create legend & Show graphic\nplt.legend(\n    title=legendtitle, bbox_to_anchor=(0.5, 1), loc=\"upper center\", ncol=3\n)\nplt.title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_13.pdf', bbox_inches='tight')"}
{"idx": "bar_18", "instruction": "There is a reference image for you and I also have a set of data about hospital quality scores across different medical departments. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\n\ndatasets = [\"Cardiology\", \"Neurology\", \"Orthopedics\"]\nM3 = [45, 60, 55]\nM4 = [50, 65, 60]\nM5 = [55, 72, 65]\nM6 = [60, 70, 60]\nM7 = [65, 70, 60]\n\nbarWidth = 0.15\nr1 = np.arange(len(M3))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\nr5 = [x + barWidth for x in r4]\nlabels = [\"Hospital A\", \"Hospital B\", \"Hospital C\", \"Hospital D\", \"Hospital E\"]\nylabel = \"Quality Score\"\ntitle = \"Quality Scores of Hospitals Across Different Departments\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\n\ndatasets = [\"Cardiology\", \"Neurology\", \"Orthopedics\"]\nM3 = [45, 60, 55]\nM4 = [50, 65, 60]\nM5 = [55, 72, 65]\nM6 = [60, 70, 60]\nM7 = [65, 70, 60]\n\nbarWidth = 0.15\nr1 = np.arange(len(M3))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\nr5 = [x + barWidth for x in r4]\nlabels = [\"Hospital A\", \"Hospital B\", \"Hospital C\", \"Hospital D\", \"Hospital E\"]\nylabel = \"Quality Score\"\nylim = [35, 75]\nyticks = [35, 40, 45, 50, 55, 60, 65, 70, 75]\ntitle = \"Quality Scores of Hospitals Across Different Departments\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure\nplt.figure(figsize=(10, 6))  # Adjusted to match the original image's dimensions\n\n# Create bars\nplt.bar(r1, M3, color=\"#dee9f5\", width=barWidth, edgecolor=\"black\", label=labels[0])\nplt.bar(r2, M4, color=\"#c0d5e9\", width=barWidth, edgecolor=\"black\", label=labels[1])\nplt.bar(r3, M5, color=\"#94bdd9\", width=barWidth, edgecolor=\"black\", label=labels[2])\nplt.bar(r4, M6, color=\"#669cc9\", width=barWidth, edgecolor=\"black\", label=labels[3])\nplt.bar(r5, M7, color=\"#437ab5\", width=barWidth, edgecolor=\"black\", label=labels[4])\n\n# Add xticks on the middle of the group bars\nplt.xticks([r + barWidth * 2 for r in range(len(M3))], datasets)\n\n# Create legend & Show graphic\nplt.legend(loc=\"upper left\")\nplt.ylabel(ylabel)\nplt.ylim(ylim)\nplt.yticks(yticks)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_18.pdf', bbox_inches='tight')"}
{"idx": "bar_19", "instruction": "There is a reference image for you and I also have a set of data about the efficiency comparison between electric vehicles and other methods as evaluated by experts. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\n\"Electric VS. Gasoline\",\n\"Electric VS. Diesel\",\n\"Electric VS. Hybrid\",\n\"Electric VS. Hydrogen\",\n\"Electric (SUV) VS. Gasoline (SUV)\",\n\"Electric (SUV) VS. Diesel (SUV)\",\n\"Electric (SUV) VS. Hybrid (SUV)\",\n\"Electric (SUV) VS. Hydrogen (SUV)\",\n]\nelectric_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 36.3, 38.7]\nelectric_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 14.5, 30.5]\ntextcontent = \"Electric Vehicles VS. Other Methods in Efficiency (Evaluated by Experts)\"\nlegendlabels = [\"Electric win\", \"Tie\", \"Electric lose\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\n    \"Electric VS. Gasoline\",\n    \"Electric VS. Diesel\",\n    \"Electric VS. Hybrid\",\n    \"Electric VS. Hydrogen\",\n    \"Electric (SUV) VS. Gasoline (SUV)\",\n    \"Electric (SUV) VS. Diesel (SUV)\",\n    \"Electric (SUV) VS. Hybrid (SUV)\",\n    \"Electric (SUV) VS. Hydrogen (SUV)\",\n]\nelectric_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 36.3, 38.7]\nelectric_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 14.5, 30.5]\ntextcontent = \"Electric Vehicles VS. Other Methods in Efficiency (Evaluated by Experts)\"\nlegendlabels = [\"Electric win\", \"Tie\", \"Electric lose\"]\n\n# Colors\ncolors = [\"#6eca87\", \"#468ef7\", \"#ea8777\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(\n    figsize=(8, 6)\n)  # Adjusted figure size to match the original image's dimensions\n\nbar_width = 0.6  # Adjusted bar width for tighter layout\nbar_spacing = 0.15  # Adjusted spacing between bars\n\nfor i, category in enumerate(categories):\n    ax.barh(category, electric_win[i], height=bar_width, color=colors[0])\n    ax.barh(category, tie[i], height=bar_width, left=electric_win[i], color=colors[1])\n    ax.barh(\n        category,\n        electric_lose[i],\n        height=bar_width,\n        left=electric_win[i] + tie[i],\n        color=colors[2],\n    )\n    ax.text(\n        5,\n        category,\n        f\"{electric_win[i]}%\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"white\",\n        fontsize=10,\n    )\n    ax.text(\n        electric_win[i] + tie[i] / 2,\n        category,\n        f\"{tie[i]}%\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"white\",\n        fontsize=10,\n    )\n    ax.text(\n        95,\n        category,\n        f\"{electric_lose[i]}%\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"white\",\n        fontsize=10,\n    )\n\n# Remove spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\n# Remove x-axis\nax.xaxis.set_visible(False)\n# Adjust y-axis\nax.invert_yaxis()\n\n# Add label below the x-axis\nplt.figtext(\n    0.6,\n    0.01,\n    textcontent,\n    ha=\"center\",\n    fontsize=10,\n)\n\n# Legend\nax.legend(\n    legendlabels,\n    loc=\"upper center\",\n    ncol=3,\n    fontsize=12,\n    bbox_to_anchor=(0.5, 1.05),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_19.pdf', bbox_inches='tight')"}
{"idx": "bar_20", "instruction": "There is a reference image for you and I also have a set of data about various types of vehicles and their impact on emissions reduction, cost savings, and adoption rate. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\"Electric Cars\", \"Hybrid Cars\", \"Diesel Trucks\", \"Electric Bikes\", \"Scooters\"]\nemissions_reduction = [85, 60, 20, 75, 50]\ncost_savings = [50, 40, 15, 70, 45]\nadoption_rate = [30, 40, 25, 35, 50]\n\nindices = range(len(categories))\n\nlabels = [\"Emissions Reduction\", \"Cost Savings\", \"Adoption Rate\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Electric Cars\", \"Hybrid Cars\", \"Diesel Trucks\", \"Electric Bikes\", \"Scooters\"]\nemissions_reduction = [85, 60, 20, 75, 50]\ncost_savings = [50, 40, 15, 70, 45]\nadoption_rate = [30, 40, 25, 35, 50]\n\n# Bar chart\nbar_width = 0.5\nindices = range(len(categories))\n\nlabels = [\"Emissions Reduction\", \"Cost Savings\", \"Adoption Rate\"]\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure size\nfig, ax = plt.subplots(\n    figsize=(8, 5)\n)  # Adjusted to match the original image's dimensions\n\n\n\n# Plotting bars with new colors\nbars1 = ax.barh(indices, emissions_reduction, bar_width, label=labels[0], color=\"#1f77b4\")\nbars2 = ax.barh(indices, cost_savings, bar_width, left=emissions_reduction, label=labels[1], color=\"#8da0cb\")\nbars3 = ax.barh(\n    indices,\n    adoption_rate,\n    bar_width,\n    left=[i + j for i, j in zip(emissions_reduction, cost_savings)],\n    label=labels[2],\n    color=\"#c7c7c7\",\n)\n\n# Adding text labels with new positions and font size\nfor i, bar in enumerate(bars1):\n    ax.text(\n        bar.get_width() / 2,\n        bar.get_y() + bar.get_height() / 2,\n        f\"{emissions_reduction[i]}\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"white\",\n        fontsize=14,\n    )\nfor i, bar in enumerate(bars2):\n    ax.text(\n        bar.get_x() + bar.get_width() / 2,\n        bar.get_y() + bar.get_height() / 2,\n        f\"{cost_savings[i]}\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"black\",\n        fontsize=14,\n    )\nfor i, bar in enumerate(bars3):\n    ax.text(\n        bar.get_x() + bar.get_width() / 2,\n        bar.get_y() + bar.get_height() / 2,\n        f\"{adoption_rate[i]}\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"black\",\n        fontsize=14,\n    )\n\n# Labels and title\nax.set_yticks(indices)\nax.set_yticklabels(categories, fontsize=14)\nax.invert_yaxis()  # Labels read top-to-bottom\nax.set_xticks([])\n\n# Legend with new position\nax.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 1.15), ncol=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Tight layout\nplt.tight_layout()\nplt.savefig('bar_20.pdf', bbox_inches='tight')"}
{"idx": "bar_21", "instruction": "There is a reference image for you and I also have a set of data about telemedicine and remote monitoring. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for Telemedicine\ntelemedicine_data = {\n\"Benefits\": [15.8, 25.4, 30.5, 20.3, 8.0],\n\"Reliability\": [12.0, 22.5, 35.7, 21.8, 8.0],\n\"Security\": [10.5, 18.5, 38.0, 24.0, 9.0],\n\"Privacy\": [20.0, 28.5, 25.5, 18.0, 8.0],\n}\n\n# Data for Remote Monitoring\nremote_monitoring_data = {\n\"Benefits\": [20.0, 24.0, 32.0, 14.0, 10.0],\n\"Reliability\": [10.0, 24.0, 40.0, 20.0, 6.0],\n\"Security\": [14.0, 18.0, 36.0, 26.0, 6.0],\n\"Privacy\": [10.0, 22.0, 34.0, 16.0, 18.0],\n}\n\ncategories = [\"Strong Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strong Agree\"]\ncategories2 = [\"Very Low\", \"Low\", \"Neutral\", \"High\", \"Very High\"]\n\nlabels = [\"Telemedicine\", \"Remote Monitoring\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.gridspec as gridspec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for Telemedicine\ntelemedicine_data = {\n    \"Benefits\": [15.8, 25.4, 30.5, 20.3, 8.0],\n    \"Reliability\": [12.0, 22.5, 35.7, 21.8, 8.0],\n    \"Security\": [10.5, 18.5, 38.0, 24.0, 9.0],\n    \"Privacy\": [20.0, 28.5, 25.5, 18.0, 8.0],\n}\n\n# Data for Remote Monitoring\nremote_monitoring_data = {\n    \"Benefits\": [20.0, 24.0, 32.0, 14.0, 10.0],\n    \"Reliability\": [10.0, 24.0, 40.0, 20.0, 6.0],\n    \"Security\": [14.0, 18.0, 36.0, 26.0, 6.0],\n    \"Privacy\": [10.0, 22.0, 34.0, 16.0, 18.0],\n}\n\ncategories = [\"Strong Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strong Agree\"]\ncategories2 = [\"Very Low\", \"Low\", \"Neutral\", \"High\", \"Very High\"]\ncolors = [\"#d95f02\", \"#fdae61\", \"white\", \"#a6d96a\", \"#1a9641\"]\n\nlabels = [\"Telemedicine\", \"Remote Monitoring\"]\nxlim = [-70, 70]\nxticks = np.arange(-70, 71, 10)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a gridspec\ngs = gridspec.GridSpec(\n    3, 2, height_ratios=[1.2, 0.2, 0.2]\n)  # Adjust the height ratios for each row\n\nfig = plt.figure(figsize=(12, 6))\n\n# Create axes using the gridspec\naxes = [plt.subplot(gs[0, 0]), plt.subplot(gs[0, 1])]\n\n\ndef create_bar_chart(ax, results, category_names, title):\n\n    labels = list(results.keys())\n    data = np.array(list(results.values()))\n    data_cum = data.cumsum(axis=1)\n    middle_index = data.shape[1] // 2\n    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index] / 2\n\n    # Color Mapping\n    category_colors = plt.get_cmap(\"coolwarm_r\")(np.linspace(0.15, 0.85, data.shape[1]))\n\n    # Plot Bars\n    for i, (colname, color) in enumerate(zip(category_names, category_colors)):\n        widths = data[:, i]\n        starts = data_cum[:, i] - widths - offsets\n        rects = ax.barh(\n            labels,\n            widths,\n            left=starts,\n            height=0.5,\n            label=colname,\n            color=color,\n            edgecolor=\"black\",\n        )\n        for j, (start, width) in enumerate(zip(starts, widths)):\n            # Calculate the center position of each bar segment for the text\n            text_x = start + width / 2\n            text_y = j  # y-coordinate is based on the bar's index (j)\n            ax.text(\n                text_x,\n                text_y,\n                f\"{abs(width):.1f}%\",\n                va=\"center\",\n                ha=\"center\",\n                color=\"black\",\n                fontsize=8,\n            )\n    # Add Zero Reference Line\n    ax.axvline(0, linestyle=\"-\", color=\"black\", alpha=0.25)\n    # X Axis\n    ax.set_xlim(xlim)\n    ax.set_xticks(xticks)\n    ax.xaxis.set_major_formatter(lambda x, pos: str(abs(int(x))))\n    # Y Axis\n    ax.invert_yaxis()\n    ax.set_title(title)\n\n\n# Create bar charts for Eye movement and Brainwave\ncreate_bar_chart(axes[0], telemedicine_data, categories, labels[0])\ncreate_bar_chart(axes[1], remote_monitoring_data, categories2, labels[1])\n\n\n# Add legend\nhandles, labels = axes[0].get_legend_handles_labels()\nfig.legend(\n    handles,\n    labels,\n    loc=\"lower center\",\n    ncol=len(categories),\n    bbox_to_anchor=(0.5, 0.25),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_21.pdf', bbox_inches='tight')"}
{"idx": "bar_23", "instruction": "There is a reference image for you and I also have a set of data about language model ratings. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nmodels = [\"GPT4\", \"GPT-few-shot\", \"GPT3.5\", \"StarCoder\", \"Code Llama\", \"NCL\"]\naccuracy = [3.5, 3.0, 2.5, 3.0, 3.5, 2.0]\ncompleteness = [3.0, 2.5, 2.0, 2.5, 3.0, 1.5]\nconciseness = [2.5, 2.0, 1.5, 2.0, 2.5, 1.0]\nreadability = [3.0, 2.5, 2.0, 2.5, 3.0, 1.5]\n\nx = np.arange(len(models)) # the label locations\n\nlabels = [\"Accuracy\", \"Completeness\", \"Conciseness\", \"Readability\"]\nylabel = \"Ratings\"\nxlabel = \"Language Models\"\ntitle = \"Ratings of Language Models on a Scale from 1-4\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodels = [\"GPT4\", \"GPT-few-shot\", \"GPT3.5\", \"StarCoder\", \"Code Llama\", \"NCL\"]\naccuracy = [3.5, 3.0, 2.5, 3.0, 3.5, 2.0]\ncompleteness = [3.0, 2.5, 2.0, 2.5, 3.0, 1.5]\nconciseness = [2.5, 2.0, 1.5, 2.0, 2.5, 1.0]\nreadability = [3.0, 2.5, 2.0, 2.5, 3.0, 1.5]\n\nx = np.arange(len(models))  # the label locations\nwidth = 0.2  # the width of the bars\n\nlabels = [\"Accuracy\", \"Completeness\", \"Conciseness\", \"Readability\"]\nylabel = \"Ratings\"\nxlabel = \"Language Models\"\ntitle = \"Ratings of Language Models on a Scale from 1-4\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Plotting\nrects1 = ax.bar(x - width * 1.5, accuracy, width, label=labels[0], color=\"#5878a3\")\nrects2 = ax.bar(\n    x - width / 2, completeness, width, label=labels[1], color=\"#e59344\"\n)\nrects3 = ax.bar(x + width / 2, conciseness, width, label=labels[2], color=\"#d1605e\")\nrects4 = ax.bar(\n    x + width * 1.5, readability, width, label=labels[3], color=\"#85b6b2\"\n)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel(ylabel)\nax.set_xlabel(xlabel)\nax.set_title(title)\nax.set_xticks(x)\nax.set_xticklabels(models)\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_23.pdf', bbox_inches='tight')"}
{"idx": "bar_24", "instruction": "There is a reference image for you and I also have a set of data about cyber threats and their incident rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\n\n# Different types of cyber threats and their incident rates\nthreats = [\n\"Phishing\",\n\"Malware\",\n\"Ransomware\",\n\"DDoS\",\n\"SQL Injection\",\n\"Man-in-the-Middle\",\n\"Zero-Day\",\n\"Cross-Site Scripting\",\n]\nincident_rate = [0.512, 0.701, 0.468, 0.353, 0.484, 0.279, 0.547, 0.364]\nylabel = \"Incident Rate\"\nxlabel = \"Cyber Threats\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\n\n# Different types of cyber threats and their incident rates\nthreats = [\n    \"Phishing\",\n    \"Malware\",\n    \"Ransomware\",\n    \"DDoS\",\n    \"SQL Injection\",\n    \"Man-in-the-Middle\",\n    \"Zero-Day\",\n    \"Cross-Site Scripting\",\n]\nincident_rate = [0.512, 0.701, 0.468, 0.353, 0.484, 0.279, 0.547, 0.364]\ncolors = [\n    \"#3f5e8a\",\n    \"#41778c\",\n    \"#478f8c\",\n    \"#51a686\",\n    \"#69bd78\",\n    \"#8fcf63\",\n    \"#c4de50\",\n    \"#fae856\",\n]\nylabel = \"Incident Rate\"\nxticks = np.arange(len(threats))\nxlabel = \"Cyber Threats\"\nylim = [0, 1]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and bar chart\nfig, ax = plt.subplots(figsize=(8, 4))\nbars = ax.bar(threats, incident_rate, color=colors)\n\n# Add incident_rate values on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(\n        bar.get_x() + bar.get_width() / 2,\n        yval,\n        round(yval, 3),\n        ha=\"center\",\n        va=\"bottom\",\n    )\n\n# Set axis labels and title\nax.set_ylabel(ylabel)\nax.set_xticks(xticks)\nax.set_xticklabels(threats, rotation=45, ha=\"center\")\nax.set_xlabel(xlabel)\n\nax.set_ylim(ylim)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_24.pdf', bbox_inches='tight')"}
{"idx": "bar_25", "instruction": "There is a reference image for you and I also have a set of data about different categories and their corresponding wins, ties, and losses. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\"Alpaca-52k+\", \"AlpaGasus-1k+\", \"LIMA-1k+\", \"LIMA-1k*\"]\nwins = [78.8, 67.4, 44.2, 59.8]\nties = [11.7, 18.1, 21.9, 21.0]\nlosses = [9.5, 14.5, 33.9, 19.2]\n\n# Repeat for the second subplot with different data\nwins2 = [77.6, 68.3, 43.2, 62.9]\nties2 = [18.0, 23.7, 26.7, 23.6]\nlosses2 = [4.4, 8.0, 30.1, 13.5]\n\nxlabel = \"GPT4-as-a-judge\"\nxlabel2 = \"PaLM2-as-a-judge\"\n\nlabels = [\"Refined-Alpaca-1k-longest wins\", \"Alpaca-1k-longest wins\", \"Tie\",\"Tie\", \"Refined-Alpaca-1k-longest loses\", \"Alpaca-1k-longest loses\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Alpaca-52k+\", \"AlpaGasus-1k+\", \"LIMA-1k+\", \"LIMA-1k*\"]\nwins = [78.8, 67.4, 44.2, 59.8]\nties = [11.7, 18.1, 21.9, 21.0]\nlosses = [9.5, 14.5, 33.9, 19.2]\n\n# Define colors\ncolors_wins = [\"#4881b8\", \"#4881b8\", \"#4881b8\", \"#d55f2b\"]\ncolors_ties = [\"#7badd2\", \"#7badd2\", \"#7badd2\", \"#ee934f\"]\ncolors_losses = [\"#cadbed\", \"#cadbed\", \"#cadbed\", \"#f6d2a8\"]\n\n# Repeat for the second subplot with different data\nwins2 = [77.6, 68.3, 43.2, 62.9]\nties2 = [18.0, 23.7, 26.7, 23.6]\nlosses2 = [4.4, 8.0, 30.1, 13.5]\n# Plot data\nbar_width = 0.5\nindices = np.arange(len(categories))\n\nxlabel = \"GPT4-as-a-judge\"\nxlabel2 = \"PaLM2-as-a-judge\"\n\nlabels = [\"Refined-Alpaca-1k-longest wins\", \"Alpaca-1k-longest wins\", \"Tie\",\"Tie\", \"Refined-Alpaca-1k-longest loses\", \"Alpaca-1k-longest loses\"]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n\n\n\n# Function to plot bars\ndef plot_bars(ax, wins, ties, losses, colors_wins, colors_ties, colors_losses):\n    for i, (win, tie, loss) in enumerate(zip(wins, ties, losses)):\n        ax.barh(i, win, bar_width, color=colors_wins[i], edgecolor=\"white\")\n        ax.barh(i, tie, bar_width, left=win, color=colors_ties[i], edgecolor=\"white\")\n        ax.barh(\n            i,\n            loss,\n            bar_width,\n            left=win + tie,\n            color=colors_losses[i],\n            edgecolor=\"white\",\n        )\n        ax.text(win / 2, i, f\"{win}\", ha=\"center\", va=\"center\", color=\"white\")\n        ax.text(win + tie / 2, i, f\"{tie}\", ha=\"center\", va=\"center\", color=\"black\")\n        ax.text(\n            win + tie + loss / 2, i, f\"{loss}\", ha=\"center\", va=\"center\", color=\"black\"\n        )\n\n\nplot_bars(ax1, wins, ties, losses, colors_wins, colors_ties, colors_losses)\n\n# Set labels, title, and legend for ax1\nax1.set_yticks(indices)\nax1.set_yticklabels(categories)\nax1.invert_yaxis()  # labels read top-to-bottom\nax1.set_xlabel(xlabel)\nax1.set_xticks([])\n\nplot_bars(ax2, wins2, ties2, losses2, colors_wins, colors_ties, colors_losses)\n# Set labels, title, and legend for ax2\nax2.set_yticks(indices)\nax2.set_yticklabels(categories)\nax2.invert_yaxis()  # labels read top-to-bottom\nax2.set_xlabel(xlabel2)\nax2.set_xticks([])\n\n# Adjust layout and set background color\nfig.patch.set_facecolor(\"white\")\nfor ax in [ax1, ax2]:\n    ax.set_facecolor(\"white\")\n    ax.spines[\"top\"].set_edgecolor(\"gray\")\n    ax.spines[\"right\"].set_edgecolor(\"gray\")\n    ax.spines[\"bottom\"].set_edgecolor(\"gray\")\n    ax.spines[\"left\"].set_edgecolor(\"gray\")\n\n# Create a global legend\npatch1 = mpatches.Patch(color=\"#d55f2b\", label=labels[0])\npatch2 = mpatches.Patch(color=\"#4881b8\", label=labels[1])\npatch3 = mpatches.Patch(color=\"#ee934f\", label=labels[2])\npatch4 = mpatches.Patch(color=\"#7badd2\", label=labels[3])\npatch5 = mpatches.Patch(color=\"#f6d2a8\", label=labels[4])\npatch6 = mpatches.Patch(color=\"#cadbed\", label=labels[5])\nfig.legend(\n    handles=[patch1, patch2, patch3, patch4, patch5, patch6],\n    loc=\"upper center\",\n    ncol=3,\n    bbox_to_anchor=(0.5, 1.15),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_25.pdf', bbox_inches='tight')"}
{"idx": "bar_26", "instruction": "There is a reference image for you and I also have a set of data about smart home device user satisfaction levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ndevices = [\"Lighting\", \"Thermostat\", \"Security\", \"Speakers\", \"Appliances\", \"Camera\", \"Locks\", \"Sensors\"]\nvery_dissatisfied = [50, 30, 0, 0, 0, 15, 0, 0]\ndissatisfied = [0, 0, 40, 20, 0, 0, 0, 0]\nneutral = [0, 0, 0, 0, 60, 0, 0, 0]\nsatisfied = [0, 0, 0, 0, 0, 0, 80, 67]\n# very_satisfied = [150, 100, 60, 70, 90, 80, 75, 60]\nlabels = [\"Very Dissatisfied\", \"Dissatisfied\", \"Neutral\", \"Satisfied\", ]\nxlabel = \"Smart Home Devices\"\nylabel = \"Number of Users\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ndevices = [\"Lighting\", \"Thermostat\", \"Security\", \"Speakers\", \"Appliances\", \"Camera\", \"Locks\", \"Sensors\"]\nvery_dissatisfied = [50, 30, 0, 0, 0, 15, 0, 0]\ndissatisfied = [0, 0, 40, 20, 0, 0, 0, 0]\nneutral = [0, 0, 0, 0, 60, 0, 0, 0]\nsatisfied = [0, 0, 0, 0, 0, 0, 80, 67]\n# very_satisfied = [150, 100, 60, 70, 90, 80, 75, 60]\nlabels = [\"Very Dissatisfied\", \"Dissatisfied\", \"Neutral\", \"Satisfied\", ]\nxlabel = \"Smart Home Devices\"\nylabel = \"Number of Users\"\nylim = [0, 100]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(6, 4))\n\n# Plotting\nbar_width = 0.8\nindex = np.arange(len(devices))\n\nplt.bar(index, very_dissatisfied, bar_width, color=\"red\", label=labels[0])\nplt.bar(index, dissatisfied, bar_width, color=\"green\", label=labels[1], bottom=very_dissatisfied)\nplt.bar(\n    index,\n    neutral,\n    bar_width,\n    color=\"grey\",\n    label=labels[2],\n    bottom=[i + j for i, j in zip(very_dissatisfied, dissatisfied)],\n)\nplt.bar(\n    index,\n    satisfied,\n    bar_width,\n    color=\"orange\",\n    label=labels[3],\n    bottom=[i + j + k for i, j, k in zip(very_dissatisfied, dissatisfied, neutral)],\n)\n\n# Labels and Title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.ylim(ylim)\n# plt.title('Emotion Frequencies by Sentiment')\nplt.xticks(index, devices, rotation=45, ha=\"center\")\nplt.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('bar_26.pdf', bbox_inches='tight')"}
{"idx": "bar_27", "instruction": "There is a reference image for you and I also have a set of data about task outcomes in different domains. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategories = [\"CloudComputeX\", \"AIResearchLab\"] # Update the domain\nsuccess = [0.33, 0.5]\ngrounding_error = [0.17, 0.1]\noccupancy_error = [0.05, 0.05]\ngripper_collision = [0.05, 0.15]\ntrajectory_optimization_error = [0.3, 0.1]\ngrasping_failed = [0.1, 0.1]\ny_pos = range(len(categories))\nlabels = [\"Success\", \"Allocation Error\", \"Utilization Error\", \"Node Failure\", \"Routing Optimization Error\", \"Job Aborted\"] # Update the labels to reflect the new domain\nxlabel = \"Percentage of Total Tasks\" # Update xlabel to reflect the new domain\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories = [\"CloudComputeX\", \"AIResearchLab\"]  # Update the domain\nsuccess = [0.33, 0.5]\ngrounding_error = [0.17, 0.1]\noccupancy_error = [0.05, 0.05]\ngripper_collision = [0.05, 0.15]\ntrajectory_optimization_error = [0.3, 0.1]\ngrasping_failed = [0.1, 0.1]\n\n# Colors for each segment\ncolors = [\"green\", \"grey\", \"orange\", \"yellow\", \"blue\", \"purple\"]\nbar_width = 0.5\ny_pos = range(len(categories))\nlabels = [\"Success\", \"Allocation Error\", \"Utilization Error\", \"Node Failure\", \"Routing Optimization Error\", \"Job Aborted\"]  # Update the labels to reflect the new domain\nxlabel = \"Percentage of Total Tasks\"  # Update xlabel to reflect the new domain\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with a specific size to match the original image's dimensions\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Stack the bars horizontally\n\nax.barh(y_pos, success, bar_width, color=colors[0], label=labels[0])\nax.barh(\n    y_pos,\n    grounding_error,\n    bar_width,\n    left=success,\n    color=colors[1],\n    label=labels[1],\n)\nax.barh(\n    y_pos,\n    occupancy_error,\n    bar_width,\n    left=[i + j for i, j in zip(success, grounding_error)],\n    color=colors[2],\n    label=labels[2],\n)\nax.barh(\n    y_pos,\n    gripper_collision,\n    bar_width,\n    left=[i + j + k for i, j, k in zip(success, grounding_error, occupancy_error)],\n    color=colors[3],\n    label=labels[3],\n)\nax.barh(\n    y_pos,\n    trajectory_optimization_error,\n    bar_width,\n    left=[\n        i + j + k + l\n        for i, j, k, l in zip(\n            success, grounding_error, occupancy_error, gripper_collision\n        )\n    ],\n    color=colors[4],\n    label=labels[4],\n)\nax.barh(\n    y_pos,\n    grasping_failed,\n    bar_width,\n    left=[\n        i + j + k + l + m\n        for i, j, k, l, m in zip(\n            success,\n            grounding_error,\n            occupancy_error,\n            gripper_collision,\n            trajectory_optimization_error,\n        )\n    ],\n    color=colors[5],\n    label=labels[5],\n)\n\n# Set the y-axis labels\nax.set_yticks(y_pos)\nax.set_yticklabels(categories)\n\n# Set the x-axis label\nax.set_xlabel(xlabel)\n\n# Add a legend\nax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.5), ncol=3, frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_27.pdf', bbox_inches='tight')"}
{"idx": "bar_28", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency across different types of transport. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated data\ndatasets = [\"Urban Transport\", \"Rural Transport\"]\nelectric = [2.7, 3.4]\nhybrid = [1.9, 2.1]\ndiesel = [3.5, 2.8]\n\n# X-axis positions\nx = np.arange(len(datasets))\nlabels = [\"Electric\", \"Hybrid\", \"Diesel\"]\nylabel = \"Fuel Efficiency (km/l)\"\nxlabel = \"Transport Types\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated data\ndatasets = [\"Urban Transport\", \"Rural Transport\"]\nelectric = [2.7, 3.4]\nhybrid = [1.9, 2.1]\ndiesel = [3.5, 2.8]\n\n# X-axis positions\nx = np.arange(len(datasets))\n\n# Bar width\nwidth = 0.2\nlabels = [\"Electric\", \"Hybrid\", \"Diesel\"]\nylim = [0, 4.5]\nylabel = \"Fuel Efficiency (km/l)\"\nxlabel = \"Transport Types\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(6, 5)\n)  # Adjusting figure size to match the original image's dimensions\nax.bar(\n    x - width, electric, width, label=labels[0], hatch=\"//\", edgecolor=\"black\", color=\"white\"\n)\nax.bar(\n    x,\n    hybrid,\n    width,\n    label=labels[1],\n    hatch=\"..\",\n    edgecolor=\"black\",\n    color=\"white\",\n)\nax.bar(\n    x + width, diesel, width, label=labels[2], hatch=\"xx\", edgecolor=\"black\", color=\"white\"\n)\n\n# Labels and Title\nax.set_ylim(ylim)\nax.set_ylabel(ylabel)\nax.set_xlabel(xlabel)\nax.set_xticks(x)\nax.set_xticklabels(datasets)\nax.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_28.pdf', bbox_inches='tight')"}
{"idx": "bar_30", "instruction": "There is a reference image for you and I also have a set of data about machine learning model performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated data\nmethods = [\"K-Means\", \"Random Forest\", \"Neural Network\"]\nefficiency = [78.4, 88.9, 92.3]\naccuracy = [82.1, 91.5, 94.8]\nprecision = [75.0, 89.7, 93.2]\n\n# X-axis positions\nx = np.arange(len(methods))\n\nlabels = [\"Efficiency\", \"Accuracy\", \"Precision\"]\nylabel = \"Performance Metrics (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated data\nmethods = [\"K-Means\", \"Random Forest\", \"Neural Network\"]\nefficiency = [78.4, 88.9, 92.3]\naccuracy = [82.1, 91.5, 94.8]\nprecision = [75.0, 89.7, 93.2]\n\n# X-axis positions\nx = np.arange(len(methods))\n\n# Bar width\nbar_width = 0.2\ngap_width = 0.02\n\nlabels = [\"Efficiency\", \"Accuracy\", \"Precision\"]\nylabel = \"Performance Metrics (%)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting bars\nfig, ax = plt.subplots(figsize=(6, 4))  # Adjusting figure size to match 468x360 pixels\nrects1 = ax.bar(\n    x - bar_width - gap_width, efficiency, bar_width, label=labels[0], color=\"#f2a49e\"\n)\nrects2 = ax.bar(x, accuracy, bar_width, label=labels[1], color=\"#a9c8f0\")\nrects3 = ax.bar(\n    x + bar_width + gap_width, precision, bar_width, label=labels[0], color=\"#cdbcfa\"\n)\n\n# Adding text for labels, title, and custom x-axis tick labels\nax.set_ylabel(ylabel)\nax.set_xticks(x)\nax.set_xticklabels(methods)\nax.legend(loc=\"lower center\", bbox_to_anchor=(0.5, -0.2), ncol=3)\n\n\n# Adding data labels inside the bars\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate(\n            \"{}\".format(height),\n            xy=(rect.get_x() + rect.get_width() / 2, height + 2),\n            xytext=(0, 0),  # No offset\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"center\",\n            color=\"black\",\n            fontsize=8,\n        )\n\n\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\n\n# Adjusting the layout and font sizes\nax.tick_params(axis=\"x\", labelsize=8)\nax.tick_params(axis=\"y\", labelsize=8)\nax.yaxis.label.set_size(8)\n\n# Adding grid\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\nax.grid(axis=\"x\", linestyle=\"--\", alpha=0.6)\nax.set_axisbelow(True)\n\nplt.subplots_adjust(bottom=0.2, top=0.95)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_30.pdf', bbox_inches='tight')"}
{"idx": "bar_31", "instruction": "There is a reference image for you and I also have a set of data about \"comparisons between different decision-making entities in various matchups\". Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Updated data\ncategories = [\n\"AI vs. Human\",\n\"AI vs. Hybrid\",\n\"AI vs. Rule-Based\",\n\"Human vs. Hybrid\",\n\"Human vs. Rule-Based\",\n\"Hybrid vs. Rule-Based\",\n][::-1]\nwin = [22.0, 26.0, 30.0, 35.0, 32.0, 28.0][::-1]\ntie = [50.0, 55.0, 60.0, 52.0, 54.0, 58.0][::-1]\nloss = [28.0, 19.0, 10.0, 13.0, 14.0, 14.0][::-1]\n\nlabels = [\"Win\", \"Tie\", \"Loss\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated data\ncategories = [\n    \"AI vs. Human\",\n    \"AI vs. Hybrid\",\n    \"AI vs. Rule-Based\",\n    \"Human vs. Hybrid\",\n    \"Human vs. Rule-Based\",\n    \"Hybrid vs. Rule-Based\",\n][::-1]\nwin = [22.0, 26.0, 30.0, 35.0, 32.0, 28.0][::-1]\ntie = [50.0, 55.0, 60.0, 52.0, 54.0, 58.0][::-1]\nloss = [28.0, 19.0, 10.0, 13.0, 14.0, 14.0][::-1]\n\nlabels = [\"Win\", \"Tie\", \"Loss\"]\nxticks = [0, 20, 40, 60, 80, 100]\nxtickslabel = [\"0\", \"20\", \"40\", \"60\", \"80\", \"100\"]\nbar_width = 0.6\nindices = range(len(categories))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create stacked bar chart\nfig, ax = plt.subplots(figsize=(10, 6))  # Adjust figure size to 720x432 pixels\nbars1 = ax.barh(indices, win, bar_width, label=labels[0], color=\"#9cc8e4\")\nbars2 = ax.barh(indices, tie, bar_width, left=win, label=labels[1], color=\"#b7da91\")\nbars3 = ax.barh(\n    indices,\n    loss,\n    bar_width,\n    left=[i + j for i, j in zip(win, tie)],\n    label=labels[2],\n    color=\"#ef8b88\",\n)\n\n# Add text labels to the bars\nfor bars, color in zip([bars1, bars2, bars3], [\"#9cc8e4\", \"#b7da91\", \"#ef8b88\"]):\n    for bar in bars:\n        width = bar.get_width()\n        center = bar.get_x() + width / 2\n        ax.text(\n            center,\n            bar.get_y() + bar.get_height() / 2,\n            f\"{width:.1f}%\",\n            va=\"center\",\n            ha=\"center\",\n            color=\"black\",\n            fontsize=10,\n        )\n\n# Set the y-axis labels\nax.set_yticks(indices)\nax.set_yticklabels(categories, ha=\"right\")\n\n# Set the x-axis labels\nax.set_xticks(xticks)\nax.set_xticklabels(xtickslabel)\n\n# Add legend\nax.legend(\n    loc=\"upper center\", bbox_to_anchor=(0.4, 1.05), shadow=True, ncol=3, frameon=False\n)\n\n# Remove spines\nfor spine in [\"top\", \"right\"]:\n    ax.spines[spine].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_31.pdf', bbox_inches='tight')"}
{"idx": "bar_33", "instruction": "There is a reference image for you and I also have a set of data about completion rates and error rates in different phases of a project. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated data\nphases = [\"Phase 1\", \"Phase 2\", \"Phase 3\", \"Phase 4\", \"Phase 5\"]\navg_completion_rate = [0.45, 0.50, 0.55, 0.48, 0.60]\nformat_error_rate = [0.95, 0.80, 0.65, 0.90, 0.85]\ncontent_error_rate = [0.70, 0.55, 0.60, 0.65, 0.75]\n\n# X-axis positions for each group of bars\nx = np.arange(len(phases))\nlabels = [\"Avg. Completion Rate\", \"Format Error Rate\", \"Content Error Rate\"]\ntitle = \"Completion Results in Different Phases\"\nxlabel = \"Phases\"\nylabel = \"Rates\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated data\nphases = [\"Phase 1\", \"Phase 2\", \"Phase 3\", \"Phase 4\", \"Phase 5\"]\navg_completion_rate = [0.45, 0.50, 0.55, 0.48, 0.60]\nformat_error_rate = [0.95, 0.80, 0.65, 0.90, 0.85]\ncontent_error_rate = [0.70, 0.55, 0.60, 0.65, 0.75]\n\n# X-axis positions for each group of bars\nx = np.arange(len(phases))\n\n# Bar width\nbar_width = 0.25\nlabels = [\"Avg. Completion Rate\", \"Format Error Rate\", \"Content Error Rate\"]\ntitle = \"Completion Results in Different Phases\"\nxlabel = \"Phases\"\nylabel = \"Rates\"\nyticks = np.arange(0, 1.3, 0.2)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))  # Adjusted to match original image dimensions\n\n# Plotting bars\nrects1 = ax.bar(\n    x - bar_width,\n    avg_completion_rate,\n    bar_width,\n    label=labels[0],\n    color=\"#666666\",\n    edgecolor=\"white\",\n)\nrects2 = ax.bar(\n    x,\n    format_error_rate,\n    bar_width,\n    label=labels[1],\n    color=\"#5584af\",\n    edgecolor=\"white\",\n)\nrects3 = ax.bar(\n    x + bar_width,\n    content_error_rate,\n    bar_width,\n    label=labels[2],\n    color=\"#4a8f74\",\n    edgecolor=\"white\",\n)\n\n\n# Adding percentage labels on top of each bar\ndef add_labels(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate(\n            f\"{height*100:.1f}%\",\n            xy=(rect.get_x() + rect.get_width() / 2, height),\n            xytext=(0, 3),  # 3 points vertical offset\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"bottom\",\n        )\n\n\nadd_labels(rects1)\nadd_labels(rects2)\nadd_labels(rects3)\n\n# Title and labels\nax.set_title(title)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# X and Y ticks\nax.set_xticks(x)\nax.set_xticklabels(phases)\nax.set_yticks(yticks)\n\n# Legend\nax.legend(loc=\"upper center\", ncol=3, frameon=False)\n\n# Grid lines\nax.yaxis.grid(True)\nax.set_axisbelow(True)\n\ngrid_color = \"#bdbdbd\"\n# Set border color\nfor spine in ax.spines.values():\n    spine.set_edgecolor(grid_color)\n# hidden ticks\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('bar_33.pdf', bbox_inches='tight')"}
{"idx": "bar_34", "instruction": "There is a reference image for you and I also have a set of data about Microsoft Office software optimization options. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated data\ncategories = [\n\"Word\", \"Excel\", \"PowerPoint\", \"Outlook\", \"Teams\", \"OneNote\", \"SharePoint\", \n\"Azure\", \"Dynamics\", \"Intune\", \"Yammer\", \"Sway\", \"Planner\", \"Power BI\", \n\"PowerApps\", \"Stream\", \"Whiteboard\", \"Lists\", \"Forms\", \"Project\", \"Access\", \n\"Avg\"\n]\n\n# Generate three lists\nFeatureOpt, PerformanceOpt, SecurityOpt = np.random.dirichlet(np.ones(3), size=len(categories)).T\n\nFeatureOpt = FeatureOpt * 100\nPerformanceOpt = PerformanceOpt * 100\nSecurityOpt = SecurityOpt * 100\n\n# Stacked bar chart setup\nlabels = [\"FeatureOpt\", \"PerformanceOpt\", \"SecurityOpt\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated data\ncategories = [\n    \"Word\", \"Excel\", \"PowerPoint\", \"Outlook\", \"Teams\", \"OneNote\", \"SharePoint\", \n    \"Azure\", \"Dynamics\", \"Intune\", \"Yammer\", \"Sway\", \"Planner\", \"Power BI\", \n    \"PowerApps\", \"Stream\", \"Whiteboard\", \"Lists\", \"Forms\", \"Project\", \"Access\", \n    \"Avg\"\n]\n\n# Generate three lists\nFeatureOpt, PerformanceOpt, SecurityOpt = np.random.dirichlet(np.ones(3), size=len(categories)).T\n\nFeatureOpt = FeatureOpt * 100\nPerformanceOpt = PerformanceOpt * 100\nSecurityOpt = SecurityOpt * 100\n\n# Stacked bar chart setup\nbar_width = 0.9\nr = np.arange(len(categories))\nlabels = [\"FeatureOpt\", \"PerformanceOpt\", \"SecurityOpt\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(8, 4))\nbar1 = ax.bar(\n    r,\n    FeatureOpt,\n    color=\"white\",\n    edgecolor=\"#4f7c56\",\n    hatch=\"\\\\\\\\\\\\\",\n    width=bar_width,\n    label=labels[0],\n)\nbar2 = ax.bar(\n    r,\n    PerformanceOpt,\n    bottom=FeatureOpt,\n    color=\"white\",\n    edgecolor=\"#d3c475\",\n    hatch=\"--\",\n    width=bar_width,\n    label=labels[1],\n)\nbar3 = ax.bar(\n    r,\n    SecurityOpt,\n    bottom=FeatureOpt + PerformanceOpt,\n    color=\"white\",\n    edgecolor=\"#2d4aac\",\n    hatch=\"++\",\n    width=bar_width,\n    label=labels[2],\n)\n\n# Labels, title and legend\n# ax.set_xlabel('Benchmarks', fontsize=12)\n# ax.set_ylabel('Optimization (%)', fontsize=12)\n\nax.set_xticks(r)\nax.set_xticklabels(categories, rotation=-45, ha=\"center\")\nax.set_yticks(np.arange(0, 101, 20))\nax.set_ylim(0, 100)\nax.set_yticklabels([\"{}%\".format(i) for i in range(0, 101, 20)])\nax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.15), ncol=3)\n\n# Grid lines\nax.yaxis.grid(True, linestyle=\"--\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('bar_34.pdf', bbox_inches='tight')"}
{"idx": "bar_36", "instruction": "There is a reference image for you and I also have a set of data about click-through rates for different advertising strategies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Updated data\nclusters = [50, 500]\npersonalized_ads = [82.5, 81.8]\ncontextual_ads = [79.2, 84.7]\nrandom_sampling = 78.9\n\nlabels = [\"Personalized Ads\", \"Contextual Ads\"]\nxlabel = \"Number of Clusters\"\nylabel = \"Click-Through Rate (%)\"\ntitle = \"Click-Through Rate by Number of Clusters\"\naxlabels = \"Random Sampling\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.61, "height": 5.23, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated data\nclusters = [50, 500]\npersonalized_ads = [82.5, 81.8]\ncontextual_ads = [79.2, 84.7]\nrandom_sampling = 78.9\n\nlabels = [\"Personalized Ads\", \"Contextual Ads\"]\nxlabel = \"Number of Clusters\"\nylabel = \"Click-Through Rate (%)\"\ntitle = \"Click-Through Rate by Number of Clusters\"\naxlabels = \"Random Sampling\"\n\nylim = [75, 88]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(6.61, 5.23)\n)  # Adjusted to match the original image's dimensions\nbar_width = 0.35\nindex = np.arange(len(clusters))\n\nbar1 = ax.bar(index, personalized_ads, bar_width, label=labels[0], color=\"#5e74a0\")\nbar2 = ax.bar(\n    index + bar_width, contextual_ads, bar_width, label=labels[1], color=\"#c38c6a\"\n)\n\n# Adding the text on the bars\nfor rect in bar1 + bar2:\n    height = rect.get_height()\n    ax.text(\n        rect.get_x() + rect.get_width() / 2.0,\n        height,\n        \"%.2f\" % height,\n        ha=\"center\",\n        va=\"bottom\",\n    )\n\n# Random Sampling Line\nax.axhline(y=random_sampling, color=\"green\", linestyle=\"--\", label=axlabels[0])\n\n# Labels, title and legend\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n# ax.set_title('MMLU by Number of Clusters')\nax.set_ylim(ylim)\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(clusters)\nax.legend(loc=\"upper right\")  # Changed legend position\ngrid_color = \"#d2d2d2\"\nax.yaxis.grid(True)\nax.set_axisbelow(True)\n# Set border color\nfor spine in ax.spines.values():\n    spine.set_edgecolor(grid_color)\n\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout\nplt.tight_layout()\nplt.savefig('bar_36.pdf', bbox_inches='tight')"}
{"idx": "bar_38", "instruction": "There is a reference image for you and I also have a set of data about user satisfaction across different streaming platforms. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nmodels = [\"Netflix\", \"Hulu\", \"Amazon Prime\", \"Disney+\", \"HBO Max\", \"Apple TV+\"]\nhigh_satisfaction = [30, 40, 35, 50, 45, 40]\nmedium_satisfaction = [50, 60, 55, 70, 50, 65]\nlow_satisfaction = [85, 70, 75, 90, 65, 80]\n\nvery_low_satisfaction = [15, 20, 25, 30, 35, 25]\n\n# Bar positions\nx = np.arange(len(models))\nlabels = [\"High Satisfaction\", \"Medium Satisfaction\", \"Low Satisfaction\", \"Very Low Satisfaction\"]\nylabel = \"User Satisfaction (%)\"\ntitle = \"User Satisfaction Across Streaming Platforms\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nmodels = [\"Netflix\", \"Hulu\", \"Amazon Prime\", \"Disney+\", \"HBO Max\", \"Apple TV+\"]\nhigh_satisfaction = [30, 40, 35, 50, 45, 40]\nmedium_satisfaction = [50, 60, 55, 70, 50, 65]\nlow_satisfaction = [85, 70, 75, 90, 65, 80]\n\nvery_low_satisfaction = [15, 20, 25, 30, 35, 25]\n\n# Bar positions\nx = np.arange(len(models))\nwidth = 0.15  # Adjusted width for spacing\nlabels = [\"High Satisfaction\", \"Medium Satisfaction\", \"Low Satisfaction\", \"Very Low Satisfaction\"]\nylabel = \"User Satisfaction (%)\"\ntitle = \"User Satisfaction Across Streaming Platforms\"\nylim = [0, 100]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(7, 5)\n)  # Adjusted to match the image dimensions (504x360)\n\nax.bar(x - width * 2, high_satisfaction, width, label=labels[0], color=\"#c0e4b8\")  # Lighter green\nax.bar(\n    x - width,\n    medium_satisfaction,\n    width,\n    label=labels[1],\n    color=\"#97ccf6\",\n)  # Lighter blue\nax.bar(\n    x, low_satisfaction, width, label=labels[2], color=\"#e48b88\"\n)  # Lighter red\nax.bar(\n    x + width,\n    very_low_satisfaction,\n    width,\n    label=labels[3],\n    hatch=\"/\",\n    color=\"#cac4e1\",\n)  # Lighter purple\n\n# Labels and Title\nax.set_ylabel(ylabel)\nax.set_title(title)\nax.set_xticks(x)\nax.set_xticklabels(models)\nax.set_ylim(ylim)  # Adjusted y-axis limit\n\n# Move legend inside the plot area\nax.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_38.pdf', bbox_inches='tight')"}
{"idx": "bar_39", "instruction": "There is a reference image for you and I also have a set of data about news outlet performance in a competition. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategories = [\"BBC\", \"CNN\", \"Reuters\", \"Al Jazeera\", \"The New York Times\"][::-1]\nrecost_wins = [95, 85, 115, 95, 160][::-1]\nties = [15, 35, 50, 45, 25][::-1]\nalpaca_wins = [55, 50, 35, 105, 40][::-1]\n\nlabels = [\"Recost (1%) wins\", \"Tie\", \"Alpaca wins\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories = [\"BBC\", \"CNN\", \"Reuters\", \"Al Jazeera\", \"The New York Times\"][::-1]\nrecost_wins = [95, 85, 115, 95, 160][::-1]\nties = [15, 35, 50, 45, 25][::-1]\nalpaca_wins = [55, 50, 35, 105, 40][::-1]\n\nlabels = [\"Recost (1%) wins\", \"Tie\", \"Alpaca wins\"]\n\nbar_width = 0.5\ny_pos = range(len(categories))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Stacked Bar Chart\nfig, ax = plt.subplots(\n    figsize=(8, 5)\n)  # Adjusted to match the original image's dimensions\n\nax.barh(y_pos, recost_wins, bar_width, color=\"#e4754f\", label=labels[0])\nax.barh(y_pos, ties, bar_width, left=recost_wins, color=\"#feffc7\", label=labels[1])\nax.barh(\n    y_pos,\n    alpaca_wins,\n    bar_width,\n    left=[i + j for i, j in zip(recost_wins, ties)],\n    color=\"#81acce\",\n    label=labels[2],\n)\n\n# Adding the numerical values within each segment\nfor i in range(len(categories)):\n    ax.text(\n        recost_wins[i] / 2,\n        i,\n        str(recost_wins[i]),\n        ha=\"center\",\n        va=\"center\",\n        color=\"white\",\n    )\n    ax.text(\n        recost_wins[i] + ties[i] / 2,\n        i,\n        str(ties[i]),\n        ha=\"center\",\n        va=\"center\",\n        color=\"black\",\n    )\n    ax.text(\n        recost_wins[i] + ties[i] + alpaca_wins[i] / 2,\n        i,\n        str(alpaca_wins[i]),\n        ha=\"center\",\n        va=\"center\",\n        color=\"white\",\n    )\n\n# Labels and Legend\nax.set_xticks([])\nax.set_yticks(y_pos)\nax.set_yticklabels(categories)\nax.legend(loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_39.pdf', bbox_inches='tight')"}
{"idx": "bar_40", "instruction": "There is a reference image for you and I also have a set of data about \"Relative Difference in User Engagement Across Online Activities\". Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\n\"Blog Posts\",\n\"Photo Uploads\",\n\"Video Uploads\",\n\"Live Streams\",\n\"Online Purchases\",\n\"Product Reviews\",\n\"Forum Posts\",\n\"Event Registrations\",\n\"Webinar Attendance\",\n\"Podcast Subscriptions\",\n\"E-Book Downloads\",\n\"Online Courses\",\n\"Virtual Meetings\",\n\"Social Media Posts\",\n\"Newsletter Signups\",\n\"Online Surveys\",\n\"Virtual Conferences\",\n\"Online Donations\",\n]\n\ndifferences = [\n7,\n-12,\n-18,\n-11,\n15,\n22,\n-32,\n-28,\n-38,\n58,\n-68,\n-78,\n82,\n105,\n125,\n155,\n162,\n175,\n]\n\ntitle = \"Relative Difference in User Engagement Across Online Activities\"\nxlabel = \"Difference (%)\"\nylabel = \"Activity Type\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\n    \"Blog Posts\",\n    \"Photo Uploads\",\n    \"Video Uploads\",\n    \"Live Streams\",\n    \"Online Purchases\",\n    \"Product Reviews\",\n    \"Forum Posts\",\n    \"Event Registrations\",\n    \"Webinar Attendance\",\n    \"Podcast Subscriptions\",\n    \"E-Book Downloads\",\n    \"Online Courses\",\n    \"Virtual Meetings\",\n    \"Social Media Posts\",\n    \"Newsletter Signups\",\n    \"Online Surveys\",\n    \"Virtual Conferences\",\n    \"Online Donations\",\n]\n\ndifferences = [\n    7,\n    -12,\n    -18,\n    -11,\n    15,\n    22,\n    -32,\n    -28,\n    -38,\n    58,\n    -68,\n    -78,\n    82,\n    105,\n    125,\n    155,\n    162,\n    175,\n]\n\ncolors = [\"#d1605e\" if x < 0 else \"#85b6b2\" for x in differences]\n\ntitle = \"Relative Difference in User Engagement Across Online Activities\"\nxlabel = \"Difference (%)\"\nylabel = \"Activity Type\"\nxlim = [-80, 200]\nxticks = range(-80, 201, 50)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(categories, differences, color=colors)\n\n# Set title and labels\nax.set_title(title)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Set x-axis limits and labels\nax.set_xlim(xlim)\nax.set_xticks(xticks)\nax.xaxis.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Save the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_40.pdf', bbox_inches='tight')"}
{"idx": "bar_41", "instruction": "There is a reference image for you and I also have a set of data about recall rates for truthful and misleading statements under different confidence levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the bar charts\ntruthful_recall = np.array(\n[\n[72.5, 68.3, 61.9],\n[54.7, 50.4, 47.8],\n[53.2, 48.9, 43.5],\n[49.1, 45.7, 35.6],\n[29.4, 32.7, 29.1],\n]\n)\nmisleading_recall = np.array(\n[\n[12.5, 15.8, 16.1],\n[38.7, 43.5, 33.2],\n[42.9, 52.1, 38.4],\n[51.3, 58.7, 45.2],\n[67.2, 62.5, 46.7],\n]\n)\nx = [0, 1, 2]\n\n# Titles for subplots\ntitles = [\n\"High Confidence:Low Confidence = 2:0\",\n\"High Confidence:Low Confidence = 2:1\",\n\"High Confidence:Low Confidence = 2:2\",\n\"High Confidence:Low Confidence = 1:2\",\n\"High Confidence:Low Confidence = 0:2\",\n]\n\nlabels = [\"High Confidence Recall\", \"Low Confidence Recall\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 14.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar charts\ntruthful_recall = np.array(\n    [\n        [72.5, 68.3, 61.9],\n        [54.7, 50.4, 47.8],\n        [53.2, 48.9, 43.5],\n        [49.1, 45.7, 35.6],\n        [29.4, 32.7, 29.1],\n    ]\n)\nmisleading_recall = np.array(\n    [\n        [12.5, 15.8, 16.1],\n        [38.7, 43.5, 33.2],\n        [42.9, 52.1, 38.4],\n        [51.3, 58.7, 45.2],\n        [67.2, 62.5, 46.7],\n    ]\n)\nx = [0, 1, 2]\n\n# Titles for subplots\ntitles = [\n    \"High Confidence:Low Confidence = 2:0\",\n    \"High Confidence:Low Confidence = 2:1\",\n    \"High Confidence:Low Confidence = 2:2\",\n    \"High Confidence:Low Confidence = 1:2\",\n    \"High Confidence:Low Confidence = 0:2\",\n]\n\nlabels = [\"High Confidence Recall\", \"Low Confidence Recall\"]\nylim = [-80, 80]\nxticks = [0, 1, 2]\nxticklabels = [5, 10, 20]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(14, 4))\n\n# Create subplots\nfor i in range(5):\n    ax = plt.subplot(1, 5, i + 1)\n    ax.bar(x, truthful_recall[i], width=0.5, label=labels[0], color=\"#8a9ee7\")\n    ax.bar(\n        x, -misleading_recall[i], width=0.5, label=labels[1], color=\"#dc7b75\"\n    )\n    ax.set_title(titles[i])\n    ax.set_ylim(ylim)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(xticklabels)\n    # ax.axhline(0, color='black', linewidth=0.8)\n    ax.yaxis.grid(True, linestyle=\"--\")\n    ax.set_axisbelow(True)\n\n    # Annotate bars with their values\n    for j in range(3):\n        ax.text(\n            x[j], truthful_recall[i][j] - 7, str(truthful_recall[i][j]), ha=\"center\"\n        )\n        ax.text(\n            x[j],\n            -misleading_recall[i][j] + 5,\n            str(misleading_recall[i][j]),\n            ha=\"center\",\n        )\n\n# Add legend to the first subplot\nplt.subplot(1, 5, 1).legend(loc=\"lower right\", frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_41.pdf', bbox_inches='tight')"}
{"idx": "bar_43", "instruction": "There is a reference image for you and I also have a set of data about various natural language processing model performances on different benchmarks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Placeholder data\ncategories = [\n\"BERT-Base\",\n\"RoBERTa-Large\",\n\"DistilBERT\",\n\"ALBERT-XXLarge\",\n\"T5-Large\",\n\"GPT-3\",\n\"GPT-Neo\",\n\"GPT-J\",\n\"GPT-4\",\n]\n\nscores = {\n\"SQuAD\": [88.5, 90.2, 86.7, 89.4, 91.8, 93.6, 87.4, 88.9, 95.1],\n\"MNLI\": [84.1, 89.8, 82.7, 86.9, 89.3, 91.2, 85.4, 86.8, 94.0],\n\"QNLI\": [92.4, 94.3, 89.7, 91.5, 93.7, 95.2, 90.8, 92.1, 96.5],\n\"RTE\": [71.6, 79.1, 67.8, 75.4, 78.2, 83.6, 72.5, 73.9, 86.0],\n\"CoLA\": [60.3, 68.4, 58.6, 65.7, 70.2, 73.8, 61.7, 63.9, 78.4],\n\"STS-B\": [88.1, 91.5, 85.7, 90.1, 93.0, 94.5, 86.4, 88.7, 95.9],\n\"MRPC\": [87.5, 89.2, 85.1, 88.7, 90.8, 92.4, 86.9, 88.3, 93.6],\n\"QQP\": [89.8, 91.3, 87.4, 90.6, 92.7, 94.1, 88.2, 89.9, 96.0],\n\"BoolQ\": [76.4, 80.3, 73.9, 78.5, 82.0, 85.6, 77.1, 78.4, 88.9],\n}\nylabel = \"Performance Score (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Placeholder data\ncategories = [\n    \"BERT-Base\",\n    \"RoBERTa-Large\",\n    \"DistilBERT\",\n    \"ALBERT-XXLarge\",\n    \"T5-Large\",\n    \"GPT-3\",\n    \"GPT-Neo\",\n    \"GPT-J\",\n    \"GPT-4\",\n]\n\nscores = {\n    \"SQuAD\": [88.5, 90.2, 86.7, 89.4, 91.8, 93.6, 87.4, 88.9, 95.1],\n    \"MNLI\": [84.1, 89.8, 82.7, 86.9, 89.3, 91.2, 85.4, 86.8, 94.0],\n    \"QNLI\": [92.4, 94.3, 89.7, 91.5, 93.7, 95.2, 90.8, 92.1, 96.5],\n    \"RTE\": [71.6, 79.1, 67.8, 75.4, 78.2, 83.6, 72.5, 73.9, 86.0],\n    \"CoLA\": [60.3, 68.4, 58.6, 65.7, 70.2, 73.8, 61.7, 63.9, 78.4],\n    \"STS-B\": [88.1, 91.5, 85.7, 90.1, 93.0, 94.5, 86.4, 88.7, 95.9],\n    \"MRPC\": [87.5, 89.2, 85.1, 88.7, 90.8, 92.4, 86.9, 88.3, 93.6],\n    \"QQP\": [89.8, 91.3, 87.4, 90.6, 92.7, 94.1, 88.2, 89.9, 96.0],\n    \"BoolQ\": [76.4, 80.3, 73.9, 78.5, 82.0, 85.6, 77.1, 78.4, 88.9],\n}\n\nylim = [50, 100]\nylabel = \"Performance Score (%)\"\nyticks = [50, 60, 70, 80, 90, 100]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(10, 8))\n\n# Create subplots for each category\nn_rows = 3\nn_cols = 3\nsubplot_idx = 1\nfor category, score in scores.items():\n    ax = plt.subplot(n_rows, n_cols, subplot_idx)\n    subplot_idx += 1\n\n    # Create bar chart\n    x = np.arange(len(categories))\n    ax.bar(\n        x,\n        score,\n        color=[\n            \"#697ac7\",\n            \"#8598dd\",\n            \"#a0b4eb\",\n            \"#cdd7ea\",\n            \"#dddcdc\",\n            \"#e5d1c5\",\n            \"#e5d1c5\",\n            \"#e5beaa\",\n            \"#dba38d\",\n            \"#c98371\",\n            \"#b25f55\",\n        ],\n    )\n\n    # Add data labels\n    for j, val in enumerate(score):\n        ax.text(j, val + 1, f\"{val}\", ha=\"center\", va=\"bottom\", fontsize=6)\n\n    # Set title and labels\n    ax.set_title(category)\n    ax.set_xticks(x)\n    ax.set_xticklabels(categories, rotation=45, ha=\"right\", fontsize=6)\n    ax.set_ylim(ylim)\n    ax.set_ylabel(ylabel)\n    ax.set_yticks(yticks)\n\n    plt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n    # Add y grid\n    plt.gca().yaxis.grid(True)\n    plt.gca().set_axisbelow(True)\n\n    ax = plt.gca()\n    ax.spines[\"top\"].set_color(\"gray\")\n    ax.spines[\"right\"].set_color(\"gray\")\n    ax.spines[\"bottom\"].set_color(\"gray\")\n    ax.spines[\"left\"].set_color(\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('bar_43.pdf', bbox_inches='tight')"}
{"idx": "bar_44", "instruction": "There is a reference image for you and I also have a set of data about the performance of GPT-3.5-Turbo and GPT-4 across various categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Placeholder data\ncategories = [\n\"Healthcare\",\n\"Finance\",\n\"Education\",\n\"E-commerce\",\n\"Technology\",\n\"Gaming\",\n\"Manufacturing\",\n\"Retail\",\n\"Logistics\",\n\"Real Estate\",\n\"Legal\",\n\"Supply Chain\",\n\"Insurance\",\n\"Travel\",\n\"Automotive\",\n\"Telecommunications\",\n\"Media\",\n\"Hospitality\",\n\"Infrastructure\",\n\"Social Services\"\n]\ngpt_3_5_turbo_values = [25, 18, 29, 22, 27, 15, 23, 19, 21, 20, 24, 26, 17, 28, 16, 30, 22, 25, 18, 20]\ngpt_4_values = [15, 12, 19, 17, 14, 10, 13, 11, 16, 18, 14, 15, 12, 16, 11, 17, 13, 15, 10, 14]\n# Bar width\nbar_width = 0.6\n\n# Positions of the bars on the x-axis\nr = np.arange(len(categories))\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Placeholder data\ncategories = [\n    \"Healthcare\",\n    \"Finance\",\n    \"Education\",\n    \"E-commerce\",\n    \"Technology\",\n    \"Gaming\",\n    \"Manufacturing\",\n    \"Retail\",\n    \"Logistics\",\n    \"Real Estate\",\n    \"Legal\",\n    \"Supply Chain\",\n    \"Insurance\",\n    \"Travel\",\n    \"Automotive\",\n    \"Telecommunications\",\n    \"Media\",\n    \"Hospitality\",\n    \"Infrastructure\",\n    \"Social Services\"\n]\ngpt_3_5_turbo_values = [25, 18, 29, 22, 27, 15, 23, 19, 21, 20, 24, 26, 17, 28, 16, 30, 22, 25, 18, 20]\ngpt_4_values = [15, 12, 19, 17, 14, 10, 13, 11, 16, 18, 14, 15, 12, 16, 11, 17, 13, 15, 10, 14]\n# Bar width\nbar_width = 0.6\n\n# Positions of the bars on the x-axis\nr = np.arange(len(categories))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot the bars\nax.bar(\n    r,\n    gpt_3_5_turbo_values,\n    bottom=gpt_4_values,\n    color=\"blue\",\n    width=bar_width,\n    label=\"GPT-3.5-Turbo\",\n)\nax.bar(r, gpt_4_values, color=\"orange\", width=bar_width, label=\"GPT-4\")\n\n# Add labels, title, and legend\nax.set_xlabel(\"Categories\")\nax.set_ylabel(\"Non-valid NLAs\")\nax.set_xticks(r)\nax.set_xticklabels(categories, rotation=45, ha=\"right\")\nax.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout\nplt.tight_layout()\nplt.savefig('bar_44.pdf', bbox_inches='tight')"}
{"idx": "bar_46", "instruction": "There is a reference image for you and I also have a set of data about social media market share. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmodels = [\"Pinterest\", \"LinkedIn\", \"Snapchat\", \"Twitter\", \"TikTok\", \"Instagram\", \"Facebook\"]\npercentages = [5.2, 6.5, 8.3, 15.2, 17.8, 21.4, 25.6]\ntitle = \"Social Media Market Share\"\nxlabel = \"Platform\"\nylabel = \"Market Share (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodels = [\"Pinterest\", \"LinkedIn\", \"Snapchat\", \"Twitter\", \"TikTok\", \"Instagram\", \"Facebook\"]\npercentages = [5.2, 6.5, 8.3, 15.2, 17.8, 21.4, 25.6]\ntitle = \"Social Media Market Share\"\nxlabel = \"Platform\"\nylabel = \"Market Share (%)\"\nylim = [0, 30]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and bar chart\nplt.figure(figsize=(10, 6))\nbars = plt.bar(models, percentages, color=\"skyblue\")\n\n# Add percentage labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(\n        bar.get_x() + bar.get_width() / 2, yval, f\"{yval}%\", ha=\"center\", va=\"bottom\"\n    )\n\n# Set chart title and labels\nplt.title(title)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Set y-axis range and gridlines\nplt.ylim(ylim)\nplt.grid(axis=\"both\", linestyle=\"--\", alpha=0.7)\n\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_46.pdf', bbox_inches='tight')"}
{"idx": "bar_47", "instruction": "There is a reference image for you and I also have a set of data about sports team performances. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the bar charts\ncategories = [\"Basketball\", \"Soccer\", \"Tennis\", \"Baseball\"]\nwin = [40, 35, 50, 30, 55, 60, 35, 45, 50, 40, 65, 55, 60, 70, 50, 55]\ntie = [30, 40, 30, 40, 25, 20, 40, 35, 30, 25, 20, 25, 20, 15, 20, 25]\nlose = [30, 25, 20, 30, 20, 20, 25, 20, 20, 35, 15, 20, 20, 15, 30, 20]\n\nlabels = [\"Win\", \"Tie\", \"Lose\"]\ntitles = [\"Basketball Season Performance\", \"Soccer League Results\", \"Tennis Match Outcomes\", \"Baseball Game Statistics\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 13.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar charts\ncategories = [\"Basketball\", \"Soccer\", \"Tennis\", \"Baseball\"]\nwin = [40, 35, 50, 30, 55, 60, 35, 45, 50, 40, 65, 55, 60, 70, 50, 55]\ntie = [30, 40, 30, 40, 25, 20, 40, 35, 30, 25, 20, 25, 20, 15, 20, 25]\nlose = [30, 25, 20, 30, 20, 20, 25, 20, 20, 35, 15, 20, 20, 15, 30, 20]\n\nlabels = [\"Win\", \"Tie\", \"Lose\"]\ntitles = [\"Basketball Season Performance\", \"Soccer League Results\", \"Tennis Match Outcomes\", \"Baseball Game Statistics\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with custom size\nfig, axes = plt.subplots(2, 2, figsize=(13, 6))\n\n\n# Function to create a bar chart\ndef create_bar_chart(ax, win, tie, lose, title):\n    bar_width = 0.5\n    indices = np.arange(len(categories))\n\n    ax.barh(indices, win, bar_width, color=\"#9e2621\", label=labels[0])\n    ax.barh(indices, tie, bar_width, left=win, color=\"#ea7a5c\", label=labels[1])\n    ax.barh(\n        indices, lose, bar_width, left=np.add(win, tie), color=\"#fae6da\", label=labels[2]\n    )\n\n    ax.set_yticks(indices)\n    ax.set_yticklabels(categories)\n    ax.invert_yaxis()  # labels read top-to-bottom\n    ax.set_title(title)\n    ax.set_xlim(0, 100)\n\n    for i, (w, t, l) in enumerate(zip(win, tie, lose)):\n        ax.text(w / 2, i, f\"{w}%\", ha=\"center\", va=\"center\", color=\"white\")\n        ax.text(w + t / 2, i, f\"{t}%\", ha=\"center\", va=\"center\", color=\"black\")\n        ax.text(w + t + l / 2, i, f\"{l}%\", ha=\"center\", va=\"center\", color=\"black\")\n        for spine in ax.spines.values():\n            spine.set_visible(False)\n        ax.set_yticklabels(categories, rotation=45)\n\n\n# Create each bar chart\ncreate_bar_chart(\n    axes[0, 0], win[:4], tie[:4], lose[:4],titles[0]\n)\ncreate_bar_chart(\n    axes[1, 0], win[4:8], tie[4:8], lose[4:8], titles[1]\n)\ncreate_bar_chart(\n    axes[0, 1], win[8:12], tie[8:12], lose[8:12], titles[2]\n)\ncreate_bar_chart(\n    axes[1, 1], win[12:], tie[12:], lose[12:], titles[3]\n)\n\n# Add a legend\nhandles, labels = axes[0, 0].get_legend_handles_labels()\nfig.legend(handles, labels, loc=\"lower center\", ncol=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout(rect=[0, 0.05, 1, 1])\nplt.savefig('bar_47.pdf', bbox_inches='tight')"}
{"idx": "bar_49", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics such as traffic volume, average speed, accident rate, fuel consumption, and emissions by time of day. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ntime_of_day = [\"Morning\", \"Midday\", \"Afternoon\", \"Night\"]\ntraffic_volume = [120, 80, 150, 50] # Vehicles per hour\naverage_speed = [30, 45, 35, 55] # Speed in miles per hour\naccident_rate = [12, 8, 5, 3] # Accidents per hour\nfuel_consumption = [50, 40, 60, 30] # Gallons per hour\nemissions = [100, 80, 150, 60] # Emissions in grams per hour\n\nlabels = [\"Traffic Volume\", \"Average Speed\", \"Accident Rate\", \"Fuel Consumption\", \"Emissions\"]\nxlabel = \"Time of Day\"\nylabel = \"Values\"\ntitle = \"Transportation Metrics by Time of Day\"\nyaxhline = 100 # Highlighting the maximum traffic volume as a reference line\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ntime_of_day = [\"Morning\", \"Midday\", \"Afternoon\", \"Night\"]\ntraffic_volume = [120, 80, 150, 50]  # Vehicles per hour\naverage_speed = [30, 45, 35, 55]  # Speed in miles per hour\naccident_rate = [12, 8, 5, 3]  # Accidents per hour\nfuel_consumption = [50, 40, 60, 30]  # Gallons per hour\nemissions = [100, 80, 150, 60]  # Emissions in grams per hour\n\nlabels = [\"Traffic Volume\", \"Average Speed\", \"Accident Rate\", \"Fuel Consumption\", \"Emissions\"]\nxlabel = \"Time of Day\"\nylabel = \"Values\"\ntitle = \"Transportation Metrics by Time of Day\"\nyaxhline = 100  # Highlighting the maximum traffic volume as a reference line\nylim = [0, 200]\nyticks = np.arange(0, 200, 20)\n\n# Bar width\nbar_width = 0.2\n\n# Positions of bars on x-axis\nind = np.arange(len(time_of_day))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure size\nplt.figure(figsize=(8, 6))\n\n# Plotting\nplt.bar(ind, traffic_volume, width=bar_width, label=labels[0], color=\"#65bae7\")\nplt.bar(\n    ind,\n    average_speed,\n    width=bar_width,\n    label=labels[1],\n    color=\"#acdcf2\",\n    hatch=\"//\",\n    bottom=traffic_volume,\n)\nplt.bar(\n    ind + bar_width, accident_rate, width=bar_width, label=labels[2], color=\"#eaa86b\"\n)\nplt.bar(\n    ind + bar_width,\n    fuel_consumption,\n    width=bar_width,\n    label=labels[3],\n    color=\"#f4d3b4\",\n    hatch=\"/\",\n    bottom=accident_rate,\n)\n# Highlighting the most significant improvement\ndistance = 0.05\nplt.annotate(\n    \"\",\n    xy=(ind[0] + bar_width, 55),\n    xytext=(ind[0] + bar_width, 100),\n    arrowprops=dict(facecolor=\"black\", shrink=0.02),\n)\nplt.text(ind[0] + bar_width + distance, 70, \"29%\")\nplt.annotate(\n    \"\",\n    xy=(ind[3], 50),\n    xytext=(ind[3], 100),\n    arrowprops=dict(facecolor=\"black\", shrink=0.02),\n    va=\"center\",\n)\nplt.text(ind[3] - distance * 6, 70, \"29%\")\nplt.annotate(\n    \"\",\n    xy=(ind[3] + bar_width, 30),\n    xytext=(ind[3] + bar_width, 100),\n    arrowprops=dict(facecolor=\"black\", shrink=0.02),\n)\nplt.text(ind[3] + bar_width + distance, 70, \"87%\")\nplt.annotate(\n    \"\",\n    xy=(ind[3] + bar_width * 2, 30),\n    xytext=(ind[3] + bar_width * 2, 10),\n    arrowprops=dict(facecolor=\"red\", shrink=0.02),\n    ha=\"center\",\n)\nplt.text(ind[3] + bar_width * 2 + distance, 20, \"180%\")\nplt.axhline(y=yaxhline, color=\"blue\", linestyle=\"--\", linewidth=2)\n# X-axis labels\nplt.xticks(ind + bar_width / 2, time_of_day)\n\n# Y-axis labels\nplt.ylim(ylim)\nplt.yticks(yticks)\n\n# Legend\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.2), ncol=2)\n\n# Grid lines\nplt.grid(axis=\"y\")\n\n# Labels and Title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_49.pdf', bbox_inches='tight')"}
{"idx": "bar_50", "instruction": "There is a reference image for you and I also have a set of data about transportation modes and their associated metrics such as the number of vehicles, fuel efficiency, average speed, annual miles traveled, and maintenance cost. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\ncategories = [\"Car\", \"Bus\", \"Bicycle\"]\nvalues1 = [150, 200, 300] # Number of vehicles\nvalues2 = [251, 180, 0] # Fuel efficiency in miles per gallon (mpg) or equivalent\nvalues3 = [610, 430, 150] # Average speed in mph\nvalues4 = [500, 200, 500] # Annual miles traveled per mode\nvalues5 = [100, 500, 200] # Maintenance cost per year in USD\n\nvalues1minus = [-100, -750, -280] # Lower bound for the number of vehicles\nvalues2minus = [-200, -300, 0] # Lower bound for fuel efficiency\nvalues3minus = [-550, -305, -120] # Lower bound for average speed\nvalues4minus = [-450, -180, -450] # Lower bound for annual miles traveled\nvalues5minus = [-200, -450, -318] # Lower bound for maintenance cost\n\n# Set up the bar width\nbarWidth = 0.15\n\n# Set position of bar on X axis\nr1 = np.arange(len(values1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\nr5 = [x + barWidth for x in r4]\n\nlabels = [\"Vehicles\", \"Efficiency\", \"Speed\", \"Miles\", \"Cost\"]\nxlabel = \"Transportation Modes\"\nylabel = \"Values\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Car\", \"Bus\", \"Bicycle\"]\nvalues1 = [150, 200, 300]  # Number of vehicles\nvalues2 = [251, 180, 0]  # Fuel efficiency in miles per gallon (mpg) or equivalent\nvalues3 = [610, 430, 150]  # Average speed in mph\nvalues4 = [500, 200, 500]  # Annual miles traveled per mode\nvalues5 = [100, 500, 200]  # Maintenance cost per year in USD\n\nvalues1minus = [-100, -750, -280]  # Lower bound for the number of vehicles\nvalues2minus = [-200, -300, 0]  # Lower bound for fuel efficiency\nvalues3minus = [-550, -305, -120]  # Lower bound for average speed\nvalues4minus = [-450, -180, -450]  # Lower bound for annual miles traveled\nvalues5minus = [-200, -450, -318]  # Lower bound for maintenance cost\n\n# Set up the bar width\nbarWidth = 0.15\n\n# Set position of bar on X axis\nr1 = np.arange(len(values1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\nr5 = [x + barWidth for x in r4]\n\nlabels = [\"Vehicles\", \"Efficiency\", \"Speed\", \"Miles\", \"Cost\"]\nxlabel = \"Transportation Modes\"\nylabel = \"Values\"\nyticks = np.arange(-800, 601, 200)\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure size\nplt.figure(figsize=(6, 5))\n\n# Make the plot\nplt.bar(r1, values1, color=\"#f6c3cb\", width=barWidth, edgecolor=\"black\", label=\"E16.6\")\nplt.bar(r2, values2, color=\"#fbe5c8\", width=barWidth, edgecolor=\"black\", label=\"L26.8\")\nplt.bar(r3, values3, color=\"#55b0aa\", width=barWidth, edgecolor=\"black\", label=\"D19.7\")\nplt.bar(r4, values4, color=\"#6f94e7\", width=barWidth, edgecolor=\"black\", label=\"L22.2\")\nplt.bar(r5, values5, color=\"#e6e6f9\", width=barWidth, edgecolor=\"black\", label=\"L22.2\")\nplt.bar(\n    r1,\n    values1minus,\n    color=\"#f6c3cb\",\n    width=barWidth,\n    edgecolor=\"grey\",\n    label=labels[0],\n    alpha=0.5,\n)\nplt.bar(\n    r2,\n    values2minus,\n    color=\"#fbe5c8\",\n    width=barWidth,\n    edgecolor=\"grey\",\n    label=labels[1],\n    alpha=0.5,\n)\nplt.bar(\n    r3,\n    values3minus,\n    color=\"#55b0aa\",\n    width=barWidth,\n    edgecolor=\"grey\",\n    label=labels[2],\n    alpha=0.5,\n)\nplt.bar(\n    r4,\n    values4minus,\n    color=\"#6f94e7\",\n    width=barWidth,\n    edgecolor=\"grey\",\n    label=labels[3],\n    alpha=0.5,\n)\nplt.bar(\n    r5,\n    values5minus,\n    color=\"#e6e6f9\",\n    width=barWidth,\n    edgecolor=\"grey\",\n    label=labels[4],\n    alpha=0.5,\n)\n\n# Add text on the top of each bar\nfor i in range(len(r1)):\n    plt.text(\n        r1[i], values1[i] - 1, str(values1[i]), ha=\"center\", va=\"top\", rotation=-90\n    )\n    plt.text(\n        r2[i], values2[i] - 1, str(values2[i]), ha=\"center\", va=\"top\", rotation=-90\n    )\n    plt.text(\n        r3[i], values3[i] - 1, str(values3[i]), ha=\"center\", va=\"top\", rotation=-90\n    )\n    plt.text(\n        r4[i], values4[i] - 1, str(values4[i]), ha=\"center\", va=\"top\", rotation=-90\n    )\n    plt.text(\n        r5[i], values5[i] - 1, str(values5[i]), ha=\"center\", va=\"top\", rotation=-90\n    )\n    plt.text(\n        r1[i],\n        values1minus[i] + 1,\n        str(-values1minus[i]),\n        ha=\"center\",\n        va=\"bottom\",\n        rotation=-90,\n    )\n    plt.text(\n        r2[i],\n        values2minus[i] + 1,\n        str(-values2minus[i]),\n        ha=\"center\",\n        va=\"bottom\",\n        rotation=-90,\n    )\n    plt.text(\n        r3[i],\n        values3minus[i] + 1,\n        str(-values3minus[i]),\n        ha=\"center\",\n        va=\"bottom\",\n        rotation=-90,\n    )\n    plt.text(\n        r4[i],\n        values4minus[i] + 1,\n        str(-values4minus[i]),\n        ha=\"center\",\n        va=\"bottom\",\n        rotation=-90,\n    )\n    plt.text(\n        r5[i],\n        values5minus[i] - 1,\n        str(-values5minus[i]),\n        ha=\"center\",\n        va=\"top\",\n        rotation=-90,\n    )\n\n# Add xticks on the middle of the group bars\nplt.xlabel(xlabel)\nplt.xticks([r + 2 * barWidth for r in range(len(values1))], categories)\nplt.yticks(yticks)\n# Create legend & Show graphic\nplt.ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_50.pdf', bbox_inches='tight')"}
{"idx": "bar_52", "instruction": "There is a reference image for you and I also have a set of data about Customer Service Interactions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\n# Categories and data for a new field: Customer Service Interactions\ncategories = [\n\"Product Inquiry\",\n\"Order Issue\",\n\"Complaint\",\n\"Returns\",\n\"Technical Support\",\n\"Billing Question\",\n\"Feedback\",\n]\nsynthetic_data = [\n-9,\n-27,\n-20,\n-12,\n-18,\n-22,\n-15,\n] # Add negative sign to synthetic data\nhuman_data = [18, 30, 14, 8, 20, 25, 12]\nlabels = [\"synthetic data\", \"human-authored data\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\n# Categories and data for a new field: Customer Service Interactions\ncategories = [\n    \"Product Inquiry\",\n    \"Order Issue\",\n    \"Complaint\",\n    \"Returns\",\n    \"Technical Support\",\n    \"Billing Question\",\n    \"Feedback\",\n]\nsynthetic_data = [\n    -9,\n    -27,\n    -20,\n    -12,\n    -18,\n    -22,\n    -15,\n]  # Add negative sign to synthetic data\nhuman_data = [18, 30, 14, 8, 20, 25, 12]\nlabels = [\"synthetic data\", \"human-authored data\"]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))  # 432x432 pixels\ncolors_human = [\n    \"#75147c\",\n    \"#685bc6\",\n    \"#6e9d9f\",\n    \"#4a895c\",\n    \"#c3884c\",\n    \"#c56f33\",\n    \"#ec5528\",\n]\ncolors_synthetic = [\n    \"#d4a3da\",\n    \"#7869e6\",\n    \"#b6d7e4\",\n    \"#72cecb\",\n    \"#f9dcbd\",\n    \"#e9a86c\",\n    \"#ef865c\",\n]\n# Plot horizontal bar chart\nax.barh(\n    categories,\n    synthetic_data,\n    color=colors_synthetic,\n    edgecolor=\"black\",\n    label=labels[0],\n)\nax.barh(\n    categories,\n    human_data,\n    left=0,\n    color=colors_human,\n    edgecolor=\"black\",\n    label=labels[1],\n)  # Set left to 0 for human data\n\n# Add data labels\nfor i, (syn_val, hum_val) in enumerate(zip(synthetic_data, human_data)):\n    ax.text(\n        syn_val, i, f\"{abs(syn_val)}%\", va=\"center\", ha=\"right\", color=\"black\"\n    )  # Use absolute value for synthetic data\n    ax.text(hum_val, i, f\"{hum_val}%\", va=\"center\", ha=\"left\", color=\"black\")\n\n# Remove y-axis tick marks\nax.tick_params(axis=\"y\", which=\"both\", left=False)\n\n# Set x-axis limits\nax.set_xlim(\n    min(synthetic_data) - 10, max(human_data) + 10\n)  # Set x-axis limits to include negative values\nax.set_xticks([])\n# Hide left and right spines\nax.spines[\"left\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\n# Draw a vertical line at x=0\nax.axvline(0, color=\"black\")\n\n# Add text to x=0\nax.text(-4, 7, labels[0], ha=\"right\", va=\"bottom\")\nax.text(4, 7, labels[1], ha=\"left\", va=\"bottom\")\n\n# Invert y-axis\nax.invert_yaxis()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('bar_52.pdf', bbox_inches='tight')"}
{"idx": "bar_53", "instruction": "There is a reference image for you and I also have a set of data about the distribution of words in the field of Education. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting in the field of Education\nwords = [\n\"student\",\n\"teacher\",\n\"classroom\",\n\"exam\",\n\"assignment\",\n\"lecture\",\n\"course\",\n\"curriculum\",\n\"grade\",\n\"syllabus\",\n\"homework\",\n\"textbook\",\n\"semester\",\n\"quiz\",\n\"project\",\n\"school\",\n\"university\",\n\"degree\",\n\"diploma\",\n]\nhuman_distribution = [\n0.18,\n0.16,\n0.14,\n0.12,\n0.1,\n0.08,\n0.06,\n0.04,\n0.06,\n0.08,\n0.05,\n0.04,\n0.02,\n0.01,\n0.03,\n0.02,\n0.01,\n0.02,\n0.01,\n]\nmodel_distribution = [\n0.1,\n0.09,\n0.08,\n0.07,\n0.06,\n0.12,\n0.1,\n0.08,\n0.06,\n0.05,\n0.04,\n0.03,\n0.02,\n0.04,\n0.03,\n0.02,\n0.01,\n0.02,\n0.01,\n]\n\nx = np.arange(len(words)) # the label locations\nlabels = [\"Human Distribution (Prob. mass shown:1.00)\", \"Model Distribution (Prob. mass shown:0.80)\"]\nylabel = \"Probability\"\ntitle = \"Context: The student completed the\"\nxlabel = \"Word\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting in the field of Education\nwords = [\n    \"student\",\n    \"teacher\",\n    \"classroom\",\n    \"exam\",\n    \"assignment\",\n    \"lecture\",\n    \"course\",\n    \"curriculum\",\n    \"grade\",\n    \"syllabus\",\n    \"homework\",\n    \"textbook\",\n    \"semester\",\n    \"quiz\",\n    \"project\",\n    \"school\",\n    \"university\",\n    \"degree\",\n    \"diploma\",\n]\nhuman_distribution = [\n    0.18,\n    0.16,\n    0.14,\n    0.12,\n    0.1,\n    0.08,\n    0.06,\n    0.04,\n    0.06,\n    0.08,\n    0.05,\n    0.04,\n    0.02,\n    0.01,\n    0.03,\n    0.02,\n    0.01,\n    0.02,\n    0.01,\n]\nmodel_distribution = [\n    0.1,\n    0.09,\n    0.08,\n    0.07,\n    0.06,\n    0.12,\n    0.1,\n    0.08,\n    0.06,\n    0.05,\n    0.04,\n    0.03,\n    0.02,\n    0.04,\n    0.03,\n    0.02,\n    0.01,\n    0.02,\n    0.01,\n]\n\nx = np.arange(len(words))  # the label locations\nlabels = [\"Human Distribution (Prob. mass shown:1.00)\", \"Model Distribution (Prob. mass shown:0.80)\"]\nylabel = \"Probability\"\ntitle = \"Context: The student completed the\"\nxlabel = \"Word\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(\n    figsize=(10, 8)\n)  # Adjust the figure size to match the original image's dimensions\n\n# Create the bars\nfor i in range(len(words)):\n    ax.bar(\n        x[i],\n        human_distribution[i],\n        color=\"#FFA07A\",\n        label=labels[0] if i == 0 else \"\",\n        hatch=\"///\",\n        edgecolor=\"black\",\n    )\n    ax.bar(\n        x[i],\n        model_distribution[i],\n        bottom=human_distribution[i],\n        color=\"#87CEFA\",\n        label=labels[1] if i == 0 else \"\",\n        alpha=0.5,\n        hatch=\"..\",\n        edgecolor=\"black\",\n    )\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel(ylabel)\nax.set_title(title)\nax.set_xticks(x)\nax.set_xticklabels(words, rotation=90, ha=\"center\")\nax.set_xlabel(xlabel)\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\nplt.savefig('bar_53.pdf', bbox_inches='tight')"}
{"idx": "bar_54", "instruction": "There is a reference image for you and I also have a set of data about the probability of breakthroughs in various medical specialties. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\"Cardiology\", \"Neurology\", \"Orthopedics\", \"Pediatrics\", \"Dermatology\"]\nvalues = [25, 32, 28, 20, 15]\ntitles = \"Probability of Breakthroughs in Medical Specialties\"\nxlabel = \"Probability of Breakthrough\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 2.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Cardiology\", \"Neurology\", \"Orthopedics\", \"Pediatrics\", \"Dermatology\"]\nvalues = [25, 32, 28, 20, 15]\ntitles = \"Probability of Breakthroughs in Medical Specialties\"\nxlabel = \"Probability of Breakthrough\"\n# Create color map\ncolors = cm.viridis(np.linspace(0, 1, len(values)))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nplt.figure(figsize=(6, 2))  # Adjusting figure size to match original image dimensions\nplt.barh(categories, values, color=colors)\n\n# Adding title and labels\nplt.title(titles)\nplt.xlabel(xlabel)\nxticks = []\nxlabels = []\n# Apply the xticks and labels\nplt.xticks(xticks, xlabels)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('bar_54.pdf', bbox_inches='tight')"}
{"idx": "bar_55", "instruction": "There is a reference image for you and I also have a set of data about sports activities participation rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# New field: Sports Activities\nactivities = [\n\"Running\",\n\"Swimming\",\n\"Cycling\",\n\"Weightlifting\",\n\"Yoga\",\n\"Basketball\",\n\"Tennis\",\n\"Soccer\",\n\"Hiking\",\n\"Dancing\",\n]\n\n# Approximate participation rates in percentage\nparticipation_rates = [15.0, 12.5, 10.5, 9.0, 8.0, 7.5, 6.5, 6.0, 5.5, 4.5]\nxlabel = \"Participation Rate (%)\"\nylabel = \"Activity\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# New field: Sports Activities\nactivities = [\n    \"Running\",\n    \"Swimming\",\n    \"Cycling\",\n    \"Weightlifting\",\n    \"Yoga\",\n    \"Basketball\",\n    \"Tennis\",\n    \"Soccer\",\n    \"Hiking\",\n    \"Dancing\",\n]\n\n# Approximate participation rates in percentage\nparticipation_rates = [15.0, 12.5, 10.5, 9.0, 8.0, 7.5, 6.5, 6.0, 5.5, 4.5]\nxlabel = \"Participation Rate (%)\"\nylabel = \"Activity\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nplt.figure(figsize=(8, 8))  # Adjust figure size\nplt.barh(activities, participation_rates, color=\"lightcoral\", edgecolor=\"gray\")\n\n# Adding data labels\nfor index, value in enumerate(participation_rates):\n    plt.text(value, index, f\" {value}%\", va=\"center\")\n# Set labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"bottom\"].set_visible(False)\nplt.gca().spines[\"left\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_55.pdf', bbox_inches='tight')"}
{"idx": "bar_57", "instruction": "There is a reference image for you and I also have a set of data about government spending in different sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategories = [\n\"Healthcare Spending\",\n\"Education Expenditure\",\n\"Defense Budget\",\n\"Technology Investment\",\n\"Public Infrastructure\",\n\"Renewable Energy\",\n\"Social Welfare\",\n][::-1]\nus_data = [17.7, 6.0, 3.4, 8.5, 10.2, 12.1, 14.3][::-1]\neu_data = [7.0, 5.5, 2.0, 7.8, 9.0, 14.5, 12.7][::-1]\nchina_data = [5.3, 4.2, 1.9, 16.0, 13.5, 19.0, 9.8][::-1]\nindia_data = [3.5, 3.1, 2.4, 9.2, 8.7, 15.2, 8.5][::-1]\nbrazil_data = [8.4, 4.6, 1.5, 5.9, 7.5, 13.1, 10.1][::-1]\nlabels = [\"US\", \"EU\", \"China\", \"India\", \"Brazil\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories = [\n    \"Healthcare Spending\",\n    \"Education Expenditure\",\n    \"Defense Budget\",\n    \"Technology Investment\",\n    \"Public Infrastructure\",\n    \"Renewable Energy\",\n    \"Social Welfare\",\n][::-1]\nus_data = [17.7, 6.0, 3.4, 8.5, 10.2, 12.1, 14.3][::-1]\neu_data = [7.0, 5.5, 2.0, 7.8, 9.0, 14.5, 12.7][::-1]\nchina_data = [5.3, 4.2, 1.9, 16.0, 13.5, 19.0, 9.8][::-1]\nindia_data = [3.5, 3.1, 2.4, 9.2, 8.7, 15.2, 8.5][::-1]\nbrazil_data = [8.4, 4.6, 1.5, 5.9, 7.5, 13.1, 10.1][::-1]\nlabels = [\"US\", \"EU\", \"China\", \"India\", \"Brazil\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Stacked Bar Chart\nfig, ax = plt.subplots(\n    figsize=(8, 5)\n)  # Adjusted to match the original image's dimensions\nbar_width = 0.5\ny_pos = range(len(categories))\n\nax.barh(y_pos, us_data, bar_width, color=\"tomato\", label=labels[0])\nax.barh(y_pos, eu_data, bar_width, left=us_data, color=\"wheat\", label=labels[1])\nax.barh(\n    y_pos,\n    china_data,\n    bar_width,\n    left=[i + j for i, j in zip(us_data, eu_data)],\n    color=\"#81acce\",\n    label=labels[2],\n)\nax.barh(\n    y_pos,\n    india_data,\n    bar_width,\n    left=[i + j + k for i, j, k in zip(us_data, eu_data, china_data)],\n    color=\"darkseagreen\",\n    label=labels[3],\n)\nax.barh(\n    y_pos,\n    brazil_data,\n    bar_width,\n    left=[\n        i + j + k + l for i, j, k, l in zip(us_data, eu_data, china_data, india_data)\n    ],\n    color=\"cornflowerblue\",\n    label=labels[4],\n)\n\n# Labels and Legend\nax.set_xticks(np.arange(0, 80, 10))\nax.set_yticks(y_pos)\nax.grid(axis=\"x\", color=\"gray\", linestyle=\"--\")\nax.set_axisbelow(True)\nax.set_yticklabels(categories)\nax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.2), ncols=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_57.pdf', bbox_inches='tight')"}
{"idx": "bar_58", "instruction": "There is a reference image for you and I also have a set of data about city satisfaction ratings across different categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategory_names = [\"Very High\", \"High\", \"Medium\", \"Low\", \"Very Low\"]\nresults = {\n\"Miami\": [12, 18, 20, 25, 25],\n\"Seattle\": [22, 30, 27, 10, 11],\n\"San Francisco\": [33, 35, 10, 25, 17],\n\"Denver\": [28, 13, 15, 28, 24],\n\"Boston\": [19, 31, 28, 15, 42],\n\"Atlanta\": [17, 21, 11, 33, 28],\n}\nxvline = 0\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategory_names = [\"Very High\", \"High\", \"Medium\", \"Low\", \"Very Low\"]\nresults = {\n    \"Miami\": [12, 18, 20, 25, 25],\n    \"Seattle\": [22, 30, 27, 10, 11],\n    \"San Francisco\": [33, 35, 10, 25, 17],\n    \"Denver\": [28, 13, 15, 28, 24],\n    \"Boston\": [19, 31, 28, 15, 42],\n    \"Atlanta\": [17, 21, 11, 33, 28],\n}\nxlim = [-120, 120]\nxticks = np.arange(-120, 121, 20)\nxvline = 0\n\ndef create_bar_chart(results, category_names):\n    fig, ax = plt.subplots(figsize=(10, 6))\n\n    labels = list(results.keys())\n    data = np.array(list(results.values()))\n    data_cum = data.cumsum(axis=1)\n    middle_index = data.shape[1] // 2\n    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index] / 2\n\n    # Color Mapping\n    category_colors = plt.get_cmap(\"coolwarm_r\")(np.linspace(0.15, 0.85, data.shape[1]))\n\n    # Plot Bars\n    for i, (colname, color) in enumerate(zip(category_names, category_colors)):\n        widths = data[:, i]\n        starts = data_cum[:, i] - widths - offsets\n        rects = ax.barh(\n            labels,\n            widths,\n            left=starts,\n            height=0.5,\n            label=colname,\n            color=color,\n            edgecolor=\"black\",\n        )\n\n    # Add Zero Reference Line\n    ax.axvline(xvline, linestyle=\"--\", color=\"black\", alpha=0.25)\n\n    # X Axis\n    ax.set_xlim(xlim)\n    ax.set_xticks(xticks)\n    ax.xaxis.set_major_formatter(lambda x, pos: str(abs(int(x))))\n\n    # Y Axis\n    ax.invert_yaxis()\n\n    # Remove spines\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n\n    # Legend\n    ax.legend(ncol=len(category_names), bbox_to_anchor=(0.5, 1.1), loc=\"upper center\")\n\n    # Set Background Color\n    fig.set_facecolor(\"#FFFFFF\")\n\n    return fig, ax\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = create_bar_chart(results, category_names)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_58.pdf', bbox_inches='tight')"}
{"idx": "bar_59", "instruction": "There is a reference image for you and I also have a set of data about \"Autonomous vs. Human Driving Focus on Performance Metrics\". Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Set the seed for reproducibility\n\n# Data\ncategories = [\n\"Speed Limit Compliance\",\n\"Fuel Efficiency\",\n\"Lane Discipline\",\n\"Traffic Signal Obedience\",\n\"Parking Efficiency\",\n\"Carpool Participation\",\n\"Accident Response Time\",\n]\ndifferences = [ 42 ,49 , 24 , 7, -30 ,57 ,-22]\ntitle = \"Relative Difference in Autonomous vs. Human Driving Focus on Performance Metrics\"\nxlabel = \"Difference (%)\"\nylabel = \"Performance Metric\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(4)\n\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Set the seed for reproducibility\n\n# Data\ncategories = [\n    \"Speed Limit Compliance\",\n    \"Fuel Efficiency\",\n    \"Lane Discipline\",\n    \"Traffic Signal Obedience\",\n    \"Parking Efficiency\",\n    \"Carpool Participation\",\n    \"Accident Response Time\",\n]\ndifferences = [ 42 ,49 , 24  , 7, -30 ,57 ,-22]\ntitle = \"Relative Difference in Autonomous vs. Human Driving Focus on Performance Metrics\"\nxlabel = \"Difference (%)\"\nylabel = \"Performance Metric\"\nxlim = [-80, 80]\nxticks = range(-80, 81, 20)\ncbarlabels = [\"Negative Differences\", \"Positive Differences\"]\ncolors = [\n    (\n        plt.cm.Reds(np.array(i) / min(differences))\n        if i < 0\n        else plt.cm.Greens(np.array(i) / max(differences))\n    )\n    for i in differences\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(categories, differences, color=colors)\n\n# Set title and labels\nax.set_title(title)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Set x-axis limits and labels\nax.set_xlim(xlim)\nax.set_xticks(xticks)\nax.xaxis.grid(True)\n\n# Create colorbars\ncbar1 = plt.colorbar(\n    plt.cm.ScalarMappable(norm=mcolors.Normalize(0, 80), cmap=\"Reds\"),\n    ax=ax,\n    orientation=\"vertical\",\n    pad=0.01,\n    aspect=20,\n)\ncbar2 = plt.colorbar(\n    plt.cm.ScalarMappable(norm=mcolors.Normalize(0, 80), cmap=\"Greens\"),\n    ax=ax,\n    orientation=\"vertical\",\n    pad=0.01,\n    aspect=20,\n)\ncbar1.set_label(cbarlabels[0])\ncbar2.set_label(cbarlabels[1])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('bar_59.pdf', bbox_inches='tight')"}
{"idx": "bar_61", "instruction": "There is a reference image for you and I also have a set of data about environmental sustainability metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategories = [\n\"Forest Coverage\",\n\"Air Quality Index\",\n\"Recycling Rate\",\n\"Water Conservation Initiatives\",\n]\nforest_coverage = [35, 48, 42, 39] # Example data in percentage\nair_quality_index = [75, 68, 80, 72] # Example data in AQI (lower is better)\nrecycling_rate = [55, 62, 58, 64] # Example data in percentage\nwater_conservation_initiatives = [20, 30, 25, 35] # Example data in percentage\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories = [\n    \"Forest Coverage\",\n    \"Air Quality Index\",\n    \"Recycling Rate\",\n    \"Water Conservation Initiatives\",\n]\nforest_coverage = [35, 48, 42, 39]  # Example data in percentage\nair_quality_index = [75, 68, 80, 72]  # Example data in AQI (lower is better)\nrecycling_rate = [55, 62, 58, 64]  # Example data in percentage\nwater_conservation_initiatives = [20, 30, 25, 35]  # Example data in percentage\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Stacked Bar Chart\nfig, ax = plt.subplots(figsize=(8, 5))\nbar_width = 0.5\ny_pos = range(len(categories))\n\nax.barh(\n    y_pos,\n    forest_coverage,\n    bar_width,\n    color=\"#d66555\",\n    edgecolor=\"#2a3b4d\",\n    hatch=\"*\",\n    label=\"Internet Penetration (%)\",\n)\nax.barh(\n    y_pos,\n    air_quality_index,\n    bar_width,\n    left=forest_coverage,\n    color=\"#88a27d\",\n    edgecolor=\"#2a3b4d\",\n    hatch=\"+\",\n    label=\"Smartphone Usage (%)\",\n)\nax.barh(\n    y_pos,\n    recycling_rate,\n    bar_width,\n    left=[i + j for i, j in zip(forest_coverage, air_quality_index)],\n    color=\"#a1b5ce\",\n    edgecolor=\"#2a3b4d\",\n    hatch=\"/\",\n    label=\"Research Investment (% of GDP)\",\n)\n\n# Labels and Legend\nax.set_xticks(np.arange(0, 350, 25))\nax.set_yticks(y_pos)\nax.grid(axis=\"x\", color=\"gray\", linestyle=\"--\")\nax.set_axisbelow(True)\nax.set_yticklabels(categories)\nax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.2), ncols=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_61.pdf', bbox_inches='tight')"}
{"idx": "bar_62", "instruction": "There is a reference image for you and I also have a set of data about cybersecurity threat levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\n# Redefining the data for cybersecurity threat levels\ncategories = [\n\"Phishing\",\n\"Malware\",\n\"Ransomware\",\n\"DDoS Attack\",\n\"Data Breach\",\n\"Insider Threat\",\n\"Zero-Day Exploit\",\n]\n\n# Adding negative sign to synthetic data to simulate higher threat scores (more negative = higher threat)\nsynthetic_data = [-12, -35, -28, -15, -18, -14, -16]\nhuman_data = [18, 32, 15, 8, 20, 22, 12]\n\nlabels = [\"Synthetic Threat Data\", \"Human-reported Threat Data\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\n# Redefining the data for cybersecurity threat levels\ncategories = [\n    \"Phishing\",\n    \"Malware\",\n    \"Ransomware\",\n    \"DDoS Attack\",\n    \"Data Breach\",\n    \"Insider Threat\",\n    \"Zero-Day Exploit\",\n]\n\n# Adding negative sign to synthetic data to simulate higher threat scores (more negative = higher threat)\nsynthetic_data = [-12, -35, -28, -15, -18, -14, -16]\nhuman_data = [18, 32, 15, 8, 20, 22, 12]\n\nlabels = [\"Synthetic Threat Data\", \"Human-reported Threat Data\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))  # 432x432 pixels\n\n# Define base colors\nbase_colors = [\n    \"#1f77b4\",\n    \"#ff7f0e\",\n    \"#2ca02c\",\n    \"#d62728\",\n    \"#9467bd\",\n    \"#8c564b\",\n    \"#e377c2\",\n]\n\n# Generate colors with different saturation\ncolors_human = base_colors\ncolors_synthetic = [\n    mcolors.to_rgba(color, alpha=0.5) for color in base_colors\n]  # Decrease saturation by changing alpha\n\n# Plot horizontal bar chart\nax.barh(categories, synthetic_data, color=colors_synthetic, label=labels[0])\nax.barh(\n    categories, human_data, left=0, color=colors_human, label=labels[1]\n)  # Set left to 0 for human data\n\n# Add data labels inside the bars\nfor i, (syn_val, hum_val) in enumerate(zip(synthetic_data, human_data)):\n    ax.text(\n        syn_val / 2, i, f\"{abs(syn_val)}%\", va=\"center\", ha=\"center\", color=\"white\"\n    )  # Use absolute value for synthetic data\n    ax.text(hum_val / 2, i, f\"{hum_val}%\", va=\"center\", ha=\"center\", color=\"white\")\n\n# Remove y-axis tick marks\nax.tick_params(axis=\"y\", which=\"both\", left=False)\n\n# Set x-axis limits\nax.set_xlim(\n    min(synthetic_data) - 10, max(human_data) + 10\n)  # Set x-axis limits to include negative values\nax.set_xticks([])\n# Hide left and right spines\nax.spines[\"left\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\n\n# Draw a vertical line at x=0\nax.axvline(0, color=\"black\")\n\n# Add text to x=0\nax.text(-4, 7, labels[0], ha=\"right\", va=\"bottom\")\nax.text(4, 7, labels[1], ha=\"left\", va=\"bottom\")\n\n# Invert y-axis\nax.invert_yaxis()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('bar_62.pdf', bbox_inches='tight')"}
{"idx": "bar_63", "instruction": "There is a reference image for you and I also have a set of data about the scores of various technologies over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategories = [\n\"Artificial Intelligence\",\n\"Blockchain\",\n\"Quantum Computing\",\n\"5G Technology\",\n\"Augmented Reality\",\n]\nscores_0 = [0.7, 0.5, 0.6, 0.4, 0.3]\nscores_20 = [0.75, 0.55, 0.5, 0.45, 0.35]\nscores_40 = [0.65, 0.6, 0.7, 0.35, 0.4]\nscores_60 = [0.8, 0.45, 0.75, 0.5, 0.25]\nlabels =[\"Score at Year 0\", \"Score at Year 20\", \"Score at Year 40\", \"Score at Year 60\"]\nxlabel = \"Scores\"\nylabel =\"Technologies\"\ntitle = \"Scores by Technology Over Time\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories = [\n    \"Artificial Intelligence\",\n    \"Blockchain\",\n    \"Quantum Computing\",\n    \"5G Technology\",\n    \"Augmented Reality\",\n]\nscores_0 = [0.7, 0.5, 0.6, 0.4, 0.3]\nscores_20 = [0.75, 0.55, 0.5, 0.45, 0.35]\nscores_40 = [0.65, 0.6, 0.7, 0.35, 0.4]\nscores_60 = [0.8, 0.45, 0.75, 0.5, 0.25]\nlabels =[\"Score at Year 0\", \"Score at Year 20\", \"Score at Year 40\", \"Score at Year 60\"]\nxlabel = \"Scores\"\nylabel =\"Technologies\"\ntitle = \"Scores by Technology Over Time\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Size of the plot\nplt.figure(figsize=(10, 8))\n\n# Adjust the position of the bars on the x-axis to prevent overlap\nbar_height = 0.15\nind = [i * (bar_height * len(categories)) for i in range(len(scores_0))]\n\n# Creating the bar plot with adjusted positions to prevent overlap\nplt.barh(\n    [pos + bar_height * 0 for pos in ind],\n    scores_0,\n    color=\"navy\",\n    height=bar_height,\n    label=labels[0],\n)\nplt.barh(\n    [pos + bar_height * 1 for pos in ind],\n    scores_20,\n    color=\"blue\",\n    height=bar_height,\n    label=labels[1],\n)\nplt.barh(\n    [pos + bar_height * 2 for pos in ind],\n    scores_40,\n    color=\"royalblue\",\n    height=bar_height,\n    label=labels[2],\n)\nplt.barh(\n    [pos + bar_height * 3 for pos in ind],\n    scores_60,\n    color=\"lightblue\",\n    height=bar_height,\n    label=labels[3],\n)\n\n# X and Y axis Labels\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Title of the plot\nplt.title(title)\n\n# Adding legend\nplt.legend()\n\n# Setting the labels for y-axis with adjusted positions\nplt.yticks([pos + bar_height * 1.5 for pos in ind], categories)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with enough space\nplt.tight_layout()\n\nplt.savefig('bar_63.pdf', bbox_inches='tight')"}
{"idx": "bar_64", "instruction": "There is a reference image for you and I also have a set of data about household income metrics by region. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Economic data for household income metrics\nregions = [\"North\", \"South\", \"East\", \"West\"]\nmedian_income=[42,60.77,36.8,43.7]\npoverty_rate=[13.5,16.0,11.0,9.78]\nunemployment_rate=[5.5,7.0,5.0,6.0]\nhousing_costs=[26,36,14,21]\nlabels = [\"Median Income (USD)\", \"Poverty Rate (%)\", \"Unemployment Rate (%)\", \"Housing Costs (USD/month)\"]\nxlabel = \"Metrics\"\nylabel = \"Region\"\ntitle = \"Household Income Metrics by Region\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Economic data for household income metrics\nregions = [\"North\", \"South\", \"East\", \"West\"]\nmedian_income=[42,60.77,36.8,43.7]\npoverty_rate=[13.5,16.0,11.0,9.78]\nunemployment_rate=[5.5,7.0,5.0,6.0]\nhousing_costs=[26,36,14,21]\nlabels = [\"Median Income (USD)\", \"Poverty Rate (%)\", \"Unemployment Rate (%)\", \"Housing Costs (USD/month)\"]\nxlabel = \"Metrics\"\nylabel = \"Region\"\ntitle = \"Household Income Metrics by Region\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Size of the plot\nplt.figure(figsize=(10, 7))\n\n# Adjust the position of the bars on the x-axis to prevent overlap\nbar_height = 0.3\nindices = np.arange(len(median_income)) * 1.5  # Increase space between groups\n\n# Define some hatch patterns and colors to use for bars\nhatch_patterns = [\"/\", \"\\\\\", \"|\", \"-\", \"+\", \"*\"]\ncolors = [\"#66c4d5\", \"#eca198\", \"#5886c7\", \"#a791e8\"]\n\n# Plot bars for each air quality metric\nfor i, level in enumerate([median_income, poverty_rate, unemployment_rate, housing_costs]):\n    bars = plt.barh(\n        [pos + bar_height * i for pos in indices],\n        level,\n        color=colors[i],\n        height=bar_height,\n        hatch=hatch_patterns[i],\n        label=f'{labels[i]}',\n    )\n\n    # Add text annotations to the right of the bars\n    for bar in bars:\n        plt.text(\n            bar.get_width(),  # X position\n            bar.get_y() + bar.get_height() / 2,  # Y position\n            f\"{bar.get_width():.2f}\",  # Text to display\n            va=\"center\",\n        )\n\n# X and Y axis Labels and limits\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.xlim(\n    0,\n    max(np.max(median_income), np.max(poverty_rate), np.max(unemployment_rate), np.max(housing_costs))\n    + 10,\n)\n\n# Title of the plot\nplt.title(title)\n\n# Adding legend\nplt.legend()\n\n# Setting the labels for y-axis with adjusted positions\nplt.yticks([pos + bar_height * 1.5 for pos in indices], regions)\n\n# Adding grids\nplt.grid(True, linestyle=\"--\", which=\"both\", axis=\"x\", color=\"grey\", alpha=0.7)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with enough space\nplt.tight_layout()\n\n# Save the plot as a PDF file\nplt.savefig('bar_64.pdf', bbox_inches='tight')"}
{"idx": "bar_66", "instruction": "There is a reference image for you and I also have a set of data about employee satisfaction scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n\n\n\n# Randomly generate new employee satisfaction scores with negative values to simulate dissatisfaction\nrandom_employee_satisfaction = {\nf\"satisfaction_{year}\": -np.abs(np.random.rand(4).round(2) * 10)\nfor year in [2018, 2019, 2020, 2021]\n}\ndepartments = [\"HR\", \"Finance\", \"Engineering\", \"Sales\"]\nind = np.arange(4)\nxlabel = \"Employee Satisfaction Score\"\ntitle = \"Negative Employee Satisfaction Scores by Department and Year\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import colorsys\nimport numpy as np; np.random.seed(0); np.random.seed(1)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Randomly generate new employee satisfaction scores with negative values to simulate dissatisfaction\nrandom_employee_satisfaction = {\n    f\"satisfaction_{year}\": -np.abs(np.random.rand(4).round(2) * 10)\n    for year in [2018, 2019, 2020, 2021]\n}\ndepartments = [\"HR\", \"Finance\", \"Engineering\", \"Sales\"]\nind = np.arange(4)\nxlabel = \"Employee Satisfaction Score\"\ntitle = \"Negative Employee Satisfaction Scores by Department and Year\"\n\ndef hsl_to_rgb(h, s, l):\n    return colorsys.hls_to_rgb(h, l, s)\n\n\n# Random colors for each set of bars\ncolors = [\n    hsl_to_rgb(hue, 0.5, 0.6) for hue in np.linspace(0, 1, 5)[:-1]\n]  # Omitting the last value to avoid wrap-around duplication\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axes objects\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# The width of the bars\nbar_width = 0.2\n\n# Define some hatch patterns to use for bars\nhatch_patterns = [\"/\", \"\\\\\", \"x\", \"o\"]\n\n# Plotting data with randomization\nfor i, (label, growth_rates) in enumerate(random_employee_satisfaction.items()):\n    ax.barh(\n        ind + bar_width * (i - 1.5),\n        growth_rates,\n        bar_width,\n        label=label,\n        color=colors[i],\n        hatch=np.random.choice(hatch_patterns),\n    )\n\n# Adding labels, title, and custom y-axis tick labels, etc.\nax.set_xlabel(xlabel)\nax.set_title(title)\nax.set_yticks(ind)\nax.set_yticklabels(departments)\n\n# Add random rotation to y-axis labels\nfor label in ax.get_yticklabels():\n    label.set_rotation(np.random.randint(-30, 30))\n\n# Adding legend\nax.legend(\n    ncols=len(random_employee_satisfaction.keys()), loc=\"upper center\", bbox_to_anchor=(0.5, 1.15)\n)\n\n# Invert y-axis to have the first entry at the top\nplt.gca().invert_yaxis()\n\n# Randomly decide whether to show grid lines for x-axis and set their properties\nif np.random.rand() > 0.5:\n    ax.xaxis.grid(\n        True,\n        linestyle=np.random.choice([\"--\", \":\", \"-.\"]),\n        color=np.random.rand(\n            3,\n        ),\n        alpha=0.7,\n    )\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_66.pdf', bbox_inches='tight')"}
{"idx": "bar_67", "instruction": "There is a reference image for you and I also have a set of data about the adoption percentages of various educational technologies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Redefining the data\nmodels = [\"Online Education\", \"Self-paced Learning\", \"Virtual Classrooms\", \"Interactive Simulations\", \"AI Tutors\", \"Gamified Learning\", \"Remote Assessments\"]\npercentages = [15.0, 25.5, 35.4, 45.3, 55.1, 65.2, 75.3]\n\n# Sorting the data in descending order while keeping track of the models order\nsorted_data = sorted(zip(percentages, models), reverse=True)\nsorted_percentages, sorted_models = zip(*sorted_data)\n\ntitle = \"Adoption of Educational Technologies\"\nxlabel = \"Educational Technology\"\nylabel = \"Adoption Percentage (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nimport colorsys\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Redefining the data\nmodels = [\"Online Education\", \"Self-paced Learning\", \"Virtual Classrooms\", \"Interactive Simulations\", \"AI Tutors\", \"Gamified Learning\", \"Remote Assessments\"]\npercentages = [15.0, 25.5, 35.4, 45.3, 55.1, 65.2, 75.3]\n\n# Sorting the data in descending order while keeping track of the models order\nsorted_data = sorted(zip(percentages, models), reverse=True)\nsorted_percentages, sorted_models = zip(*sorted_data)\n\ntitle = \"Adoption of Educational Technologies\"\nxlabel = \"Educational Technology\"\nylabel = \"Adoption Percentage (%)\"\nylim = [0, np.max(sorted_percentages) + 10]\n\n\n\n# Generate random colors with lower saturation\ndef hsl_to_rgb(h, s, l):\n    return colorsys.hls_to_rgb(h, l, s)\n\n\n# Randomly generate colors\ncolors = [hsl_to_rgb(hue, 0.5, 0.6) for hue in np.linspace(0, 1, len(models) + 1)[:-1]]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and bar chart with the sorted data\nplt.figure(figsize=(12, 8))\nbars = plt.bar(sorted_models, sorted_percentages, color=colors)\n\n# Randomly decide where to put the text based on the value of the bar\nfor bar in bars:\n    yval = bar.get_height()\n    text_y = (\n        yval - 5 if yval > 10 else yval + 1\n    )  # Slight modification to avoid negative values\n    plt.text(\n        bar.get_x() + bar.get_width() / 2,\n        text_y,\n        f\"{yval}%\",\n        ha=\"center\",\n        va=\"top\" if text_y < yval else \"bottom\",\n    )\n\n# Set chart title and labels\nplt.title(title)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Randomly set y-axis range to a bit higher than the max value\nplt.ylim(ylim)\n\n# Randomize the gridlines and ticks\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n\n# Randomize tick rotation\nplt.xticks(rotation=45)\n\n# Hide the top and right spines\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Apply tight layout\nplt.tight_layout()\n\nplt.savefig('bar_67.pdf', bbox_inches='tight')"}
{"idx": "bar_68", "instruction": "There is a reference image for you and I also have a set of data about education statistics across different school levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Example education data\ncategories = [\n\"Student Enrollment\",\n\"Graduation Rate\",\n\"Average Test Scores\",\n\"Teacher Satisfaction\",\n]\nlayer_data = {\n\"Primary School\": np.array([300, 90, 75, 85]),\n\"Secondary School\": np.array([250, 85, 80, 80]),\n\"High School\": np.array([200, 80, 78, 75]),\n\"University\": np.array([150, 70, 85, 70]),\n}\ntitle = \"Stacked Bar Chart of Education Data\"\nxlabel = \"Categories\"\nylabel = \"Values\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Example education data\ncategories = [\n    \"Student Enrollment\",\n    \"Graduation Rate\",\n    \"Average Test Scores\",\n    \"Teacher Satisfaction\",\n]\nlayer_data = {\n    \"Primary School\": np.array([300, 90, 75, 85]),\n    \"Secondary School\": np.array([250, 85, 80, 80]),\n    \"High School\": np.array([200, 80, 78, 75]),\n    \"University\": np.array([150, 70, 85, 70]),\n}\ntitle = \"Stacked Bar Chart of Education Data\"\nxlabel = \"Categories\"\nylabel = \"Values\"\n\n# Colors for each layer (from dark blue to light blue)\ncolors = [\"#08306b\", \"#2171b5\", \"#6baed6\", \"#bdd7e7\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axes objects\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Variables to store the bottom position for each stack\nbottoms = np.array([0] * len(categories))\n\nfor i, (layer, values) in enumerate(layer_data.items()):\n    bars = ax.bar(categories, values, bottom=bottoms, color=colors[i], label=layer)\n\n    # Add data labels on each bar\n    for bar, bottom in zip(bars, bottoms):\n        height = bar.get_height()\n        ax.text(\n            bar.get_x() + bar.get_width() / 2,\n            bottom + height / 2,\n            str(height),\n            ha=\"center\",\n            va=\"center\",\n            color=\"white\",\n        )\n\n    # Update the bottoms position\n    bottoms += values\n\n# Chart title and labels\nplt.title(title)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Adding legend\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\n# Save the plot as PDF\nplt.savefig('bar_68.pdf', bbox_inches='tight')"}
{"idx": "bar_69", "instruction": "There is a reference image for you and I also have a set of data about sales figures for various tech products. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Seed for reproducibility\n\n# Expanded categories with descriptive names\ncategories = [\n\"Electric Vehicles\",\n\"Smartphones\",\n\"Laptops\",\n\"Smart Home Devices\",\n\"Wearables\",\n\"Tablets\",\n\"Gaming Consoles\",\n]\n\n# Increased number of layers with descriptive names\nlayer_data = {\nf\"Q1 {chr(65+i)} Sales\": np.random.randint(10, 20, size=len(categories))\nfor i in range(6)\n}\n\ntitle=\"Enhanced Stacked Bar Chart with Textures and Annotated Values\"\nxlabel=\"Product Categories\"\nylabel=\"Sales Units\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Seed for reproducibility\n\n# Expanded categories with descriptive names\ncategories = [\n    \"Electric Vehicles\",\n    \"Smartphones\",\n    \"Laptops\",\n    \"Smart Home Devices\",\n    \"Wearables\",\n    \"Tablets\",\n    \"Gaming Consoles\",\n]\n\n# Increased number of layers with descriptive names\nlayer_data = {\n    f\"Q1 {chr(65+i)} Sales\": np.random.randint(10, 20, size=len(categories))\n    for i in range(6)\n}\n\ntitle=\"Enhanced Stacked Bar Chart with Textures and Annotated Values\"\nxlabel=\"Product Categories\"\nylabel=\"Sales Units\"\n\n# Color palette with diverse colors\ncolors = [\"#ff4500\", \"#ff6347\", \"#ff8c00\", \"#ffd700\", \"#ffff00\", \"#ffffe0\"]\n\n# Hatch patterns to add texture to the bars\nhatches = [\"/\", \"\\\\\", \"|\", \"-\", \"+\", \"x\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(10, 7))\n\nbottoms = np.array([0] * len(categories))\n\nfor i, (layer, values) in enumerate(layer_data.items()):\n    bars = ax.bar(\n        categories,\n        values,\n        bottom=bottoms,\n        color=colors[i],\n        label=layer,\n        hatch=hatches[i],\n    )\n\n    # Text styling for better readability\n    for bar, bottom in zip(bars, bottoms):\n        height = bar.get_height()\n    # Update the bottoms for stacking\n    bottoms += values\n\n# Chart title and labels with enhanced styles\nplt.title(title, fontsize=16)\nplt.xlabel(xlabel, fontsize=12)\nplt.ylabel(ylabel, fontsize=12)\n\n# Adjust legend to be at the top outside the plot area\nplt.legend(\n    title=title,\n    title_fontsize=\"13\",\n    fontsize=\"11\",\n    loc=\"upper center\",\n    bbox_to_anchor=(0.5, 1.25),\n    ncol=3,\n)\n\n# Adding grid lines for better readability\nax.yaxis.grid(True, linestyle=\"--\", which=\"major\", color=\"grey\", alpha=0.6)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_69.pdf', bbox_inches='tight')"}
{"idx": "bar_70", "instruction": "There is a reference image for you and I also have a set of data about surveyor accuracy scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Sample data\nannotators = [\"Surveyor 1\", \"Surveyor 2\", \"Surveyor 3\", \"Surveyor 4\", \"Surveyor 5\", \"Surveyor 6\"]\nscores = {\n\"Surveyor 1\": [20, 22, 18, 23, 22],\n\"Surveyor 2\": [18, 20, 19, 24, 24],\n\"Surveyor 3\": [17, 21, 20, 22, 25],\n\"Surveyor 4\": [19, 18, 21, 23, 24],\n\"Surveyor 5\": [21, 19, 22, 20, 23],\n\"Surveyor 6\": [20, 21, 19, 22, 23],\n}\n\ntitle = \"Surveyor Data Collection Accuracy\"\nxlabel = \"Surveyor\"\nylabel = \"Accuracy Scores\"\nscore_labels = [f\"Round {i+1}\" for i in range(5)]\nlegendtitle = \"Survey Rounds\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\nannotators = [\"Surveyor 1\", \"Surveyor 2\", \"Surveyor 3\", \"Surveyor 4\", \"Surveyor 5\", \"Surveyor 6\"]\nscores = {\n    \"Surveyor 1\": [20, 22, 18, 23, 22],\n    \"Surveyor 2\": [18, 20, 19, 24, 24],\n    \"Surveyor 3\": [17, 21, 20, 22, 25],\n    \"Surveyor 4\": [19, 18, 21, 23, 24],\n    \"Surveyor 5\": [21, 19, 22, 20, 23],\n    \"Surveyor 6\": [20, 21, 19, 22, 23],\n}\n\ntitle = \"Surveyor Data Collection Accuracy\"\nxlabel = \"Surveyor\"\nylabel = \"Accuracy Scores\"\n\nylim = [0, 105]\nyticks = range(0, 106, 15)\nscore_labels = [f\"Round {i+1}\" for i in range(5)]\nlegendtitle = \"Survey Rounds\"\n\n# Define a color map for gradients\ncmap = plt.get_cmap(\"BuGn\")\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(8, 5))  # Adjusting figure size\n\nfor i, annotator in enumerate(annotators):\n    bottom = 0\n    score_list = scores[annotator]\n    for j, score in enumerate(score_list):\n        color = cmap(\n            1 - j / len(score_list)\n        )  # Determine color based on position in list\n        bar = ax.bar(annotator, score, bottom=bottom, color=color)\n        bottom += score\n        # Annotate each segment\n\n        if j == len(score_list) - 1:\n            ax.text(\n                bar[0].get_x() + bar[0].get_width() / 2,\n                bottom - score / 2,\n                str(score),\n                ha=\"center\",\n                va=\"bottom\",\n                color=\"black\",\n            )\n        else:\n            ax.text(\n                bar[0].get_x() + bar[0].get_width() / 2,\n                bottom - score / 2,\n                str(score),\n                ha=\"center\",\n                va=\"center\",\n                color=\"white\",\n            )\n\n# Adding title and labels\nax.set_title(title)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_ylim(ylim)  # Adjusting limit to make space for text annotations\nax.set_yticks(yticks)\n\n# Adding legend with score indications\n\nax.legend(score_labels, title=legendtitle, bbox_to_anchor=(1.05, 1), loc=\"upper left\")\nax.yaxis.grid(linestyle=\"--\")\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_70.pdf', bbox_inches='tight')"}
{"idx": "bar_71", "instruction": "There is a reference image for you and I also have a set of data about different sectors such as Education, Healthcare, Transport, Energy, Finance, Agriculture, and Technology. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\ncategories = [\"Education\", \"Healthcare\", \"Transport\", \"Energy\", \"Finance\", \"Agriculture\", \"Technology\"]\n# Generate three lists\nRegOpt, BIOpt, LoopOpt = np.random.dirichlet(np.ones(3), size=len(categories)).T\n\nRegOpt = RegOpt * 100\nBIOpt = BIOpt * 100\nLoopOpt = LoopOpt * 100\n\nlabels = [\"Budget Allocation\", \"Infrastructure Development\", \"Research Funding\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Education\", \"Healthcare\", \"Transport\", \"Energy\", \"Finance\", \"Agriculture\", \"Technology\"]\n# Generate three lists\nRegOpt, BIOpt, LoopOpt = np.random.dirichlet(np.ones(3), size=len(categories)).T\n\nRegOpt = RegOpt * 100\nBIOpt = BIOpt * 100\nLoopOpt = LoopOpt * 100\n\nlabels = [\"Budget Allocation\", \"Infrastructure Development\", \"Research Funding\"]\nyticks = np.arange(0, 101, 20)\nylim = [0, 100]\nyticks = range(0, 101, 20)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Stacked bar chart setup\nbar_width = 0.9\nr = np.arange(len(categories))\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 4))\nbar1 = ax.bar(\n    r,\n    RegOpt,\n    color=\"#7e9671\",\n    edgecolor=\"white\",\n    hatch=\"++\",\n    width=bar_width,\n    label=labels[0],\n)\nbar2 = ax.bar(\n    r,\n    BIOpt,\n    bottom=RegOpt,\n    color=\"#d3c475\",\n    edgecolor=\"white\",\n    hatch=\"--\",\n    width=bar_width,\n    label=labels[1],\n)\nbar3 = ax.bar(\n    r,\n    LoopOpt,\n    bottom=RegOpt + BIOpt,\n    color=\"#4e78bf\",\n    edgecolor=\"white\",\n    hatch=\"\\\\\\\\\\\\\",\n    width=bar_width,\n    label=labels[2],\n)\n\nax.set_xticks(r)\nax.set_xticklabels(categories, rotation=-90, ha=\"center\")\nax.set_yticks(yticks)\nax.set_ylim(ylim)\nax.set_yticklabels([\"{}%\".format(i) for i in yticks])\nax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.15), ncol=3)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\n# Grid lines\nax.yaxis.grid(True, linestyle=\"--\", color=\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('bar_71.pdf', bbox_inches='tight')"}
{"idx": "bar_72", "instruction": "There is a reference image for you and I also have a set of data about model performance improvements across different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmodels = [\"Enhanced AI US\", \"Advanced AI UK\", \"Smart AI CA\", \"Intelligent AI AU\", \"NextGen AI NZ\"]\nimprovements = {\"US\": [2.8], \"UK\": [-0.6], \"CA\": [4.0], \"AU\": [1.9], \"NZ\": [0.5]}\n\nxlabel = \"Model with Region\"\nylabel = \"Improvement [%]\"\nlegendtitle = \"Region\"\ntitle = \"Model Performance Improvement by Region\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodels = [\"Enhanced AI US\", \"Advanced AI UK\", \"Smart AI CA\", \"Intelligent AI AU\", \"NextGen AI NZ\"]\nimprovements = {\"US\": [2.8], \"UK\": [-0.6], \"CA\": [4.0], \"AU\": [1.9], \"NZ\": [0.5]}\n\nxlabel = \"Model with Region\"\nylabel = \"Improvement [%]\"\nylim = [-1.5, 5]\nlegendtitle = \"Region\"\ntitle = \"Model Performance Improvement by Region\"\n\n# Colors for each language\ncolors = [\"#8171d7\", \"#af4b3d\", \"#d07035\", \"#d6a741\", \"#639b48\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Bar width\nbar_width = 0.75\n\n# Positions of the bars on the x-axis\nr = np.arange(len(models))\n\n# Plotting the bars\nfor i, language in enumerate(improvements):\n    bars = plt.bar(\n        r[i],\n        improvements[language],\n        color=colors[i],\n        width=bar_width,\n        label=language,\n        hatch=\"//\",\n        edgecolor=\"white\",\n    )\n    # Add text labels\n    for bar, val in zip(bars, improvements[language]):\n        height = bar.get_height()\n        ax.text(\n            bar.get_x() + bar.get_width() / 2,\n            height + 0.1 if height > 0 else height - 0.4,\n            f\"{val:.1f}\",\n            ha=\"center\",\n        )\n\n# Add xticks on the middle of the group bars\nplt.xlabel(xlabel)\nplt.xticks(r, models, rotation=45)\n\n# Add ylabel\nplt.ylabel(ylabel)\nplt.ylim(ylim)\n\nplt.gca().grid(color=\"gray\", linewidth=0.5)\nplt.gca().set_axisbelow(True)\n\n# Create legend & Show graphic\nplt.legend(title=legendtitle, loc=\"upper right\")\nplt.title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_72.pdf', bbox_inches='tight')"}
{"idx": "bar_73", "instruction": "There is a reference image for you and I also have a set of data about fuel price changes for gasoline and diesel. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Set a seed for reproducibility\n\n# Define fiscal quarters\nquarters = np.array([1, 2, 3, 4, 5])\n\n# Generate synthetic fuel price changes for two different fuels\nfuel_price_changes_gasoline = [-1.28010196,-9.48147536 , 0.99324956, -1.29355215, -1.59264396] # Example changes in Gasoline prices\nfuel_price_changes_diesel = [-3.39330358, -5.90702732 , 2.38541933, -4.00690653, -4.6634545 ] # Example changes in Diesel prices\n\nlabels = [\"Gasoline Prices\", \"Diesel Prices\"]\naxline = 0\nxlabel = \"Fiscal Quarter\"\nylabel = \"Price Change (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(2)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Set a seed for reproducibility\n\n# Define fiscal quarters\nquarters = np.array([1, 2, 3, 4, 5])\n\n# Generate synthetic fuel price changes for two different fuels\nfuel_price_changes_gasoline = [-1.28010196,-9.48147536 , 0.99324956, -1.29355215, -1.59264396]  # Example changes in Gasoline prices\nfuel_price_changes_diesel = [-3.39330358, -5.90702732 , 2.38541933, -4.00690653, -4.6634545 ]  # Example changes in Diesel prices\n\nlabels = [\"Gasoline Prices\", \"Diesel Prices\"]\naxline = 0\nxlabel = \"Fiscal Quarter\"\nylabel = \"Price Change (%)\"\nylim = [-10, 10]\nyticks = np.arange(-10, 11, 5)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots\nfig, axs = plt.subplots(figsize=(10, 5))\nwidth = 0.4\n\n# Plotting bars for each index\nbars1 = axs.bar(\n    quarters - width / 2,\n    fuel_price_changes_gasoline,\n    width=width,\n    color=\"#78a083\",\n    label=labels[0],\n)\nbars2 = axs.bar(\n    quarters + width / 2,\n    fuel_price_changes_diesel,\n    width=width,\n    color=\"#d27a41\",\n    label=labels[1],\n)\n\n# Adding text labels on the bars\nfor bars in [bars1, bars2]:\n    for bar in bars:\n        height = bar.get_height()\n        axs.text(\n            bar.get_x() + bar.get_width() / 2,\n            height,\n            f\"{height:.1f}\",\n            ha=\"center\",\n            va=\"bottom\" if height > 0 else \"top\",\n        )\n\n# Additional plot settings\naxs.axhline(axline, color=\"black\")\naxs.set_xlabel(xlabel)\naxs.set_ylabel(ylabel)\naxs.set_ylim(ylim)\naxs.set_yticks(yticks)\naxs.set_xticks(quarters)\naxs.yaxis.grid(True)\naxs.set_axisbelow(True)\n\n# Adding legend and adjusting layout\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.10), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Save the figure as a PDF\nplt.tight_layout()\nplt.savefig('bar_73.pdf', bbox_inches='tight')"}
{"idx": "bar_74", "instruction": "There is a reference image for you and I also have a set of data about different sectors' quarterly performance. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\n\ncategories = [\"Transport\", \"Tech\", \"Sports\"]\nvalues1 = [120, 150, 180]\nvalues2 = [130, 140, 160]\nvalues3 = [110, 135, 170]\nvalues4 = [125, 155, 175]\nvalues5 = [115, 145, 165]\n\nvalues1minus = [-60, -50, -70]\nvalues2minus = [-55, -45, -65]\nvalues3minus = [-50, -55, -75]\nvalues4minus = [-65, -60, -80]\nvalues5minus = [-45, -50, -70]\n\nvalues = [values1, values2, values3, values4, values5]\nvalues_minus = [values1minus, values2minus, values3minus, values4minus, values5minus]\nlabels = [\"Transport Q1\", \"Transport Q2\", \"Tech Q1\", \"Tech Q2\", \"Sports Q1\"]\nxlabel = \"Quarters\"\nylabel = \"Performance Values\"\nlegendtitle = \"Sectors\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\n\ncategories = [\"Transport\", \"Tech\", \"Sports\"]\nvalues1 = [120, 150, 180]\nvalues2 = [130, 140, 160]\nvalues3 = [110, 135, 170]\nvalues4 = [125, 155, 175]\nvalues5 = [115, 145, 165]\n\nvalues1minus = [-60, -50, -70]\nvalues2minus = [-55, -45, -65]\nvalues3minus = [-50, -55, -75]\nvalues4minus = [-65, -60, -80]\nvalues5minus = [-45, -50, -70]\n\nvalues = [values1, values2, values3, values4, values5]\nvalues_minus = [values1minus, values2minus, values3minus, values4minus, values5minus]\nlabels = [\"Transport Q1\", \"Transport Q2\", \"Tech Q1\", \"Tech Q2\", \"Sports Q1\"]\ncolors = [\"#f6c3cb\", \"#fbe5c8\", \"#55b0aa\", \"#6f94e7\", \"#e6e6f9\"]\nxlabel = \"Quarters\"\nyticks = np.arange(-80, 201, 20)\nylabel = \"Performance Values\"\nlegendtitle = \"Sectors\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure size\nplt.figure(figsize=(10, 5))\n\n# Set up the bar width\nbarWidth = 0.2\n\n# Set up positions for the bars\npositions = np.arange(len(labels))\n\n# Creating bars for each category\nfor i, category in enumerate(categories):\n    pos = [x + barWidth * i for x in positions]  # shift each bar by `barWidth * i`\n    plt.bar(\n        pos,\n        [v[i] for v in values],\n        color=colors[i],\n        width=barWidth,\n        edgecolor=\"black\",\n        label=category,\n    )\n    plt.bar(\n        pos,\n        [v[i] for v in values_minus],\n        color=colors[i],\n        width=barWidth,\n        edgecolor=\"black\",\n        alpha=0.5,\n    )\n\n    # Add text on top and bottom of the bars\n    for idx, val in enumerate(pos):\n        plt.text(\n            val,\n            values[idx][i] - 1,\n            f\"{values[idx][i]}\",\n            ha=\"center\",\n            va=\"top\",\n            rotation=-90,\n        )\n        plt.text(\n            val,\n            values_minus[idx][i] + 1,\n            f\"{-values_minus[idx][i]}\",\n            ha=\"center\",\n            va=\"bottom\",\n            rotation=-90,\n        )\n\n# Adding axis labels and ticks\nplt.xlabel(xlabel)\nplt.xticks([r + barWidth * 1.0 for r in range(len(labels))], labels)\nplt.yticks(yticks)\n\n# Add a legend and display the plot\nplt.ylabel(ylabel)\nplt.legend(title=legendtitle)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_74.pdf', bbox_inches='tight')"}
{"idx": "bar_75", "instruction": "There is a reference image for you and I also have a set of data about energy source adoption rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the bar charts\nrenewable_adoption = [68.2, 75.1, 83.5, 57.6]\nnon_renewable_adoption = [31.8, 24.9, 16.5, 42.4]\nx = np.arange(len(renewable_adoption)) # x-coordinates for the bars\nlabels = [\"Renewable Energy\", \"Non-Renewable Energy\"]\ntitle = \"Energy Source Adoption Rates\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar charts\nrenewable_adoption = [68.2, 75.1, 83.5, 57.6]\nnon_renewable_adoption = [31.8, 24.9, 16.5, 42.4]\nx = np.arange(len(renewable_adoption))  # x-coordinates for the bars\nlabels = [\"Renewable Energy\", \"Non-Renewable Energy\"]\ntitle = \"Energy Source Adoption Rates\"\nylim1 = [-100, 100]\nylim2 = [-50, 50]\nyticks1 = [0, 25, 50, 75, 100]\nyticks2 = [-50, -25, 0, 25, 50]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, ax1 = plt.subplots(figsize=(6, 4))\n\n# Create the first subplot for 'renewable_adoption' using the left y-axis\nax1.bar(\n    x,\n    renewable_adoption,\n    width=0.4,\n    label=labels[0],\n    color=\"#404346\",\n    align=\"center\",\n)\nax1.set_ylabel(labels[0], color=\"#404346\")\nax1.tick_params(axis=\"y\", labelcolor=\"#404346\")\n\n# Create the second y-axis for 'non_renewable_adoption'\nax2 = ax1.twinx()\nax2.bar(\n    x,\n    [-i for i in non_renewable_adoption],\n    width=0.4,\n    label=labels[1],\n    color=\"#dc9dae\",\n    align=\"center\",\n)\nax2.set_ylabel(labels[1], color=\"#dc9dae\")\nax2.tick_params(axis=\"y\", labelcolor=\"#dc9dae\")\n\n# Title for the plot\n\nax1.set_title(title)\n\n# Set x-axis labels (empty in this case as per original code)\nax1.set_xticks(x)\nax1.set_xticklabels([])\n\n# Drawing a horizontal line at y=0\nax1.axhline(0, color=\"black\", linewidth=0.8)\n\n# Annotate bars with their values\nfor j in range(4):\n    ax1.text(\n        x[j],\n        renewable_adoption[j] - 8,\n        f\"{renewable_adoption[j]}%\",\n        ha=\"center\",\n        color=\"white\",\n    )\n    ax2.text(\n        x[j],\n        -non_renewable_adoption[j] - 5,\n        f\"{non_renewable_adoption[j]}%\",\n        ha=\"center\",\n        color=\"#dc9dae\",\n    )\n\nax1.set_ylim(ylim1)\nax1.set_yticks(yticks1)\n\nax2.set_ylim(ylim2)\nax2.set_yticks(yticks2)\nax2.set_yticklabels(yticks2)\n# Add legend to the subplot\nax1.legend(loc=\"upper left\", bbox_to_anchor=(0.0, 1.2))\nax1.grid(axis=\"y\", linestyle=\"--\")\nax1.set_axisbelow(True)\nax2.legend(loc=\"upper right\", bbox_to_anchor=(1, 1.2))\nax2.grid(axis=\"y\", linestyle=\"--\")\nax2.set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('bar_75.pdf', bbox_inches='tight')"}
{"idx": "bar_76", "instruction": "There is a reference image for you and I also have a set of data about environmental impact by different activity sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nimport numpy as np\n\ncategories = [\"Forestry\", \"Agriculture\", \"Urban Development\", \"Mining\"]\n\n# Data for the graph: negative values for pollution emissions (in thousands of metric tons)\nvalues1_A = [-np.random.uniform(300, 1000) for _ in categories] # Current Year\nvalues2_A = [-np.random.uniform(300, 1000) for _ in categories] # Previous Year\nlabels = [\"Current Year\", \"Previous Year\"]\nxlabel = \"Activity Sectors\"\nylabel = \"Pollution Emissions (thousands of metric tons)\"\ntitle = \"Environmental Impact by Sector\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nimport numpy as np; np.random.seed(0)\n\ncategories = [\"Forestry\", \"Agriculture\", \"Urban Development\", \"Mining\"]\n\n# Data for the graph: negative values for pollution emissions (in thousands of metric tons)\nvalues1_A = [-np.random.uniform(300, 1000) for _ in categories]  # Current Year\nvalues2_A = [-np.random.uniform(300, 1000) for _ in categories]  # Previous Year\nlabels = [\"Current Year\", \"Previous Year\"]\nxlabel = \"Activity Sectors\"\nylabel = \"Pollution Emissions (thousands of metric tons)\"\ntitle = \"Environmental Impact by Sector\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Make the bar plot with hatch patterns\nax.bar(\n    categories,\n    values1_A,\n    color=\"skyblue\",\n    hatch=\"/\",\n    label=labels[0],\n    edgecolor=\"black\",\n)\nax.bar(\n    categories,\n    values2_A,\n    color=\"sandybrown\",\n    hatch=\"\\\\\",\n    label=labels[1],\n    bottom=values1_A,\n    edgecolor=\"black\",\n)\n\n# Labeling and customizing\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\nplt.legend()\n\n# Adding grid lines for better readability\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and display\nplt.tight_layout()\n\n# Save the plot as a PDF file\nplt.savefig('bar_76.pdf', bbox_inches='tight')"}
{"idx": "bar_77", "instruction": "There is a reference image for you and I also have a set of data about key health indicators across countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nhealth_indicators = [\"Life Expectancy\", \"Infant Mortality Rate\", \"Obesity Rate\", \"Access to Clean Water\", \"Healthcare Expenditure\"]\nvalues = [72.6, 3.2, 23.1, 92.8, 9.8] # Example values (Life Expectancy in years, Infant Mortality Rate per 1000 births, Obesity Rate in percentage, Access to Clean Water in percentage, Healthcare Expenditure in percentage of GDP)\nxlabel = \"Health Indicator\"\nylabel = \"Value\"\ntitle = \"Key Health Indicators Across Countries\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nhealth_indicators = [\"Life Expectancy\", \"Infant Mortality Rate\", \"Obesity Rate\", \"Access to Clean Water\", \"Healthcare Expenditure\"]\nvalues = [72.6, 3.2, 23.1, 92.8, 9.8]  # Example values (Life Expectancy in years, Infant Mortality Rate per 1000 births, Obesity Rate in percentage, Access to Clean Water in percentage, Healthcare Expenditure in percentage of GDP)\nxlabel = \"Health Indicator\"\nylabel = \"Value\"\ntitle = \"Key Health Indicators Across Countries\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(8, 4))\nplt.bar(health_indicators, values, color=\"skyblue\", edgecolor=\"black\")\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_77.pdf', bbox_inches='tight')"}
{"idx": "bar_78", "instruction": "There is a reference image for you and I also have a set of data about average monthly temperatures in Asian cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated Data\nx = np.arange(4) # X-axis points represent different regions\ny1 = np.array([-30, -25, -28, -27]) # Average temperature in January\ny2 = np.array([-32, -27, -30, -29]) # Average temperature in February\nlabels = [\"January Temperature\", \"February Temperature\"]\ntitle = \"Average Monthly Temperature in Asian Cities\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated Data\nx = np.arange(4)  # X-axis points represent different regions\ny1 = np.array([-30, -25, -28, -27])  # Average temperature in January\ny2 = np.array([-32, -27, -30, -29])  # Average temperature in February\nlabels = [\"January Temperature\", \"February Temperature\"]\nxticklabels = [\"Tokyo\", \"Seoul\", \"Shanghai\", \"Beijing\"]\ntitle = \"Average Monthly Temperature in Asian Cities\"\nylim1 = [-40, -20]\nylim2 = [-40, -20]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax1 = plt.subplots(figsize=(10, 5))\nwidth = 0.4  # Width of the bars\n\n# Plotting data for the year 2020\nax1.bar(\n    x,\n    y1,\n    color=\"#d87769\",\n    hatch=\"/\",\n    width=width,\n    label=labels[0],\n    edgecolor=\"black\",\n)\n\n# Create a second y-axis sharing the same x-axis\nax2 = ax1.twinx()\nax2.bar(\n    x + width,\n    y2,\n    color=\"#7da1c7\",\n    hatch=\"\\\\\",\n    width=width,\n    label=labels[1],\n    edgecolor=\"black\",\n)\n\n# Set the x-ticks to be in the middle of the two bars and add labels for the regions\nax1.set_xticks(x + width / 2)\nax1.set_xticklabels(xticklabels)\n\n# Adding legends to the plot\nax1.legend(loc=\"lower left\")\nax2.legend(loc=\"lower right\")\n\n# Labeling y-axes\nax1.set_ylabel(labels[0], color=\"#d26252\")\nax2.set_ylabel(labels[1], color=\"#3f81bb\")\n\n# Setting colors for y-axis\nax1.tick_params(axis=\"y\", colors=\"#d26252\")\nax2.tick_params(axis=\"y\", colors=\"#3f81bb\")\n\n# Setting the limits for y-axes\nax1.set_ylim(ylim1)\nax2.set_ylim(ylim2)\n\n# Title for the chart\nplt.title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Layout adjustment to prevent clipping\nplt.tight_layout()\n\n# Saving the plot as a PDF\nplt.savefig('bar_78.pdf', bbox_inches='tight')"}
{"idx": "bar_79", "instruction": "There is a reference image for you and I also have a set of data about customer satisfaction in various aspects. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Define the data and category names as provided by the user\n# Updated Data\ncategory_names = [\n\"Very Unsatisfied\",\n\"Unsatisfied\",\n\"Neutral\",\n\"Satisfied\",\n\"Very Satisfied\",\n]\nresults = {\n\"Service Quality\": [10, 15, 17, 32, 26],\n\"Product Quality\": [26, 42, 29, 10, 13],\n\"Value for Money\": [35, 37, 30, 12, 19],\n\"Customer Support\": [32, 11, 25, 15, 33],\n\"Overall Experience\": [21, 29, 13, 14, 40],\n}\nxlabel = \"Survey Responses\"\naxhline = 0\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data and category names as provided by the user\n# Updated Data\ncategory_names = [\n    \"Very Unsatisfied\",\n    \"Unsatisfied\",\n    \"Neutral\",\n    \"Satisfied\",\n    \"Very Satisfied\",\n]\nresults = {\n    \"Service Quality\": [10, 15, 17, 32, 26],\n    \"Product Quality\": [26, 42, 29, 10, 13],\n    \"Value for Money\": [35, 37, 30, 12, 19],\n    \"Customer Support\": [32, 11, 25, 15, 33],\n    \"Overall Experience\": [21, 29, 13, 14, 40],\n}\nylim = [-90, 90]\nyticks = np.arange(-90, 91, 20)\nxlabel = \"Survey Responses\"\naxhline = 0\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\ndef create_vertical_bar_chart(results, category_names):\n    fig, ax = plt.subplots(figsize=(10, 6))\n\n    labels = list(results.keys())\n    data = np.array(list(results.values()))\n    data_cum = data.cumsum(axis=1)\n    middle_index = data.shape[1] // 2\n    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index] / 2\n\n    # Color Mapping\n    category_colors = plt.get_cmap(\"Pastel1\")(np.linspace(0.15, 0.85, data.shape[1]))\n\n    # Plot Bars\n    for i, (colname, color) in enumerate(zip(category_names, category_colors)):\n        heights = data[:, i]\n        bottoms = data_cum[:, i] - heights - offsets\n        rects = ax.bar(\n            labels,\n            heights,\n            bottom=bottoms,\n            width=0.5,\n            label=colname,\n            color=color,\n            edgecolor=\"black\",\n        )\n        for j, (bottom, height) in enumerate(zip(bottoms, heights)):\n            # Calculate the center position of each bar segment for the text\n            text_x = bottom + height / 2\n            text_y = j  # y-coordinate is based on the bar's index (j)\n            ax.text(\n                text_y,\n                text_x,\n                f\"{abs(height):.1f}%\",\n                va=\"center\",\n                ha=\"center\",\n                color=\"black\",\n                fontsize=8,\n            )\n    # Add Zero Reference Line\n    ax.axhline(axhline, linestyle=\"--\", color=\"black\", alpha=0.25)\n\n    # X Axis\n    ax.set_ylim(ylim)\n    ax.set_yticks(yticks)\n    ax.yaxis.set_major_formatter(lambda y, pos: str(abs(int(y))))\n\n    # Y Axis\n    ax.set_xlabel(xlabel)\n\n    # Remove spines\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n\n    # Legend\n    ax.legend(\n        ncol=len(category_names) // 2,\n        bbox_to_anchor=(0.5, 1.1),\n        loc=\"upper center\",\n        frameon=False,\n    )\n\n    return fig, ax\n\n\nfig, ax = create_vertical_bar_chart(results, category_names)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_79.pdf', bbox_inches='tight')"}
{"idx": "bar_80", "instruction": "There is a reference image for you and I also have a set of data about monthly car and bike sales in 2020 and 2021. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Updated Data\ngroups = [\"3\", \"5\", \"7\", \"10\"]\ncar_sales_2020 = [150, 180, 200, 250]\ncar_sales_2021 = [170, 210, 230, 260]\nbike_sales_2020 = [50, 60, 70, 90]\nbike_sales_2021 = [60, 75, 85, 100]\n\nn_groups = len(groups)\nlabels = [\"Car Sales 2020\", \"Car Sales 2021\", \"Bike Sales 2020\", \"Bike Sales 2021\"]\nxlabel = \"Month\"\nylabel = \"Sales (units)\"\ntitle = \"Monthly Car and Bike Sales in 2020 and 2021\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated Data\ngroups = [\"3\", \"5\", \"7\", \"10\"]\ncar_sales_2020 = [150, 180, 200, 250]\ncar_sales_2021 = [170, 210, 230, 260]\nbike_sales_2020 = [50, 60, 70, 90]\nbike_sales_2021 = [60, 75, 85, 100]\n\nn_groups = len(groups)\nlabels = [\"Car Sales 2020\", \"Car Sales 2021\", \"Bike Sales 2020\", \"Bike Sales 2021\"]\nxlabel = \"Month\"\nylabel = \"Sales (units)\"\ntitle = \"Monthly Car and Bike Sales in 2020 and 2021\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\nindex = np.arange(n_groups)\nbar_width = 0.2\n\nopacity = 0.8\n\nrects1 = ax.bar(\n    index - 1.5 * bar_width,\n    car_sales_2020,\n    bar_width,\n    alpha=opacity,\n    color=\"#8ECFC9\",\n    label=labels[0],\n)\n\nrects2 = ax.bar(\n    index - 0.5 * bar_width,\n    car_sales_2021,\n    bar_width,\n    alpha=opacity,\n    color=\"#FFBE7A\",\n    label=labels[1],\n)\n\nrects3 = ax.bar(\n    index + 0.5 * bar_width,\n    bike_sales_2020,\n    bar_width,\n    alpha=opacity,\n    color=\"#82B0D2\",\n    label=labels[2],\n)\n\nrects4 = ax.bar(\n    index + 1.5 * bar_width,\n    bike_sales_2021,\n    bar_width,\n    alpha=opacity,\n    color=\"#E7DAD2\",\n    hatch=\"+\",\n    label=labels[3],\n)\n\n\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_title(title)\nax.set_xticks(index)\nax.set_xticklabels(groups)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.yaxis.grid(True, linestyle=\"--\")\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_80.pdf', bbox_inches='tight')"}
{"idx": "bar_81", "instruction": "There is a reference image for you and I also have a set of data about tourist arrivals and hotel occupancy rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the bar charts\n\ntourist_arrivals = [120, 150, 170, 140]\ntourist_arrivals2 = [130, 160, 180, 150]\n\nhotel_occupancy = [65, 72, 78, 69]\nx = np.arange(len(tourist_arrivals)) * 1.5 # x-coordinates for the bars\nlabels = [\"Tourist Arrivals\", \"Hotel Occupancy\",\"Occupancy Rate\"]\nylabel1 = \"Tourist Arrivals (Thousands)\"\nylabel2 = \"Hotel Occupancy Rate (%)\"\ntitle = \"Tourist Arrivals and Hotel Occupancy Rates\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar charts\n\ntourist_arrivals = [120, 150, 170, 140]\ntourist_arrivals2 = [130, 160, 180, 150]\n\nhotel_occupancy = [65, 72, 78, 69]\nx = np.arange(len(tourist_arrivals)) * 1.5  # x-coordinates for the bars\nlabels = [\"Tourist Arrivals\", \"Hotel Occupancy\",\"Occupancy Rate\"]\nylabel1 = \"Tourist Arrivals (Thousands)\"\nylabel2 = \"Hotel Occupancy Rate (%)\"\ntitle = \"Tourist Arrivals and Hotel Occupancy Rates\"\nxticklabels = [\"Spring\", \"Summer\", \"Autumn\", \"Winter\"]\nylim1 = [-100, 200]\nylim2 = [-100,200]\nyticks1 = [0, 50,100,150,200]\nyticks2 = [-100,-80,-60,-40,-20,0]\nytickslabels2 = [\"100\",\"80\",\"60\",\"40\",\"20\",\"0\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, ax1 = plt.subplots(figsize=(8, 4))\n\n# Create the first subplot for 'tourist_arrivals' using the left y-axis\nax1.bar(\n    x - 0.4,\n    tourist_arrivals,\n    width=0.4,\n    label=labels[0],\n    edgecolor=\"black\",\n    color=\"#3f81bb\",\n    align=\"center\",\n)\nax1.bar(\n    x,\n    tourist_arrivals2,\n    width=0.4,\n    label=labels[1],\n    edgecolor=\"black\",\n    color=\"#33756f\",\n    align=\"center\",\n)\n\nax1.set_ylabel(ylabel1, color=\"black\")\nax1.tick_params(axis=\"y\", labelcolor=\"black\")\n\n# Create the second y-axis for 'hotel_occupancy'\nax2 = ax1.twinx()\nax2.bar(\n    x + 0.4,\n    [-i for i in hotel_occupancy],\n    width=0.4,\n    label=labels[2],\n    edgecolor=\"black\",\n    color=\"#dc9dae\",\n    align=\"center\",\n)\nax2.set_ylabel(ylabel2, color=\"black\")\nax2.tick_params(axis=\"y\", labelcolor=\"black\")\n\n# Title for the plot\n\nax1.set_title(title)\n\n# Set x-axis labels (empty in this case as per original code)\nax1.set_xticks(x)\nax1.set_xticklabels(xticklabels)\n\n# Drawing a horizontal line at y=0\nax1.axhline(0, color=\"black\", linewidth=0.8)\n\n# Annotate bars with their values\nfor j in range(4):\n    ax1.text(\n        x[j] - 0.4,\n        tourist_arrivals[j] - 12,\n        f\"{tourist_arrivals[j]}\",\n        ha=\"center\",\n        color=\"white\",\n    )\n    ax1.text(\n        x[j],\n        tourist_arrivals2[j] - 12,\n        f\"{tourist_arrivals2[j]}\",\n        ha=\"center\",\n        color=\"white\",\n    )\n    ax2.text(\n        x[j] + 0.4,\n        -hotel_occupancy[j] + 4,\n        f\"{hotel_occupancy[j]}\",\n        ha=\"center\",\n        color=\"white\",\n    )\n\nax1.set_ylim(ylim1)\nax1.set_yticks(yticks1)\n\nax2.set_ylim(ylim2)\nax2.set_yticks(yticks2)\nax2.set_yticklabels(ytickslabels2)\n# Add legend to the subplot\nax1.legend(loc=\"upper left\", bbox_to_anchor=(0.0, 1.2))\nax1.set_axisbelow(True)\nax2.legend(loc=\"upper right\", bbox_to_anchor=(1, 1.2))\nax2.set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('bar_81.pdf', bbox_inches='tight')"}
{"idx": "bar_82", "instruction": "There is a reference image for you and I also have a set of data about advancements in energy technologies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\"Renewables\", \"EVs\", \"Smart Grids\", \"Storage\", \"Carbon Capture\"]\ncategories2 = [\"Renewables Adv\", \"EVs Adv\", \"Smart Grids Adv\", \"Storage Adv\", \"Carbon Capture Adv\"]\nvalues = [220, 208, 125, 302, 207]\nvalues2 = [180, 230, 270, 129, 226]\ntitle = \"Probability of Improvement over Baseline Energy Technologies\"\nxlabel = \"Probability of Improvement (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Renewables\", \"EVs\", \"Smart Grids\", \"Storage\", \"Carbon Capture\"]\ncategories2 = [\"Renewables Adv\", \"EVs Adv\", \"Smart Grids Adv\", \"Storage Adv\", \"Carbon Capture Adv\"]\nvalues = [220, 208, 125, 302, 207]\nvalues2 = [180, 230, 270, 129, 226]\ntitle = \"Probability of Improvement over Baseline Energy Technologies\"\nxlabel = \"Probability of Improvement (%)\"\n# Create color map\ncolors = plt.get_cmap(\"PuBuGn\")(np.linspace(0.15, 0.85, len(categories2)))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axes = plt.subplots(\n    2,\n    1,\n    figsize=(6, 6),\n    layout=\"constrained\",\n)\n\n# Create horizontal bar chart\naxes[0].barh(categories, values, color=colors)\naxes[1].barh(categories, values2, color=colors)\naxes[0].set_title(title)\n\n# Apply the xticks and labels\naxes[0].set_yticklabels(categories, rotation=45)\naxes[1].set_yticklabels(categories2, rotation=45)\n\n# Adding title and labels\nplt.xlabel(xlabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('bar_82.pdf', bbox_inches='tight')"}
{"idx": "bar_83", "instruction": "There is a reference image for you and I also have a set of data about **emotions and their frequencies**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Emotion labels\nemotions = [\n\"Excitement\",\n\"Calmness\",\n\"Melancholy\",\n\"Confidence\",\n\"Apprehension\",\n\"Frustration\",\n\"Appreciation\",\n\"Comfort\",\n\"Happiness\",\n\"Criticism\",\n]\n# New approximate frequency values with changed dimensions\nfrequencies = [12.5, 11.0, 10.8, 10.5, 10.2, 10.0, 9.8, 9.5, 9.2, 9.0]\nfrequencies2 = [3.2, 3.8, 4.5, 5.3, 5.8, 6.0, 6.3, 7.2, 7.6, 8.0]\nxlabel1 = \" Metric 1 \"\nxlabel2 = \" Metric 2 \"\nylabel = \"Emotion Frequency (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Emotion labels\nemotions = [\n    \"Excitement\",\n    \"Calmness\",\n    \"Melancholy\",\n    \"Confidence\",\n    \"Apprehension\",\n    \"Frustration\",\n    \"Appreciation\",\n    \"Comfort\",\n    \"Happiness\",\n    \"Criticism\",\n]\n# New approximate frequency values with changed dimensions\nfrequencies = [12.5, 11.0, 10.8, 10.5, 10.2, 10.0, 9.8, 9.5, 9.2, 9.0]\nfrequencies2 = [3.2, 3.8, 4.5, 5.3, 5.8, 6.0, 6.3, 7.2, 7.6, 8.0]\nxlabel1 = \" Metric 1 \"\nxlabel2 = \" Metric 2 \"\nylabel = \"Emotion Frequency (%)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nfig, axes = plt.subplots(1, 2, figsize=(10, 4), layout=\"constrained\", sharey=True)\naxes[0].barh(emotions, frequencies, color=\"lightcoral\", edgecolor=\"gray\")\naxes[1].barh(emotions, frequencies2, color=\"lightblue\", edgecolor=\"gray\")\n\n# Adding data labels\nfor index, value in enumerate(frequencies):\n    axes[0].text(value, index, f\" {value}%\", va=\"center\")\n# Adding data labels\nfor index, value in enumerate(frequencies2):\n    axes[1].text(value, index, f\" {value}%\", va=\"center\")\n\n# Set labels and title\naxes[0].set_xlabel(xlabel1)\naxes[0].set_ylabel(ylabel)\naxes[1].set_xlabel(xlabel2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout\nplt.tight_layout()\nplt.savefig('bar_83.pdf', bbox_inches='tight')"}
{"idx": "bar_84", "instruction": "There is a reference image for you and I also have a set of data about technology adoption trends in various sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategories1 = [\n\"Mobile Payments\",\n\"E-Commerce\",\n\"Cloud Computing\",\n\"AI and Machine Learning\",\n\"Blockchain Technology\",\n]\nscores_0 = [0.75, 0.65, 0.55, 0.85, 0.45]\nscores_20 = [0.8, 0.7, 0.6, 0.9, 0.5]\nscores_40 = [0.85, 0.75, 0.65, 0.95, 0.55]\n\ncategories2 = [\n\"Mobile Payments\",\n\"E-Commerce\",\n\"Cloud Computing\",\n]\nscores_0_2 = [\n0.75,\n0.65,\n0.55,\n]\nscores_20_2 = [\n0.8,\n0.7,\n0.6,\n]\nscores_40_2 = [\n0.85,\n0.75,\n0.65,\n]\n\nscores_0_3 = [\n0.45,\n0.65,\n0.55,\n]\nscores_20_3 = [\n0.5,\n0.6,\n0.7,\n]\nscores_40_3 = [0.55, 0.75, 0.65]\n\nscores_0_4 = [\n0.85,\n0.9,\n0.55,\n]\nscores_20_4 = [\n0.9,\n0.95,\n0.6,\n]\nscores_40_4 = [0.95, 1, 0.65]\n\nlabels = [\"Score at Time 0\",\"Score at Time 20\",\"Score at Time 40\"]\n\ntitle2 = \"1st Experiment\"\ntitle3 = \"2nd Experiment\"\ntitle4 = \"3rd Experiment\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories1 = [\n    \"Mobile Payments\",\n    \"E-Commerce\",\n    \"Cloud Computing\",\n    \"AI and Machine Learning\",\n    \"Blockchain Technology\",\n]\nscores_0 = [0.75, 0.65, 0.55, 0.85, 0.45]\nscores_20 = [0.8, 0.7, 0.6, 0.9, 0.5]\nscores_40 = [0.85, 0.75, 0.65, 0.95, 0.55]\n\ncategories2 = [\n    \"Mobile Payments\",\n    \"E-Commerce\",\n    \"Cloud Computing\",\n]\nscores_0_2 = [\n    0.75,\n    0.65,\n    0.55,\n]\nscores_20_2 = [\n    0.8,\n    0.7,\n    0.6,\n]\nscores_40_2 = [\n    0.85,\n    0.75,\n    0.65,\n]\n\nscores_0_3 = [\n    0.45,\n    0.65,\n    0.55,\n]\nscores_20_3 = [\n    0.5,\n    0.6,\n    0.7,\n]\nscores_40_3 = [0.55, 0.75, 0.65]\n\nscores_0_4 = [\n    0.85,\n    0.9,\n    0.55,\n]\nscores_20_4 = [\n    0.9,\n    0.95,\n    0.6,\n]\nscores_40_4 = [0.95, 1, 0.65]\n\nlabels = [\"Score at Time 0\",\"Score at Time 20\",\"Score at Time 40\"]\n\ntitle2 = \"1st Experiment\"\ntitle3 = \"2nd Experiment\"\ntitle4 = \"3rd Experiment\"\n\n\n# Adjust the position of the bars on the x-axis to prevent overlap\nbar_height = 0.15\nbar_height2 = 0.1\nind = [i * (bar_height * len(categories1)) for i in range(len(scores_0))]\nind2 = [i * (bar_height2 * len(categories1)) for i in range(len(scores_0_2))]\nind3 = [i * (bar_height2 * len(categories1)) for i in range(len(scores_0_3))]\nind4 = [i * (bar_height2 * len(categories1)) for i in range(len(scores_0_4))]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(tight_layout=True, figsize=(10, 6))\ngs = gridspec.GridSpec(2, 3)\nax1 = fig.add_subplot(gs[0, :])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1, 1])\nax4 = fig.add_subplot(gs[1, 2])\n\n# Creating the bar plot with adjusted positions to prevent overlap\nax1.barh(\n    [pos - bar_height for pos in ind],\n    scores_0,\n    color=\"#9dcec9\",\n    height=bar_height,\n    label=labels[0],\n)\nax1.barh(\n    [pos + bar_height * 0 for pos in ind],\n    scores_20,\n    color=\"#f5c085\",\n    height=bar_height,\n    label=labels[1],\n)\nax1.barh(\n    [pos + bar_height * 1 for pos in ind],\n    scores_40,\n    color=\"#ea8675\",\n    height=bar_height,\n    label=labels[2],\n)\nax1.set_yticks([pos + bar_height * 0 for pos in ind], categories1)\n\nax2.barh(\n    [pos - bar_height2 for pos in ind2],\n    scores_0_2,\n    color=\"#9dcec9\",\n    height=bar_height2,\n    label=labels[0],\n)\nax2.barh(\n    [pos + bar_height2 * 0 for pos in ind2],\n    scores_20_2,\n    color=\"#f5c085\",\n    height=bar_height2,\n    label=labels[1],\n)\nax2.barh(\n    [pos + bar_height2 * 1 for pos in ind2],\n    scores_40_2,\n    color=\"#ea8675\",\n    height=bar_height2,\n    label=labels[2],\n)\nax2.set_yticks([pos + bar_height2 * 0 for pos in ind2], categories2)\nax2.set_title(title2)\n\nax3.barh(\n    [pos - bar_height2 * 1 for pos in ind3],\n    scores_0_3,\n    color=\"#9dcec9\",\n    height=bar_height2,\n    label=labels[0],\n)\nax3.barh(\n    [pos + bar_height2 * 0 for pos in ind3],\n    scores_20_3,\n    color=\"#f5c085\",\n    height=bar_height2,\n    label=labels[1],\n)\nax3.barh(\n    [pos + bar_height2 * 1 for pos in ind3],\n    scores_40_3,\n    color=\"#ea8675\",\n    height=bar_height2,\n    label=labels[2],\n)\nax3.set_yticks([])\nax3.set_title(title3)\n\nax4.barh(\n    [pos - bar_height2 * 1 for pos in ind4],\n    scores_0_4,\n    color=\"#9dcec9\",\n    height=bar_height2,\n    label=labels[0],\n)\nax4.barh(\n    [pos + bar_height2 * 0 for pos in ind4],\n    scores_20_4,\n    color=\"#f5c085\",\n    height=bar_height2,\n    label=labels[1],\n)\nax4.barh(\n    [pos + bar_height2 * 1 for pos in ind4],\n    scores_40_4,\n    color=\"#ea8675\",\n    height=bar_height2,\n    label=labels[2],\n)\nax4.set_yticks([])\nax4.set_title(title4)\n\n# Adding legend\nax1.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.2), ncols=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with enough space\nplt.tight_layout()\nplt.savefig('bar_84.pdf', bbox_inches='tight')"}
{"idx": "bar_85", "instruction": "There is a reference image for you and I also have a set of data about energy statistics for various countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data reflecting energy statistics for various countries, scaled for better visualization\ncategories = [\"Healthcare\", \"Technology\", \"Education\", \"Agriculture\"][::-1]\ntotal_funding = (\nnp.array([1200, 950, 800, 1100][::-1]) / 10\n) # in Million Dollars, scaled down\nresearch_investment_ratio = np.array(\n[60, 70, 90, 80][::-1]\n) # percentage of total funding\nprojects_completed = (\nnp.array([150, 200, 180, 220][::-1]) / 10\n) # in Thousands, scaled down\nstaff_involved = np.array(\n[40, 55, 35, 50][::-1]\n) # in Thousands, scaled down\n\ncategories2 = [\"Transport\", \"Finance\", \"Retail\", \"Energy\"][::-1]\ntotal_funding2 = (\nnp.array([900, 750, 1000, 650][::-1]) / 10\n) # in Million Dollars, scaled down\nresearch_investment_ratio2 = np.array(\n[85, 60, 75, 95][::-1]\n) # percentage of total funding\nprojects_completed2 = (\nnp.array([110, 50, 160, 90][::-1]) / 10\n) # in Thousands, scaled down\nstaff_involved2 = (\nnp.array([90, 20, 130, 70][::-1]) / 10\n) # in Thousands, scaled down\n\nlabels = [\n\"Total Funding (10^2 Million $)\",\n\"Research Investment Ratio (%)\",\n\"Projects Completed (10^1 Thousands)\",\n\"Staff Involved (10^1 Thousands)\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data reflecting energy statistics for various countries, scaled for better visualization\ncategories = [\"Healthcare\", \"Technology\", \"Education\", \"Agriculture\"][::-1]\ntotal_funding = (\n    np.array([1200, 950, 800, 1100][::-1]) / 10\n)  # in Million Dollars, scaled down\nresearch_investment_ratio = np.array(\n    [60, 70, 90, 80][::-1]\n)  # percentage of total funding\nprojects_completed = (\n    np.array([150, 200, 180, 220][::-1]) / 10\n)  # in Thousands, scaled down\nstaff_involved = np.array(\n    [40, 55, 35, 50][::-1]\n)  # in Thousands, scaled down\n\ncategories2 = [\"Transport\", \"Finance\", \"Retail\", \"Energy\"][::-1]\ntotal_funding2 = (\n    np.array([900, 750, 1000, 650][::-1]) / 10\n)  # in Million Dollars, scaled down\nresearch_investment_ratio2 = np.array(\n    [85, 60, 75, 95][::-1]\n)  # percentage of total funding\nprojects_completed2 = (\n    np.array([110, 50, 160, 90][::-1]) / 10\n)  # in Thousands, scaled down\nstaff_involved2 = (\n    np.array([90, 20, 130, 70][::-1]) / 10\n)  # in Thousands, scaled down\n\nlabels = [\n    \"Total Funding (10^2 Million $)\",\n    \"Research Investment Ratio (%)\",\n    \"Projects Completed (10^1 Thousands)\",\n    \"Staff Involved (10^1 Thousands)\",\n]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Stacked Bar Chart in subplots\nfig, axs = plt.subplots(2, 1, figsize=(8, 8), sharex=True)  # 2 rows, 1 column\nbar_width = 0.8\ny_pos = range(len(categories))\ny_pos2 = range(len(categories2))\n\ncolors = [\"tomato\", \"wheat\", \"#81acce\", \"darkseagreen\"]\n\ndata_ratios = [\n    total_funding,\n    research_investment_ratio,\n    projects_completed,\n    staff_involved,\n]\ndata_ratios2 = [\n    total_funding2,\n    research_investment_ratio2,\n    projects_completed2,\n    staff_involved2,\n]\n\naxs[0].invert_yaxis()  # labels read top-to-bottom\naxs[0].set_yticks(y_pos)\naxs[0].set_yticklabels(categories)\naxs[0].grid(axis=\"x\", color=\"gray\", linestyle=\"--\", linewidth=0.5)\naxs[0].set_axisbelow(True)\n\naxs[1].invert_yaxis()  # labels read top-to-bottom\naxs[1].set_yticks(y_pos2)\naxs[1].set_yticklabels(categories2)\naxs[1].grid(axis=\"x\", color=\"gray\", linestyle=\"--\", linewidth=0.5)\naxs[1].set_axisbelow(True)\n\n# Plot each ratio on separate subplots\nfor idx, data_ratio in enumerate(data_ratios[:3]):\n    lefts = np.zeros(len(categories))\n    for data, color, label in zip(data_ratios, colors, labels):\n        axs[0].barh(\n            y_pos,\n            data,\n            bar_width,\n            left=lefts,\n            color=color,\n            label=label if idx == 0 else \"\",\n        )\n        lefts += data\n\nfor idx, data_ratio in enumerate(data_ratios2[:3]):\n    lefts = np.zeros(len(categories2))\n    for data, color, label in zip(\n        data_ratios2, colors, labels\n    ):  # Use data_ratios2 here\n        axs[1].barh(\n            y_pos2,\n            data,\n            bar_width,\n            left=lefts,\n            color=color,\n            label=label if idx == 0 else \"\",\n        )\n        lefts += data\nfig.legend(labels, loc=\"upper center\", bbox_to_anchor=(0.5, 1.1), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_85.pdf', bbox_inches='tight')"}
{"idx": "bar_86", "instruction": "There is a reference image for you and I also have a set of data about customer service interactions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\n\"introduction\",\n\"assistance\",\n\"complaint\",\n\"forgiveness\",\n\"convincing\",\n\"gratitude\",\n\"farewell\",\n]\nsynthetic_data = [\n-5,\n-12,\n-8,\n-4,\n-6,\n-3,\n-2,\n] # Negative values for synthetic data\nhuman_data = [10, 15, 9, 4, 12, 13, 8]\nsynthetic_data2 = [-7, -11, -9, -3, -5, -2, -1] # Negative values for synthetic data\nhuman_data2 = [11, 18, 12, 6, 14, 11, 9]\nlabels = [\"Generated Text\", \"Human Text\"]\ntitles = [\"Baseline\", \"Enhanced\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\n    \"introduction\",\n    \"assistance\",\n    \"complaint\",\n    \"forgiveness\",\n    \"convincing\",\n    \"gratitude\",\n    \"farewell\",\n]\nsynthetic_data = [\n    -5,\n    -12,\n    -8,\n    -4,\n    -6,\n    -3,\n    -2,\n]  # Negative values for synthetic data\nhuman_data = [10, 15, 9, 4, 12, 13, 8]\nsynthetic_data2 = [-7, -11, -9, -3, -5, -2, -1]  # Negative values for synthetic data\nhuman_data2 = [11, 18, 12, 6, 14, 11, 9]\nlabels = [\"Generated Text\", \"Human Text\"]\ntitles = [\"Baseline\", \"Enhanced\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10, 6), sharey=True)  # 432x432 pixels\n\ncolors_human = plt.get_cmap(\"Paired_r\")(np.linspace(0.15, 0.85, len(categories)))\n\naxes[0].barh(\n    categories,\n    synthetic_data,\n    color=colors_human,\n    edgecolor=\"black\",\n    label=labels[0],\n)\naxes[0].barh(\n    categories,\n    human_data,\n    left=0,\n    color=colors_human,\n    edgecolor=\"black\",\n    label=labels[1],\n    alpha=0.7,\n)  # Set left to 0 for human data\n\n# Plot horizontal bar chart\naxes[1].barh(\n    categories,\n    synthetic_data2,\n    color=colors_human,\n    edgecolor=\"black\",\n    label=labels[0],\n)\naxes[1].barh(\n    categories,\n    human_data2,\n    left=0,\n    color=colors_human,\n    edgecolor=\"black\",\n    label=labels[1],\n    alpha=0.7,\n)  # Set left to 0 for human data\n\n# Add data labels\nfor i, (syn_val, hum_val) in enumerate(zip(synthetic_data, human_data)):\n    axes[0].text(\n        syn_val, i, f\"{abs(syn_val)}%\", va=\"center\", ha=\"left\", color=\"black\"\n    )  # Use absolute value for synthetic data\n    axes[0].text(hum_val, i, f\"{hum_val}%\", va=\"center\", ha=\"right\", color=\"black\")\n\n# Remove y-axis tick marks\naxes[0].tick_params(axis=\"y\", which=\"both\", left=False)\n\n# Set x-axis limits\naxes[0].set_xlim(\n    min(synthetic_data) - 10, max(human_data) + 10\n)  # Set x-axis limits to include negative values\naxes[0].set_xticks([])\naxes[1].set_xlim(\n    min(synthetic_data2) - 10, max(human_data2) + 10\n)  # Set x-axis limits to include negative values\n\n# Draw a vertical line at x=0\naxes[0].axvline(0, color=\"black\")\naxes[1].axvline(0, color=\"black\")\naxes[1].xaxis.grid(True, linestyle=\"--\")\n\n# Add text to x=0\naxes[0].text(-4, 7, labels[0], ha=\"right\", va=\"bottom\")\naxes[0].text(4, 7, labels[1], ha=\"left\", va=\"bottom\")\n\n# Add text to x=0\naxes[1].text(-4, 7, labels[0], ha=\"right\", va=\"bottom\")\naxes[1].text(4, 7, labels[1], ha=\"left\", va=\"bottom\")\n\n# Invert y-axis\naxes[0].invert_yaxis()\naxes[1].invert_yaxis()\n\n# Add title\naxes[0].set_title(titles[0], pad=30)\naxes[1].set_title(titles[1], pad=30)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('bar_86.pdf', bbox_inches='tight')"}
{"idx": "bar_87", "instruction": "There is a reference image for you and I also have a set of data about recommendation system performance across different categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the plots\nmodels = [\"Collaborative Filtering\", \"Content-Based Filtering\", \"Hybrid Model\", \"Deep Learning Model\", \"Matrix Factorization\"]\nelectronics_values = [12, -3, 8, 10, -4]\nbooks_values = [4.2, 3.1, -2.5, 6.3, 4.0]\nrestaurants_values = [2.5, -1.0, -1.5, 5.5, -1.2]\nfashion_values = [22.0, -2.5, -8.0, 6.5, -7.0]\ntitles = [\"Electronics\", \"Books\", \"Restaurants\", \"Fashion\"]\nxlabel = \"\u25b2%\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plots\nmodels = [\"Collaborative Filtering\", \"Content-Based Filtering\", \"Hybrid Model\", \"Deep Learning Model\", \"Matrix Factorization\"]\nelectronics_values = [12, -3, 8, 10, -4]\nbooks_values = [4.2, 3.1, -2.5, 6.3, 4.0]\nrestaurants_values = [2.5, -1.0, -1.5, 5.5, -1.2]\nfashion_values = [22.0, -2.5, -8.0, 6.5, -7.0]\ntitles = [\"Electronics\", \"Books\", \"Restaurants\", \"Fashion\"]\nxticks = [[-10, 0, 15], [-5, 0, 7], [-5, 0, 6], [-10, 0, 25]]\nxlabel = \"\u25b2%\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, axes = plt.subplots(2, 2, figsize=(10, 8), sharey=True)\n\n# Plot for Beauty\naxes[0][0].barh(models, electronics_values, color=\"white\", hatch=\"+\", edgecolor=\"black\")\naxes[0][0].set_title(titles[0])\nfor i, v in enumerate(electronics_values):\n    axes[0][0].text(\n        v - 0.5 if v < 0 else v + 0.5,\n        i,\n        f\"{v}%\",\n        color=\"black\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\naxes[0][0].axvline(0, color=\"black\")\naxes[0][0].set_xticks(xticks[0])\n\n# Plot for MovieLens-1M\naxes[0][1].barh(models, books_values, color=\"white\", edgecolor=\"black\")\naxes[0][1].set_title(titles[1])\nfor i, v in enumerate(books_values):\n    axes[0][1].text(\n        v - 0.2 if v < 0 else v + 0.2,\n        i,\n        f\"{v}%\",\n        color=\"black\" if v > 0 else \"red\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\naxes[0][1].axvline(0, color=\"black\")\naxes[0][1].set_xticks(xticks[1])\n\n# Plot for Yelp\naxes[1][0].barh(models, restaurants_values, color=\"white\", edgecolor=\"black\")\naxes[1][0].set_title(titles[2])\nfor i, v in enumerate(restaurants_values):\n    axes[1][0].text(\n        v - 0.5 if v < 0 else v + 0.5,\n        i,\n        f\"{v}%\",\n        color=\"black\" if v > 0 else \"red\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\naxes[1][0].axvline(0, color=\"black\")\naxes[1][0].set_xticks(xticks[2])\n\n# Plot for More\naxes[1][1].barh(models, fashion_values, color=\"white\", hatch=\"//\", edgecolor=\"black\")\naxes[1][1].set_title(titles[3])\nfor i, v in enumerate(fashion_values):\n    axes[1][1].text(\n        v - 0.5 if v < 0 else v + 0.5,\n        i,\n        f\"{v}%\",\n        color=\"black\" if v > 0 else \"red\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\naxes[1][1].axvline(0, color=\"black\")\naxes[1][1].set_xticks(xticks[3])\n\n# Hide all axes except the bottom one\nfor i in range(2):\n    for j in range(2):\n        axes[i][j].set_xlabel(xlabel)\n        for spine in [\"left\", \"right\", \"top\"]:\n            axes[i][j].spines[spine].set_visible(False)\n\n# Hide y-axis labels for axes[0][1] and axes[1][1]\naxes[0][1].set_yticks([])\naxes[0][1].set_yticklabels([])\naxes[1][1].set_yticks([])\naxes[1][1].set_yticklabels([])\n\nplt.subplots_adjust(wspace=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_87.pdf', bbox_inches='tight')"}
{"idx": "bar_88", "instruction": "There is a reference image for you and I also have a set of data about customer satisfaction scores for various services over different years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the categories and scores\ncategories = [\"Internet Service\", \"Mobile Service\", \"TV Service\", \"Home Phone Service\"]\nnum_scores = 4\nscore_range = (-6.5, -0.5)\nscores_2021 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nscores_2022 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nscores_2023 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nscores_2024 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nlabels = [\"2021 Satisfaction Scores\", \"2022 Satisfaction Scores\", \"2023 Satisfaction Scores\", \"2024 Satisfaction Scores\"]\ntitle1 = \"Customer Satisfaction Scores by Service and Year\"\nxlabel1 = \"Score\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the categories and scores\ncategories = [\"Internet Service\", \"Mobile Service\", \"TV Service\", \"Home Phone Service\"]\nnum_scores = 4\nscore_range = (-6.5, -0.5)\nscores_2021 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nscores_2022 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nscores_2023 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nscores_2024 = np.random.uniform(score_range[0], score_range[1], num_scores).tolist()\nlabels = [\"2021 Satisfaction Scores\", \"2022 Satisfaction Scores\", \"2023 Satisfaction Scores\", \"2024 Satisfaction Scores\"]\ntitle1 = \"Customer Satisfaction Scores by Service and Year\"\nxlabel1 = \"Score\"\nxticks1 = np.arange(-6.5, 0.1, 0.5)\nxticks2 = np.arange(-6.5, 0.1, 0.5)\nxlim1 = [-7, 0]\nxlim2 = [-7, 0]\n# The x locations for the groups\nind = np.arange(len(scores_2021))\n\n# The width of the bars\nbar_width = 0.2\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axes objects\nfig, ax = plt.subplots(2, 1, figsize=(10, 8))\nbars_3 = ax[0].barh(\n    ind,\n    scores_2021, \n    bar_width * 2, \n    label=labels[0], \n    color=\"#F27970\"\n)\n\n# Plotting data\nbars_3 = ax[1].barh(\n    ind - bar_width * 1.5,\n    scores_2021,\n    bar_width,\n    label=labels[0],\n    color=\"#F27970\",\n)\nbars_5 = ax[1].barh(\n    ind - bar_width * 0.5,\n    scores_2022,\n    bar_width,\n    label=labels[1],\n    color=\"#54B345\",\n)\nbars_7 = ax[1].barh(\n    ind + bar_width * 0.5,\n    scores_2023,\n    bar_width,\n    label=labels[2],\n    color=\"#C76DA2\",\n)\nbars_10 = ax[1].barh(\n    ind + bar_width * 1.5,\n    scores_2024,\n    bar_width,\n    label=labels[3],\n    color=\"#05B9E2\",\n)\n\n# Adding text inside the bars\nfor i, (score_3, score_5, score_7, score_10) in enumerate(\n    zip(scores_2021, scores_2022, scores_2023, scores_2024)\n):\n    ax[1].text(\n        score_3,\n        i - bar_width * 1.5,\n        f\"{score_3:.1f}\",\n        va=\"center\",\n        ha=\"right\",\n        color=\"black\",\n    )\n    ax[1].text(\n        score_5,\n        i - bar_width * 0.5,\n        f\"{score_5:.1f}\",\n        va=\"center\",\n        ha=\"right\",\n        color=\"black\",\n    )\n    ax[1].text(\n        score_7,\n        i + bar_width * 0.5,\n        f\"{score_7:.1f}\",\n        va=\"center\",\n        ha=\"right\",\n        color=\"black\",\n    )\n    ax[1].text(\n        score_10,\n        i + bar_width * 1.5,\n        f\"{score_10:.1f}\",\n        va=\"center\",\n        ha=\"right\",\n        color=\"black\",\n    )\n\n# Adding labels, title, and custom x-axis tick labels, etc.\nax[1].set_xlabel(xlabel1)\nax[0].set_xticks(xticks1)\nax[1].set_xticks(xticks2)\nax[0].set_xlim(xlim1)\nax[1].set_xlim(xlim2)\nax[0].set_title(title1)\nax[0].set_yticks(ind)\nax[0].set_yticklabels(categories)\nax[1].set_yticks(ind)\nax[1].set_yticklabels(categories)\nax[1].legend()\n\n# Show grid lines for x-axis\nax[0].xaxis.grid(True)\nax[1].xaxis.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_88.pdf', bbox_inches='tight')"}
{"idx": "bar_89", "instruction": "There is a reference image for you and I also have a set of data about marketing campaign performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the bar chart\ncategories = range(1, 11)\nconversion_rates = [0.9, 0.83, 0.86, 0.84, 0.7, 0.85, 0.93, 0.89, 0.88, 1.0]\nclick_through_rates = [0.3, 0.5, 0.8, 0.6, 0.4, 0.65, 0.43, 0.69, 0.58, 1.0]\nbounce_rates = [0.7, 0.6, 0.5, 0.7, 0.7, 0.64, 0.76, 0.56, 0.38, 1.0]\nxlabel = \"Top-10 Categories in Marketing Campaign\"\nylabel1 = \"Conversion Rate\"\nylabel2 = \"Click-Through Rate\"\nylabel3 = \"Bounce Rate\"\nyline = 0.6\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar chart\ncategories = range(1, 11)\nconversion_rates = [0.9, 0.83, 0.86, 0.84, 0.7, 0.85, 0.93, 0.89, 0.88, 1.0]\nclick_through_rates = [0.3, 0.5, 0.8, 0.6, 0.4, 0.65, 0.43, 0.69, 0.58, 1.0]\nbounce_rates = [0.7, 0.6, 0.5, 0.7, 0.7, 0.64, 0.76, 0.56, 0.38, 1.0]\nxlabel = \"Top-10 Categories in Marketing Campaign\"\nylabel1 = \"Conversion Rate\"\nylabel2 = \"Click-Through Rate\"\nylabel3 = \"Bounce Rate\"\nylim = [0.0, 1.1]\nyticks = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nyline = 0.6\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the bar chart\nfig, axes = plt.subplots(\n    3, 1, figsize=(10, 6), sharex=True\n)  # Adjusting figure size to match the original image's dimensions\naxes[0].bar(categories, conversion_rates, color=\"#7fa9cc\")\naxes[1].bar(categories, click_through_rates, color=\"#e39c90\")\naxes[2].bar(categories, bounce_rates, color=\"#af86ce\")\n\n# Add a horizontal line for the average accuracy\naxes[0].axhline(y=yline, color=\"red\", linestyle=\"--\")\n\n# Add labels and title\nplt.xlabel(xlabel)\naxes[0].set_ylabel(ylabel1)\naxes[1].set_ylabel(ylabel2)\naxes[2].set_ylabel(ylabel3)\n\n# Set y-axis limits\nplt.ylim(ylim)\n# Set x-axis, y-axis ticks\nplt.xticks(categories)\nplt.yticks(yticks)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_89.pdf', bbox_inches='tight')"}
{"idx": "bar_90", "instruction": "There is a reference image for you and I also have a set of data about the cost of living comparison in major US cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nmodels = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\", \"Philadelphia\", \"San Antonio\"]\npercentages = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\npercentages2 = [2.0, 3.55, 5.64, 12.64, 18.79, 20.93, 30.5]\n\n# Sorting the data in descending order while keeping track of the cities order\nsorted_data = sorted(zip(percentages, models), reverse=True)\nsorted_percentages, sorted_models = zip(*sorted_data)\n\nxlabel = \"City\"\nylabel1 = \"Housing Price Increase (%)\"\nylabel2 = \"Living Cost Increase (%)\"\ntitle = \"Cost of Living Comparison in Major US Cities\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import colorsys\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nmodels = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\", \"Philadelphia\", \"San Antonio\"]\npercentages = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\npercentages2 = [2.0, 3.55, 5.64, 12.64, 18.79, 20.93, 30.5]\n\n# Sorting the data in descending order while keeping track of the cities order\nsorted_data = sorted(zip(percentages, models), reverse=True)\nsorted_percentages, sorted_models = zip(*sorted_data)\n\nxlabel = \"City\"\nylabel1 = \"Housing Price Increase (%)\"\nylabel2 = \"Living Cost Increase (%)\"\ntitle = \"Cost of Living Comparison in Major US Cities\"\n\n\n# Generate random colors with lower saturation\ndef hsl_to_rgb(h, s, l):\n    return colorsys.hls_to_rgb(h, l, s)\n\n\n# Randomly generate colors\ncolors = [hsl_to_rgb(hue, 0.5, 0.6) for hue in np.linspace(0, 1, len(models) + 1)[:-1]]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and bar chart with the sorted data\nfig, axes = plt.subplots(2, 1, figsize=(12, 8), sharex=True)\nbars = axes[0].bar(sorted_models, sorted_percentages, color=colors)\nbars2 = axes[1].bar(sorted_models, percentages2, color=colors)\n# Randomly decide where to put the text based on the value of the bar\nfor bar in bars:\n    yval = bar.get_height()\n    text_y = (\n        yval - 5 if yval > 10 else yval + 1\n    )  # Slight modification to avoid negative values\n    axes[0].text(\n        bar.get_x() + bar.get_width() / 2,\n        text_y,\n        f\"{yval}%\",\n        ha=\"center\",\n        va=\"top\" if text_y < yval else \"bottom\",\n    )\n\n# Set chart title and labels\nplt.xlabel(xlabel)\naxes[0].set_ylabel(ylabel1)\naxes[1].set_ylabel(ylabel2)\n\n# Randomly set y-axis range to a bit higher than the max value\naxes[0].set_ylim(0, np.max(sorted_percentages) + 10)\naxes[1].set_ylim(0, np.max(percentages2) + 10)\n\n# Randomize the gridlines and ticks\naxes[1].grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n# Hide the top and right spines\naxes[0].spines[\"top\"].set_visible(False)\naxes[0].spines[\"right\"].set_visible(False)\naxes[1].spines[\"top\"].set_visible(False)\naxes[1].spines[\"right\"].set_visible(False)\n# Randomize tick rotation\nplt.xticks(rotation=45)\nfig.suptitle(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Apply tight layout\nplt.tight_layout()\nplt.savefig('bar_90.pdf', bbox_inches='tight')"}
{"idx": "bar_91", "instruction": "There is a reference image for you and I also have a set of data about political party classification performance. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nlabels = [\"GCN\", \"RvNN\", \"Hyphen\", \"GET\"]\ndemocratic = [\n0.75,\n0.8,\n0.78,\n0.85,\n]\nmixed = [\n0.8,\n0.85,\n0.82,\n0.83,\n]\nrepublican = [\n0.84,\n0.80,\n0.81,\n0.8,\n]\n\nlegendlabel = [\"Democratic\", \"Mixed\", \"Republican\"]\nylabel1 =\"Macro F1-score\"\nylabel2 =\"Macro F1-score\"\nxlabel1=\"Pheme\"\nxlabel2=\"LLM-mis\"\n\nx = np.arange(len(labels)) # the label locations\nwidth = 0.25 # the width of the bars\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nlabels = [\"GCN\", \"RvNN\", \"Hyphen\", \"GET\"]\ndemocratic = [\n    0.75,\n    0.8,\n    0.78,\n    0.85,\n]\nmixed = [\n    0.8,\n    0.85,\n    0.82,\n    0.83,\n]\nrepublican = [\n    0.84,\n    0.80,\n    0.81,\n    0.8,\n]\n\ncolors = [\"#919fc7\", \"#ed936b\", \"#c8686d\"]\nlegendlabel = [\"Democratic\", \"Mixed\", \"Republican\"]\nylabel1 =\"Macro F1-score\"\nylabel2 =\"Macro F1-score\"\nxlabel1=\"Pheme\"\nxlabel2=\"LLM-mis\"\nylim1=[0.70, 0.85]\nylim2=[0.70, 0.85]\nyticks1=[0.7, 0.75, 0.80]\nyticks2=[0.80, 0.85, 0.90]\nytickslabel1=[\".70\", \".75\", \".80\"]\nytickslabel2=[\".80\", \".85\", \".90\"]\n\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.25  # the width of the bars\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Upper plot\nrects1 = ax1.bar(\n    x - width, democratic, width, label=legendlabel[0], color=colors[0], edgecolor=\"black\"\n)\nrects2 = ax1.bar(x, mixed, width, label=legendlabel[1], color=colors[1], edgecolor=\"black\")\nrects3 = ax1.bar(\n    x + width, republican, width, label=legendlabel[2], color=colors[2], edgecolor=\"black\"\n)\n# Lower plot\nrects4 = ax2.bar(x - width, democratic, width, color=colors[0], edgecolor=\"black\")\nrects5 = ax2.bar(x, mixed, width, color=colors[1], edgecolor=\"black\")\nrects6 = ax2.bar(x + width, republican, width, color=colors[2], edgecolor=\"black\")\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax1.set_ylabel(ylabel1)\nax2.set_ylabel(ylabel2)\nax1.set_xlabel(xlabel1)\nax2.set_xlabel(xlabel2)\nax1.set_xticks(x)\nax1.set_xticklabels(labels)\nax2.set_xticks(x)\nax2.set_xticklabels(labels)\n# Set y-axis limit to match the reference picture\nax1.set_ylim(ylim1)\nax2.set_ylim(ylim2)\n\nax1.set_yticks(yticks1)\nax1.set_yticklabels(ytickslabel1)\nax2.set_yticks(yticks2)\nax2.set_yticklabels(ytickslabel2)\n\n# Set grid color and style\nax2.grid(axis=\"y\", color=\"gray\", linestyle=\"--\", linewidth=0.5)\n\nax1.set_axisbelow(True)\nax2.set_axisbelow(True)\n\n# Remove top and right borders\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax2.spines[\"top\"].set_visible(False)\nax2.spines[\"right\"].set_visible(False)\n# Add legend\nlegend_handles = [\n    mpatches.Patch(color=color, label=label)\n    for color, label in zip(colors, legendlabel)\n]\n# Create legend\nfig.legend(\n    handles=legend_handles, loc=\"upper center\", ncol=3, bbox_to_anchor=(0.5, 1.15)\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_91.pdf', bbox_inches='tight')"}
{"idx": "bar_92", "instruction": "There is a reference image for you and I also have a set of data about service availability in different sectors across various regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plots\nroles = [\"Healthcare\", \"Education\", \"Transportation\"]\ncounts_s1 = np.array([[300, 450, 250], [400, 350, 250], [400, 200, 400]])\ncounts_s2 = np.array([[370, 470, 160], [400, 340, 260], [360, 210, 430]])\ncounts_s3 = np.array([[240, 490, 270], [340, 390, 270], [380, 170, 450]])\n\nlegendtitle = [\"Doctors\", \"Teachers\", \"Drivers\"]\ntitles = [\"Service Availability in Urban Areas\", \"Service Availability in Suburban Areas\", \"Service Availability in Rural Areas\"]\nylabel = \"Sector\"\nxlabel = \"Service Availability Count\"\nsuptitle = \"Service Availability Comparison by Region Type\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plots\nroles = [\"Healthcare\", \"Education\", \"Transportation\"]\ncounts_s1 = np.array([[300, 450, 250], [400, 350, 250], [400, 200, 400]])\ncounts_s2 = np.array([[370, 470, 160], [400, 340, 260], [360, 210, 430]])\ncounts_s3 = np.array([[240, 490, 270], [340, 390, 270], [380, 170, 450]])\n\n# Colors for the bars\ncolors = [\"#7cb7ef\", \"#829be6\", \"#f2d18b\"]\ncolors2 = [\"#97e4a0\", \"#eea092\", \"#a093d7\"]\nwidth = 0.3\nlegendtitle = [\"Doctors\", \"Teachers\", \"Drivers\"]\ntitles = [\"Service Availability in Urban Areas\", \"Service Availability in Suburban Areas\", \"Service Availability in Rural Areas\"]\nylabel = \"Sector\"\nxlabel = \"Service Availability Count\"\nxticks = [0, 200, 400, 600, 800, 1000]\nsuptitle = \"Service Availability Comparison by Region Type\"\n\n# Function to plot stacked bars\ndef plot_stacked_bars(ax, counts, roles, colors):\n    bottom = np.zeros(len(roles))\n    for i in range(counts.shape[1]):\n        ax.barh(roles, counts[:, i], height=width, left=bottom, color=colors[i])\n        bottom += counts[:, i]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots with shared x-axis\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(8, 6), sharex=True)\n\n# Plot for s1\nplot_stacked_bars(ax1, counts_s1, roles, colors)\nax1.set_title(titles[0])\nax1.set_ylabel(ylabel)\nax1.invert_yaxis()  # Invert y-axis to match the picture\nax1.grid(True, alpha=0.7)  # Add grid lines\n\n# Plot for s2\nplot_stacked_bars(ax2, counts_s2, roles, colors)\nax2.set_title(titles[1])\nax2.set_ylabel(ylabel)\nax2.invert_yaxis()  # Invert y-axis to match the picture\nax2.grid(True, alpha=0.7)  # Add grid lines\n\n# Plot for s3\nplot_stacked_bars(ax3, counts_s3, roles, colors2)\nax3.set_title(titles[2])\nax3.set_xlabel(xlabel)\nax3.set_ylabel(ylabel)\nax3.invert_yaxis()  # Invert y-axis to match the picture\nax3.grid(True, alpha=0.7)  # Add grid lines\n\n# Legend\nax1.legend(legendtitle, bbox_to_anchor=(1.05, 1), loc=\"upper left\")\nax2.legend(legendtitle, bbox_to_anchor=[1.05, 1], loc=\"upper left\")\nax3.legend(legendtitle, bbox_to_anchor=[1.05, 1], loc=\"upper left\")\n\n# Set x-axis ticks after all plots\nax1.set_xticks(xticks)\nax2.set_xticks(xticks)\nax3.set_xticks(xticks)\nax1.tick_params(axis=\"x\", which=\"both\", bottom=True, top=False, labelbottom=True)\n\n# Title for the whole figure\nfig.suptitle(suptitle)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('bar_92.pdf', bbox_inches='tight')"}
{"idx": "bar_93", "instruction": "There is a reference image for you and I also have a set of data about engagement levels in different activities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Sample engagement levels in different activities\n\neye_movement_data2 = {\n\"Engagement\": [45.2, 34.8, 20.0, 55.5, 60.0],\n}\n\nbrainwave_data2 = {\n\"Engagement\": [40.1, 38.9, 30.2, 50.3, 48.5]\n}\n\ncategories2 = [\"Reading\", \"Gaming\", \"Watching TV\", \"Exercising\", \"Socializing\"]\nlabels = [\"Eye Movement\", \"Brainwave\"]\nsuptitle = \"Engagement Levels in Various Activities\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.gridspec as gridspec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample engagement levels in different activities\n\neye_movement_data2 = {\n    \"Engagement\": [45.2, 34.8, 20.0, 55.5, 60.0],\n}\n\nbrainwave_data2 = {\n    \"Engagement\": [40.1, 38.9, 30.2, 50.3, 48.5]\n}\n\ncategories2 = [\"Reading\", \"Gaming\", \"Watching TV\", \"Exercising\", \"Socializing\"]\ncolors = [\"#377eb8\", \"#4daf4a\", \"#e41a1c\", \"#ff7f00\", \"#984ea3\"]\nxlim = [-140, 140]\nxticks = np.arange(-140, 141, 20)\nlabels = [\"Eye Movement\", \"Brainwave\"]\nsuptitle = \"Engagement Levels in Various Activities\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axes = plt.subplots(2, 1, figsize=(6, 3), sharex=True)\n\n\ndef create_bar_chart(ax, results, category_names, title):\n    labels = list(results.keys())\n    data = np.array(list(results.values()))\n    data_cum = data.cumsum(axis=1)\n    middle_index = data.shape[1] // 2\n    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index] / 2\n\n    # Color Mapping\n    category_colors = plt.get_cmap(\"RdYlGn\")(np.linspace(0.15, 0.85, data.shape[1]))\n\n    # Plot Bars\n    for i, (colname, color) in enumerate(zip(category_names, category_colors)):\n        widths = data[:, i]\n        starts = data_cum[:, i] - widths - offsets\n        rects = ax.barh(\n            labels,\n            widths,\n            left=starts,\n            height=0.5,\n            label=colname,\n            color=color,\n            edgecolor=\"black\",\n        )\n        for j, (start, width) in enumerate(zip(starts, widths)):\n            # Calculate the center position of each bar segment for the text\n            text_x = start + width / 2\n            text_y = j  # y-coordinate is based on the bar's index (j)\n            ax.text(\n                text_x,\n                text_y,\n                f\"{abs(width):.1f}%\",\n                va=\"center\",\n                ha=\"center\",\n                color=\"black\",\n                fontsize=8,\n            )\n    # Add Zero Reference Line\n    ax.axvline(0, linestyle=\"-\", color=\"black\", alpha=0.25)\n    # X Axis\n    ax.set_xlim(xlim)\n    ax.set_xticks(xticks)\n    ax.xaxis.set_major_formatter(lambda x, pos: str(abs(int(x))))\n    # Y Axis\n    ax.invert_yaxis()\n    ax.set_title(title)\n\n\ncreate_bar_chart(axes[0], eye_movement_data2, categories2, labels[0])\ncreate_bar_chart(axes[1], brainwave_data2, categories2, labels[1])\n\n# Set the overall title\nfig.suptitle(suptitle)\n\n# Add legend for the last two subplots\nhandles, labels = axes[1].get_legend_handles_labels()\nfig.legend(\n    handles,\n    labels,\n    loc=\"lower center\",\n    ncol=len(categories2),\n    bbox_to_anchor=(0.5, -0.1),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_93.pdf', bbox_inches='tight')"}
{"idx": "bar_94", "instruction": "There is a reference image for you and I also have a set of data about agricultural yield optimization. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\n# New domain: Agricultural yield optimization\n\n# Variable ranges for different parameters\nwater_usage = np.linspace(10, 100, 10) # in liters\nfertilizer_amount = np.linspace(10, 50, 10) # in kg\ntemperature = np.linspace(15, 30, 10) # in degrees Celsius\n\n# Sample yield change rates for 'Organic Methods' and 'Conventional Methods'\nyield_change_water_organic = [10.98, 14.3, 12.06, 10.9, 8.47, 12.92, 8.75, 17.84, 19.27, 7.67]\nyield_change_fertilizer_organic = [41.67, 31.16, 32.72, 47.02, 12.84, 13.49, 10.81, 43.3, 41.13, 44.8]\nyield_change_temperature_organic =[9.57, 5.98, -0.77, 5.61, -7.63, 2.8, -7.13, 8.89, 0.44, -1.71]\n\nyield_change_water_conventional = [-2.06, 13.23, 3.68, 7.05, -9.44, 8.53, 8.36, 8.51, 18.31, 10.45]\nyield_change_fertilizer_conventional = [11.57, 16.22, 31.86, -6.39, 30.01, 30.24, 2.62, -2.26, 8.93, 11.82]\nyield_change_temperature_conventional = [1.4, -1.23, 9.77, -7.96, -5.82, -6.77, 3.06, -4.93, -0.67, -5.11]\n\nyield_change_water_organic =[10.98, 14.3, 12.06, 10.9, 8.47, 12.92, 8.75, 17.84, 19.27, 7.67]\nyield_change_fertilizer_organic = [41.67, 31.16, 32.72, 47.02, 12.84, 13.49, 10.81, 43.3, 41.13, 44.8]\nyield_change_temperature_organic = [9.57, 5.98, -0.77, 5.61, -7.63, 2.8, -7.13, 8.89, 0.44, -1.71]\n\nyield_change_water_conventional = [-2.06, 13.23, 3.68, 7.05, -9.44, 8.53, 8.36, 8.51, 18.31, 10.45]\nyield_change_fertilizer_conventional = [11.57, 16.22, 31.86, -6.39, 30.01, 30.24, 2.62, -2.26, 8.93, 11.82]\nyield_change_temperature_conventional = [1.4, -1.23, 9.77, -7.96, -5.82, -6.77, 3.06, -4.93, -0.67, -5.11]\n\nlabels = [\"Organic Methods\", \"Conventional Methods\"]\nxlabels = [\"Water Usage [liters]\", \"Fertilizer Amount [kg]\", \"Temperature [\u00b0C]\"]\nylabel = \"Yield Change Rate [%]\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.gridspec as gridspec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\n# New domain: Agricultural yield optimization\n\n# Variable ranges for different parameters\nwater_usage = np.linspace(10, 100, 10)  # in liters\nfertilizer_amount = np.linspace(10, 50, 10)  # in kg\ntemperature = np.linspace(15, 30, 10)  # in degrees Celsius\n\n# Sample yield change rates for 'Organic Methods' and 'Conventional Methods'\nyield_change_water_organic = [10.98, 14.3, 12.06, 10.9, 8.47, 12.92, 8.75, 17.84, 19.27, 7.67]\nyield_change_fertilizer_organic = [41.67, 31.16, 32.72, 47.02, 12.84, 13.49, 10.81, 43.3, 41.13, 44.8]\nyield_change_temperature_organic =[9.57, 5.98, -0.77, 5.61, -7.63, 2.8, -7.13, 8.89, 0.44, -1.71]\n\nyield_change_water_conventional = [-2.06, 13.23, 3.68, 7.05, -9.44, 8.53, 8.36, 8.51, 18.31, 10.45]\nyield_change_fertilizer_conventional = [11.57, 16.22, 31.86, -6.39, 30.01, 30.24, 2.62, -2.26, 8.93, 11.82]\nyield_change_temperature_conventional = [1.4, -1.23, 9.77, -7.96, -5.82, -6.77, 3.06, -4.93, -0.67, -5.11]\n\n# \u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u56db\u820d\u4e94\u5165\u5230\u4e24\u4f4d\u5c0f\u6570\uff0c\u5e76\u8f6c\u6362\u4e3a Python \u5217\u8868\nyield_change_water_organic =[10.98, 14.3, 12.06, 10.9, 8.47, 12.92, 8.75, 17.84, 19.27, 7.67]\nyield_change_fertilizer_organic = [41.67, 31.16, 32.72, 47.02, 12.84, 13.49, 10.81, 43.3, 41.13, 44.8]\nyield_change_temperature_organic = [9.57, 5.98, -0.77, 5.61, -7.63, 2.8, -7.13, 8.89, 0.44, -1.71]\n\nyield_change_water_conventional = [-2.06, 13.23, 3.68, 7.05, -9.44, 8.53, 8.36, 8.51, 18.31, 10.45]\nyield_change_fertilizer_conventional = [11.57, 16.22, 31.86, -6.39, 30.01, 30.24, 2.62, -2.26, 8.93, 11.82]\nyield_change_temperature_conventional = [1.4, -1.23, 9.77, -7.96, -5.82, -6.77, 3.06, -4.93, -0.67, -5.11]\n\nlabels = [\"Organic Methods\", \"Conventional Methods\"]\nxlabels = [\"Water Usage [liters]\", \"Fertilizer Amount [kg]\", \"Temperature [\u00b0C]\"]\nylabel = \"Yield Change Rate [%]\"\nylims = [[-100, 100], [-60, 60], [-15, 15]]\nxlims = [[10, 110], [8, 52], [13, 32]]\nyticks = [[-100,-50,0, 50,100], [-50, -25, 0, 25, 50], [-10, -5, 0, 5, 10]]\nxticks = [[0,30,50,80,110],\n          [10, 15, 20, 25, 30, 35, 40, 45, 50],\n          [15, 18, 21, 24, 27, 30]]\n\n# Create a gridspec\ngs = gridspec.GridSpec(2, 2)  # Adjust the height ratios for each row\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(figsize=(10, 6))\n\n# Create axes using the gridspec\naxs = [plt.subplot(gs[0, :]), plt.subplot(gs[1, 0]), plt.subplot(gs[1, 1])]\n\n# Top chart - Brightness\naxs[0].bar(\n    water_usage - 2,\n    yield_change_fertilizer_organic,\n    width=4,\n    color=\"#ee8882\",\n    label=labels[0],\n)\naxs[0].bar(\n    water_usage + 2,\n    yield_change_water_conventional,\n    width=4,\n    color=\"#8db7db\",\n    label=labels[1],\n)\naxs[0].set_xlabel(xlabels[0])\naxs[0].set_ylabel(ylabel)\naxs[0].set_ylim(ylims[0])\naxs[0].set_xlim(xlims[0])\naxs[0].set_yticks(yticks[0])\naxs[0].set_xticks(xticks[0])\naxs[0].grid(True)\n\n# Middle chart - Scale\naxs[1].bar(fertilizer_amount - 0.5, yield_change_fertilizer_organic, width=1, color=\"#ee8882\")\naxs[1].bar(fertilizer_amount + 0.5, yield_change_fertilizer_conventional, width=1, color=\"#8db7db\")\naxs[1].set_xlabel(xlabels[1])\naxs[1].set_ylabel(ylabel)\naxs[1].set_ylim(ylims[1])\naxs[1].set_xlim(xlims[1])\naxs[1].set_yticks(yticks[1])\naxs[1].set_xticks(xticks[1])\naxs[1].grid(True)\n\n# Bottom chart - Rotation Angle\naxs[2].bar(temperature - 0.5, yield_change_temperature_organic, width=0.6, color=\"#ee8882\")\naxs[2].bar(\n    temperature + 0.3, yield_change_temperature_conventional, width=0.6, color=\"#8db7db\"\n)\naxs[2].set_xlabel(xlabels[2])\naxs[2].set_ylabel(ylabel)\naxs[2].set_ylim(ylims[2])\naxs[2].set_xlim(xlims[2])\naxs[2].set_yticks(yticks[2])\naxs[2].set_xticks(xticks[2])\naxs[2].grid(True)\n\n# Add legend\nfig.legend(loc=\"upper center\", ncol=2, bbox_to_anchor=(0.5, 1.03))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_94.pdf', bbox_inches='tight')"}
{"idx": "bar_95", "instruction": "There is a reference image for you and I also have a set of data about AI model performance improvements across different sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmodels = [\"XCalibur AI\", \"OmegaNet 2.0\", \"NeuroStream\", \"QuantumLeap AI\", \"Sentient Core\"]\nimprovements = {\"Healthcare\": [4.5], \"Finance\": [1.2], \"Education\": [3.4], \"Retail\": [2.8], \"Manufacturing\": [0.7]}\nimprovements2 = {\"Healthcare\": [2.1], \"Finance\": [-0.5], \"Education\": [4.1], \"Retail\": [1.9], \"Manufacturing\": [-1.3]}\ntitle = \"AI Model Performance Improvement by Sector\"\nlegendtitle = \"Sector\"\nylabel = \"Improvement [%]\"\nxlabel = \"AI Model\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodels = [\"XCalibur AI\", \"OmegaNet 2.0\", \"NeuroStream\", \"QuantumLeap AI\", \"Sentient Core\"]\nimprovements = {\"Healthcare\": [4.5], \"Finance\": [1.2], \"Education\": [3.4], \"Retail\": [2.8], \"Manufacturing\": [0.7]}\nimprovements2 = {\"Healthcare\": [2.1], \"Finance\": [-0.5], \"Education\": [4.1], \"Retail\": [1.9], \"Manufacturing\": [-1.3]}\ntitle = \"AI Model Performance Improvement by Sector\"\nlegendtitle = \"Sector\"\nylabel = \"Improvement [%]\"\nylims = [[-2, 5], [-5, 5]]\nxlabel = \"AI Model\"\n# Colors for each language\ncolors = [\"#8171d7\", \"#af4b3d\", \"#d07035\", \"#d6a741\", \"#639b48\"]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure and axis\nfig, ax = plt.subplots(2, 1, figsize=(10, 6))\n\n# Bar width\nbar_width = 0.75\n\n# Positions of the bars on the x-axis\nr = np.arange(len(models))\n\n# Plotting the bars\nfor i, language in enumerate(improvements):\n    bars = ax[0].bar(\n        r[i],\n        improvements[language],\n        color=colors[i],\n        width=bar_width,\n        label=language,\n        hatch=\"//\",\n        edgecolor=\"white\",\n    )\n    # Add text labels\n    for bar, val in zip(bars, improvements[language]):\n        height = bar.get_height()\n        ax[0].text(\n            bar.get_x() + bar.get_width() / 2,\n            height + 0.1 if height > 0 else height - 0.4,\n            f\"{val:.1f}\",\n            ha=\"center\",\n        )\nfor i, language in enumerate(improvements2):\n    bars2 = ax[1].bar(\n        r[i],\n        improvements2[language],\n        color=colors[i],\n        width=bar_width,\n        label=language,\n        hatch=\"//\",\n        edgecolor=\"white\",\n    )\n    # Add text labels\n    for bar, val in zip(bars2, improvements2[language]):\n        height = bar.get_height()\n        ax[1].text(\n            bar.get_x() + bar.get_width() / 2,\n            height + 0.1 if height > 0 else height - 0.4,\n            f\"{val:.1f}\",\n            ha=\"center\",\n        )\n\nax[0].axhline(0, color=\"black\")\nax[1].axhline(0, color=\"black\")\n# Add xticks on the middle of the group bars\nplt.xticks(r, models, rotation=45)\n\n# Add ylabel\nplt.ylabel(ylabel)\nax[1].set_ylim(ylims[1])\nax[0].set_ylim(ylims[0])\nplt.gca().grid(color=\"gray\", linewidth=0.5)\nplt.gca().set_axisbelow(True)\n\n# Create legend & Show graphic\nax[0].legend(title=legendtitle, loc=\"upper right\")\nax[0].set_title(title)\nax[1].set_xlabel(xlabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_95.pdf', bbox_inches='tight')"}
{"idx": "bar_96", "instruction": "There is a reference image for you and I also have a set of data about energy efficiency recall rates for hydro and solar power sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the bar charts\ntruthful_recall = np.array(\n[\n[88.3, 85.9, 82.8],\n[78.3, 75.7, 73.6],\n[68.0, 65.6, 63.5],\n[58.8, 56.2, 54.6],\n[48.3, 45.9, 43.5],\n]\n)\nmisleading_recall = np.array(\n[\n[18.1, 21.6, 23.7],\n[28.3, 31.0, 29.5],\n[38.5, 41.6, 36.5],\n[48.5, 51.8, 45.8],\n[58.7, 61.6, 53.4],\n]\n)\nx = [0, 1, 2]\n\n# Titles for subplots\ntitles = [\n\"Hydro:Solar = 2:0\",\n\"Hydro:Solar = 2:1\",\n\"Hydro:Solar = 2:2\",\n\"Hydro:Solar = 1:2\",\n\"Hydro:Solar = 0:2\",\n]\nlabels = [\"Hydro Efficiency\", \"Solar Efficiency\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar charts\ntruthful_recall = np.array(\n    [\n        [88.3, 85.9, 82.8],\n        [78.3, 75.7, 73.6],\n        [68.0, 65.6, 63.5],\n        [58.8, 56.2, 54.6],\n        [48.3, 45.9, 43.5],\n    ]\n)\nmisleading_recall = np.array(\n    [\n        [18.1, 21.6, 23.7],\n        [28.3, 31.0, 29.5],\n        [38.5, 41.6, 36.5],\n        [48.5, 51.8, 45.8],\n        [58.7, 61.6, 53.4],\n    ]\n)\nx = [0, 1, 2]\n\n# Titles for subplots\ntitles = [\n    \"Hydro:Solar = 2:0\",\n    \"Hydro:Solar = 2:1\",\n    \"Hydro:Solar = 2:2\",\n    \"Hydro:Solar = 1:2\",\n    \"Hydro:Solar = 0:2\",\n]\nylim = [-80, 100]\nxticks = [0, 1, 2]\nxticklabels = [\"Low Efficiency\", \"Medium Efficiency\", \"High Efficiency\"]\nlabels = [\"Hydro Efficiency\", \"Solar Efficiency\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axes = plt.subplots(2, 2, figsize=(8, 8))\n\naxs = [axes[0][0], axes[0][1], axes[1][0], axes[1][1]]\n\n# Create subplots\nfor i, ax in enumerate(axs):\n    ax.bar(x, truthful_recall[i], width=0.5, label=labels[0], color=\"#8a9ee7\")\n    ax.bar(\n        x, -misleading_recall[i], width=0.5, label=labels[1], color=\"#dc7b75\"\n    )\n    ax.set_title(titles[i])\n    ax.set_ylim(ylim)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(xticklabels)\n    # ax.axhline(0, color='black', linewidth=0.8)\n    ax.yaxis.grid(True, linestyle=\"--\")\n    ax.set_axisbelow(True)\n\n    # Annotate bars with their values\n    for j in range(3):\n        ax.text(\n            x[j], truthful_recall[i][j] - 7, str(truthful_recall[i][j]), ha=\"center\"\n        )\n        ax.text(\n            x[j],\n            -misleading_recall[i][j] + 5,\n            str(misleading_recall[i][j]),\n            ha=\"center\",\n        )\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\nplt.savefig('bar_96.pdf', bbox_inches='tight')"}
{"idx": "bar_97", "instruction": "There is a reference image for you and I also have a set of data about quality inspection scores across different factories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Seed for reproducibility\n\n# Sample data\nannotators = [\"Wang\", \"Li\", \"Zhang\", \"Chen\", \"Liu\", \"Yang\"]\nbase_scores = {\n\"Factory Alpha\": np.random.randint(50, 100, (7, 5)),\n\"Factory Beta\": np.random.randint(50, 100, (7, 5)),\n\"Factory Gamma\": np.random.randint(50, 100, (7, 5)),\n\"Factory Delta\": np.random.randint(50, 100, (7, 5)),\n}\ntitle = \"Quality Inspection Scores Across Factories\"\nxlabel = \"Inspector\"\nylabel = \"Inspection Scores\"\nlegendlabels = [\"Safety\", \"Efficiency\", \"Compliance\", \"Maintenance\", \"Overall\"]\nlegendtitle = \"Inspection Criteria\"\n\n# Normalize the scores for each dataset so that each annotator's scores sum to 60\nnormalized_scores = {}\nfor key, data in base_scores.items():\nnormalized_scores[key] = np.array([60 * score / np.sum(score) for score in data])\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Seed for reproducibility\n\n# Sample data\nannotators = [\"Wang\", \"Li\", \"Zhang\", \"Chen\", \"Liu\", \"Yang\"]\nbase_scores = {\n    \"Factory Alpha\": np.random.randint(50, 100, (7, 5)),\n    \"Factory Beta\": np.random.randint(50, 100, (7, 5)),\n    \"Factory Gamma\": np.random.randint(50, 100, (7, 5)),\n    \"Factory Delta\": np.random.randint(50, 100, (7, 5)),\n}\ntitle = \"Quality Inspection Scores Across Factories\"\nxlabel = \"Inspector\"\nylabel = \"Inspection Scores\"\nylim = [0, 60]\nlegendlabels = [\"Safety\", \"Efficiency\", \"Compliance\", \"Maintenance\", \"Overall\"]\nlegendtitle = \"Inspection Criteria\"\n\n# New colors for each score - pastel shades\ncolors = [\"#ff9999\", \"#66b3ff\", \"#99ff99\", \"#ffcc99\", \"#c2c2f0\"]\n\n# Normalize the scores for each dataset so that each annotator's scores sum to 60\nnormalized_scores = {}\nfor key, data in base_scores.items():\n    normalized_scores[key] = np.array([60 * score / np.sum(score) for score in data])\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a 2x2 subplot layout\nfig, axes = plt.subplots(2, 2, figsize=(10, 8))\naxes = axes.ravel()  # Flatten the 2D array of axes for easy iteration\n\n# Plotting the stacked bar chart for each dataset\nfor ax, (key, scores) in zip(axes, normalized_scores.items()):\n    for i in range(len(annotators)):\n        bottom = 0\n        for j, score in enumerate(scores[i]):\n            ax.bar(i, score, bottom=bottom, color=colors[j])\n            bottom += score\n\n# Adding titles and labels\nfor i, ax in enumerate(axes):\n    ax.set_title(f\"{title} {i+1}\")\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_xticks(range(len(annotators)))\n    ax.set_xticklabels(annotators)\n    ax.set_ylim(ylim)  # Increase y-limit to comfortably fit stacked bars\n\n# Adding legend to the last subplot for clarity\nfig.legend(\n    legendlabels,\n    title=legendtitle,\n    bbox_to_anchor=(0.5, 1.05),\n    ncol=5,\n    loc=\"upper center\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_97.pdf', bbox_inches='tight')"}
{"idx": "bar_98", "instruction": "There is a reference image for you and I also have a set of data about seasonal electricity usage in various cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nlabels = [\n\"Beijing\",\n\"Shanghai\",\n\"Guangzhou\",\n\"Shenzhen\",\n\"Chengdu\",\n\"Hangzhou\",\n\"Wuhan\",\n\"Xi'an\",\n\"Chongqing\",\n]\nnon_aggregation = np.random.rand(9) * 1000\naggregation = np.random.rand(9) * 1000\n\ndatalabels = [\"Summer\", \"Winter\"]\nylabel = \"Electricity Usage (MWh)\"\ntitle = \"Seasonal Electricity Usage Comparison by City\"\n\nx = np.arange(len(labels)) # the label locations\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nlabels = [\n    \"Beijing\",\n    \"Shanghai\",\n    \"Guangzhou\",\n    \"Shenzhen\",\n    \"Chengdu\",\n    \"Hangzhou\",\n    \"Wuhan\",\n    \"Xi'an\",\n    \"Chongqing\",\n]\nnon_aggregation = np.random.rand(9) * 1000\naggregation = np.random.rand(9) * 1000\n\ndatalabels = [\"Summer\", \"Winter\"]\nylabel = \"Electricity Usage (MWh)\"\ntitle = \"Seasonal Electricity Usage Comparison by City\"\nylim = [0, 1200]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(figsize=(10, 6))  # Adjust the size accordingly\nrects1 = ax.bar(\n    x - width / 2,\n    non_aggregation,\n    width,\n    label=datalabels[0],\n    color=\"#69b3a2\",\n    hatch=\"/\",\n)\nrects2 = ax.bar(\n    x + width / 2, aggregation, width, label=datalabels[1], color=\"#d98763\", hatch=\"\\\\\"\n)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel(ylabel)\nax.set_title(title)\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation=0)\nax.set_ylim(ylim)\nax.set_xlim(-1, len(labels))\n\n# Adding the values on top of the bars\nfor rect in rects1 + rects2:\n    height = rect.get_height()\n    ax.annotate(\n        f\"{height:.1f}\",\n        xy=(rect.get_x() + rect.get_width() / 2, height),\n        xytext=(0, 3),  # 3 points vertical offset\n        textcoords=\"offset points\",\n        ha=\"center\",\n        va=\"bottom\",\n    )\n\n# Custom grid\nax.grid(axis=\"y\", color=\"gray\", linestyle=\"--\", linewidth=0.7, alpha=0.7)\nax.set_axisbelow(True)\n\n# Hide the ticks\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.legend(title=\"Methods\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_98.pdf', bbox_inches='tight')"}
{"idx": "bar_99", "instruction": "There is a reference image for you and I also have a set of data about energy consumption and efficiency metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Create traffic data\ndata = np.array(\n[\n[250, 300, 220, 280, 260], # Daily energy consumption (in megawatts)\n[55, 60, 52, 58, 54], # Renewable energy usage (% of total consumption)\n[40, 35, 45, 42, 38], # Energy efficiency rating (score out of 100)\n[5, 6, 4, 5, 6], # Outage frequency (outages per month)\n[90, 85, 88, 87, 89], # Customer satisfaction (satisfaction score out of 100)\n]\n)\ncategories = [\n\"Daily Energy Consumption\",\n\"Renewable Energy Usage\",\n\"Energy Efficiency Rating\",\n\"Outage Frequency\",\n\"Customer Satisfaction\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create traffic data\ndata = np.array(\n    [\n        [250, 300, 220, 280, 260],  # Daily energy consumption (in megawatts)\n        [55, 60, 52, 58, 54],  # Renewable energy usage (% of total consumption)\n        [40, 35, 45, 42, 38],  # Energy efficiency rating (score out of 100)\n        [5, 6, 4, 5, 6],  # Outage frequency (outages per month)\n        [90, 85, 88, 87, 89],  # Customer satisfaction (satisfaction score out of 100)\n    ]\n)\ncategories = [\n    \"Daily Energy Consumption\",\n    \"Renewable Energy Usage\",\n    \"Energy Efficiency Rating\",\n    \"Outage Frequency\",\n    \"Customer Satisfaction\",\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))  # Creating a 2x2 grid of subplots\n\ncolors = plt.get_cmap(\"Pastel2\")(np.linspace(0.15, 0.85, data.shape[0]))\nbar_width = 0.5  # Width of the bars\n\n\n# Function to plot a bar chart in a specific subplot\ndef plot_bars(ax, data, categories, color, title):\n    bars = ax.bar(np.arange(len(categories)), data, color=color, width=bar_width)\n    ax.set_title(title)\n    ax.set_xticks(np.arange(len(categories)))\n    ax.set_xticklabels(categories, rotation=45)\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(\n            bar.get_x() + bar.get_width() / 2.0,\n            yval,\n            round(yval, 1),\n            va=\"top\",\n            ha=\"center\",\n        )  # Annotate bars\n\n\n# Plot data on each subplot\nfor i, ax in enumerate(axs.flat):\n    plot_bars(ax, data[i], categories, colors[i], f\"Dataset {i+1}\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap\nfig.tight_layout()\nplt.savefig('bar_99.pdf', bbox_inches='tight')"}
{"idx": "bar_100", "instruction": "There is a reference image for you and I also have a set of data about average annual yield by crop over three years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate random data for the bars representing average monthly sales\ndata = np.random.rand(3, 5) * 1000 # Three years, five types of crops\ncrops = [\"Wheat\", \"Corn\", \"Rice\", \"Barley\", \"Soybeans\"]\nsuptitle = \"Average Annual Yield by Crop Over Three Years\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 15.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate random data for the bars representing average monthly sales\ndata = np.random.rand(3, 5) * 1000  # Three years, five types of crops\ncrops = [\"Wheat\", \"Corn\", \"Rice\", \"Barley\", \"Soybeans\"]\nsuptitle = \"Average Annual Yield by Crop Over Three Years\"\n# Define colors for the bars (one for each year for clarity)\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"]\nylim=[0,1000]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a single figure with 1x3 subplots for each region\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Loop over each subplot and add bar charts for each region\nfor i, ax in enumerate(axs.ravel()):\n    ax.bar(crops, data[i], color=colors[i])\n    ax.set_title(f\"Region {i+1} Sales\")\n    ax.set_ylim(ylim)  # Set a common y-axis limit for comparability\n\n    # Optionally, add a grid and customize further\n    ax.grid(True, which=\"both\", axis=\"y\", linestyle=\"--\", alpha=0.7)\n\n# Add an overall title and labels\nfig.suptitle(suptitle)\nplt.setp(axs, xticks=np.arange(len(crops)), xticklabels=crops)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout\nfig.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust top to accommodate suptitle\n\n# Show and save the plot\nplt.savefig('bar_100.pdf', bbox_inches='tight')"}
{"idx": "contour_1", "instruction": "There is a reference image for you and I also have a set of data about temperature distribution in two regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data generation (replace with actual data)\nx = np.linspace(-50, 50, 400)\ny = np.linspace(-50, 50, 400)\nX, Y = np.meshgrid(x, y)\npos = np.dstack((X, Y))\nrv1 = multivariate_normal([20, 10], [[200, 0], [0, 200]])\nrv2 = multivariate_normal([-20, -10], [[200, 0], [0, 200]])\nZ1 = rv1.pdf(pos)\nZ2 = rv2.pdf(pos)\ntitle = \"Temperature Distribution in Two Regions\"\nlabels = [\"Region A\", \"Region B\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nfrom matplotlib.patches import Patch\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data generation (replace with actual data)\nx = np.linspace(-50, 50, 400)\ny = np.linspace(-50, 50, 400)\nX, Y = np.meshgrid(x, y)\npos = np.dstack((X, Y))\nrv1 = multivariate_normal([20, 10], [[200, 0], [0, 200]])\nrv2 = multivariate_normal([-20, -10], [[200, 0], [0, 200]])\nZ1 = rv1.pdf(pos)\nZ2 = rv2.pdf(pos)\ntitle = \"Temperature Distribution in Two Regions\"\nlabels = [\"Region A\", \"Region B\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nplt.figure(figsize=(10, 6))\ncontour1 = plt.contourf(X, Y, Z1, cmap=\"Blues\")\ncontour2 = plt.contourf(X, Y, Z2, cmap=\"Reds\", alpha=0.5)\nplt.title(title)\n\n# Create legend with color patches\nlegend_patches = [\n    Patch(color=\"blue\", label=labels[0]),\n    Patch(color=\"red\", label=labels[1]),\n]\nplt.legend(handles=legend_patches)\n\n# Adjust plot to match the original image's dimensions\nplt.gca().set_aspect(\"equal\", adjustable=\"box\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Reduce whitespace around the plot\nplt.tight_layout()\nplt.savefig('contour_1.pdf', bbox_inches='tight')"}
{"idx": "contour_2", "instruction": "There is a reference image for you and I also have a set of data about global traffic density. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Create a grid of x and y values representing longitude and latitude\nlongitude = np.linspace(-180, 180, 100)\nlatitude = np.linspace(-90, 90, 100)\nLongitude, Latitude = np.meshgrid(longitude, latitude)\n\n# Adjust the lambda function to reflect the 3 different regions in traffic density\ndef traffic_density(Longitude, Latitude):\n# Parameters for the traffic density distribution (arbitrary values for illustration)\nreturn (\nnp.exp(-((Longitude - (-100)) ** 2 + (Latitude - 40) ** 2) / 1000)\n+ np.exp(-((Longitude - 0) ** 2 + (Latitude - 0) ** 2) / 5000)\n+ np.exp(-((Longitude - 80) ** 2 + (Latitude - (-30)) ** 2) / 2000)\n)\n\n# Calculate the traffic density values on the grid\nDensity_values = traffic_density(Longitude, Latitude)\nxlabel = \"Longitude\"\nylabel = \"Latitude\"\ntitle = \"Traffic Density Distribution\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create a grid of x and y values representing longitude and latitude\nlongitude = np.linspace(-180, 180, 100)\nlatitude = np.linspace(-90, 90, 100)\nLongitude, Latitude = np.meshgrid(longitude, latitude)\n\n# Adjust the lambda function to reflect the 3 different regions in traffic density\ndef traffic_density(Longitude, Latitude):\n    # Parameters for the traffic density distribution (arbitrary values for illustration)\n    return (\n        np.exp(-((Longitude - (-100)) ** 2 + (Latitude - 40) ** 2) / 1000)\n        + np.exp(-((Longitude - 0) ** 2 + (Latitude - 0) ** 2) / 5000)\n        + np.exp(-((Longitude - 80) ** 2 + (Latitude - (-30)) ** 2) / 2000)\n    )\n\n# Calculate the traffic density values on the grid\nDensity_values = traffic_density(Longitude, Latitude)\nxlabel = \"Longitude\"\nylabel = \"Latitude\"\ntitle = \"Traffic Density Distribution\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the contour plot\nplt.figure(figsize=(8, 6))\n\n# Using a discrete colormap instead of 'viridis'\nn_colors = 10  # Number of discrete colors in the colormap\ndiscrete_cmap = plt.cm.get_cmap(\"viridis\", n_colors)\n\ncontour = plt.contourf(Longitude, Latitude, Density_values, levels=n_colors, cmap=discrete_cmap)\n\n# Add a color bar\ncbar = plt.colorbar(\n    contour, ticks=np.linspace(Density_values.min(), Density_values.max(), n_colors)\n)\n\n# Label the axes\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\n# Show the plot\nplt.savefig('contour_2.pdf', bbox_inches='tight')"}
{"idx": "contour_3", "instruction": "There is a reference image for you and I also have a set of data about electricity consumption in relation to temperature for two different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to create contour lines similar to the picture\ntemperature = np.linspace(-10, 40, 100) # Temperature in Celsius\nconsumption = np.linspace(100, 1000, 100) # Electricity consumption in MWh\nTemperature, Consumption = np.meshgrid(temperature, consumption)\nRegionA = np.exp(-((Temperature - 15) ** 2 + (Consumption - 550) ** 2) / 5000)\nRegionB = np.exp(-((Temperature - 25) ** 2 + (Consumption - 750) ** 2) / 5000)\nlabels = [\"Region A\", \"Region B\"]\nxlabel = \"Temperature (\u00b0C)\"\nylabel = \"Electricity Consumption (MWh)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to create contour lines similar to the picture\ntemperature = np.linspace(-10, 40, 100)  # Temperature in Celsius\nconsumption = np.linspace(100, 1000, 100)  # Electricity consumption in MWh\nTemperature, Consumption = np.meshgrid(temperature, consumption)\nRegionA = np.exp(-((Temperature - 15) ** 2 + (Consumption - 550) ** 2) / 5000)\nRegionB = np.exp(-((Temperature - 25) ** 2 + (Consumption - 750) ** 2) / 5000)\nlabels = [\"Region A\", \"Region B\"]\nxlabel = \"Temperature (\u00b0C)\"\nylabel = \"Electricity Consumption (MWh)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Contour lines for Region A (blue) and Region B (red)\nCS1 = ax.contour(Temperature, Consumption, RegionA, colors=\"blue\", label=labels[0])\nCS2 = ax.contour(Temperature, Consumption, RegionB, colors=\"red\", label=labels[1])\n\n# Labels for x and y axes\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Adding a legend manually\nh1, _ = CS1.legend_elements()\nh2, _ = CS2.legend_elements()\nax.legend([h1[0], h2[0]], labels)\n\n# Set the aspect of the plot to match the original image\nax.set_aspect(\"auto\")\nax.grid()\nax.set_facecolor(\"#e8e8e8\")\nax.set_ylim(100, 1000)\nax.set_xlim(-10, 40)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('contour_3.pdf', bbox_inches='tight')"}
{"idx": "contour_5", "instruction": "There is a reference image for you and I also have a set of data about traffic density over a city grid. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nX, Y = np.meshgrid(np.linspace(0, 10, 100), np.linspace(0, 10, 100))\nZ = 20 * np.sin(0.5 * X) * np.cos(0.5 * Y) + 40 # Simulated traffic density data\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nX, Y = np.meshgrid(np.linspace(0, 10, 100), np.linspace(0, 10, 100))\nZ = 20 * np.sin(0.5 * X) * np.cos(0.5 * Y) + 40  # Simulated traffic density data\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Filled contour with labels\nfig, ax = plt.subplots(figsize=(6, 6))\ncnt = ax.contour(X, Y, Z, colors=\"k\", linewidths=0.5)\nax.clabel(cnt, cnt.levels, inline=True, fontsize=10)\nax.contourf(X, Y, Z, cmap='viridis')\n\n# Labels and title relevant to the transportation domain\nax.set_title(\"Traffic Density Over City Grid\")\nax.set_xlabel(\"Kilometers (X-axis)\")\nax.set_ylabel(\"Kilometers (Y-axis)\")\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('contour_5.pdf', bbox_inches='tight')"}
{"idx": "density_1", "instruction": "There is a reference image for you and I also have a set of data about renewable energy production over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate data for the plot\nyears = np.linspace(2000, 2020, 1000)\nrenewable_energy_production = [\nnp.random.uniform(20, 150)\n* np.exp(-0.8 * (years - year) ** 1.5 / np.linspace(2, 5, 9)[index])\nfor index, year in enumerate(np.linspace(2005, 2015, 9))\n]\ncbar_label = \"Years\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate data for the plot\nyears = np.linspace(2000, 2020, 1000)\nrenewable_energy_production = [\n    np.random.uniform(20, 150)\n    * np.exp(-0.8 * (years - year) ** 1.5 / np.linspace(2, 5, 9)[index])\n    for index, year in enumerate(np.linspace(2005, 2015, 9))\n]\ncbar_label = \"Years\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Create a colorbar\nsm = plt.cm.ScalarMappable(cmap=\"coolwarm\", norm=plt.Normalize(vmin=2000, vmax=2020))\ncbar = plt.colorbar(sm, ax=ax, label=cbar_label)\ncbar.set_label(cbar_label, rotation=270, labelpad=15)\n\nfor i in range(9):\n    plt.fill_between(years, renewable_energy_production[i], color=plt.cm.coolwarm(i / 9), alpha=0.9)\nplt.ylim(0, 200)\n# Remove the plot border\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"bottom\"].set_visible(True)\nplt.gca().spines[\"left\"].set_visible(False)\nplt.gca().set_yticks([])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('density_1.pdf', bbox_inches='tight')"}
{"idx": "density_2", "instruction": "There is a reference image for you and I also have a set of data about health metrics over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Create some data representing health metrics over time\ntime = np.linspace(0, 20, 100)\ntreatment_a = 30 - 10 * np.exp(-0.1 * (time - 5) ** 2)\ntreatment_b = 30 - 8 * np.exp(-0.15 * (time - 8) ** 2)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create some data representing health metrics over time\ntime = np.linspace(0, 20, 100)\ntreatment_a = 30 - 10 * np.exp(-0.1 * (time - 5) ** 2)\ntreatment_b = 30 - 8 * np.exp(-0.15 * (time - 8) ** 2)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))  # Adjusted to match the dimensions in pixels\n\n# Plot the data\nax.fill_between(time, treatment_b, color=\"pink\", edgecolor=\"#be6373\", alpha=0.5)\n\n# Customize the plot to match the picture\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(True)\nax.spines[\"bottom\"].set_visible(False)\nax.tick_params(left=False, labelleft=False, bottom=False, labelbottom=False)\n\nax.set_ylim(10, 35)\nax.set_xlim(0, 20)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('density_2.pdf', bbox_inches='tight')"}
{"idx": "density_4", "instruction": "There is a reference image for you and I also have a set of data about energy consumption strategies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for energy consumption strategies\nsolar_energy = np.random.normal(loc=50, scale=10, size=1000)\nwind_energy = np.random.normal(loc=40, scale=8, size=1000)\nhydro_energy = np.random.normal(loc=45, scale=6, size=1000)\nlabels = [\"Solar Energy\", \"Wind Energy\", \"Hydro Energy\"]\nthreshold_label = \"Energy Consumption Threshold\"\nxlabel = \"Energy Consumption (kWh)\"\nylabel = \"Density\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for energy consumption strategies\nsolar_energy = np.random.normal(loc=50, scale=10, size=1000)\nwind_energy = np.random.normal(loc=40, scale=8, size=1000)\nhydro_energy = np.random.normal(loc=45, scale=6, size=1000)\nlabels = [\"Solar Energy\", \"Wind Energy\", \"Hydro Energy\"]\nthreshold_label = \"Energy Consumption Threshold\"\nxlabel = \"Energy Consumption (kWh)\"\nylabel = \"Density\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the density plots\nfor data, color, label in zip(\n    [solar_energy, wind_energy, hydro_energy],\n    [\"blue\", \"red\", \"green\"],\n    labels,\n):\n    density = gaussian_kde(data)\n    xs = np.linspace(10, 80, 200)\n    density.covariance_factor = lambda: 0.5\n    density._compute_covariance()\n    plt.fill_between(xs, density(xs), color=color, alpha=0.2, label=label)\n\n# Plot the energy consumption threshold line\nplt.axvline(x=55, color=\"red\", linestyle=\"--\", label=threshold_label)\n\n# Set labels and title (if any)\nax.set_xlim(10, 80)\nax.set_xticks([10, 20, 30, 40, 50, 60, 70, 80])\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Show grid\nplt.grid(True, linestyle=\"--\")\n\n# Add legend\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('density_4.pdf', bbox_inches='tight')"}
{"idx": "density_5", "instruction": "There is a reference image for you and I also have a set of data about transportation speeds. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for transportation domain\ncar_speeds = np.random.normal(loc=100, scale=15, size=1000) # Car speeds on highways (km/h)\ntrain_speeds = np.random.normal(loc=150, scale=20, size=1000) # Train speeds on railways (km/h)\n\n# Compute density for each dataset\ndensity_car = gaussian_kde(car_speeds)\ndensity_train = gaussian_kde(train_speeds)\nxs = np.linspace(50, 200, 300)\nys_car = density_car(xs)\nys_train = density_train(xs)\nlabels = [\"Car Speeds\", \"Train Speeds\"]\nxlabel = \"Density\"\nylabel = \"Speed (km/h)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for transportation domain\ncar_speeds = np.random.normal(loc=100, scale=15, size=1000)  # Car speeds on highways (km/h)\ntrain_speeds = np.random.normal(loc=150, scale=20, size=1000)  # Train speeds on railways (km/h)\n\n# Compute density for each dataset\ndensity_car = gaussian_kde(car_speeds)\ndensity_train = gaussian_kde(train_speeds)\nxs = np.linspace(50, 200, 300)\nys_car = density_car(xs)\nys_train = density_train(xs)\nlabels = [\"Car Speeds\", \"Train Speeds\"]\nxlabel = \"Density\"\nylabel = \"Speed (km/h)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Fill between x for density regions\nplt.fill_betweenx(xs, ys_car, color=\"blue\", alpha=0.2, label=labels[0])\nplt.fill_betweenx(xs, ys_train, color=\"green\", alpha=0.2, label=labels[1])\n\n# Set labels and title (if any)\nax.set_ylim(50, 200)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Show grid\nplt.grid(True, linestyle=\"--\")\n\n# Add legend\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('density_5.pdf', bbox_inches='tight')"}
{"idx": "graph_2", "instruction": "There is a reference image for you and I also have a set of data about transportation networks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Create a random transportation network graph\ntransport_network = nx.random_geometric_graph(10, 0.3)\n\n# Position the nodes based on their connections using a different layout algorithm\npos = nx.kamada_kawai_layout(\ntransport_network\n) # This layout algorithm may produce a more spread-out layout\n\n# Randomly select some routes to color blue\nroutes = list(transport_network.edges())\nhighlighted_routes = np.random.choice(\nlen(routes), size=int(len(routes) * 0.3), replace=False\n) # 30% of the routes\nhighlighted_routes = [routes[i] for i in highlighted_routes]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create a random transportation network graph\ntransport_network = nx.random_geometric_graph(10, 0.3)\n\n# Position the nodes based on their connections using a different layout algorithm\npos = nx.kamada_kawai_layout(\n    transport_network\n)  # This layout algorithm may produce a more spread-out layout\n\n# Randomly select some routes to color blue\nroutes = list(transport_network.edges())\nhighlighted_routes = np.random.choice(\n    len(routes), size=int(len(routes) * 0.3), replace=False\n)  # 30% of the routes\nhighlighted_routes = [routes[i] for i in highlighted_routes]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.subplots(figsize=(8, 8))\n\n# Draw the locations\nnx.draw_networkx_nodes(transport_network, pos, node_size=200, node_color=\"black\")\n\n# Draw the routes\nnx.draw_networkx_edges(transport_network, pos, alpha=0.3)\n\n# Draw the selected routes in blue\nnx.draw_networkx_edges(transport_network, pos, edgelist=highlighted_routes, edge_color=\"#d0e2e8\")\n\n# Remove axis\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('graph_2.pdf', bbox_inches='tight')"}
{"idx": "graph_3", "instruction": "There is a reference image for you and I also have a set of data about tech companies and their connection strengths. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Create a cycle graph with 12 nodes representing tech companies\ntech_graph = nx.cycle_graph(12)\nconnection_strengths = {edge: (i + 1) * 10 for i, edge in enumerate(tech_graph.edges())}\nnx.set_edge_attributes(tech_graph, connection_strengths, \"connection_strength\")\n\nlayout_pos = nx.spring_layout(tech_graph, iterations=200)\n\ncompany_labels = {i: f\"Company {i}\" for i in range(12)}\n\n# Draw edge labels\nedge_labels = nx.get_edge_attributes(tech_graph, \"connection_strength\")\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create a cycle graph with 12 nodes representing tech companies\ntech_graph = nx.cycle_graph(12)\nconnection_strengths = {edge: (i + 1) * 10 for i, edge in enumerate(tech_graph.edges())}\nnx.set_edge_attributes(tech_graph, connection_strengths, \"connection_strength\")\n\nlayout_pos = nx.spring_layout(tech_graph, iterations=200)\n\ncompany_labels = {i: f\"Company {i}\" for i in range(12)}\n\n# Draw edge labels\nedge_labels = nx.get_edge_attributes(tech_graph, \"connection_strength\")\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(10, 8))\nnx.draw(tech_graph, layout_pos, node_size=800, node_color=\"salmon\")\nnx.draw_networkx_labels(tech_graph, layout_pos, labels=company_labels)\nnx.draw_networkx_edge_labels(tech_graph, layout_pos, edge_labels=edge_labels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot\nplt.tight_layout()\nplt.savefig('graph_3.pdf', bbox_inches='tight')"}
{"idx": "graph_4", "instruction": "There is a reference image for you and I also have a set of data about smart home network devices. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Create a new graph representing a smart home network\nG = nx.Graph()\n# Add nodes representing different smart devices\ndevices = {\n0: \"Smart Hub\",\n1: \"Thermostat\",\n2: \"Light Sensor\",\n3: \"Security Camera\",\n4: \"Smart Lock\"\n}\nG.add_nodes_from(devices.keys())\n# Add edges representing connections between devices\nG.add_edges_from([(0, 1), (0, 2), (0, 3), (0, 4)])\n\n# explicitly set positions for visual appeal\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create a new graph representing a smart home network\nG = nx.Graph()\n# Add nodes representing different smart devices\ndevices = {\n    0: \"Smart Hub\",\n    1: \"Thermostat\",\n    2: \"Light Sensor\",\n    3: \"Security Camera\",\n    4: \"Smart Lock\"\n}\nG.add_nodes_from(devices.keys())\n# Add edges representing connections between devices\nG.add_edges_from([(0, 1), (0, 2), (0, 3), (0, 4)])\n\n# explicitly set positions for visual appeal\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(10, 8))\n\n# Draw nodes with specific colors and sizes\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"#ff70a6\")\nnx.draw_networkx_nodes(G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"#70d6ff\")\n\n# Draw edges with specific style\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n\n# Adding text annotations for devices\nnx.draw_networkx_labels(G, pos, labels=devices, font_size=16)\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('graph_4.pdf', bbox_inches='tight')"}
{"idx": "graph_5", "instruction": "There is a reference image for you and I also have a set of data about transportation networks between cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Create a directed graph representing a small transportation network\nG = nx.DiGraph()\n\n# Add nodes representing cities\ncities = ['Beijing', 'Chengdu', 'Shanghai']\nG.add_nodes_from(cities)\n\n# Define edges representing direct transportation routes between cities\nedges = [('Beijing', 'Chengdu'), ('Chengdu', 'Shanghai'), ('Shanghai', 'Beijing')]\nG.add_edges_from(edges)\n\n# Add self-loops representing intra-city transportation routes\nself_loops = [('Beijing', 'Beijing'), ('Chengdu', 'Chengdu'), ('Shanghai', 'Shanghai')]\nG.add_edges_from(self_loops)\n\n# Get positions for the nodes in a circular layout\npos = nx.circular_layout(G)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import networkx as nx\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create a directed graph representing a small transportation network\nG = nx.DiGraph()\n\n# Add nodes representing cities\ncities = ['Beijing', 'Chengdu', 'Shanghai']\nG.add_nodes_from(cities)\n\n# Define edges representing direct transportation routes between cities\nedges = [('Beijing', 'Chengdu'), ('Chengdu', 'Shanghai'), ('Shanghai', 'Beijing')]\nG.add_edges_from(edges)\n\n# Add self-loops representing intra-city transportation routes\nself_loops = [('Beijing', 'Beijing'), ('Chengdu', 'Chengdu'), ('Shanghai', 'Shanghai')]\nG.add_edges_from(self_loops)\n\n# Get positions for the nodes in a circular layout\npos = nx.circular_layout(G)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(10, 8))\n\n# Draw the transportation network with nodes and edges\nnx.draw(G, pos, with_labels=True, node_color=\"#f07167\")\n\n# Draw the self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=self_loops, arrowstyle=\"<|-\", style=\"dashed\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('graph_5.pdf', bbox_inches='tight')"}
{"idx": "heatmap_2", "instruction": "There is a reference image for you and I also have a set of data about transportation usage across different days of the week. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data in the heatmap\ndata = np.array(\n[\n[45, 80, 60, 50, 30, 25],\n[70, 55, 95, 45, 35, 20],\n[60, 90, 70, 40, 25, 30],\n[55, 65, 75, 60, 20, 25],\n[50, 75, 85, 55, 40, 35],\n]\n)\n\n# Labels for rows and columns\nrow_labels = [\"Bicycles\", \"Cars\", \"Buses\", \"Trains\", \"Airplanes\"]\ncolumn_labels = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\ntitle = \"Transportation Usage Across Different Days\"\nxlabel = \"Day of the Week\"\nylabel = \"Type of Transportation\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data in the heatmap\ndata = np.array(\n    [\n        [45, 80, 60, 50, 30, 25],\n        [70, 55, 95, 45, 35, 20],\n        [60, 90, 70, 40, 25, 30],\n        [55, 65, 75, 60, 20, 25],\n        [50, 75, 85, 55, 40, 35],\n    ]\n)\n\n# Labels for rows and columns\nrow_labels = [\"Bicycles\", \"Cars\", \"Buses\", \"Trains\", \"Airplanes\"]\ncolumn_labels = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\ntitle = \"Transportation Usage Across Different Days\"\nxlabel = \"Day of the Week\"\nylabel = \"Type of Transportation\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(9, 6))\n\n# Get the colors from the original colormap\noriginal_cmap = plt.get_cmap(\"Paired_r\")\ncolors = original_cmap(np.linspace(0, 1, original_cmap.N))\n\n# Set the colormap with reverse order\ncmap = mcolors.LinearSegmentedColormap.from_list(\"Paired_r\", colors[::-1])\n\n# Draw the heatmap with the reversed colormap\ncax = ax.imshow(data, cmap=cmap)\n\n# Set the title\nax.set_title(title, fontsize=18)\n\n# Set labels for axes\nax.set_xlabel(xlabel, fontsize=18)\nax.set_ylabel(ylabel, fontsize=18)\nax.set_xticks(range(len(column_labels)))\nax.set_xticklabels(column_labels)\nax.set_yticks(range(len(row_labels)))\nax.set_yticklabels(row_labels)\n\n# Increase font size of the tick labels\nax.tick_params(axis=\"both\", which=\"major\", labelsize=14)\n\n# Rotate the row labels to horizontal and set the font size\nax.set_yticklabels(ax.get_yticklabels(), rotation=0, fontsize=14)\n\n# Add the text annotations\nfor i in range(len(row_labels)):\n    for j in range(len(column_labels)):\n        text = ax.text(\n            j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\", fontsize=14\n        )\n\n# Create colorbar\ncbar = f.colorbar(cax, ax=ax)\ncbar.ax.tick_params(labelsize=14)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to fit the figure size\nplt.tight_layout()\nplt.savefig('heatmap_2.pdf', bbox_inches='tight')"}
{"idx": "heatmap_3", "instruction": "There is a reference image for you and I also have a set of data about average temperatures and temperature anomalies for different months and regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the heatmap\ntemperature_data = np.random.rand(6, 6) * 30 # temperatures between 0 and 30 degrees Celsius\n\n# Masks to separate the upper triangle and lower triangle\nmask_upper = np.triu(np.ones_like(temperature_data, dtype=bool))\nmask_lower = np.tril(np.ones_like(temperature_data, dtype=bool))\ncolor_bar_labels = [\"Average Temperature (\u00b0C)\", \"Temperature Anomaly (\u00b0C)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.ticker as ticker\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the heatmap\ntemperature_data = np.random.rand(6, 6) * 30  # temperatures between 0 and 30 degrees Celsius\n\n# Masks to separate the upper triangle and lower triangle\nmask_upper = np.triu(np.ones_like(temperature_data, dtype=bool))\nmask_lower = np.tril(np.ones_like(temperature_data, dtype=bool))\nxticklabels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"]\nyticklabels = [\"North\", \"South\", \"East\", \"West\", \"Central\", \"Coastal\"]\ncolor_bar_labels = [\"Average Temperature (\u00b0C)\", \"Temperature Anomaly (\u00b0C)\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Create the heatmap with the lower triangle in blue\ncax1 = ax.matshow(np.ma.masked_array(temperature_data, mask=mask_upper), cmap=\"Blues\")\n\n# Create the heatmap with the upper triangle in green\ncax2 = ax.matshow(np.ma.masked_array(temperature_data - np.mean(temperature_data), mask=mask_lower), cmap=\"Greens\")\n\n# Set ticks and labels\nax.set_xticks(np.arange(temperature_data.shape[1]))\nax.set_yticks(np.arange(temperature_data.shape[0]))\nax.set_xticklabels(xticklabels, rotation=0)\nax.set_yticklabels(yticklabels)\n\n# Set the tick labels on the x-axis to not be rotated\nplt.setp(ax.get_xticklabels(), rotation=0, ha=\"center\")\n\n# Hide the axis spines and ticks\nax.tick_params(top=False, bottom=True, labeltop=False, labelbottom=True)\nfor spine in ax.spines.values():\n    spine.set_visible(False)\n\n# Formatter to display ticks with one decimal place\nformatter = ticker.FuncFormatter(lambda x, _: f\"{x:.1f}\")\n\n# Colorbar for the blue scale\ncbar1 = fig.colorbar(cax1, ax=ax, orientation=\"vertical\", fraction=0.039, pad=0.14)\ncbar1.ax.yaxis.set_major_formatter(formatter)\ncbar1.ax.set_ylabel(color_bar_labels[0], rotation=90, labelpad=8)\n\n# Colorbar for the green scale. Adjust pad if they overlap.\ncbar2 = fig.colorbar(cax2, ax=ax, orientation=\"vertical\", fraction=0.047, pad=0.03)\ncbar2.ax.yaxis.set_major_formatter(formatter)\ncbar2.ax.set_ylabel(color_bar_labels[1], rotation=90, labelpad=8)\n\n# Set the colorbar ticks\ncbar1.ax.yaxis.set_major_locator(ticker.MaxNLocator(nbins=11))\ncbar2.ax.yaxis.set_major_locator(ticker.MaxNLocator(nbins=11))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show the plot\nfig.tight_layout()\nplt.savefig('heatmap_3.pdf', bbox_inches='tight')"}
{"idx": "heatmap_4", "instruction": "There is a reference image for you and I also have a set of data about transportation traffic volumes across different categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport pandas as pd\nimport numpy as np;np.random.seed(0)\n# Defining the transportation categories\ncategories = [\n\"Public Transit\",\n\"Road Traffic\",\n\"Air Traffic\",\n\"Freight Transport\",\n\"Bicycle Usage\",\n\"Pedestrian Traffic\",\n]\n\n# Generating random data for illustration purposes\n# 180 values for 6 categories, 30 values each\ndata = np.random.uniform(low=10, high=100, size=(180,)) # Values between 10 and 100\n\n# Creating a DataFrame\ndf = pd.DataFrame(\n{\n\"Categories\": np.tile(categories, 30), # Repeating each category 30 times\n\"Time Slot\": np.repeat(range(30), 6), # Repeating each number from 0-29, 6 times\n\"Traffic Volume\": data,\n}\n)\n\n# Pivoting the DataFrame to get it into the matrix form\npivot_df = df.pivot(index=\"Categories\", columns=\"Time Slot\", values=\"Traffic Volume\")\n\n# Reordering the index of the pivot_df to match the desired order\npivot_df = pivot_df.reindex(categories)\n\nxlabel = \"Time Slot\"\nylabel = \"Transportation Categories\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nimport pandas as pd\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Defining the transportation categories\ncategories = [\n    \"Public Transit\",\n    \"Road Traffic\",\n    \"Air Traffic\",\n    \"Freight Transport\",\n    \"Bicycle Usage\",\n    \"Pedestrian Traffic\",\n]\n\n# Generating random data for illustration purposes\n# 180 values for 6 categories, 30 values each\ndata = np.random.uniform(low=10, high=100, size=(180,))  # Values between 10 and 100\n\n# Creating a DataFrame\ndf = pd.DataFrame(\n    {\n        \"Categories\": np.tile(categories, 30),  # Repeating each category 30 times\n        \"Time Slot\": np.repeat(range(30), 6),  # Repeating each number from 0-29, 6 times\n        \"Traffic Volume\": data,\n    }\n)\n\n# Pivoting the DataFrame to get it into the matrix form\npivot_df = df.pivot(index=\"Categories\", columns=\"Time Slot\", values=\"Traffic Volume\")\n\n# Reordering the index of the pivot_df to match the desired order\npivot_df = pivot_df.reindex(categories)\n\nxlabel = \"Time Slot\"\nylabel = \"Transportation Categories\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the heatmap with categories on the y-axis\nplt.figure(figsize=(8, 4))  # Adjust size as needed\n\ncax = plt.imshow(pivot_df, cmap=\"Greens\", aspect=\"auto\")\n\n# x set only to be 0 4 8 12 16 20 24 28\nplt.xticks(np.arange(0, 32, 4), range(0, 32, 4))\nplt.yticks(range(len(categories)), categories)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Ensure y-tick labels are horizontal\nplt.yticks(rotation=0)\n# Ensure x-tick labels are horizontal\nplt.xticks(rotation=0)\n\nplt.colorbar(cax)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_4.pdf', bbox_inches='tight')"}
{"idx": "heatmap_5", "instruction": "There is a reference image for you and I also have a set of data about energy consumption from different sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Placeholder data for energy consumption matrices\ndata_solar = np.array([[50, 10, 5, 0], [8, 40, 2, 0], [3, 7, 25, 5], [0, 0, 4, 40]])\ndata_wind = np.array([[45, 12, 3, 0], [5, 30, 8, 2], [1, 6, 15, 10], [0, 0, 5, 35]])\ndata_hydro = np.array([[100, 20, 5, 5], [15, 70, 20, 10], [5, 15, 55, 25], [0, 0, 10, 95]])\ndata_nuclear = np.array([[300, 50, 20, 10], [30, 200, 80, 20], [10, 50, 250, 60], [0, 5, 70, 300]])\ndata_coal = np.array([[200, 60, 30, 10], [40, 150, 50, 20], [20, 40, 130, 60], [5, 10, 50, 200]])\ndata_natural_gas = np.array([[350, 90, 40, 20], [80, 220, 90, 60], [30, 70, 250, 100], [10, 20, 60, 350]])\ndata_biomass = np.array([[25, 5, 2, 1], [5, 15, 8, 2], [2, 5, 12, 4], [1, 2, 5, 18]])\ndata_geothermal = np.array([[500, 100, 50, 20], [90, 300, 150, 50], [40, 100, 350, 150], [20, 30, 120, 400]])\n\n# Titles for the subplots\ntitles = [\"Solar\", \"Wind\", \"Hydro\", \"Nuclear\", \"Coal\", \"Natural Gas\", \"Biomass\", \"Geothermal\"]\nxlabel = \"Predicted usage category\"\nylabel = \"Actual usage category\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Placeholder data for energy consumption matrices\ndata_solar = np.array([[50, 10, 5, 0], [8, 40, 2, 0], [3, 7, 25, 5], [0, 0, 4, 40]])\ndata_wind = np.array([[45, 12, 3, 0], [5, 30, 8, 2], [1, 6, 15, 10], [0, 0, 5, 35]])\ndata_hydro = np.array([[100, 20, 5, 5], [15, 70, 20, 10], [5, 15, 55, 25], [0, 0, 10, 95]])\ndata_nuclear = np.array([[300, 50, 20, 10], [30, 200, 80, 20], [10, 50, 250, 60], [0, 5, 70, 300]])\ndata_coal = np.array([[200, 60, 30, 10], [40, 150, 50, 20], [20, 40, 130, 60], [5, 10, 50, 200]])\ndata_natural_gas = np.array([[350, 90, 40, 20], [80, 220, 90, 60], [30, 70, 250, 100], [10, 20, 60, 350]])\ndata_biomass = np.array([[25, 5, 2, 1], [5, 15, 8, 2], [2, 5, 12, 4], [1, 2, 5, 18]])\ndata_geothermal = np.array([[500, 100, 50, 20], [90, 300, 150, 50], [40, 100, 350, 150], [20, 30, 120, 400]])\n\n# Titles for the subplots\ntitles = [\"Solar\", \"Wind\", \"Hydro\", \"Nuclear\", \"Coal\", \"Natural Gas\", \"Biomass\", \"Geothermal\"]\nxlabel = \"Predicted usage category\"\nylabel = \"Actual usage category\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axes = plt.subplots(nrows=2, ncols=4, figsize=(12, 6))  # Adjusted for 1080x2376\n\n# Function to create a single confusion matrix plot\ndef plot_confusion_matrix(ax, data, title):\n    im = ax.imshow(data, interpolation=\"nearest\", cmap=\"viridis\")\n    ax.figure.colorbar(im, ax=ax)\n    ax.set(\n        title=title,\n        xlabel=xlabel,\n        ylabel=ylabel,\n        xticks=np.arange(data.shape[1]),\n        yticks=np.arange(data.shape[0]),\n    )\n    # Loop over data dimensions and create text annotations.\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Plot each confusion matrix\nplot_confusion_matrix(axes[0, 0], data_solar, titles[0])\nplot_confusion_matrix(axes[0, 1], data_wind, titles[1])\nplot_confusion_matrix(axes[0, 2], data_hydro, titles[2])\nplot_confusion_matrix(axes[0, 3], data_nuclear, titles[3])\nplot_confusion_matrix(axes[1, 0], data_coal, titles[4])\nplot_confusion_matrix(axes[1, 1], data_natural_gas, titles[5])\nplot_confusion_matrix(axes[1, 2], data_biomass, titles[6])\nplot_confusion_matrix(axes[1, 3], data_geothermal, titles[7])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the figure\nplt.tight_layout()\nplt.savefig('heatmap_5.pdf', bbox_inches='tight')"}
{"idx": "heatmap_6", "instruction": "There is a reference image for you and I also have a set of data about population distribution across major cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the data with correct shape\ndata = np.array(\n[\n[1200, 950, 875, 1020, 675, 800],\n[900, 1100, 650, 780, 950, 1125],\n[1000, 850, 900, np.nan, 700, np.nan], # Assumed another NaN value for padding\n[670, 720, 800, 940, 850, 920],\n]\n)\n\ntitle = \"Population Distribution Across Major Cities (in thousands)\"\nxlabel = \"Regions\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data with correct shape\ndata = np.array(\n    [\n        [1200, 950, 875, 1020, 675, 800],\n        [900, 1100, 650, 780, 950, 1125],\n        [1000, 850, 900, np.nan, 700, np.nan],  # Assumed another NaN value for padding\n        [670, 720, 800, 940, 850, 920],\n    ]\n)\n\ntitle = \"Population Distribution Across Major Cities (in thousands)\"\nxlabel = \"Regions\"\nxticklabels = [\"North\", \"South\", \"East\", \"West\", \"Central\", \"Northeast\"]\nyticklabels = [\"City A\", \"City B\", \"City C\", \"City D\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the heatmap with adjusted colorbar and new theme color\n# Create mask for NaN values to hatch them later\nmask = np.isnan(data)\n\n# Defining a new color palette\ncmap = plt.get_cmap(\"RdGy\")\nnorm = plt.Normalize(vmin=np.nanmin(data), vmax=np.nanmax(data))\n\nfig, ax = plt.subplots(figsize=(10, 8))\ncax = ax.imshow(data, cmap=cmap, norm=norm)\ncbar = fig.colorbar(cax, ax=ax, extend=\"both\")\n\n# Add hatches for NaN values\nfor i, j in zip(*np.where(mask)):\n    ax.add_patch(\n        plt.Rectangle(\n            (j - 0.5, i - 0.5), 1, 1, fill=False, hatch=\"//\", edgecolor=\"black\"\n        )\n    )\n\n# Adding titles and labels\nplt.title(title)\nplt.xlabel(xlabel)\n\n# Define the labels for x and y axis\nax.set_xticks(range(6))\nax.set_xticklabels(xticklabels, rotation=45)\nax.set_yticks(range(4))\nax.set_yticklabels(yticklabels, rotation=0)\n\n# Add annotations\nfor i in range(4):\n    for j in range(6):\n        if not np.isnan(data[i, j]):\n            if data[i, j] > np.nanmean(data):\n                ax.text(\n                    j, i, f\"{data[i, j]:.0f}\", ha=\"center\", va=\"center\", color=\"white\"\n                )\n            else:\n                ax.text(\n                    j, i, f\"{data[i, j]:.0f}\", ha=\"center\", va=\"center\", color=\"black\"\n                )\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_6.pdf', bbox_inches='tight')"}
{"idx": "heatmap_7", "instruction": "There is a reference image for you and I also have a set of data about correlation coefficients in the energy sector. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for correlation coefficients in the energy sector\ndata = np.array(\n[\n[1.00, 0.78, 0.66, 0.55, 0.62, 0.70, 0.48, 0.57, 0.61],\n[0.78, 1.00, 0.72, 0.65, 0.59, 0.63, 0.55, 0.60, 0.68],\n[0.66, 0.72, 1.00, 0.73, 0.57, 0.61, 0.64, 0.58, 0.65],\n[0.55, 0.65, 0.73, 1.00, 0.66, 0.69, 0.71, 0.59, 0.62],\n[0.62, 0.59, 0.57, 0.66, 1.00, 0.79, 0.68, 0.72, 0.64],\n[0.70, 0.63, 0.61, 0.69, 0.79, 1.00, 0.76, 0.73, 0.71],\n[0.48, 0.55, 0.64, 0.71, 0.68, 0.76, 1.00, 0.74, 0.67],\n[0.57, 0.60, 0.58, 0.59, 0.72, 0.73, 0.74, 1.00, 0.70],\n[0.61, 0.68, 0.65, 0.62, 0.64, 0.71, 0.67, 0.70, 1.00],\n]\n)\n\nlabels = [\"solar\", \"wind\", \"hydro\", \"nuclear\", \"coal\", \"gas\", \"biomass\", \"geothermal\", \"oil\"]\ntitle = \"Correlation Coefficients of Energy Production Types\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for correlation coefficients in the energy sector\ndata = np.array(\n    [\n        [1.00, 0.78, 0.66, 0.55, 0.62, 0.70, 0.48, 0.57, 0.61],\n        [0.78, 1.00, 0.72, 0.65, 0.59, 0.63, 0.55, 0.60, 0.68],\n        [0.66, 0.72, 1.00, 0.73, 0.57, 0.61, 0.64, 0.58, 0.65],\n        [0.55, 0.65, 0.73, 1.00, 0.66, 0.69, 0.71, 0.59, 0.62],\n        [0.62, 0.59, 0.57, 0.66, 1.00, 0.79, 0.68, 0.72, 0.64],\n        [0.70, 0.63, 0.61, 0.69, 0.79, 1.00, 0.76, 0.73, 0.71],\n        [0.48, 0.55, 0.64, 0.71, 0.68, 0.76, 1.00, 0.74, 0.67],\n        [0.57, 0.60, 0.58, 0.59, 0.72, 0.73, 0.74, 1.00, 0.70],\n        [0.61, 0.68, 0.65, 0.62, 0.64, 0.71, 0.67, 0.70, 1.00],\n    ]\n)\n\nlabels = [\"solar\", \"wind\", \"hydro\", \"nuclear\", \"coal\", \"gas\", \"biomass\", \"geothermal\", \"oil\"]\ntitle = \"Correlation Coefficients of Energy Production Types\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Adjust the figure size to match the original image's dimensions\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap=\"coolwarm\")\n\n# Adjust color bar width\ncbar = fig.colorbar(\n    cax,\n    fraction=0.046,\n    pad=0.04,\n    ticks=[0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00],\n)\ncbar.ax.set_yticklabels(\n    [\"0.50\", \"0.55\", \"0.60\", \"0.65\", \"0.70\", \"0.75\", \"0.80\", \"0.85\", \"0.90\", \"0.95\", \"1.00\"]\n)\n\n# Set axis labels\nax.set_xticks(np.arange(len(labels)))\nax.set_yticks(np.arange(len(labels)))\n# x label should be at the bottom\nax.xaxis.set_ticks_position(\"bottom\")\nax.set_xticklabels(labels, rotation=45, ha=\"right\")\nax.set_yticklabels(labels)\n\n# Display the correlation values in the cells\nfor i in range(len(labels)):\n    for j in range(len(labels)):\n        ax.text(\n            j,\n            i,\n            f\"{data[i, j]:.2f}\",\n            va=\"center\",\n            ha=\"center\",\n            color=\"white\" if data[i, j] < 0.65 else \"black\",\n            fontsize=10,\n        )\n\n# Set title\nax.set_title(title, pad=20)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust figure size and show the plot\nfig.set_size_inches(10, 8)\nfig.tight_layout()\nplt.savefig('heatmap_7.pdf', bbox_inches='tight')"}
{"idx": "heatmap_8", "instruction": "There is a reference image for you and I also have a set of data about correlation coefficients between different weather metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data (correlation coefficients between different weather metrics)\ndata = np.array(\n[\n[np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n[0.25, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n[0.30, 0.65, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n[0.35, 0.45, 0.55, np.nan, np.nan, np.nan, np.nan, np.nan],\n[0.20, 0.50, 0.40, 0.60, np.nan, np.nan, np.nan, np.nan],\n[0.10, 0.30, 0.35, 0.50, 0.55, np.nan, np.nan, np.nan],\n[0.05, 0.15, 0.20, 0.30, 0.45, 0.50, np.nan, np.nan],\n[0.15, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, np.nan],\n]\n)\n\nmetrics = [\n\"Temperature\",\n\"Humidity\",\n\"Precipitation\",\n\"Wind Speed\",\n\"Pressure\",\n\"Visibility\",\n\"Cloud Cover\",\n\"Solar Radiation\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data (correlation coefficients between different weather metrics)\ndata = np.array(\n    [\n        [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n        [0.25, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n        [0.30, 0.65, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],\n        [0.35, 0.45, 0.55, np.nan, np.nan, np.nan, np.nan, np.nan],\n        [0.20, 0.50, 0.40, 0.60, np.nan, np.nan, np.nan, np.nan],\n        [0.10, 0.30, 0.35, 0.50, 0.55, np.nan, np.nan, np.nan],\n        [0.05, 0.15, 0.20, 0.30, 0.45, 0.50, np.nan, np.nan],\n        [0.15, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, np.nan],\n    ]\n)\n\nmetrics = [\n    \"Temperature\",\n    \"Humidity\",\n    \"Precipitation\",\n    \"Wind Speed\",\n    \"Pressure\",\n    \"Visibility\",\n    \"Cloud Cover\",\n    \"Solar Radiation\",\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(\n    figsize=(8, 6)\n)  # Adjusted to match the original image's dimensions\n\n# Create heatmap\ncax = ax.matshow(data, cmap=\"Blues\")\n\n# Add color bar\nplt.colorbar(cax)\n\n# Set axis labels\nax.set_xticks(np.arange(len(metrics)))\nax.set_yticks(np.arange(len(metrics)))\nax.set_xticklabels(metrics)\nax.set_yticklabels(metrics)\n\n# Rotate the tick labels bottom and rotated to 90\nax.xaxis.set_ticks_position(\"bottom\")\nax.xaxis.set_tick_params(rotation=90)\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(metrics)):\n    for j in range(len(metrics)):\n        if not np.isnan(data[i, j]):\n            if data[i, j] > 0.35:\n                text = ax.text(\n                    j, i, f\"{data[i, j]:.2f}\", ha=\"center\", va=\"center\", color=\"white\"\n                )\n            else:\n                text = ax.text(\n                    j, i, f\"{data[i, j]:.2f}\", ha=\"center\", va=\"center\", color=\"black\"\n                )\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('heatmap_8.pdf', bbox_inches='tight')"}
{"idx": "heatmap_10", "instruction": "There is a reference image for you and I also have a set of data about business performance metrics across different departments and quarters. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Defining the colormap from yellow to blue\ncmap = plt.cm.coolwarm_r\n\n# Sample data: a 5x6 grid, reflecting business performance metrics\ndata = np.array(\n[\n[250.3, 120.0, 90.9, 70.0, 134.4, 163.3],\n[492.2, 110.2, 60.6, 78.8, 173.3, 139.9],\n[508.8, 123.3, 90.9, 62.2, 155.5, 143.3],\n[760.0, 21.1, 50.5, 41.1, 81.1, 92.2],\n[157.7, 281.1, 26.6, 145.5, 286.6, 105.5],\n]\n)\n\n# X and Y labels for business departments\nx_labels = [\"Sales\", \"Marketing\", \"IT\", \"HR\", \"Finance\", \"Admin\"]\ny_labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Defining the colormap from yellow to blue\ncmap = plt.cm.coolwarm_r\n\n# Sample data: a 5x6 grid, reflecting business performance metrics\ndata = np.array(\n    [\n        [250.3, 120.0, 90.9, 70.0, 134.4, 163.3],\n        [492.2, 110.2, 60.6, 78.8, 173.3, 139.9],\n        [508.8, 123.3, 90.9, 62.2, 155.5, 143.3],\n        [760.0, 21.1, 50.5, 41.1, 81.1, 92.2],\n        [157.7, 281.1, 26.6, 145.5, 286.6, 105.5],\n    ]\n)\n\n# X and Y labels for business departments\nx_labels = [\"Sales\", \"Marketing\", \"IT\", \"HR\", \"Finance\", \"Admin\"]\ny_labels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set up the colormap and norm (log scale)\nnorm = LogNorm(vmin=20, vmax=1000)\n\n# Create the scatter plot\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        # Calculate the color based on the original value\n        color = cmap(norm(data[i, j]))\n\n        # Draw the circle with a fixed size\n        circle = plt.Circle((j, i), 0.4, color=color)  # Fixed size\n        ax.add_artist(circle)\n\n        # Add the text inside the circle\n        ax.text(j, i, f\"{data[i, j]:.1f}\", ha=\"center\", va=\"center\", color=\"black\")\n\n# Set labels for x and y axes\nax.set_xticks(range(len(x_labels)))\nax.set_xticklabels(x_labels, ha=\"center\")\nax.set_yticks(range(len(y_labels)))\nax.set_yticklabels(y_labels, va=\"center\")\n\n# Adding titles for the axes\nax.set_xlabel(\"Departments\", fontsize=14)\nax.set_ylabel(\"Quarters\", fontsize=14)\n\n# Set the limits of the axes; they should be one more than your data range\nax.set_xlim(-0.5, data.shape[1] - 0.5)\nax.set_ylim(-0.5, data.shape[0] - 0.5)\n\n# Set the aspect of the plot to be equal and add a frame\nax.set_aspect(\"equal\")\nfor spine in ax.spines.values():\n    spine.set_visible(True)\n\n# Create a colorbar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = plt.colorbar(sm, ax=ax, ticks=[20, 100, 500, 1000], orientation=\"vertical\")\ncbar.ax.set_yticklabels([\"20\", \"100\", \"500\", \"1000\"])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Save the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_10.pdf', bbox_inches='tight')"}
{"idx": "heatmap_11", "instruction": "There is a reference image for you and I also have a set of data about the correlation between different programming languages. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the heatmap (randomly generated to match the color pattern)\ndata = np.array(\n[\n[0.9, 0.7, 0.4, 0.2, 0.1],\n[0.8, 0.6, 0.3, 0.2, 0.2],\n[0.7, 0.5, 0.6, 0.4, 0.3],\n[0.6, 0.4, 0.5, 0.7, 0.5],\n[0.5, 0.3, 0.4, 0.6, 0.8],\n]\n)\n\n# Programming languages for the axes\nlanguages = [\"Python\", \"JavaScript\", \"Java\", \"C++\", \"Ruby\"]\nxlabel = \"Programming Languages\"\nylabel = \"Programming Languages\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the heatmap (randomly generated to match the color pattern)\ndata = np.array(\n    [\n        [0.9, 0.7, 0.4, 0.2, 0.1],\n        [0.8, 0.6, 0.3, 0.2, 0.2],\n        [0.7, 0.5, 0.6, 0.4, 0.3],\n        [0.6, 0.4, 0.5, 0.7, 0.5],\n        [0.5, 0.3, 0.4, 0.6, 0.8],\n    ]\n)\n\n# Programming languages for the axes\nlanguages = [\"Python\", \"JavaScript\", \"Java\", \"C++\", \"Ruby\"]\nxlabel = \"Programming Languages\"\nylabel = \"Programming Languages\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the heatmap\nfig, ax = plt.subplots(figsize=(8, 6))  # Adjusting figure size\ncax = ax.matshow(data, cmap=\"plasma\")\n\n# Set the ticks and labels\nax.set_xticks(np.arange(len(languages)))\nax.set_yticks(np.arange(len(languages)))\n\n# Adjust the tick label alignment to ensure the x-axis labels appear only at the bottom\nax.tick_params(\n    axis=\"x\", which=\"both\", bottom=True, top=False, labelbottom=True, labeltop=False\n)\nax.tick_params(axis=\"y\", which=\"both\", right=False, left=False, labelleft=True)\n\n# Set the labels for the x-axis and rotate them for better readability\nax.set_xticklabels(languages, rotation=45)\n\n# Set the labels for the y-axis\nax.set_yticklabels(languages)\n\n# Add colorbar with the correct range\ncbar = plt.colorbar(cax, ticks=[0, 0.2, 0.4, 0.6, 0.8, 1])\ncbar.ax.set_yticklabels(\n    [\"0\", \"0.2\", \"0.4\", \"0.6\", \"0.8\", \"1\"]\n)  # Set the colorbar labels\n\n# Add labels for the axes\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout to add more space around the heatmap\nplt.tight_layout()\n# Show the plot\nplt.savefig('heatmap_11.pdf', bbox_inches='tight')"}
{"idx": "heatmap_12", "instruction": "There is a reference image for you and I also have a set of data about vehicle type classification accuracy. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Placeholder data for confusion matrices\ndata_train = np.array(\n[\n[40, 5, 3, 2, 0, 0],\n[4, 38, 7, 1, 0, 0],\n[2, 6, 35, 5, 1, 1],\n[0, 2, 5, 40, 3, 0],\n[0, 0, 2, 4, 41, 3],\n[0, 0, 0, 1, 6, 43],\n]\n)\ndata_test = np.array(\n[\n[38, 6, 2, 4, 0, 0],\n[3, 35, 5, 4, 1, 0],\n[1, 4, 33, 6, 2, 1],\n[0, 1, 4, 38, 6, 1],\n[0, 0, 1, 3, 42, 4],\n[0, 0, 0, 2, 5, 43],\n]\n)\n\n# Titles for the subplots\ntitles = [\"Training Set\", \"Test Set\"]\nylabel = \"Actual Vehicle Type\"\nxlabel = \"Predicted Vehicle Type\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Placeholder data for confusion matrices\ndata_train = np.array(\n    [\n        [40, 5, 3, 2, 0, 0],\n        [4, 38, 7, 1, 0, 0],\n        [2, 6, 35, 5, 1, 1],\n        [0, 2, 5, 40, 3, 0],\n        [0, 0, 2, 4, 41, 3],\n        [0, 0, 0, 1, 6, 43],\n    ]\n)\ndata_test = np.array(\n    [\n        [38, 6, 2, 4, 0, 0],\n        [3, 35, 5, 4, 1, 0],\n        [1, 4, 33, 6, 2, 1],\n        [0, 1, 4, 38, 6, 1],\n        [0, 0, 1, 3, 42, 4],\n        [0, 0, 0, 2, 5, 43],\n    ]\n)\n\n# Titles for the subplots\ntitles = [\"Training Set\", \"Test Set\"]\nylabel = \"Actual Vehicle Type\"\nxlabel = \"Predicted Vehicle Type\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Increase the figure height and adjust subplot layout\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(6, 5))\n\n# Function to create a single confusion matrix plot\ndef plot_confusion_matrix(ax, data, title):\n    im = ax.imshow(data, interpolation=\"nearest\", cmap=\"Purples\")\n    ax.set(\n        title=title,\n        ylabel=ylabel,\n        xlabel=xlabel,\n        xticks=np.arange(data.shape[1]),\n        yticks=np.arange(data.shape[0]),\n    )\n    ax.axhline(y=2.5, color=\"black\", linewidth=4)\n    ax.axvline(x=2.5, color=\"black\", linewidth=4)\n    # unset the ticks\n    ax.set_xticks([])\n    ax.set_yticks([])\n    # unset the spines\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"bottom\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n    return im\n\n# Plot each confusion matrix\nim1 = plot_confusion_matrix(axes[0], data_train, titles[0])\nim2 = plot_confusion_matrix(axes[1], data_test, titles[1])\n\n# Adjust the position and size of the colorbars\ncbar_ax1 = fig.add_axes([0.05, 0.15, 0.45, 0.02])  # Adjusted for the first subplot\ncbar_ax2 = fig.add_axes([0.55, 0.15, 0.45, 0.02])  # Adjusted for the second subplot\nfig.colorbar(im1, cax=cbar_ax1, orientation=\"horizontal\")\nfig.colorbar(im2, cax=cbar_ax2, orientation=\"horizontal\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nfig.tight_layout()\nplt.savefig('heatmap_12.pdf', bbox_inches='tight')"}
{"idx": "heatmap_13", "instruction": "There is a reference image for you and I also have a set of data about quarterly sales figures for different products. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Replace None with np.nan to create an array with NaN values\ndata = np.array(\n[\n[np.nan, np.nan, 1.2, np.nan],\n[4.5, 8.1, 16.4, 7.2],\n[np.nan, np.nan, 12.7, 28.3],\n[3.8, 4.0, 16.6, 22.1],\n]\n)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Replace None with np.nan to create an array with NaN values\ndata = np.array(\n    [\n        [np.nan, np.nan, 1.2, np.nan],\n        [4.5, 8.1, 16.4, 7.2],\n        [np.nan, np.nan, 12.7, 28.3],\n        [3.8, 4.0, 16.6, 22.1],\n    ]\n)\nxticklabels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nyticklabels = [\"Product A\", \"Product B\", \"Product C\", \"Product D\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a heatmap, setting NaN values' color to grey\ncmap = plt.cm.BrBG_r\ncmap.set_bad(\"gray\", 1.0)\n\n# Draw the heatmap\nfig, ax = plt.subplots(figsize=(6, 6))\ncax = ax.matshow(data, cmap=cmap)\n\n# Add text\nfor (i, j), val in np.ndenumerate(data):\n    if not np.isnan(val):  # Only add text for non-NaN values\n        ax.text(j, i, f\"${val}M\", va=\"center\", ha=\"center\")\n\n# Set axis labels.\nax.set_xticks(np.arange(data.shape[1]))\nax.set_yticks(np.arange(data.shape[0]))\n\n# Set axis tick labels\nax.set_xticklabels(xticklabels)\nax.set_yticklabels(yticklabels)\n\n# Turn off the gridlines generated by the ticks\nax.grid(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_13.pdf', bbox_inches='tight')"}
{"idx": "heatmap_14", "instruction": "There is a reference image for you and I also have a set of data about energy consumption or production in GWh for different energy sources across various countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\ndata = np.random.rand(10, 5) * 200 - 100 # Random data between -100 and 100 to reflect energy consumption or production in GWh\nenergy_sources = [\n\"Coal\",\n\"Natural Gas\",\n\"Nuclear\",\n\"Hydro\",\n\"Wind\",\n\"Solar\",\n\"Geothermal\",\n\"Biomass\",\n\"Oil\",\n\"Other\"\n]\ncountries = [\"USA\", \"China\", \"India\", \"Germany\", \"France\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\ndata = np.random.rand(10, 5) * 200 - 100  # Random data between -100 and 100 to reflect energy consumption or production in GWh\nenergy_sources = [\n    \"Coal\",\n    \"Natural Gas\",\n    \"Nuclear\",\n    \"Hydro\",\n    \"Wind\",\n    \"Solar\",\n    \"Geothermal\",\n    \"Biomass\",\n    \"Oil\",\n    \"Other\"\n]\ncountries = [\"USA\", \"China\", \"India\", \"Germany\", \"France\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the heatmap\nfig, ax = plt.subplots(\n    figsize=(6, 10)\n)  # Adjusting figure size to match original image dimensions\ncax = ax.matshow(data, cmap=\"coolwarm\", vmin=-100, vmax=100)\n\n# Set axis labels\nax.set_xticks(np.arange(len(countries)))\nax.set_yticks(np.arange(len(energy_sources)))\nax.set_xticklabels(countries)  # Removed rotation and alignment\nax.set_yticklabels(energy_sources)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=270, ha=\"center\")\n\n# Add colorbar\ncbar = plt.colorbar(\n    cax, aspect=10.5\n)  # Adjusted shrink and aspect to match reference picture\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot\nplt.tight_layout()\nplt.savefig('heatmap_14.pdf', bbox_inches='tight')"}
{"idx": "heatmap_15", "instruction": "There is a reference image for you and I also have a set of data about energy consumption trends. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to mimic energy consumption trends\ndata = np.array(\n[\n[0, 2, 4, 6, 8, 10],\n[np.nan, 1, 3, 5, 7, 9],\n[np.nan, np.nan, 2, 4, 6, 8],\n[np.nan, np.nan, np.nan, 3, 5, 7],\n[np.nan, np.nan, np.nan, np.nan, 4, 6],\n[np.nan, np.nan, np.nan, np.nan, np.nan, 5],\n]\n)\ncolorbar_label = \"Energy Consumption (GWh)\"\nxlabel = \"Year\"\nylabel = \"Region\"\ntextstr = \"Energy Trends\\nPeak Usage=10 GWh\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic energy consumption trends\ndata = np.array(\n    [\n        [0, 2, 4, 6, 8, 10],\n        [np.nan, 1, 3, 5, 7, 9],\n        [np.nan, np.nan, 2, 4, 6, 8],\n        [np.nan, np.nan, np.nan, 3, 5, 7],\n        [np.nan, np.nan, np.nan, np.nan, 4, 6],\n        [np.nan, np.nan, np.nan, np.nan, np.nan, 5],\n    ]\n)\ncolorbar_label = \"Energy Consumption (GWh)\"\nxlabel = \"Year\"\nylabel = \"Region\"\ntextstr = \"Energy Trends\\nPeak Usage=10 GWh\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(6, 8))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap=\"inferno\")\n\n# Add colorbar\ncbar = fig.colorbar(cax, label=colorbar_label, shrink=0.5)  # Add shrink parameter here\n\n# Set axis labels\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Set axis ticks\nax.set_xticks(np.arange(6))\nax.set_yticks(np.arange(6))\nax.set_xticklabels([1, 3, 5, 9, 12, \"\"])\nax.set_yticklabels([1, 3, 5, 9, 12, \"\"])\n\n# Add text box\nprops = dict(\n    boxstyle=\"round\",\n    facecolor=\"white\",\n    alpha=0.5,\n)\nax.text(\n    0.05,\n    0.15,\n    textstr,\n    transform=ax.transAxes,\n    fontsize=12,\n    verticalalignment=\"top\",\n    bbox=props,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('heatmap_15.pdf', bbox_inches='tight')"}
{"idx": "heatmap_16", "instruction": "There is a reference image for you and I also have a set of data about various technology categories including AI, Blockchain, IoT, and Quantum Computing. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport pandas as pd\nimport numpy as np;np.random.seed(0)\n# Defining the categories\ncategories = [\"AI\", \"Blockchain\", \"IoT\", \"Quantum Computing\"]\n\n# Generating random data for illustration purposes\n# You will need to replace this with your actual data\ndata = np.random.uniform(size=(140,)) # 180 values for 4 categories, 40 values each\n\n# Creating a DataFrame\ndf = pd.DataFrame(\n{\n\"Categories\": np.tile(categories, 35), # Repeating each category 40 times\n\"Count\": np.repeat(\nrange(0, 35), 4\n), # Repeating each number from 0-39, 4 times\n\"Values\": data,\n}\n)\n\n# Pivoting the DataFrame to get it into the matrix form\npivot_df = df.pivot(index=\"Categories\", columns=\"Count\", values=\"Values\")\n\n# Reordering the index of the pivot_df to match the desired order\npivot_df = pivot_df.reindex(categories)\n\ncolor_bar_label = \"Values\" # Label for the color bar\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport pandas as pd\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Defining the categories\ncategories = [\"AI\", \"Blockchain\", \"IoT\", \"Quantum Computing\"]\n\n# Generating random data for illustration purposes\n# You will need to replace this with your actual data\ndata = np.random.uniform(size=(140,))  # 180 values for 4 categories, 40 values each\n\n# Creating a DataFrame\ndf = pd.DataFrame(\n    {\n        \"Categories\": np.tile(categories, 35),  # Repeating each category 40 times\n        \"Count\": np.repeat(\n            range(0, 35), 4\n        ),  # Repeating each number from 0-39,  4 times\n        \"Values\": data,\n    }\n)\n\n# Pivoting the DataFrame to get it into the matrix form\npivot_df = df.pivot(index=\"Categories\", columns=\"Count\", values=\"Values\")\n\n# Reordering the index of the pivot_df to match the desired order\npivot_df = pivot_df.reindex(categories)\n\ncolor_bar_label = \"Values\"  # Label for the color bar\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the heatmap with categories on the y-axis\nplt.figure(figsize=(10, 3))  # Adjust size as needed\n\n# Choose a different colormap, e.g., 'viridis'\ncmap = plt.get_cmap(\"turbo\")\ncax = plt.imshow(pivot_df, cmap=cmap)\n\n# x set only to be 0 5 10 15 20 25 30 35 40\nplt.xticks(np.arange(0, 35, 5), range(0, 35, 5))\nplt.yticks(range(len(categories)), categories)\n\nplt.yticks(rotation=0)  # Ensure y-tick labels are horizontal\nplt.xticks(rotation=0)  # Ensure x-tick labels are horizontal\n\n# Add colorbar\ncbar = plt.colorbar(cax)\ncbar.set_label(color_bar_label)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_16.pdf', bbox_inches='tight')"}
{"idx": "heatmap_17", "instruction": "There is a reference image for you and I also have a set of data about different technology categories including AI, Blockchain, IoT, and Quantum Computing. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport pandas as pd\nimport numpy as np;np.random.seed(0)\n# Defining the categories\ncategories = [\"AI\", \"Blockchain\", \"IoT\", \"Quantum Computing\"]\n\n# Generating random data for illustration purposes\n# You will need to replace this with your actual data\ndata = np.random.uniform(size=(140,)) # 180 values for 4 categories, 40 values each\n\n# Creating a DataFrame\ndf = pd.DataFrame(\n{\n\"Categories\": np.tile(categories, 35), # Repeating each category 40 times\n\"Count\": np.repeat(\nrange(0, 35), 4\n), # Repeating each number from 0-39, 4 times\n\"Values\": data,\n}\n)\n\n# Pivoting the DataFrame to get it into the matrix form\npivot_df = df.pivot(index=\"Categories\", columns=\"Count\", values=\"Values\")\n\n# Reordering the index of the pivot_df to match the desired order\npivot_df = pivot_df.reindex(categories)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport pandas as pd\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Defining the categories\ncategories = [\"AI\", \"Blockchain\", \"IoT\", \"Quantum Computing\"]\n\n# Generating random data for illustration purposes\n# You will need to replace this with your actual data\ndata = np.random.uniform(size=(140,))  # 180 values for 4 categories, 40 values each\n\n# Creating a DataFrame\ndf = pd.DataFrame(\n    {\n        \"Categories\": np.tile(categories, 35),  # Repeating each category 40 times\n        \"Count\": np.repeat(\n            range(0, 35), 4\n        ),  # Repeating each number from 0-39,  4 times\n        \"Values\": data,\n    }\n)\n\n# Pivoting the DataFrame to get it into the matrix form\npivot_df = df.pivot(index=\"Categories\", columns=\"Count\", values=\"Values\")\n\n# Reordering the index of the pivot_df to match the desired order\npivot_df = pivot_df.reindex(categories)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the heatmap with categories on the y-axis\nplt.figure(figsize=(10, 3))  # Adjust size as needed\n\n# Choose a different colormap, e.g., 'viridis'\ncmap = plt.get_cmap(\"turbo\")\ncax = plt.imshow(pivot_df, cmap=cmap)\n\n# x set only to be 0 5 10 15 20 25 30 35 40\nplt.xticks(np.arange(0, 35, 5), range(0, 35, 5))\nplt.yticks(range(len(categories)), categories)\n\nplt.yticks(rotation=0)  # Ensure y-tick labels are horizontal\nplt.xticks(rotation=0)  # Ensure x-tick labels are horizontal\n\n# Add colorbar\ncbar = plt.colorbar(cax)\ncbar.set_label(\"Values\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_17.pdf', bbox_inches='tight')"}
{"idx": "heatmap_18", "instruction": "There is a reference image for you and I also have a set of data about energy production from different sources including solar, wind, hydro, and nuclear. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the heatmaps (randomly generated for demonstration purposes)\ndata_solar = np.random.rand(4, 4) * 0.5 + 0.5\ndata_wind = np.random.rand(4, 4)\ndata_hydro = np.random.rand(4, 4)\ndata_nuclear = np.random.rand(4, 4) * 0.8 + 0.2\ntitles = [\"Solar\", \"Wind\", \"Hydro\", \"Nuclear\"]\nfig_title = \"Energy Production\"\ncolorbar_label = \"Energy Output (MWh)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the heatmaps (randomly generated for demonstration purposes)\ndata_solar = np.random.rand(4, 4) * 0.5 + 0.5\ndata_wind = np.random.rand(4, 4)\ndata_hydro = np.random.rand(4, 4)\ndata_nuclear = np.random.rand(4, 4) * 0.8 + 0.2\ntitles = [\"Solar\", \"Wind\", \"Hydro\", \"Nuclear\"]\nfig_title = \"Energy Production\"\ncolorbar_label = \"Energy Output (MWh)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with subplots\nfig, axs = plt.subplots(2, 2, figsize=(7, 6))\n\n\n# Function to add text annotations\ndef add_annotations(ax, data):\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            ax.text(j, i, f\"{data[i, j]:.2f}\", ha=\"center\", va=\"center\", color=\"w\")\n\n\n# Autoformer heatmap\nim1 = axs[0, 0].imshow(data_solar, cmap=\"YlOrBr\", vmin=-1, vmax=1)\naxs[0, 0].set_title(titles[0])\nadd_annotations(axs[0, 0], data_solar)\n\n# Informer heatmap\nim2 = axs[0, 1].imshow(data_wind, cmap=\"YlOrBr\", vmin=-1, vmax=1)\naxs[0, 1].set_title(titles[1])\nadd_annotations(axs[0, 1], data_wind)\n\n# Reformer heatmap\nim3 = axs[1, 0].imshow(data_hydro, cmap=\"YlOrBr\", vmin=-1, vmax=1)\naxs[1, 0].set_title(titles[2])\nadd_annotations(axs[1, 0], data_hydro)\n\n# Transformer heatmap\nim4 = axs[1, 1].imshow(data_nuclear, cmap=\"YlOrBr\", vmin=-1, vmax=1)\naxs[1, 1].set_title(titles[3])\nadd_annotations(axs[1, 1], data_nuclear)\n\n# Adjust layout and add overall title\nfig.suptitle(fig_title, fontsize=16)\n\n# Add color bar and shift it to the right\ncbar = fig.colorbar(im1, ax=axs.ravel().tolist(), shrink=0.75)\ncbar.set_label(colorbar_label)\n\n# Set tick labels\nfor ax in axs.flat:\n    ax.set_xticks(np.arange(4))\n    ax.set_yticks(np.arange(4))\n    ax.set_xticklabels([\"96\", \"192\", \"336\", \"720\"])\n    ax.set_yticklabels([\"96\", \"192\", \"336\", \"720\"])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to minimize white space\nplt.tight_layout(rect=[0, 0, 0.2, 0.1])\n# Save the figure to a file\nplt.savefig('heatmap_18.pdf', bbox_inches='tight')"}
{"idx": "heatmap_20", "instruction": "There is a reference image for you and I also have a set of data about technology adoption rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Define the technology labels\ntechnologies = [\n\"AI\",\n\"Blockchain\",\n\"Cloud\",\n\"IoT\",\n\"AR/VR\",\n\"Big Data\",\n\"5G\",\n\"Quantum Computing\",\n]\n\n# Define the data for the original and adjusted values\ngroup_a_values = [0.20, 0.10, 0.25, 0.15, 0.05, 0.10, 0.10, 0.05]\ngroup_b_values = [0.15, 0.05, 0.30, 0.20, 0.10, 0.05, 0.10, 0.05]\ntitles = [\"Group A\", \"Group B\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the technology labels\ntechnologies = [\n    \"AI\",\n    \"Blockchain\",\n    \"Cloud\",\n    \"IoT\",\n    \"AR/VR\",\n    \"Big Data\",\n    \"5G\",\n    \"Quantum Computing\",\n]\n\n# Define the data for the original and adjusted values\ngroup_a_values = [0.20, 0.10, 0.25, 0.15, 0.05, 0.10, 0.10, 0.05]\ngroup_b_values = [0.15, 0.05, 0.30, 0.20, 0.10, 0.05, 0.10, 0.05]\ntitles = [\"Group A\", \"Group B\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with two subplots (one for Group A and one for Group B)\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))\n\n# Define the color palette\ncmap = plt.get_cmap(\"coolwarm\")\n\n# Plot heatmap for Group A values\nim1 = ax1.imshow(pd.DataFrame([group_a_values], columns=technologies), cmap=cmap)\nax1.set_title(titles[0])\nax1.set_xticks(range(len(technologies)))\nax1.set_xticklabels(technologies, rotation=45, ha=\"center\")\nax1.set_yticks(range(1))\nax1.set_yticklabels([\"\"], rotation=0)\n\n# Add annotations for Group A values\nfor i in range(1):\n    for j in range(len(technologies)):\n        ax1.text(\n            j, i, f\"{group_a_values[j]:.2f}\", ha=\"center\", va=\"center\", color=\"black\"\n        )\n\n# Plot heatmap for Group B values\nim2 = ax2.imshow(pd.DataFrame([group_b_values], columns=technologies), cmap=cmap)\nax2.set_title(titles[1])\nax2.set_xticks(range(len(technologies)))\nax2.set_xticklabels(technologies, rotation=45, ha=\"center\")\nax2.set_yticks(range(1))\nax2.set_yticklabels([\"\"], rotation=0)\n\n# Add annotations for Group B values\nfor i in range(1):\n    for j in range(len(technologies)):\n        ax2.text(\n            j, i, f\"{group_b_values[j]:.2f}\", ha=\"center\", va=\"center\", color=\"black\"\n        )\n\n# Display the figure\nplt.subplots_adjust(hspace=-0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('heatmap_20.pdf', bbox_inches='tight')"}
{"idx": "heatmap_21", "instruction": "There is a reference image for you and I also have a set of data about transportation preferences across different age groups. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Defining the colormap from white to blue\ncmap = plt.cm.Blues\n\n# Sample data: a 5x6 grid, now reflecting transportation data\ndata = np.array(\n[\n[30.2, 25.0, 5.9, 20.0, 15.4, 3.5],\n[35.1, 20.2, 4.6, 15.8, 18.3, 6.0],\n[40.8, 15.3, 3.9, 10.2, 20.5, 9.3],\n[45.0, 10.1, 2.5, 5.1, 25.1, 12.2],\n[50.7, 5.1, 1.5, 3.5, 28.6, 10.6],\n]\n)\n\n# X and Y labels\nx_label = \"Mode of Transportation\"\ny_label = \"Age Group\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Defining the colormap from white to blue\ncmap = plt.cm.Blues\n\n# Sample data: a 5x6 grid, now reflecting transportation data\ndata = np.array(\n    [\n        [30.2, 25.0, 5.9, 20.0, 15.4, 3.5],\n        [35.1, 20.2, 4.6, 15.8, 18.3, 6.0],\n        [40.8, 15.3, 3.9, 10.2, 20.5, 9.3],\n        [45.0, 10.1, 2.5, 5.1, 25.1, 12.2],\n        [50.7, 5.1, 1.5, 3.5, 28.6, 10.6],\n    ]\n)\n\n# X and Y labels\nxticklabels = [\"Walking\", \"Biking\", \"Bus\", \"Car\", \"Train\", \"Other\"]\nyticklabels = [\"<18\", \"18-29\", \"30-49\", \"50-64\", \"65+\"]\nx_label = \"Mode of Transportation\"\ny_label = \"Age Group\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set up the colormap and norm (log scale)\nnorm = LogNorm(vmin=0.1, vmax=60)\n\n# Create the scatter plot\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        # Calculate the color based on the original value\n        color = cmap(norm(data[i, j]))\n\n        # Draw the circle with a fixed size\n        circle = plt.Circle((j, i), 0.4, color=color)  # Fixed size\n        ax.add_artist(circle)\n\n        # Determine text color based on the value\n        text_color = \"white\" if data[i, j] > 25 else \"black\"\n\n        # Add the text inside the circle\n        ax.text(j, i, f\"{data[i, j]:.1f}%\", ha=\"center\", va=\"center\", color=text_color)\n\n# Set labels for x and y axes\nax.set_xticks(range(len(xticklabels)))\nax.set_xticklabels(xticklabels, ha=\"center\")\nax.set_yticks(range(len(yticklabels)))\nax.set_yticklabels(yticklabels, va=\"center\")\n\n# Adding titles for the axes\nax.set_xlabel(x_label, fontsize=14)\nax.set_ylabel(y_label, fontsize=14)\n\n# Set the limits of the axes; they should be one more than your data range\nax.set_xlim(-0.5, data.shape[1] - 0.5)\nax.set_ylim(-0.5, data.shape[0] - 0.5)\n\n# Set the aspect of the plot to be equal and add a frame\nax.set_aspect(\"equal\")\nfor spine in ax.spines.values():\n    spine.set_visible(True)\n\n# Create a colorbar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = plt.colorbar(sm, ax=ax, ticks=[0.1, 1, 10, 60], orientation=\"vertical\")\ncbar.ax.set_yticklabels([\"0.1\", \"1\", \"10\", \"60\"])\n\n# Add gridlines\nplt.grid(True, which=\"both\", color=\"gray\", linestyle=\"--\", linewidth=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to fit the figure size\nplt.tight_layout()\n# Show the plot\nplt.savefig('heatmap_21.pdf', bbox_inches='tight')"}
{"idx": "heatmap_24", "instruction": "There is a reference image for you and I also have a set of data about average temperatures in different cities over several months. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ncities = [\"City A\", \"City B\", \"City C\", \"City D\", \"City E\", \"City F\", \"City G\"]\nmonths = [\n\"January\",\n\"February\",\n\"March\",\n\"April\",\n\"May\",\n\"June\",\n\"July\",\n]\n\ntemperature = np.array(\n[\n[5.2, 6.1, 7.3, 9.2, 12.8, 15.4, 18.2],\n[3.1, 4.5, 7.8, 11.3, 14.7, 17.8, 19.6],\n[2.2, 5.0, 9.1, 12.2, 16.0, 20.5, 22.1],\n[6.3, 8.1, 10.2, 13.5, 17.4, 22.0, 24.8],\n[1.9, 3.8, 6.9, 10.6, 15.3, 18.9, 21.7],\n[0.5, 2.3, 5.2, 9.1, 13.6, 17.2, 20.9],\n[3.3, 5.7, 8.6, 12.8, 16.5, 20.0, 23.4],\n]\n)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib\nimport matplotlib as mpl\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncities = [\"City A\", \"City B\", \"City C\", \"City D\", \"City E\", \"City F\", \"City G\"]\nmonths = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n]\n\ntemperature = np.array(\n    [\n        [5.2, 6.1, 7.3, 9.2, 12.8, 15.4, 18.2],\n        [3.1, 4.5, 7.8, 11.3, 14.7, 17.8, 19.6],\n        [2.2, 5.0, 9.1, 12.2, 16.0, 20.5, 22.1],\n        [6.3, 8.1, 10.2, 13.5, 17.4, 22.0, 24.8],\n        [1.9, 3.8, 6.9, 10.6, 15.3, 18.9, 21.7],\n        [0.5, 2.3, 5.2, 9.1, 13.6, 17.2, 20.9],\n        [3.3, 5.7, 8.6, 12.8, 16.5, 20.0, 23.4],\n    ]\n)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n\ndef heatmap(\n    data, row_labels, col_labels, ax=None, cbar_kw=None, cbarlabel=\"\", **kwargs\n):\n    if ax is None:\n        ax = plt.gca()\n\n    if cbar_kw is None:\n        cbar_kw = {}\n\n    # Plot the heatmap\n    im = ax.imshow(data, **kwargs)\n\n    # Create colorbar\n    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)\n    cbar.ax.set_ylabel(cbarlabel, rotation=-90, va=\"bottom\")\n\n    # Show all ticks and label them with the respective list entries.\n    ax.set_xticks(np.arange(data.shape[1]), labels=col_labels)\n    ax.set_yticks(np.arange(data.shape[0]), labels=row_labels)\n\n    # Let the horizontal axes labeling appear on top.\n    ax.tick_params(top=True, bottom=False, labeltop=True, labelbottom=False)\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=-30, ha=\"right\", rotation_mode=\"anchor\")\n\n    # Turn spines off and create white grid.\n    ax.spines[:].set_visible(False)\n\n    ax.set_xticks(np.arange(data.shape[1] + 1) - 0.5, minor=True)\n    ax.set_yticks(np.arange(data.shape[0] + 1) - 0.5, minor=True)\n    ax.grid(which=\"minor\", color=\"w\", linestyle=\"-\", linewidth=3)\n    ax.tick_params(which=\"minor\", bottom=False, left=False)\n\n    return im, cbar\n\n\ndef annotate_heatmap(\n    im,\n    data=None,\n    valfmt=\"{x:.1f}\",\n    textcolors=(\"black\", \"white\"),\n    threshold=None,\n    **textkw\n):\n    if not isinstance(data, (list, np.ndarray)):\n        data = im.get_array()\n\n    # Normalize the threshold to the images color range.\n    if threshold is not None:\n        threshold = im.norm(threshold)\n    else:\n        threshold = im.norm(data.max()) / 2.0\n\n    # Set default alignment to center, but allow it to be\n    # overwritten by textkw.\n    kw = dict(horizontalalignment=\"center\", verticalalignment=\"center\")\n    kw.update(textkw)\n\n    # Get the formatter in case a string is supplied\n    if isinstance(valfmt, str):\n        valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)\n\n    # Loop over the data and create a `Text` for each \"pixel\".\n    # Change the text's color depending on the data.\n    texts = []\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])\n            text = im.axes.text(j, i, valfmt(data[i, j], None), **kw)\n            texts.append(text)\n\n    return texts\n\n\nfig, ax = plt.subplots(figsize=(8, 8))\nim, cbar = heatmap(\n    temperature, cities, months, ax=ax, cmap=\"YlGn\", cbarlabel=\"Average Temperature [\u00b0C]\"\n)\ntexts = annotate_heatmap(im, valfmt=\"{x:.1f} \u00b0C\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nfig.tight_layout()\nplt.savefig('heatmap_24.pdf', bbox_inches='tight')"}
{"idx": "heatmap_25", "instruction": "There is a reference image for you and I also have a set of data about sales figures for different devices and brands. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ndevices = [\"Laptop\", \"Smartphone\", \"Tablet\", \"Smartwatch\", \"Router\", \"Printer\", \"Monitor\"]\nbrands = [\n\"TechCorp\",\n\"Innovate Ltd.\",\n\"GadgetWorks\",\n\"FutureTech\",\n\"DeviceHub\",\n\"ElectroGoods\",\n\"DigitalWorld\",\n]\n\nsales = np.array(\n[\n[120, 450, 230, 300, 150, 500, 400],\n[340, 290, 520, 310, 270, 150, 200],\n[180, 300, 150, 450, 310, 270, 290],\n[200, 220, 130, 150, 410, 230, 190],\n[160, 340, 180, 360, 390, 520, 270],\n[310, 240, 220, 150, 160, 430, 480],\n[130, 290, 180, 210, 140, 380, 500],\n]\n)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib\nimport matplotlib as mpl\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ndevices = [\"Laptop\", \"Smartphone\", \"Tablet\", \"Smartwatch\", \"Router\", \"Printer\", \"Monitor\"]\nbrands = [\n    \"TechCorp\",\n    \"Innovate Ltd.\",\n    \"GadgetWorks\",\n    \"FutureTech\",\n    \"DeviceHub\",\n    \"ElectroGoods\",\n    \"DigitalWorld\",\n]\n\nsales = np.array(\n    [\n        [120, 450, 230, 300, 150, 500, 400],\n        [340, 290, 520, 310, 270, 150, 200],\n        [180, 300, 150, 450, 310, 270, 290],\n        [200, 220, 130, 150, 410, 230, 190],\n        [160, 340, 180, 360, 390, 520, 270],\n        [310, 240, 220, 150, 160, 430, 480],\n        [130, 290, 180, 210, 140, 380, 500],\n    ]\n)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n\n\ndef heatmap(\n    data, row_labels, col_labels, ax=None, cbar_kw=None, cbarlabel=\"\", **kwargs\n):\n    if ax is None:\n        ax = plt.gca()\n\n    if cbar_kw is None:\n        cbar_kw = {}\n\n    # Plot the heatmap\n    im = ax.imshow(data, **kwargs)\n\n    # Create colorbar\n    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)\n    cbar.ax.set_ylabel(cbarlabel, rotation=-90, va=\"bottom\")\n\n    # Show all ticks and label them with the respective list entries.\n    ax.set_xticks(np.arange(data.shape[1]), labels=col_labels)\n    ax.set_yticks(np.arange(data.shape[0]), labels=row_labels)\n\n    # Let the horizontal axes labeling appear on top.\n    ax.tick_params(top=True, bottom=False, labeltop=True, labelbottom=False)\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=-30, ha=\"right\", rotation_mode=\"anchor\")\n\n    # Turn spines off and create white grid.\n    ax.spines[:].set_visible(False)\n\n    ax.set_xticks(np.arange(data.shape[1] + 1) - 0.5, minor=True)\n    ax.set_yticks(np.arange(data.shape[0] + 1) - 0.5, minor=True)\n    ax.grid(which=\"minor\", color=\"w\", linestyle=\"-\", linewidth=3)\n    ax.tick_params(which=\"minor\", bottom=False, left=False)\n\n    return im, cbar\n\n\ndef annotate_heatmap(\n    im,\n    data=None,\n    valfmt=\"{x:.2f}\",\n    textcolors=(\"black\", \"white\"),\n    threshold=None,\n    **textkw,\n):\n    if not isinstance(data, (list, np.ndarray)):\n        data = im.get_array()\n\n    # Normalize the threshold to the images color range.\n    if threshold is not None:\n        threshold = im.norm(threshold)\n    else:\n        threshold = im.norm(data.max()) / 2.0\n\n    # Set default alignment to center, but allow it to be\n    # overwritten by textkw.\n    kw = dict(horizontalalignment=\"center\", verticalalignment=\"center\")\n    kw.update(textkw)\n\n    # Get the formatter in case a string is supplied\n    if isinstance(valfmt, str):\n        valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)\n\n    # Loop over the data and create a `Text` for each \"pixel\".\n    # Change the text's color depending on the data.\n    texts = []\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])\n            text = im.axes.text(j, i, valfmt(data[i, j], None), **kw)\n            texts.append(text)\n\n    return texts\n\n\nfig, ((ax, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(8, 6))\n\n# Replicate the above example with a different font size and colormap.\nim, _ = heatmap(\n    sales, devices, brands, ax=ax, cmap=\"Wistia\", cbarlabel=\"sales [units/month]\"\n)\nannotate_heatmap(im, valfmt=\"{x:.1f}\", size=7)\n\n# Create some new data, give further arguments to imshow (vmin),\n# use an integer format on the annotations and provide some colors.\ndata = np.random.randint(20, 500, size=(7, 7))\ny = [f\"Day {i}\" for i in range(1, 8)]\nx = [f\"Site {i}\" for i in list(\"ABCDEFG\")]\nim, _ = heatmap(\n    data, y, x, ax=ax2, vmin=0, cmap=\"magma_r\", cbarlabel=\"daily visitors\"\n)\nannotate_heatmap(im, valfmt=\"{x:d}\", size=7, threshold=200, textcolors=(\"red\", \"white\"))\n\n# Sometimes even the data itself is categorical. Here we use a\n# `matplotlib.colors.BoundaryNorm` to get the data into classes\n# and use this to colorize the plot, but also to obtain the class\n# labels from an array of classes.\ndata = np.random.randn(6, 6)\ny = [f\"Quarter {i}\" for i in range(1, 7)]\nx = [f\"Year {i}\" for i in range(2018, 2024)]\n\nratings = list(\"ABCDEFG\")\nnorm = matplotlib.colors.BoundaryNorm(np.linspace(-3.5, 3.5, 8), 7)\nfmt = matplotlib.ticker.FuncFormatter(lambda x, pos: ratings[::-1][norm(x)])\n\nim, _ = heatmap(\n    data,\n    y,\n    x,\n    ax=ax3,\n    cmap=mpl.colormaps[\"PiYG\"].resampled(7),\n    norm=norm,\n    cbar_kw=dict(ticks=np.arange(-3, 4), format=fmt),\n    cbarlabel=\"Satisfaction Rating\",\n)\n\nannotate_heatmap(\n    im, valfmt=fmt, size=9, fontweight=\"bold\", threshold=-1, textcolors=(\"red\", \"black\")\n)\n\n# We can nicely plot a correlation matrix. Since this is bound by -1 and 1,\n# we use those as vmin and vmax. We may also remove leading zeros and hide\n# the diagonal elements (which are all 1) by using a\n# `matplotlib.ticker.FuncFormatter`.\ncorr_matrix = np.corrcoef(sales)\nim, _ = heatmap(\n    corr_matrix,\n    devices,\n    devices,\n    ax=ax4,\n    cmap=\"PuOr\",\n    vmin=-1,\n    vmax=1,\n    cbarlabel=\"correlation coeff.\",\n)\n\n\ndef func(x, pos):\n    return f\"{x:.2f}\".replace(\"0.\", \".\").replace(\"1.00\", \"\")\n\n\nannotate_heatmap(im, valfmt=matplotlib.ticker.FuncFormatter(func), size=7)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('heatmap_25.pdf', bbox_inches='tight')"}
{"idx": "heatmap_26", "instruction": "There is a reference image for you and I also have a set of data about exponential distribution samples. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nmethods = [\nNone,\n\"none\",\n\"nearest\",\n\"bilinear\",\n\"bicubic\",\n\"spline16\",\n\"spline36\",\n\"hanning\",\n\"hamming\",\n\"hermite\",\n\"kaiser\",\n\"quadric\",\n\"catrom\",\n\"gaussian\",\n\"bessel\",\n\"mitchell\",\n\"sinc\",\n\"lanczos\",\n]\n\ngrid = np.random.exponential(1 / 20, (4, 4))\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nmethods = [\n    None,\n    \"none\",\n    \"nearest\",\n    \"bilinear\",\n    \"bicubic\",\n    \"spline16\",\n    \"spline36\",\n    \"hanning\",\n    \"hamming\",\n    \"hermite\",\n    \"kaiser\",\n    \"quadric\",\n    \"catrom\",\n    \"gaussian\",\n    \"bessel\",\n    \"mitchell\",\n    \"sinc\",\n    \"lanczos\",\n]\n\ngrid = np.random.exponential(1 / 20, (4, 4))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axs = plt.subplots(\n    nrows=3, ncols=6, figsize=(9, 6), subplot_kw={\"xticks\": [], \"yticks\": []}\n)\n\nfor ax, interp_method in zip(axs.flat, methods):\n    ax.imshow(grid, interpolation=interp_method, cmap=\"viridis\")\n    ax.set_title(str(interp_method))\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('heatmap_26.pdf', bbox_inches='tight')"}
{"idx": "heatmap_27", "instruction": "There is a reference image for you and I also have a set of data about exponential distribution values. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nZ = np.random.exponential(1 / 20, (6, 10))\ntitles = [\"Cheng\", \"Cheng with Thick Edges\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom matplotlib.colors import LogNorm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nZ = np.random.exponential(1 / 20, (6, 10))\ntitles = [\"Cheng\", \"Cheng with Thick Edges\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, (ax0, ax1) = plt.subplots(2, 1, figsize=(6, 4))\n\n# Change the color map to 'plasma' for the first subplot\nc = ax0.pcolor(Z, cmap=\"plasma\")\nax0.set_title(titles[0])\n\n# Change the color map to 'plasma' and add thick edges for the second subplot\nc = ax1.pcolor(Z, edgecolors=\"k\", linewidths=4, cmap=\"plasma\")\nax1.set_title(titles[1])\n\n# ===================\n# Part 4: Saving Output\n# ===================\nfig.tight_layout()\nplt.savefig('heatmap_27.pdf', bbox_inches='tight')"}
{"idx": "heatmap_28", "instruction": "There is a reference image for you and I also have a set of data about renewable energy generation by different countries using various energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# New data\nenergy_sources = [\"Solar\", \"Wind\", \"Hydro\", \"Geothermal\", \"Biomass\", \"Tidal\", \"Wave\"]\ncountries = [\n\"Country A\",\n\"Country B\",\n\"Country C\",\n\"Country D\",\n\"Country E\",\n\"Country F\",\n\"Country G\",\n]\n\ngeneration = np.array(\n[\n[250, 320, 180, 430, 150, 500, 120],\n[480, 130, 560, 210, 320, 170, 160],\n[310, 220, 190, 600, 250, 620, 140],\n[170, 140, 110, 150, 420, 180, 190],\n[210, 290, 160, 380, 300, 770, 150],\n[260, 250, 140, 170, 180, 420, 650],\n[120, 290, 170, 240, 200, 340, 780],\n]\n)\n\ntitle = \"Renewable Energy Generation by Country (in GWh/year)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# New data\nenergy_sources = [\"Solar\", \"Wind\", \"Hydro\", \"Geothermal\", \"Biomass\", \"Tidal\", \"Wave\"]\ncountries = [\n    \"Country A\",\n    \"Country B\",\n    \"Country C\",\n    \"Country D\",\n    \"Country E\",\n    \"Country F\",\n    \"Country G\",\n]\n\ngeneration = np.array(\n    [\n        [250, 320, 180, 430, 150, 500, 120],\n        [480, 130, 560, 210, 320, 170, 160],\n        [310, 220, 190, 600, 250, 620, 140],\n        [170, 140, 110, 150, 420, 180, 190],\n        [210, 290, 160, 380, 300, 770, 150],\n        [260, 250, 140, 170, 180, 420, 650],\n        [120, 290, 170, 240, 200, 340, 780],\n    ]\n)\n\ntitle = \"Renewable Energy Generation by Country (in GWh/year)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(8, 6))\n\nim = ax.imshow(generation, cmap=\"OrRd\")\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(countries)), labels=countries)\nax.set_yticks(np.arange(len(energy_sources)), labels=energy_sources)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(energy_sources)):\n    for j in range(len(countries)):\n        text = ax.text(j, i, generation[i, j], ha=\"center\", va=\"center\", color=\"black\")\n\nax.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nfig.tight_layout()\nplt.show()\nplt.savefig('heatmap_28.pdf', bbox_inches='tight')"}
{"idx": "heatmap_29", "instruction": "There is a reference image for you and I also have a set of data about passenger traffic at different times of the day. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ndata = [[120, 150, 200, 180], [90, 110, 130, 115], [60, 85, 100, 95], [30, 50, 60, 45]]\nyticklabels = [\"Low Traffic\", \"Medium Traffic\", \"High Traffic\"]\ntitle = \"Passenger Traffic at Different Times of the Day\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ndata = [[120, 150, 200, 180], [90, 110, 130, 115], [60, 85, 100, 95], [30, 50, 60, 45]]\nyticklabels = [\"Low Traffic\", \"Medium Traffic\", \"High Traffic\"]\ntitle = \"Passenger Traffic at Different Times of the Day\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# with blue and green colors\ncolors_list = [\"#0099ff\", \"#33cc33\"]\ncmap = colors.ListedColormap(colors_list)\nplt.figure(figsize=(5, 4))\n# Plot the heatmap with custom colors and annotations\nplt.imshow(data, cmap=cmap, vmin=0, vmax=200, extent=[0, 4, 0, 4])\nfor i in range(4):\n    for j in range(4):\n        plt.annotate(\n            str(data[i][j]),\n            xy=(j + 0.5, i + 0.5),\n            ha=\"center\",\n            va=\"center\",\n            color=\"white\",\n        )\n\n# Add colorbar\ncbar = plt.colorbar(ticks=[0, 100, 200])\ncbar.ax.set_yticklabels(yticklabels)\n\n# Set plot title and axis labels\nplt.title(title)\nplt.xticks([])\nplt.yticks([])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot\nplt.tight_layout()\nplt.savefig('heatmap_29.pdf', bbox_inches='tight')"}
{"idx": "heatmap_30", "instruction": "There is a reference image for you and I also have a set of data about average monthly temperatures for different cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate random temperature data for heatmap (Cities x Months)\ndata = np.random.exponential(1 / 1, (8, 12)) \ntitle = \"Average Monthly Temperatures\"\nxlabel = \"Month\"\nylabel = \"City\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate random temperature data for heatmap (Cities x Months)\ndata = np.random.exponential(1 / 1, (8, 12))  \ntitle = \"Average Monthly Temperatures\"\nxlabel = \"Month\"\nylabel = \"City\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a new figure\nplt.figure(figsize=(8, 6))\n\n# Set the title of the heatmap\nplt.title(title)\n\n# Set the label for the x-axis\nplt.xlabel(xlabel)\n\n# Set the label for the y-axis\nplt.ylabel(ylabel)\n\n# Create a heatmap using pcolor function\n# Edgecolors sets the color of the cell borders\n# Linewidths sets the width of the cell borders\n# cmap sets the color map\n# vmin and vmax set the colorbar range\nc = plt.pcolor(data, edgecolors=\"k\", linewidths=4, cmap=\"RdBu\", vmin=0.0, vmax=1.0)\n\n# Add a colorbar to the figure\nplt.colorbar(c)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the figure with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_30.pdf', bbox_inches='tight')"}
{"idx": "line_2", "instruction": "There is a reference image for you and I also have a set of data about electric vehicle registrations over the past five years, broken down by vehicle type: sedans, SUVs, and trucks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nyears = [2015, 2016, 2017, 2018, 2019] # 5 years of data\nev_sedans = [15000, 30000, 50000, 70000, 100000] # Number of electric sedans registered\nev_suvs = [5000, 15000, 25000, 45000, 70000] # Number of electric SUVs registered\nev_trucks = [2000, 8000, 15000, 25000, 40000] # Number of electric trucks registered\n\n# Simulating standard deviations for error\nev_sedans_std = np.array([2744.07, 3575.95, 3013.82, 2724.42, 2118.27])\nev_suvs_std = np.array([3229.47, 2187.94, 4458.87, 4818.31, 1917.21])\nev_trucks_std = np.array([3958.63, 2644.47, 2840.22, 4627.98, 355.18])\n\n# Labels\nlabel_ev_sedans = \"Electric Sedans\"\nlabel_ev_suvs = \"Electric SUVs\"\nlabel_ev_trucks = \"Electric Trucks\"\n\n# Axes Limits and Labels\nxlabel_value = \"Years\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 4.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nyears = [2015, 2016, 2017, 2018, 2019]  # 5 years of data\nev_sedans = [15000, 30000, 50000, 70000, 100000]  # Number of electric sedans registered\nev_suvs = [5000, 15000, 25000, 45000, 70000]  # Number of electric SUVs registered\nev_trucks = [2000, 8000, 15000, 25000, 40000]  # Number of electric trucks registered\n\n# Simulating standard deviations for error\nev_sedans_std = np.array([2744.07, 3575.95, 3013.82, 2724.42, 2118.27])\nev_suvs_std = np.array([3229.47, 2187.94, 4458.87, 4818.31, 1917.21])\nev_trucks_std = np.array([3958.63, 2644.47, 2840.22, 4627.98, 355.18])\n\n# Labels\nlabel_ev_sedans = \"Electric Sedans\"\nlabel_ev_suvs = \"Electric SUVs\"\nlabel_ev_trucks = \"Electric Trucks\"\n\n# Axes Limits and Labels\nxlabel_value = \"Years\"\nyticks_values = np.arange(0, 110000, 20000)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the lines with error bands\nplt.figure(figsize=(4, 3))\nplt.plot(years, ev_sedans, \"o-\", color=\"orange\", label=label_ev_sedans)\nplt.fill_between(\n    years,\n    ev_sedans - ev_sedans_std,\n    ev_sedans + ev_sedans_std,\n    color=\"orange\",\n    alpha=0.2,\n)\n\nplt.plot(years, ev_suvs, \"o-\", color=\"blue\", label=label_ev_suvs)\nplt.fill_between(\n    years,\n    ev_suvs - ev_suvs_std,\n    ev_suvs + ev_suvs_std,\n    color=\"blue\",\n    alpha=0.2,\n)\n\nplt.plot(years, ev_trucks, \"o-\", color=\"green\", label=label_ev_trucks)\nplt.fill_between(\n    years,\n    ev_trucks - ev_trucks_std,\n    ev_trucks + ev_trucks_std,\n    color=\"green\",\n    alpha=0.2,\n)\n\n# x labels\nplt.xlabel(xlabel_value)\nplt.xticks(years)\nplt.yticks(yticks_values)\n\n# Moving axes spines\nax = plt.gca()  # get current axes\nax.spines[\"left\"].set_position((\"outward\", 10))  # move left y-axis outwards\nax.spines[\"bottom\"].set_position((\"outward\", 10))  # move bottom x-axis outwards\nax.spines[\"right\"].set_color(\"none\")  # hide the right spine\nax.spines[\"top\"].set_color(\"none\")  # hide the top spine\nax.grid(\n    True, which=\"both\", axis=\"both\", color=\"lightgray\", linestyle=\"--\", linewidth=0.5\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot\nplt.tight_layout()\nplt.savefig('line_2.pdf', bbox_inches='tight')"}
{"idx": "line_3", "instruction": "There is a reference image for you and I also have a set of data about average fuel efficiency for different types of vehicles over two periods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for 2010-2015\nperiod1_x = np.array(\n[\"All\", \"Sedan\", \"SUV\", \"Truck\", \"Minivan\", \"Coupe\", \"Convertible\", \"Hatchback\"]\n)\nperiod1_y = np.array([25, 27, 22, 18, 20, 28, 26, 30])\nperiod1_err = np.array([2, 3, 3, 2, 2, 3, 2, 3])\n\n# Data for 2016-2021\nperiod2_x = np.array(\n[\"All\", \"Sedan\", \"SUV\", \"Truck\", \"Minivan\", \"Coupe\", \"Convertible\", \"Hatchback\"]\n)\nperiod2_y = np.array([28, 30, 25, 20, 23, 31, 29, 33])\nperiod2_err = np.array([2, 3, 3, 2, 2, 3, 2, 3])\n# Labels\nlabel_period1 = \"2010-2015\"\nlabel_period2 = \"2016-2021\"\n\n# Axes Limits and Labels\nylabel_value = \"Average Fuel Efficiency (MPG)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for 2010-2015\nperiod1_x = np.array(\n    [\"All\", \"Sedan\", \"SUV\", \"Truck\", \"Minivan\", \"Coupe\", \"Convertible\", \"Hatchback\"]\n)\nperiod1_y = np.array([25, 27, 22, 18, 20, 28, 26, 30])\nperiod1_err = np.array([2, 3, 3, 2, 2, 3, 2, 3])\n\n# Data for 2016-2021\nperiod2_x = np.array(\n    [\"All\", \"Sedan\", \"SUV\", \"Truck\", \"Minivan\", \"Coupe\", \"Convertible\", \"Hatchback\"]\n)\nperiod2_y = np.array([28, 30, 25, 20, 23, 31, 29, 33])\nperiod2_err = np.array([2, 3, 3, 2, 2, 3, 2, 3])\n# Labels\nlabel_period1 = \"2010-2015\"\nlabel_period2 = \"2016-2021\"\n\n# Axes Limits and Labels\nylabel_value = \"Average Fuel Efficiency (MPG)\"\nyticks_values = np.arange(15, 36, 5)\nylim_values = [15, 35]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(\n    figsize=(10, 5)\n)  # Adjusting figure size to match the original image's dimensions\nplt.errorbar(\n    period1_x,\n    period1_y,\n    yerr=period1_err,\n    fmt=\"o-\",\n    label=label_period1,\n    color=\"#3d89be\",\n    capsize=5,\n)\nplt.errorbar(\n    period2_x,\n    period2_y,\n    yerr=period2_err,\n    fmt=\"--\",\n    label=label_period2,\n    color=\"#ff7f0e\",\n    marker=\"s\",\n    capsize=5,\n)\n\n# Set x,y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values, fontsize=16)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\n\n# set x-axis label to be rotated\nplt.xticks(rotation=45, fontsize=12)\n\n# Adding labels and title\nplt.ylabel(ylabel_value, fontsize=16)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.72, 1), ncol=2, fontsize=16)\n\n# Adjusting figure size to match the original image's dimensions of 360 (height) by 720 (width)\nplt.gcf().set_size_inches(10, 5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('line_3.pdf', bbox_inches='tight')"}
{"idx": "line_4", "instruction": "There is a reference image for you and I also have a set of data about car fuel efficiency. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\ncar_types = [\"Sedan\", \"SUV\", \"Truck\", \"Minivan\"] # Update for categorical x-axis\ncar_types_int = [0, 1, 2, 3]\ncity_mpg = [30, 20, 15, 22]\nhighway_mpg = [40, 25, 20, 28]\ncity_mpg_hybrid = [45, 35, 25, 32]\nhighway_mpg_hybrid = [50, 40, 30, 38]\n\n# Axes Limits and Labels\nylabel_value = \"Miles per Gallon (MPG)\"\n\n# Labels\nlabel_1 = \"City MPG\"\nlabel_2 = \"Highway MPG\"\n\n# Titles\ntitle_1 = \"Regular Engines\"\ntitle_2 = \"Hybrid Engines\"\n\n# Texts\ntext_1 = \"50% increase\"\ntext_2 = \"45% increase\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ncar_types = [\"Sedan\", \"SUV\", \"Truck\", \"Minivan\"]  # Update for categorical x-axis\ncar_types_int = [0, 1, 2, 3]\ncity_mpg = [30, 20, 15, 22]\nhighway_mpg = [40, 25, 20, 28]\ncity_mpg_hybrid = [45, 35, 25, 32]\nhighway_mpg_hybrid = [50, 40, 30, 38]\n\n# Axes Limits and Labels\nxticks_values = range(len(car_types))\nylabel_value = \"Miles per Gallon (MPG)\"\n\n# Labels\nlabel_1 = \"City MPG\"\nlabel_2 = \"Highway MPG\"\n\n# Titles\ntitle_1 = \"Regular Engines\"\ntitle_2 = \"Hybrid Engines\"\n\n# Texts\ntext_1 = \"50% increase\"\ntext_2 = \"45% increase\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4))\n\n# Plotting for Regular Engines\nax1.set_xticks(xticks_values)  # Setting categorical x-axis\nax1.plot(\n    car_types,\n    city_mpg,\n    marker=\"o\",\n    color=\"#f5a45f\",\n    label=label_1,\n    linewidth=4,\n    markersize=8,\n)\nax1.plot(\n    car_types,\n    highway_mpg,\n    marker=\"o\",\n    linestyle=\"--\",\n    color=\"#f5a45f\",\n    label=label_2,\n    linewidth=4,\n    markersize=8,\n)\nax1.set_title(title_1, fontsize=16)\nax1.set_ylabel(ylabel_value, fontsize=16)  # Adjusted font size\nax1.legend(loc=\"lower left\", fontsize=14)\nax1.set_xticklabels(car_types, fontsize=12)  # Adjust font size for x-axis labels\nax1.grid(True, which=\"both\", ls=\"--\", color=\"grey\", linewidth=1, axis=\"y\", alpha=0.5)\nax1.annotate(\n    \"\",\n    xy=(0, city_mpg[0]),\n    xytext=(0, highway_mpg[0]),\n    arrowprops=dict(color=\"red\", shrink=0.05, width=1.5, headwidth=8),\n    annotation_clip=False,\n)\nax1.text(\n    0.1,\n    (city_mpg[0] + highway_mpg[0]) / 2,\n    text_1,\n    ha=\"left\",\n    va=\"center\",\n    fontsize=14,\n    color=\"black\",\n)\n\n# Plotting for Hybrid Engines\nax2.plot(\n    car_types,\n    city_mpg_hybrid,\n    marker=\"o\",\n    color=\"#3ebcec\",\n    label=label_1,\n    linewidth=4,\n    markersize=8,\n)\nax2.plot(\n    car_types,\n    highway_mpg_hybrid,\n    marker=\"o\",\n    linestyle=\"--\",\n    color=\"#3ebcec\",\n    label=label_2,\n    linewidth=4,\n    markersize=8,\n)\nax2.set_title(title_2, fontsize=16)  # Adjusted font size\nax2.legend(loc=\"lower left\", fontsize=14)\nax2.set_xticklabels(\n    car_types, fontsize=12\n)  # Ensure x-axis labels are set for both axes\nax2.grid(True, which=\"both\", ls=\"--\", color=\"grey\", linewidth=1, axis=\"y\", alpha=0.5)\nax2.annotate(\n    \"\",\n    xy=(0, city_mpg_hybrid[0]),\n    xytext=(0, highway_mpg_hybrid[0]),\n    arrowprops=dict(color=\"red\", shrink=0.05, width=1.5, headwidth=8),\n    annotation_clip=False,\n)\nax2.text(\n    0.1,\n    (city_mpg_hybrid[0] + highway_mpg_hybrid[0]) / 2,\n    text_2,\n    ha=\"left\",\n    va=\"center\",\n    fontsize=14,\n    color=\"black\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and add common annotation for car types\nplt.tight_layout()\nplt.savefig('line_4.pdf', bbox_inches='tight')"}
{"idx": "line_6", "instruction": "There is a reference image for you and I also have a set of data about vehicle production over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting\nyears = np.array([2010, 2012, 2014, 2016, 2018, 2020])\nelectric_vehicles = np.array([120, 100, 80, 60, 40, 20])\ngasoline_vehicles = np.array([200, 190, 180, 170, 160, 150])\n\n# Axes Limits and Labels\nxlabel_value = \"Production Year\"\n\n# Labels\nlabel_EV = \"Electric Vehicles\"\nlabel_Gasoline = \"Gasoline Vehicles\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nyears = np.array([2010, 2012, 2014, 2016, 2018, 2020])\nelectric_vehicles = np.array([120, 100, 80, 60, 40, 20])\ngasoline_vehicles = np.array([200, 190, 180, 170, 160, 150])\n\n# Axes Limits and Labels\nxlabel_value = \"Production Year\"\n\nylim_values = [10, 210]\nyticks_values = [50, 100, 150, 200]\nyticks_labels = [\"50\", \"100\", \"150\", \"200\"]\n\n# Labels\nlabel_EV = \"Electric Vehicles\"\nlabel_Gasoline = \"Gasoline Vehicles\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nplt.figure(figsize=(9, 6))\n\n# Plot the data\nplt.plot(\n    years,\n    electric_vehicles,\n    \"o-\",\n    color=\"#1f77b4\",\n    label=label_EV,\n    markerfacecolor=\"#1f77b4\",\n    markersize=6,\n)  # Solid dots for Electric Vehicles\nplt.plot(years, gasoline_vehicles, \"x-\", color=\"#ff7f0e\", label=label_Gasoline, markersize=6)\n\n# Add labels with increased font size\nplt.xlabel(xlabel_value, fontsize=14)\n\n# Set y-axis to only display specific ticks\nplt.yticks(\n    yticks_values,\n    yticks_labels,\n)\nplt.ylim(ylim_values)  # Set y-axis limits\n\n# Explicitly set the tick params for the x-axis\nplt.tick_params(axis=\"x\", labelsize=14)  # Ensure x-axis tick labels are of font size 14\n\n# Add legend with transparent background\nplt.legend(frameon=True, fontsize=16)\n\n# Add a vertical line at x=2010 and enable horizontal grid lines for structure\nplt.axvline(x=2010, color=\"grey\", linestyle=\"--\", linewidth=1)\nplt.grid(\n    True, which=\"both\", ls=\"--\", color=\"grey\", linewidth=1, axis=\"y\"\n)  # Horizontal grid lines\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and display the plot\nplt.tight_layout()\nplt.savefig('line_6.pdf', bbox_inches='tight')"}
{"idx": "line_7", "instruction": "There is a reference image for you and I also have a set of data about transportation efficiency metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for transportation domain\nx1 = np.array([1, 2, 3, 4, 5])\ncity_mpg = np.array([25, 27, 30, 28, 26])\ncity_mpg_err = np.array([2, 1.5, 2.5, 2, 1.5])\n\nx2 = np.array([1, 2, 3, 4])\nhighway_mpg = np.array([30, 32, 34, 33])\nhighway_mpg_err = np.array([2.5, 2, 2, 1.5])\n\nx3 = np.array([1, 2, 3, 4, 5, 6])\ncombined_mpg = np.array([27, 28, 29, 27, 26, 25])\ncombined_mpg_err = np.array([2, 1.5, 2.5, 2, 3, 2.5])\n\nx4 = np.array([1, 2, 3, 4, 5])\nefficiency_under_load = np.array([20, 22, 23, 24, 25])\nefficiency_under_load_err = np.array([1.5, 2, 2.5, 2, 1.5])\n\n# Labels\nlabel_city = \"City MPG\"\nlabel_highway = \"Highway MPG\"\nlabel_combined = \"Combined MPG\"\nlabel_load = \"Efficiency Under Load\"\n\n# Titles\ntitle_city = \"(a) City Driving\"\ntitle_highway = \"(b) Highway Driving\"\ntitle_combined = \"(c) Combined Efficiency\"\ntitle_load = \"(d) Efficiency Under Load\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for transportation domain\nx1 = np.array([1, 2, 3, 4, 5])\ncity_mpg = np.array([25, 27, 30, 28, 26])\ncity_mpg_err = np.array([2, 1.5, 2.5, 2, 1.5])\n\nx2 = np.array([1, 2, 3, 4])\nhighway_mpg = np.array([30, 32, 34, 33])\nhighway_mpg_err = np.array([2.5, 2, 2, 1.5])\n\nx3 = np.array([1, 2, 3, 4, 5, 6])\ncombined_mpg = np.array([27, 28, 29, 27, 26, 25])\ncombined_mpg_err = np.array([2, 1.5, 2.5, 2, 3, 2.5])\n\nx4 = np.array([1, 2, 3, 4, 5])\nefficiency_under_load = np.array([20, 22, 23, 24, 25])\nefficiency_under_load_err = np.array([1.5, 2, 2.5, 2, 1.5])\n\n# Axes Limits and Labels\nxlim_values_1 = [0.5, 5.5]\nxticks_values_1 = np.arange(1, 6)\nxlim_values_2 = [0.5, 4.5]\nxticks_values_2 = np.arange(1, 5)\nxlim_values_3 = [0.5, 6.5]\nxticks_values_3 = np.arange(1, 7)\nxlim_values_4 = [0.5, 5.5]\nxticks_values_4 = np.arange(1, 6)\n\nylim_values_1 = [20, 35]\nyticks_values_1 = np.arange(20, 36, 5)\nylim_values_2 = [20, 35]\nyticks_values_2 = np.arange(20, 36, 5)\nylim_values_3 = [20, 35]\nyticks_values_3 = np.arange(20, 36, 5)\nylim_values_4 = [15, 30]\nyticks_values_4 = np.arange(15, 31, 5)\n\n# Labels\nlabel_city = \"City MPG\"\nlabel_highway = \"Highway MPG\"\nlabel_combined = \"Combined MPG\"\nlabel_load = \"Efficiency Under Load\"\n\n# Titles\ntitle_city = \"(a) City Driving\"\ntitle_highway = \"(b) Highway Driving\"\ntitle_combined = \"(c) Combined Efficiency\"\ntitle_load = \"(d) Efficiency Under Load\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, axs = plt.subplots(1, 4, figsize=(12, 4))\n\n# Global settings for all axes\nfor ax in axs:\n    ax.tick_params(axis=\"both\", which=\"major\", labelsize=14)\n\n# Plot with error bands\naxs[0].errorbar(\n    x1, city_mpg, yerr=city_mpg_err, fmt=\"-o\", color=\"blue\", ecolor=\"#bdbdd7\", capsize=5, markersize=4\n)\naxs[0].fill_between(x1, city_mpg - city_mpg_err, city_mpg + city_mpg_err, color=\"blue\", alpha=0.2)\naxs[0].set_title(title_city, y=-0.18, fontsize=16)\naxs[0].set_xlim(xlim_values_1)\naxs[0].set_ylim(ylim_values_1)\naxs[0].set_xticks(xticks_values_1)\naxs[0].set_yticks(yticks_values_1)\naxs[0].grid(True, alpha=0.5)\n\naxs[1].errorbar(\n    x2, highway_mpg, yerr=highway_mpg_err, fmt=\"-o\", color=\"blue\", ecolor=\"#bdbdd7\", capsize=5, markersize=4\n)\naxs[1].fill_between(x2, highway_mpg - highway_mpg_err, highway_mpg + highway_mpg_err, color=\"blue\", alpha=0.2)\naxs[1].set_title(title_highway, y=-0.18, fontsize=16)\naxs[1].set_xlim(xlim_values_2)\naxs[1].set_ylim(ylim_values_2)\naxs[1].set_xticks(xticks_values_2)\naxs[1].set_yticks(yticks_values_2)\naxs[1].grid(True, alpha=0.5)\n\naxs[2].errorbar(\n    x3, combined_mpg, yerr=combined_mpg_err, fmt=\"-o\", color=\"blue\", ecolor=\"#bdbdd7\", capsize=5, markersize=4\n)\naxs[2].fill_between(x3, combined_mpg - combined_mpg_err, combined_mpg + combined_mpg_err, color=\"blue\", alpha=0.2)\naxs[2].set_title(title_combined, y=-0.18, fontsize=16)\naxs[2].set_xlim(xlim_values_3)\naxs[2].set_ylim(ylim_values_3)\naxs[2].set_xticks(xticks_values_3)\naxs[2].set_yticks(yticks_values_3)\naxs[2].grid(True, alpha=0.5)\n\naxs[3].errorbar(\n    x4, efficiency_under_load, yerr=efficiency_under_load_err, fmt=\"-o\", color=\"blue\", ecolor=\"#bdbdd7\", capsize=5, markersize=4\n)\naxs[3].fill_between(x4, efficiency_under_load - efficiency_under_load_err, efficiency_under_load + efficiency_under_load_err, color=\"blue\", alpha=0.2)\naxs[3].set_title(title_load, y=-0.18, fontsize=16)\naxs[3].set_xlim(xlim_values_4)\naxs[3].set_ylim(ylim_values_4)\naxs[3].set_xticks(xticks_values_4)\naxs[3].set_yticks(yticks_values_4)\naxs[3].grid(True, alpha=0.5)\n\n# Adjust layout\nplt.subplots_adjust(wspace=0.3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('line_7.pdf', bbox_inches='tight')"}
{"idx": "line_8", "instruction": "There is a reference image for you and I also have a set of data about fuel consumption based on different driving styles. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ndriving_styles = [\"Eco\", \"Normal\", \"Sport\", \"Aggressive\"]\nfuel_consumption_normal = [4.5, 6.0, 7.5, 10.0]\nfuel_consumption_aggressive = [6.0, 8.0, 10.5, 13.5]\nerror = [0.3, 0.4, 0.5, 0.6]\n\n# Axes Limits and Labels\nxlabel_value = \"Driving Style\"\n\nylabel_value = \"Fuel Consumption (L/100 km)\"\n\n# Labels\nlabel_Normal = \"Normal\"\nlabel_Aggressive = \"Aggressive\"\n\n# Titles\ntitle = \"Driving Conditions\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ndriving_styles = [\"Eco\", \"Normal\", \"Sport\", \"Aggressive\"]\nfuel_consumption_normal = [4.5, 6.0, 7.5, 10.0]\nfuel_consumption_aggressive = [6.0, 8.0, 10.5, 13.5]\nerror = [0.3, 0.4, 0.5, 0.6]\n\n# Axes Limits and Labels\nxlabel_value = \"Driving Style\"\n\nylabel_value = \"Fuel Consumption (L/100 km)\"\nylim_values = [0, 15]\n\n# Labels\nlabel_Normal = \"Normal\"\nlabel_Aggressive = \"Aggressive\"\n\n# Titles\ntitle = \"Driving Conditions\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.errorbar(\n    driving_styles,\n    fuel_consumption_normal,\n    yerr=error,\n    fmt=\"o-\",\n    color=\"black\",\n    ecolor=\"black\",\n    elinewidth=2,\n    capsize=5,\n    capthick=2,\n    label=label_Normal,\n)\nax.errorbar(\n    driving_styles,\n    fuel_consumption_aggressive,\n    yerr=error,\n    fmt=\"s-\",\n    color=\"red\",\n    ecolor=\"red\",\n    elinewidth=2,\n    capsize=5,\n    capthick=2,\n    label=label_Aggressive,\n)\n\n# Customization\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\n\nax.tick_params(\n    axis=\"both\", which=\"major\", length=5, direction=\"in\", top=True, right=True\n)\nax.legend(title=title, loc=\"lower left\", frameon=False)\nax.set_ylim(ylim_values)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('line_8.pdf', bbox_inches='tight')"}
{"idx": "line_9", "instruction": "There is a reference image for you and I also have a set of data about the number of electric and gasoline vehicles over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting\nyears = np.array([2010, 2012, 2014, 2016, 2018])\nelectric_vehicles = np.array([100, 80, 60, 50, 30])\ngasoline_vehicles = np.array([200, 190, 180, 170, 160])\n\n# Axes Limits and Labels\nxlabel_value = \"Year\"\n\naxvline_x = 2016\n\n# Labels\nlabel_Electric = \"Electric Vehicles\"\nlabel_Gasoline = \"Gasoline Vehicles\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom matplotlib.ticker import FuncFormatter, FixedLocator\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nyears = np.array([2010, 2012, 2014, 2016, 2018])\nelectric_vehicles = np.array([100, 80, 60, 50, 30])\ngasoline_vehicles = np.array([200, 190, 180, 170, 160])\n\n# Axes Limits and Labels\nxlabel_value = \"Year\"\n\nyticks_values = [50, 100, 150, 200, 250]\nyticks_labels = [\n        \"$50$\",\n        \"$100$\",\n        \"$150$\",\n        \"$200$\",\n        \"$250$\",\n    ]\nylim_values = [20, 220]\n\naxvline_x = 2016\n        \n# Labels\nlabel_Electric = \"Electric Vehicles\"\nlabel_Gasoline = \"Gasoline Vehicles\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(9, 6))\nplt.plot(\n    years, electric_vehicles, \"o-\", label=label_Electric, color=\"#1f77b4\", linewidth=1.4, markersize=4\n)\nplt.plot(\n    years,\n    gasoline_vehicles,\n    \"x-\",\n    label=label_Gasoline,\n    color=\"#ff7f0e\",\n    markersize=6,\n    markeredgewidth=1,\n)\n\n# Setting the x-axis and y-axis to log scale\nplt.xscale(\"linear\")\nplt.yscale(\"linear\")\n\n# Set y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(\n    yticks_values,\n    yticks_labels,\n)\nplt.ylim(ylim_values)  # Extend y-axis to leave some space above 10^-1\n\n# Disable the automatic grid for x-axis\nplt.grid(True, which=\"both\", ls=\"--\", axis=\"y\")  # Only enable y-axis grid\n\n# Manually add a grid line for x=2016\nplt.axvline(x=axvline_x, color=\"grey\", linestyle=\"--\", linewidth=0.5)\n\n# Formatting the x-axis and y-axis tick labels\nplt.gca().xaxis.set_major_formatter(FuncFormatter(lambda value, _: \"{:.0f}\".format(value)))\nplt.gca().yaxis.set_major_formatter(FuncFormatter(lambda y, _: \"{:.0f}\".format(y)))\n\n# Adding labels and title\nplt.xlabel(xlabel_value, fontsize=12)\n\n# Adding a legend at the center right\nplt.legend(loc=\"center right\", fontsize=18)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('line_9.pdf', bbox_inches='tight')"}
{"idx": "line_11", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency across different vehicle types at varying engine loads. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Sample data points\nengine_load = [0, 20, 40, 60, 80]\nsedan_mpg = [30, 28, 26, 24, 22]\nsuv_mpg = [25, 23, 21, 19, 17]\ntruck_mpg = [20, 18, 16, 14, None]\nminivan_mpg = [22, 20, 18, 16, None]\nbaseline_mpg = [30, 30]\nbaseline_load = [-10, 90]\n\n# Axes Limits and Labels\nxlabel_value = \"Engine Load (%)\"\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_1 = \"Sedan\"\nlabel_2 = \"SUV\"\nlabel_3 = \"Truck\"\nlabel_4 = \"Minivan\"\nlabel_5 = \"Baseline\"\n\n# Titles\ntitle_1 = \"Effect of Engine Load on Fuel Efficiency\"\ntitle_2 = \"Vehicle Types\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data points\nengine_load = [0, 20, 40, 60, 80]\nsedan_mpg = [30, 28, 26, 24, 22]\nsuv_mpg = [25, 23, 21, 19, 17]\ntruck_mpg = [20, 18, 16, 14, None]\nminivan_mpg = [22, 20, 18, 16, None]\nbaseline_mpg = [30, 30]\nbaseline_load = [-10, 90]\n\n# Axes Limits and Labels\nxlabel_value = \"Engine Load (%)\"\nxlim_values = [-10, 90]\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [10, 32]\nyticks_values = [15, 20, 25, 30]\n\n# Labels\nlabel_1 = \"Sedan\"\nlabel_2 = \"SUV\"\nlabel_3 = \"Truck\"\nlabel_4 = \"Minivan\"\nlabel_5 = \"Baseline\"\n\n# Titles\ntitle_1 = \"Effect of Engine Load on Fuel Efficiency\"\ntitle_2 = \"Vehicle Types\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nplt.figure(figsize=(6, 6))  # Adjust figure size to match original image dimensions\nplt.plot(engine_load, sedan_mpg, label=label_1, color=\"red\", marker=\"o\")\nplt.plot(engine_load, suv_mpg, label=label_2, color=\"green\", marker=\"o\")\nplt.plot(engine_load, truck_mpg, label=label_3, color=\"blue\", marker=\"o\")\nplt.plot(engine_load, minivan_mpg, label=label_4, color=\"orange\", marker=\"o\")\nplt.plot(baseline_load, baseline_mpg, label=label_5, color=\"black\", linestyle=\"--\")\n\n# Add title and labels\nplt.title(title_1)\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\nplt.xticks(engine_load)\nplt.xlim(xlim_values)\nplt.yticks(yticks_values)\nplt.ylim(ylim_values)\n# Add legend with additional entry\nplt.legend(title=title_2,loc=\"lower right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('line_11.pdf', bbox_inches='tight')"}
{"idx": "line_14", "instruction": "There is a reference image for you and I also have a set of data about electric vehicle and gasoline vehicle usage over a period of weeks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\nweeks = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]\nev_usage = np.array([0.05, 0.2, 0.3, 0.4, 0.7, 0.9, 0.8, 0.6, 0.5, 0.4])\ngasoline_usage = np.array([0.9, 0.8, 0.75, 0.7, 0.6, 0.5, 0.4, 0.35, 0.3, 0.25])\n\n# Axes Limits and Labels\nxlabel_value = \"Week\"\n\nylabel_value = \"Usage (Normalized)\"\n\naxvspan1_l, axvspan1_r = 10, 19\naxvspan2_l, axvspan2_r = 19, 26\n\n# Labels\nlabel_1 = \"Electric Vehicles\"\nlabel_2 = \"Gasoline Vehicles\"\n\n# Annotations\nannotation_1 = \"New EV model\"\nannotation_2 = \"Gasoline recall\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\nweeks = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]\nev_usage = np.array([0.05, 0.2, 0.3, 0.4, 0.7, 0.9, 0.8, 0.6, 0.5, 0.4])\ngasoline_usage = np.array([0.9, 0.8, 0.75, 0.7, 0.6, 0.5, 0.4, 0.35, 0.3, 0.25])\n\n# Axes Limits and Labels\nxlabel_value = \"Week\"\nxlim_values = [1, 28]\n\nylabel_value = \"Usage (Normalized)\"\nylim_values = [0, 1.0]\nyticks_values = [0, 0.25, 0.5, 0.75, 1.0]\n\naxvspan1_l, axvspan1_r = 10, 19\naxvspan2_l, axvspan2_r = 19, 26\n\n# Labels\nlabel_1 = \"Electric Vehicles\"\nlabel_2 = \"Gasoline Vehicles\"\n\n# Annotations\nannotation_1 = \"New EV model\"\nannotation_2 = \"Gasoline recall\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the data\nax.plot(weeks, ev_usage, \"r-x\", label=label_1)\nax.plot(weeks, gasoline_usage, \"o-.\", label=label_2)\n\n# Highlight specific regions\nax.axvspan(axvspan1_l, axvspan1_r, color=\"peachpuff\", alpha=0.5)\nax.axvspan(axvspan2_l, axvspan2_r, color=\"paleturquoise\", alpha=0.5)\n\n# Annotations\nax.annotate(\n    annotation_1,\n    xy=(12, 0.7),\n    xytext=(14, 0.8),\n    arrowprops=dict(facecolor=\"yellow\", shrink=0.05),\n)\nax.annotate(\n    annotation_2,\n    xy=(21, 0.4),\n    xytext=(23, 0.5),\n    arrowprops=dict(facecolor=\"cyan\", shrink=0.05),\n)\n\n# Set labels and title\nax.set_xlabel(xlabel_value)\nax.set_xlim(xlim_values)\nax.set_ylim(ylim_values)\nax.set_yticks(yticks_values)\nax.set_xticks(weeks)\nax.set_ylabel(ylabel_value)\n\n# Add legend\nax.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('line_14.pdf', bbox_inches='tight')"}
{"idx": "line_15", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency trends for different types of vehicles over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to mimic the trends in the provided image\nyears = np.arange(1, 21)\nsedan = np.array([26.76, 25.93, 27.03, 28.82, 28.97, 26.65, 29.11, 28.53, 29.11, 30.15, 30.41, 32.24, 32.08, 31.96, 32.81, 33.23, 34.92, 33.74, 34.79, 34.15])\nsuv = np.array([21.76, 20.93, 22.03, 23.82, 23.97, 21.65, 24.11, 23.53, 24.11, 25.15, 25.41, 27.24, 27.08, 26.96, 27.81, 28.23, 29.92, 28.74, 29.79, 29.15])\ntruck = np.array([16.76, 15.93, 17.03, 18.82, 18.97, 16.65, 19.11, 18.53, 19.11, 20.15, 20.41, 22.24, 22.08, 21.96, 22.81, 23.23, 24.92, 23.74, 24.79, 24.15])\nminivan = np.array([19.76, 18.93, 20.03, 21.82, 21.97, 19.65, 22.11, 21.53, 22.11, 23.15, 23.41, 25.24, 25.08, 24.96, 25.81, 26.23, 27.92, 26.74, 27.79, 27.15])\n\n# Axes Limits and Labels\nxlabel_value = \"Year\"\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_Sedan = \"Sedan\"\nlabel_SUV = \"SUV\"\nlabel_Truck = \"Truck\"\nlabel_Minivan = \"Minivan\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.ticker as ticker\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic the trends in the provided image\nyears = np.arange(1, 21)\nsedan = np.array([26.76, 25.93, 27.03, 28.82, 28.97, 26.65, 29.11, 28.53, 29.11, 30.15, 30.41, 32.24, 32.08, 31.96, 32.81, 33.23, 34.92, 33.74, 34.79, 34.15])\nsuv = np.array([21.76, 20.93, 22.03, 23.82, 23.97, 21.65, 24.11, 23.53, 24.11, 25.15, 25.41, 27.24, 27.08, 26.96, 27.81, 28.23, 29.92, 28.74, 29.79, 29.15])\ntruck = np.array([16.76, 15.93, 17.03, 18.82, 18.97, 16.65, 19.11, 18.53, 19.11, 20.15, 20.41, 22.24, 22.08, 21.96, 22.81, 23.23, 24.92, 23.74, 24.79, 24.15])\nminivan = np.array([19.76, 18.93, 20.03, 21.82, 21.97, 19.65, 22.11, 21.53, 22.11, 23.15, 23.41, 25.24, 25.08, 24.96, 25.81, 26.23, 27.92, 26.74, 27.79, 27.15])\n\n# Axes Limits and Labels\nxlabel_value = \"Year\"\nxlim_values = [0, 21]\nxticks_values = np.arange(1, 22, 1)\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [10, 40]\nyticks_values = np.arange(10, 41, 5)\n\n# Labels\nlabel_Sedan = \"Sedan\"\nlabel_SUV = \"SUV\"\nlabel_Truck = \"Truck\"\nlabel_Minivan = \"Minivan\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(8, 6))\nplt.plot(\n    years,\n    sedan,\n    marker=\"s\",\n    markersize=7,\n    color=\"#393b79\",\n    mfc=\"w\",\n    mew=2,\n    label=label_Sedan,\n    linewidth=2,\n)\nplt.plot(\n    years,\n    suv,\n    marker=\"v\",\n    markersize=7,\n    color=\"#e7969c\",\n    mfc=\"w\",\n    mew=2,\n    label=label_SUV,\n    linewidth=2,\n)\nplt.plot(\n    years,\n    truck,\n    marker=\"D\",\n    markersize=7,\n    color=\"#a55194\",\n    mfc=\"w\",\n    mew=2,\n    label=label_Truck,\n    linewidth=2,\n)\nplt.plot(\n    years,\n    minivan,\n    marker=\"o\",\n    markersize=4,\n    color=\"#de9ed6\",\n    mfc=\"w\",\n    mew=2,\n    label=label_Minivan,\n    linewidth=2,\n)  # Adjusted color for Minivan\n\n# Set y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\n\n# Setting x-axis ticks\nplt.xticks(xticks_values)  # Ticks from 2000 to 2020, interval of 1\nplt.xlim(xlim_values)  # Slightly beyond 2000 and 2019 for a margin\n\n# Adding labels and title\nplt.xlabel(xlabel_value, fontsize=16)\nplt.ylabel(ylabel_value, fontsize=16)\n\n# Adding legend with a different style and position\nplt.legend(frameon=True, fontsize=11, loc=\"upper right\")\n\n# Adding gridlines\nplt.grid(True, linestyle=\"-\", linewidth=0.5, axis=\"y\", alpha=1)\n\n# Adjusting tick label size\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('line_15.pdf', bbox_inches='tight')"}
{"idx": "line_17", "instruction": "There is a reference image for you and I also have a set of data about vehicle weights and their corresponding fuel efficiency. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting\nvehicle_weights = np.array([1000, 2000, 3000, 4000, 5000, 6000])\nfuel_efficiency = np.array([35, 30, 25, 20, 15, 10])\n\n# Axes Limits and Labels\nxlabel_value = \"Vehicle Weight (lbs)\"\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nvehicle_weights = np.array([1000, 2000, 3000, 4000, 5000, 6000])\nfuel_efficiency = np.array([35, 30, 25, 20, 15, 10])\n\n# Axes Limits and Labels\nxlabel_value = \"Vehicle Weight (lbs)\"\nxlim_values = [500, 6500]\nxticks_values = np.arange(1000, 7000, 1000)\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [5, 40]\nyticks_values = np.arange(5, 41, 5)\nyticklabels = [f\"{i}\" for i in yticks_values]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nfig, ax = plt.subplots(figsize=(6, 4))  # Use subplots to get access to the axis object\nax.plot(vehicle_weights, fuel_efficiency, marker=\"o\", linestyle=\"-\", color=\"#1f77b4\")\n\n# Set y-axis to only display specific ticks and extend y-axis to leave space at top\nax.set_yticks(yticks_values)\nax.set_yticklabels(yticklabels)\nax.set_ylim(ylim_values)  # Set limits to include a small margin\n\n# Remove minor ticks\nax.tick_params(axis=\"y\", which=\"minor\", left=False)\n\n# Setting x-axis ticks\nax.set_xticks(xticks_values)  # Set x-ticks to be every 1000\nax.set_xlim(xlim_values)  # Set limits to include a small margin\n\n# Adjusting tick label size\nplt.xticks(fontsize=10, fontweight=\"100\")\nplt.yticks(fontsize=10, fontweight=\"100\")\n\n# Remove tick lines outside the plotting area\nax.tick_params(\n    axis=\"both\", which=\"both\", length=0, color=\"#d2d2d2\"\n)  # Remove tick marks and set their color\n\n# Set labels and title\nax.set_xlabel(xlabel_value, fontsize=14)\nax.set_ylabel(ylabel_value, fontsize=14)\n\n# Show grid with lighter color and only major lines\nax.grid(True, which=\"major\", color=\"lightgrey\", linestyle=\"-\", linewidth=0.5)\n\n# Change the axis colors\nax.spines[\"bottom\"].set_color(\"#d2d2d2\")\nax.spines[\"top\"].set_color(\"#d2d2d2\")  # Optional: hide or set color\nax.spines[\"left\"].set_color(\"#d2d2d2\")\nax.spines[\"right\"].set_color(\"#d2d2d2\")  # Optional: hide or set color\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\nplt.savefig('line_17.pdf', bbox_inches='tight')"}
{"idx": "line_18", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency improvements for different types of vehicles over iterations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\niterations = np.array([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000])\nsedan = np.array([20, 22, 24, 25, 26, 27, 28, 28.5, 29])\nsedan_ft = np.array([18, 19, 21, 22, 23, 24, 25, 25.5, 26])\nsuv = np.array([15, 17, 18, 19, 20, 21, 21.5, 22, 22.5])\nsuv_ft = np.array([14, 15, 16, 17, 18, 19, 20, 20.5, 21])\n\n# Axes Limits and Labels\nxlabel_value = \"Iterations\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_1 = \"Standard\"\nlabel_2 = \"Fine-tuned\"\n\n# Titles\ntitle_1 = \"Sedan Fuel Efficiency Improvement\"\ntitle_2 = \"SUV Fuel Efficiency Improvement\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\niterations = np.array([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000])\nsedan = np.array([20, 22, 24, 25, 26, 27, 28, 28.5, 29])\nsedan_ft = np.array([18, 19, 21, 22, 23, 24, 25, 25.5, 26])\nsuv = np.array([15, 17, 18, 19, 20, 21, 21.5, 22, 22.5])\nsuv_ft = np.array([14, 15, 16, 17, 18, 19, 20, 20.5, 21])\n\n# Axes Limits and Labels\nxlabel_value = \"Iterations\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_1 = \"Standard\"\nlabel_2 = \"Fine-tuned\"\n\n# Titles\ntitle_1 = \"Sedan Fuel Efficiency Improvement\"\ntitle_2 = \"SUV Fuel Efficiency Improvement\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(9, 4))\n\n# First subplot\nplt.subplot(1, 2, 1)\nplt.plot(\n    iterations,\n    sedan,\n    marker=\"o\",\n    color=\"#0a6ae1\",\n    label=label_1,\n    markerfacecolor=\"#0a6ae1\",\n    linewidth=2,\n    markersize=5,\n)\nplt.plot(\n    iterations,\n    sedan_ft,\n    marker=\"o\",\n    color=\"#d75faa\",\n    label=label_2,\n    markerfacecolor=\"#d75faa\",\n    linewidth=2,\n    markersize=5,\n)\nplt.fill_between(iterations, sedan - 1, sedan + 1, color=\"#0a6ae1\", alpha=0.2)\nplt.fill_between(\n    iterations, sedan_ft - 0.8, sedan_ft + 0.8, color=\"#d75faa\", alpha=0.2\n)\nplt.title(title_1, fontsize=14)\nplt.xlabel(xlabel_value, fontsize=12)\nplt.ylabel(ylabel_value, fontsize=12)\n\n# Second subplot\nplt.subplot(1, 2, 2)\nplt.plot(\n    iterations,\n    suv,\n    marker=\"o\",\n    color=\"#0a6ae1\",\n    label=label_1,\n    markerfacecolor=\"#0a6ae1\",\n    linewidth=2,\n    markersize=5,\n)\nplt.plot(\n    iterations,\n    suv_ft,\n    marker=\"o\",\n    color=\"#d75faa\",\n    label=label_2,\n    markerfacecolor=\"#d75faa\",\n    linewidth=2,\n    markersize=5,\n)\nplt.fill_between(\n    iterations, suv - 1, suv + 1, color=\"#0a6ae1\", alpha=0.2\n)\nplt.fill_between(\n    iterations, suv_ft - 0.8, suv_ft + 0.8, color=\"#d75faa\", alpha=0.2\n)\nplt.title(title_2, fontsize=14)\nplt.xlabel(xlabel_value, fontsize=12)\nplt.ylabel(ylabel_value, fontsize=12)\nplt.legend(loc=\"lower right\", frameon=True, bbox_to_anchor=(1, 0.1))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('line_18.pdf', bbox_inches='tight')"}
{"idx": "line_19", "instruction": "There is a reference image for you and I also have a set of data about CO2 emissions from different fleets of vehicles with varying fractions of electric vehicles (EVs). Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting\nfraction_of_evs = np.array([0.01, 0.1, 1])\nfleet1_emissions = np.array([200, 150, 100])\nfleet2_emissions = np.array([220, 170, 120])\nfleet3_emissions = np.array([240, 190, 140])\n\n# Axes Limits and Labels\nxlabel_value = \"Fraction of EVs in Fleet (log scale)\"\n\nylabel_value = \"CO2 Emissions (g/km)\"\n\n# Labels\nlabel_Fleet1 = \"Fleet 1\"\nlabel_Fleet2 = \"Fleet 2\"\nlabel_Fleet3 = \"Fleet 3\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nfraction_of_evs = np.array([0.01, 0.1, 1])\nfleet1_emissions = np.array([200, 150, 100])\nfleet2_emissions = np.array([220, 170, 120])\nfleet3_emissions = np.array([240, 190, 140])\n\n# Axes Limits and Labels\nxlabel_value = \"Fraction of EVs in Fleet (log scale)\"\nxlim_values = [0.01, 1]\n\nylabel_value = \"CO2 Emissions (g/km)\"\nylim_values = [90, 250]\nyticks_values = np.arange(100, 251, 50)\n\n# Labels\nlabel_Fleet1 = \"Fleet 1\"\nlabel_Fleet2 = \"Fleet 2\"\nlabel_Fleet3 = \"Fleet 3\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(5, 4))  # Adjusting figure size to match original image dimensions\nplt.plot(fraction_of_evs, fleet1_emissions, \"o-\", color=\"green\", label=label_Fleet1)\nplt.plot(fraction_of_evs, fleet2_emissions, \"o-\", color=\"red\", label=label_Fleet2)\nplt.plot(fraction_of_evs, fleet3_emissions, \"o-\", color=\"blue\", label=label_Fleet3)\n\n# Set y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values, fontsize=16)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\n\n# Set x-axis fontsize\nplt.xticks(fontsize=16)\n\n# Setting the x-axis to log scale\nplt.xscale(\"log\")\n\n# Adding labels and title\nplt.xlabel(xlabel_value, fontsize=16)\nplt.ylabel(ylabel_value, fontsize=16)\n\n# Adding grid\nplt.grid(True, which=\"both\", ls=\"-\", linewidth=0.8)\n\n# Adding legend, show it horizontally and place it at the lower right corner\nplt.legend(loc=\"upper right\", fontsize=12, ncol=3, columnspacing=0.5, edgecolor=\"black\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\nplt.savefig('line_19.pdf', bbox_inches='tight')"}
{"idx": "line_20", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency of different vehicle types under varying load ratios. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define subplot titles\ntitles = [\n\"Sedan\",\n\"SUV\",\n\"Truck\",\n\"Minivan\",\n]\n\n# Sample data for plotting\nratios = np.linspace(0.1, 1.0, 5)\nsedan_standard = np.array([32.74, 33.58, 33.01, 32.72, 32.12])\nsedan_hybrid = np.array([42.74, 43.58, 43.01, 42.72, 42.12])\nsuv_standard = np.array([23.23, 22.19, 24.46, 24.82, 21.92])\nsuv_hybrid = np.array([28.96, 27.64, 27.84, 29.63, 25.36])\ntruck_standard = np.array([17.74, 18.58, 18.01, 17.72, 17.12])\ntruck_hybrid = np.array([23.23, 22.19, 24.46, 24.82, 21.92])\nminivan_standard = np.array([21.96, 20.64, 20.84, 22.63, 18.36])\nminivan_hybrid = np.array([25.44, 25.1, 29.16, 28.89, 29.35])\n\n# Average performances for GSAT\nsedan_gsat = np.mean(sedan_standard) * np.ones(len(ratios))\nsedan_hybrid_gsat = np.mean(sedan_hybrid) * np.ones(len(ratios))\nsuv_gsat = np.mean(suv_standard) * np.ones(len(ratios))\nsuv_hybrid_gsat = np.mean(suv_hybrid) * np.ones(len(ratios))\ntruck_gsat = np.mean(truck_standard) * np.ones(len(ratios))\ntruck_hybrid_gsat = np.mean(truck_hybrid) * np.ones(len(ratios))\nminivan_gsat = np.mean(minivan_standard) * np.ones(len(ratios))\nminivan_hybrid_gsat = np.mean(minivan_hybrid) * np.ones(len(ratios))\n\n# Error for sample data\nerror = np.random.uniform(0.5, 1, len(ratios))\n\n# Axes Limits and Labels\nxlabel_value = \"Load Ratio\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_standard = \"Standard\"\nlabel_hybrid = \"Hybrid\"\nlabel_gsat_standard = \"Standard (GSAT)\"\nlabel_gsat_hybrid = \"Hybrid (GSAT)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 16.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define subplot titles\ntitles = [\n    \"Sedan\",\n    \"SUV\",\n    \"Truck\",\n    \"Minivan\",\n]\n\n# Sample data for plotting\nratios = np.linspace(0.1, 1.0, 5)\nsedan_standard = np.array([32.74, 33.58, 33.01, 32.72, 32.12])\nsedan_hybrid = np.array([42.74, 43.58, 43.01, 42.72, 42.12])\nsuv_standard = np.array([23.23, 22.19, 24.46, 24.82, 21.92])\nsuv_hybrid = np.array([28.96, 27.64, 27.84, 29.63, 25.36])\ntruck_standard = np.array([17.74, 18.58, 18.01, 17.72, 17.12])\ntruck_hybrid = np.array([23.23, 22.19, 24.46, 24.82, 21.92])\nminivan_standard = np.array([21.96, 20.64, 20.84, 22.63, 18.36])\nminivan_hybrid = np.array([25.44, 25.1, 29.16, 28.89, 29.35])\n\n# Average performances for GSAT\nsedan_gsat = np.mean(sedan_standard) * np.ones(len(ratios))\nsedan_hybrid_gsat = np.mean(sedan_hybrid) * np.ones(len(ratios))\nsuv_gsat = np.mean(suv_standard) * np.ones(len(ratios))\nsuv_hybrid_gsat = np.mean(suv_hybrid) * np.ones(len(ratios))\ntruck_gsat = np.mean(truck_standard) * np.ones(len(ratios))\ntruck_hybrid_gsat = np.mean(truck_hybrid) * np.ones(len(ratios))\nminivan_gsat = np.mean(minivan_standard) * np.ones(len(ratios))\nminivan_hybrid_gsat = np.mean(minivan_hybrid) * np.ones(len(ratios))\n\n# Error for sample data\nerror = np.random.uniform(0.5, 1, len(ratios))\n\n# Axes Limits and Labels\nxlabel_value = \"Load Ratio\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_standard = \"Standard\"\nlabel_hybrid = \"Hybrid\"\nlabel_gsat_standard = \"Standard (GSAT)\"\nlabel_gsat_hybrid = \"Hybrid (GSAT)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(16, 8))\n\n# Plot data for each vehicle type\nfor i, (title, standard, hybrid, standard_gsat, hybrid_gsat) in enumerate(\n    zip(titles, \n        [sedan_standard, suv_standard, truck_standard, minivan_standard], \n        [sedan_hybrid, suv_hybrid, truck_hybrid, minivan_hybrid], \n        [sedan_gsat, suv_gsat, truck_gsat, minivan_gsat], \n        [sedan_hybrid_gsat, suv_hybrid_gsat, truck_hybrid_gsat, minivan_hybrid_gsat])):\n\n    plt.subplot(2, 2, i + 1)\n    plt.plot(ratios, standard, \"-s\", label=label_standard, color=\"purple\")\n    plt.fill_between(\n        ratios,\n        standard - error,\n        standard + error,\n        color=\"purple\",\n        alpha=0.2,\n    )\n    plt.plot(ratios, hybrid, \"-s\", label=label_hybrid, color=\"orange\")\n    plt.fill_between(\n        ratios,\n        hybrid - error,\n        hybrid + error,\n        color=\"orange\",\n        alpha=0.2,\n    )\n    plt.plot(ratios, standard_gsat, \"--\", label=label_gsat_standard, color=\"purple\")\n    plt.plot(ratios, hybrid_gsat, \"--\", label=label_gsat_hybrid, color=\"orange\")\n    plt.title(title)\n    plt.xlabel(xlabel_value)\n    plt.ylabel(ylabel_value)\n    plt.legend(loc=\"upper right\")\n    plt.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('line_20.pdf', bbox_inches='tight')"}
{"idx": "line_22", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency at different speeds. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [15.0, 14.5, 14.0, 13.5, 13.0, 12.5, 12.0]\nbits = [\n\"15.0 km/l\",\n\"14.5 km/l\",\n\"14.0 km/l\",\n\"13.5 km/l\",\n\"13.0 km/l\",\n\"12.5 km/l\",\n\"12.0 km/l\",\n]\n\n# Axes Limits and Labels\nxlabel_value = \"Speed (km/h)\"\n\nylabel_value = \"Fuel Efficiency (km/l)\"\n\n# Labels\nlabel_1 = \"Test Vehicle\"\nlabel_2 = \"Sedan Avg: 18.0 km/l\"\nlabel_3 = \"SUV Avg: 14.0 km/l\"\nlabel_4 = \"Truck Avg: 12.0 km/l\"\nlabel_5 = \"Motorbike Avg: 20.0 km/l\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [15.0, 14.5, 14.0, 13.5, 13.0, 12.5, 12.0]\nbits = [\n    \"15.0 km/l\",\n    \"14.5 km/l\",\n    \"14.0 km/l\",\n    \"13.5 km/l\",\n    \"13.0 km/l\",\n    \"12.5 km/l\",\n    \"12.0 km/l\",\n]\n\n# Axes Limits and Labels\nxlabel_value = \"Speed (km/h)\"\nxlim_values = [35, 105]\nxticks_values = np.arange(40, 101, 10)\n\nylabel_value = \"Fuel Efficiency (km/l)\"\nylim_values = [10.0, 22.5]\nyticks_values = np.arange(10.0, 23.0, 2.5)\n\n# Labels\nlabel_1 = \"Test Vehicle\"\nlabel_2 = \"Sedan Avg: 18.0 km/l\"\nlabel_3 = \"SUV Avg: 14.0 km/l\"\nlabel_4 = \"Truck Avg: 12.0 km/l\"\nlabel_5 = \"Motorbike Avg: 20.0 km/l\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nfig, ax = plt.subplots(figsize=(5, 4))\n\n# Plot the line\nax.plot(x, y, marker=\"o\", color=\"blue\", label=label_1)\n\n# Set x,y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values, fontsize=10)\nplt.xticks(xticks_values, fontsize=10)\nplt.xlim(xlim_values)\n\n# Annotate the points with bit values\nfor i, txt in enumerate(bits):\n    ax.annotate(\n        txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0, 10), ha=\"center\"\n    )\n\n# Horizontal lines for comparison\nax.axhline(y=18.0, color=\"magenta\", linestyle=\"--\", label=label_2)\nax.axhline(y=14.0, color=\"orange\", linestyle=\"--\", label=label_3)\nax.axhline(y=12.0, color=\"green\", linestyle=\"--\", label=label_4)\nax.axhline(y=20.0, color=\"red\", linestyle=\"--\", label=label_5)\n\n# Set labels and title\nax.set_xlabel(xlabel_value, fontsize=12)\nax.set_ylim(ylim_values)\nax.set_xlim(xlim_values)\nax.set_ylabel(ylabel_value, fontsize=12)\n\n# Set the legend\nax.legend(loc=\"center right\", fontsize=10)\n\n# Set grid\nax.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\nplt.savefig('line_22.pdf', bbox_inches='tight')"}
{"idx": "line_23", "instruction": "There is a reference image for you and I also have a set of data about the relationship between the number of vehicles and average speed. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data corrected to match lengths\nx = [2**0.2, 2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7, 2**8.6]\ny = [\n60.5,\n65.3,\n70.2,\n75.0,\n78.6,\n80.1,\n82.5,\n85.0,\n87.3,\n]\nlabels = [\n\"60.5\",\n\"65.3\",\n\"70.2\",\n\"75.0\",\n\"78.6\",\n\"80.1\",\n\"82.5\",\n\"85.0\",\n\"87.3\",\n]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Vehicles (hundreds)\"\n\nylabel_value = \"Average Speed (km/h)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 2.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data corrected to match lengths\nx = [2**0.2, 2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7, 2**8.6]\ny = [\n    60.5,\n    65.3,\n    70.2,\n    75.0,\n    78.6,\n    80.1,\n    82.5,\n    85.0,\n    87.3,\n]\nlabels = [\n    \"60.5\",\n    \"65.3\",\n    \"70.2\",\n    \"75.0\",\n    \"78.6\",\n    \"80.1\",\n    \"82.5\",\n    \"85.0\",\n    \"87.3\",\n]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Vehicles (hundreds)\"\nxlim_values = [2**0, 2**8]\nxticks_values = [2**1, 2**3, 2**5, 2**7]\nxticklabels = [\"$2^{1}$\", \"$2^{3}$\", \"$2^{5}$\", \"$2^{7}$\"]\n\nylabel_value = \"Average Speed (km/h)\"\nylim_values = [50, 110]\nyticks_values = np.arange(50, 111, 10)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(\n    figsize=(5, 2)\n)  # Adjust the size to match the original image's dimensions\nax.plot(\n    x,\n    y,\n    marker=\"o\",\n    color=\"#4c72b0\",\n    linestyle=\"-\",\n    linewidth=2,\n    markersize=6,\n    mfc=\"#ff8c00\",\n    mec=\"white\",\n)\n\n# Annotate each point with its label\nfor i, label in enumerate(labels):\n    ax.annotate(\n        label,\n        (x[i], y[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 10),\n        ha=\"center\",\n        fontsize=7,\n    )\n\n# Set x-axis to be logarithmic\nax.set_xscale(\"log\", base=2)  # Corrected 'basex' to 'base'\n\n# Set x-axis labels to be in the format of 2^n\nax.set_xticks(xticks_values)\nax.set_xticklabels(\n    xticklabels,\n)\nax.set_xlim(xlim_values)  # Set limits to include a small margin\n\n# Set y-axis ticks\nplt.yticks(yticks_values, fontsize=10)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\n\n# Remove tick lines outside the plotting area\nax.tick_params(\n    axis=\"both\", which=\"both\", length=0, color=\"#d2d2d2\"\n)  # Remove tick marks and set their color\n\n# Set labels and title\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\n\n# Change the plot background color\nax.set_facecolor(\"#eaeaf2\")\n\n# Show grid\nplt.grid(True, which=\"both\", linestyle=\"-\", linewidth=1, color=\"white\")\n\n# Change the axis colors\nax = plt.gca()\nax.spines[\"bottom\"].set_color(\"#f5f5f5\")\nax.spines[\"top\"].set_color(\"#f5f5f5\")  # Optional: hide or set color\nax.spines[\"left\"].set_color(\"#f5f5f5\")\nax.spines[\"right\"].set_color(\"#f5f5f5\")  # Optional: hide or set color\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\nplt.savefig('line_23.pdf', bbox_inches='tight')"}
{"idx": "line_24", "instruction": "There is a reference image for you and I also have a set of data about traffic light cycles and travel times. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\ntraffic_cycles = np.arange(0, 10, 1)\navg_travel_time = np.array([420, 390, 370, 350, 340, 330, 320, 310, 300, 290])\nstd_dev_travel_time = np.array([30, 28, 25, 22, 20, 18, 15, 13, 10, 8])\n\n# Axes Limits and Labels\nxlabel_value = \"Traffic Light Cycles\"\nylabel_value = \"Average Travel Time (seconds)\"\n\n# Labels\nlabel_Average = \"Average Travel Time\"\nlabel_Standard_Deviation = \"Standard Deviation\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\ntraffic_cycles = np.arange(0, 10, 1)\navg_travel_time = np.array([420, 390, 370, 350, 340, 330, 320, 310, 300, 290])\nstd_dev_travel_time = np.array([30, 28, 25, 22, 20, 18, 15, 13, 10, 8])\n\n# Axes Limits and Labels\nxlabel_value = \"Traffic Light Cycles\"\nylabel_value = \"Average Travel Time (seconds)\"\nylim_values = [150, 450]\nyticks_values = np.arange(200, 451, 50)\n\n# Labels\nlabel_Average = \"Average Travel Time\"\nlabel_Standard_Deviation = \"Standard Deviation\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the average line\nplt.figure(figsize=(6, 4))\nplt.plot(traffic_cycles, avg_travel_time, label=label_Average, marker=\"o\", color=\"#1f77b4\")\n\n# Plotting the standard deviation as a shaded area\nplt.fill_between(\n    traffic_cycles,\n    avg_travel_time - std_dev_travel_time,\n    avg_travel_time + std_dev_travel_time,\n    color=\"#1f77b4\",\n    alpha=0.2,\n    label=label_Standard_Deviation,\n)\n\n# Adjusting y-axis range\nplt.ylim(ylim_values)\n\n# Adding yticks\nplt.yticks(yticks_values)\nplt.ylim(ylim_values)\n\n# Adding labels and title with smaller font size\nplt.xlabel(xlabel_value, fontsize=10)\nplt.ylabel(ylabel_value, fontsize=10)\n\n# Adding legend with no border\nplt.legend(frameon=True, fontsize=10)\n\n# Adding grid\nplt.grid(True, color=\"#d1d1d1\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\nplt.savefig('line_24.pdf', bbox_inches='tight')"}
{"idx": "line_25", "instruction": "There is a reference image for you and I also have a set of data about vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Dummy data for the purpose of plotting. In a real scenario, you would use your actual data.\nnumber_of_vehicles = np.array([10, 20, 40, 80])\n\n# Average Fuel Efficiency (MPG)\nbaseline_efficiency = np.array([20, 21, 22, 22.5])\nmethod1_efficiency = np.array([18, 19, 20, 21])\nmethod2_efficiency = np.array([15, 16.5, 17, 18])\n\n# Error for Fuel Efficiency\nerror_efficiency = np.array([0.5, 0.5, 0.5, 0.5])\n\n# Average Travel Time (minutes)\nbaseline_time = np.array([35, 40, 45, 50])\nmethod1_time = np.array([38, 42, 47, 52])\nmethod2_time = np.array([40, 45, 50, 55])\n\n# Error for Travel Time\nerror_time = np.array([1, 1, 1, 1])\n\n# Axes Limits and Labels\nylabel_value_1 = \"Average Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Average Travel Time (minutes)\"\n\n# Labels\nlabel_Baseline = \"Baseline\"\nlabel_Method1 = \"Alternative Method 1\"\nlabel_Method2 = \"Alternative Method 2\"\n\n# Texts\ntext_1 = \"Number of Vehicles\"\ntext_2 = \"Comparison Metrics\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Dummy data for the purpose of plotting. In a real scenario, you would use your actual data.\nnumber_of_vehicles = np.array([10, 20, 40, 80])\n\n# Average Fuel Efficiency (MPG)\nbaseline_efficiency = np.array([20, 21, 22, 22.5])\nmethod1_efficiency = np.array([18, 19, 20, 21])\nmethod2_efficiency = np.array([15, 16.5, 17, 18])\n\n# Error for Fuel Efficiency\nerror_efficiency = np.array([0.5, 0.5, 0.5, 0.5])\n\n# Average Travel Time (minutes)\nbaseline_time = np.array([35, 40, 45, 50])\nmethod1_time = np.array([38, 42, 47, 52])\nmethod2_time = np.array([40, 45, 50, 55])\n\n# Error for Travel Time\nerror_time = np.array([1, 1, 1, 1])\n\n# Axes Limits and Labels\nylabel_value_1 = \"Average Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Average Travel Time (minutes)\"\nylim_values_1 = [14, 24]\nyticks_values_1 = np.arange(15, 23, 2)\nylim_values_2 = [30, 60]\nyticks_values_2 = np.arange(35, 56, 5)\n\n# Labels\nlabel_Baseline = \"Baseline\"\nlabel_Method1 = \"Alternative Method 1\"\nlabel_Method2 = \"Alternative Method 2\"\n\n# Texts\ntext_1 = \"Number of Vehicles\"\ntext_2 = \"Comparison Metrics\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create two subplots and unpack the output array immediately\nf, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(8, 6))\n\n# First subplot for Fuel Efficiency\nax1.errorbar(\n    number_of_vehicles,\n    baseline_efficiency,\n    yerr=error_efficiency,\n    label=label_Baseline,\n    color=\"#3171ad\",\n    marker=\"o\",\n)\nax1.errorbar(\n    number_of_vehicles,\n    method1_efficiency,\n    yerr=error_efficiency,\n    label=label_Method1,\n    color=\"#469c76\",\n    marker=\"o\",\n)\nax1.errorbar(\n    number_of_vehicles,\n    method2_efficiency,\n    yerr=error_efficiency,\n    label=label_Method2,\n    color=\"#c17cb9\",\n    marker=\"o\",\n)\nax1.set_ylabel(ylabel_value_1)\n# Set grid\nax1.grid(True)\nax1.set_ylim(ylim_values_1)\nax1.set_yticks(yticks_values_1)\n\n# Second subplot for Travel Time\nax2.errorbar(\n    number_of_vehicles,\n    baseline_time,\n    yerr=error_time,\n    label=label_Baseline,\n    color=\"#3171ad\",\n    marker=\"o\",\n)\nax2.errorbar(\n    number_of_vehicles,\n    method1_time,\n    yerr=error_time,\n    label=label_Method1,\n    color=\"#469c76\",\n    marker=\"o\",\n)\nax2.errorbar(\n    number_of_vehicles,\n    method2_time,\n    yerr=error_time,\n    label=label_Method2,\n    color=\"#c17cb9\",\n    marker=\"o\",\n)\nax2.set_ylabel(ylabel_value_2)\n# Set grid\nax2.grid(True)\nax2.set_ylim(ylim_values_2)\nax2.set_yticks(yticks_values_2)\n\n# Only show ticks on the bottom subplot\nplt.setp(ax1.get_xticklabels(), visible=False)\n\n# Create legend above the second subplot\nax2.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.2), ncol=3)\n\n# Set the figure's layout so there is space for the xlabel at the bottom\nplt.tight_layout()\n\n# Now adjust the subplot to give space for the ylabel on the left\nf.subplots_adjust(left=0.15, bottom=0.12)\n\n# Place the legend and adjust subplot parameters\nax2.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.2), ncol=3)\n\nf.text(0.55, 0.05, text_1, ha=\"center\", va=\"center\")\nf.text(\n    0.05,\n    0.5,\n    text_2,\n    ha=\"center\",\n    va=\"center\",\n    rotation=\"vertical\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.savefig('line_25.pdf', bbox_inches='tight')"}
{"idx": "line_27", "instruction": "There is a reference image for you and I also have a set of data about vehicle fuel consumption at different speeds. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nvehicle_speeds = [20, 40, 60, 80]\nsedan_consumption = [15.0, 13.5, 12.5, 14.0]\nsuv_consumption = [10.5, 9.0, 8.0, 9.5]\ntruck_consumption = [8.5, 7.0, 6.5, 7.2]\n\n# Axes Limits and Labels\nxlabel_value = \"Speed (km/h)\"\n\nylabel_value = \"Fuel Consumption (liters/100 km)\"\n\n# Labels\nlabel_Sedan = \"Sedan\"\nlabel_SUV = \"SUV\"\nlabel_Truck = \"Truck\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nvehicle_speeds = [20, 40, 60, 80]\nsedan_consumption = [15.0, 13.5, 12.5, 14.0]\nsuv_consumption = [10.5, 9.0, 8.0, 9.5]\ntruck_consumption = [8.5, 7.0, 6.5, 7.2]\n\n# Axes Limits and Labels\nxlabel_value = \"Speed (km/h)\"\nxlim_values = [10, 90]\nxticks_values = [20, 40, 60, 80]\nxticklabels = [\"$20$\", \"$40$\", \"$60$\", \"$80$\"]\n\nylabel_value = \"Fuel Consumption (liters/100 km)\"\n\n# Labels\nlabel_Sedan = \"Sedan\"\nlabel_SUV = \"SUV\"\nlabel_Truck = \"Truck\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(6, 6))  # Adjusting figure size to match original image dimensions\nplt.plot(\n    vehicle_speeds, sedan_consumption, \"o-\", label=label_Sedan, color=\"#e8d2cc\", markersize=4\n)\nplt.plot(\n    vehicle_speeds, suv_consumption, \"x-\", label=label_SUV, color=\"#9f6a8d\", markersize=4\n)\nplt.plot(\n    vehicle_speeds, truck_consumption, \"s-\", label=label_Truck, color=\"#5c5048\", markersize=4\n)\n\n# Set x-axis to only display specific ticks and extend y-axis to leave space at top\nplt.xticks(xticks_values, xticklabels)\nplt.xlim(xlim_values)\n\n# Adding data labels\nfor i, txt in enumerate(sedan_consumption):\n    plt.annotate(\n        txt,\n        (vehicle_speeds[i], sedan_consumption[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 5),\n        ha=\"center\",\n        fontsize=12,\n    )\nfor i, txt in enumerate(suv_consumption):\n    plt.annotate(\n        txt,\n        (vehicle_speeds[i], suv_consumption[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 5),\n        ha=\"center\",\n        fontsize=12,\n    )\nfor i, txt in enumerate(truck_consumption):\n    plt.annotate(\n        txt,\n        (vehicle_speeds[i], truck_consumption[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 5),\n        ha=\"center\",\n        fontsize=12,\n    )\n\n# Setting the axis labels\nplt.xlabel(xlabel_value, fontsize=16)\nplt.ylabel(ylabel_value, fontsize=16)\n\n# Change the axis colors\nax = plt.gca()\nax.spines[\"bottom\"].set_color(\"#cccccc\")\nax.spines[\"bottom\"].set_linewidth(1.4)\nax.spines[\"left\"].set_color(\"#cccccc\")\nax.spines[\"left\"].set_linewidth(1.4)\nax.spines[\"top\"].set_color(\"#ffffff\")\nax.spines[\"right\"].set_color(\"#ffffff\")\n\n# Adjust tick parameters to ensure ticks do not extend outside\nax.tick_params(axis=\"both\", which=\"both\", length=0)  # Hide tick marks\n\n# Adding the legend\nplt.legend(loc=\"upper left\")\n\n# Adding grid\nplt.grid(True, which=\"both\", linestyle=\"--\", linewidth=1, color=\"#808080\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('line_27.pdf', bbox_inches='tight')"}
{"idx": "line_28", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency across different car models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\nmodel_a_y = [24, 26, 28, 30, 32, 31, 29, 28, 27]\nmodel_b_y = [22, 24, 26, 28, 29, 30, 31, 32, 33]\nbaseline_fuel_efficiency = 24\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Test Miles\"\n\nylabel_value = \"Average Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_1 = \"Model A\"\nlabel_2 = \"Model B\"\nlabel_3 = \"Baseline Model\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\nmodel_a_y = [24, 26, 28, 30, 32, 31, 29, 28, 27]\nmodel_b_y = [22, 24, 26, 28, 29, 30, 31, 32, 33]\nbaseline_fuel_efficiency = 24\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Test Miles\"\nxlim_values = [-10, 215]\nxticks_values = np.arange(25, 201, 25)\n\nylabel_value = \"Average Fuel Efficiency (MPG)\"\nylim_values = [18, 34]\nyticks_values = np.arange(20, 34, 2)\n\n# Labels\nlabel_1 = \"Model A\"\nlabel_2 = \"Model B\"\nlabel_3 = \"Baseline Model\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(\n    figsize=(6, 4)\n)  # Adjusting figure size to match original image dimensions\n\n# Line charts\nax.plot(x, model_a_y, marker=\"s\", color=\"#d62728\", label=label_1)\nax.plot(\n    x, model_b_y, marker=\"p\", color=\"#1f77b4\", label=label_2, markersize=8\n)\n\n# Set x,y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values, fontsize=12)\nplt.xticks(xticks_values, fontsize=12)\nplt.xlim(xlim_values)\n\n# Horizontal dashed line\nax.axhline(\n    y=baseline_fuel_efficiency,\n    color=\"green\",\n    linestyle=\"-.\",\n    label=label_3,\n)\n\n# Legend\nax.legend(loc=\"lower right\")\n\n# Labels\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout()\nplt.savefig('line_28.pdf', bbox_inches='tight')"}
{"idx": "line_29", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency optimization for two different car models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\noptimization_steps = range(1, 21)\nmodel_a_efficiency = [\n20,\n22,\n24,\n25,\n26,\n27,\n28,\n29,\n30,\n31,\n32,\n33,\n34,\n35,\n36,\n36,\n36,\n36,\n36,\n36,\n]\nsingle_steps = [0, 21]\nmodel_b_efficiency = [20] * len(single_steps)\n\n# Axes Limits and Labels\nxlabel_value = \"# of Optimization Steps\"\n\nylabel_value = \"Average Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_1 = \"Model A\"\nlabel_2 = \"Model B\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 4.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\noptimization_steps = range(1, 21)\nmodel_a_efficiency = [\n    20,\n    22,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    36,\n    36,\n    36,\n    36,\n    36,\n]\nsingle_steps = [0, 21]\nmodel_b_efficiency = [20] * len(single_steps)\n\n# Axes Limits and Labels\nxlabel_value = \"# of Optimization Steps\"\nxlim_values = [0, 21]\nxticks_values = [0, 5, 10, 15, 20]\n\nylabel_value = \"Average Fuel Efficiency (MPG)\"\nylim_values = [18, 38]\n\n# Labels\nlabel_1 = \"Model A\"\nlabel_2 = \"Model B\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the lines\nplt.figure(figsize=(4, 3))\nplt.plot(optimization_steps, model_a_efficiency, \"o-.\", label=label_1, color=\"#8280cd\")\nplt.plot(single_steps, model_b_efficiency, \"-\", label=label_2, color=\"red\")\n\n# Adding legend\nplt.legend(loc = \"center right\")\n\n# Labeling axes\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\nplt.xlim(xlim_values)\nplt.xticks(xticks_values)\nplt.ylim(ylim_values)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('line_29.pdf', bbox_inches='tight')"}
{"idx": "line_31", "instruction": "There is a reference image for you and I also have a set of data about vehicle fuel efficiency at different speeds. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Placeholder data\nvehicle_speed = np.arange(30, 70, 10)\nsedan_efficiency = [35, 33, 30, 28]\nsuv_efficiency = [28, 25, 23, 20]\ntruck_efficiency = [20, 18, 15, 13]\nev_efficiency = [100, 90, 85, 80]\n\n# Placeholder error values\nsedan_error = np.array([2.1, 2.43, 2.21, 2.09])\nsuv_error = np.array([1.85, 2.29, 1.88, 2.78])\ntruck_error = np.array([2.93, 1.77, 2.58, 2.06])\nev_error = np.array([7.84, 9.63, 5.36, 5.44])\n\n# Axes Limits and Labels\nxlabel_value = \"Vehicle Speed (MPH)\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_sedan = \"Sedan\"\nlabel_suv = \"SUV\"\nlabel_truck = \"Truck\"\nlabel_ev = \"Electric Vehicle\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Placeholder data\nvehicle_speed = np.arange(30, 70, 10)\nsedan_efficiency = [35, 33, 30, 28]\nsuv_efficiency = [28, 25, 23, 20]\ntruck_efficiency = [20, 18, 15, 13]\nev_efficiency = [100, 90, 85, 80]\n\n# Placeholder error values\nsedan_error = np.array([2.1, 2.43, 2.21, 2.09])\nsuv_error = np.array([1.85, 2.29, 1.88, 2.78])\ntruck_error = np.array([2.93, 1.77, 2.58, 2.06])\nev_error = np.array([7.84, 9.63, 5.36, 5.44])\n\n# Axes Limits and Labels\nxlabel_value = \"Vehicle Speed (MPH)\"\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [10, 110]\nyticks_values = np.arange(10, 111, 10)\n\n# Labels\nlabel_sedan = \"Sedan\"\nlabel_suv = \"SUV\"\nlabel_truck = \"Truck\"\nlabel_ev = \"Electric Vehicle\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(8, 6))  # Adjusting figure size to match original image dimensions\nplt.errorbar(\n    vehicle_speed,\n    sedan_efficiency,\n    yerr=sedan_error,\n    fmt=\"-o\",\n    label=label_sedan,\n    color=\"blue\",\n    linestyle=\"dashed\",\n)\nplt.errorbar(\n    vehicle_speed,\n    suv_efficiency,\n    yerr=suv_error,\n    fmt=\"-s\",\n    label=label_suv,\n    color=\"green\",\n    linestyle=\"dashed\",\n)\nplt.errorbar(\n    vehicle_speed,\n    truck_efficiency,\n    yerr=truck_error,\n    fmt=\"-^\",\n    label=label_truck,\n    color=\"orange\",\n    linestyle=\"dashed\",\n)\nplt.errorbar(\n    vehicle_speed,\n    ev_efficiency,\n    yerr=ev_error,\n    fmt=\"-d\",\n    label=label_ev,\n    color=\"red\",\n    linestyle=\"dashed\",\n)\n\n# Adding labels and title\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\nplt.xticks(vehicle_speed)\nplt.ylim(ylim_values)\nplt.yticks(yticks_values)\n\n# Adding legend, lower left corner\nplt.legend(loc=\"lower left\")\n\n# Moving axes spines\nax = plt.gca()  # get current axes\nax.spines[\"right\"].set_color(\"none\")  # hide the right spine\nax.spines[\"top\"].set_color(\"none\")  # hide the top spine\nax.grid(\n    True, which=\"both\", axis=\"both\", color=\"lightgray\", linestyle=\"--\", linewidth=0.5\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('line_31.pdf', bbox_inches='tight')"}
{"idx": "line_32", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency across different road conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nroad_condition_index = [1, 12, 28, 93]\nfuel_efficiency_model_a = [20, 25, 30, 35]\nfuel_efficiency_model_b = [28, 28, 28, 28]\n\n# Axes Limits and Labels\nxlabel_value = \"Road Condition Index\"\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_model_a = \"Model A\"\nlabel_model_b = \"Model B\"\nlabel_model_c = \"Model C\"\nlabel_model_d = \"Model D\"\n\n# Titles\ntitle_1 = \"Fuel Efficiency vs. Road Condition\"\ntitle_2 = \"Vehicle Models\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nroad_condition_index = [1, 12, 28, 93]\nfuel_efficiency_model_a = [20, 25, 30, 35]\nfuel_efficiency_model_b = [28, 28, 28, 28]\n\n# Axes Limits and Labels\nxlabel_value = \"Road Condition Index\"\nxlim_values = [-5, 95]\nxticks_values = np.arange(0, 101, 20)\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [18, 36]\nyticks_values = np.arange(20, 36, 2)\n\n# Labels\nlabel_model_a = \"Model A\"\nlabel_model_b = \"Model B\"\nlabel_model_c = \"Model C\"\nlabel_model_d = \"Model D\"\n\n# Titles\ntitle_1 = \"Fuel Efficiency vs. Road Condition\"\ntitle_2 = \"Vehicle Models\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and the line that we will manipulate\nfig, ax = plt.subplots(figsize=(8, 6))\nax.plot(\n    road_condition_index,\n    fuel_efficiency_model_a,\n    marker=\"o\",\n    color=\"orange\",\n    linewidth=2,\n    markersize=6,\n    markerfacecolor=\"orange\",\n    label=label_model_a,\n)\n\n# Extend the Model B line visually by adding extra points\nextended_x = [-5] + road_condition_index + [95]  # Extend x-axis data points\nextended_y = [28] * (len(fuel_efficiency_model_b) + 2)  # Extend y-axis data points to match\nax.plot(\n    extended_x, extended_y, linestyle=\"--\", color=\"#202020\", label=label_model_b\n)  # Plot the extended line\n\n# Set x,y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values, fontsize=12)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\nplt.xticks(xticks_values, fontsize=12)\nplt.xlim(xlim_values)  # Adjusted x-axis limit\n\n# Set the title and labels\nax.set_title(title_1, fontsize=20)\nax.set_xlabel(xlabel_value, fontsize=16)\nax.set_ylabel(ylabel_value, fontsize=16)\n\n# Remove tick lines outside the plotting area\nax.tick_params(\n    axis=\"both\", which=\"both\", length=0, color=\"#d2d2d2\"\n)  # Remove tick marks and set their color\n\n# Add a legend with a title\nax.legend(\n    title=title_2,\n    loc=\"lower right\",\n    fontsize=12,\n    title_fontsize=12,\n    edgecolor=\"#fdfdfd\",\n)\n\n# Change the plot background color\nax.set_facecolor(\"#f5f5f5\")\n\n# Show grid with lighter color\nax.grid(True, color=\"#fcfcfc\", linewidth=1.5)\n\n# Change the axis colors\nax = plt.gca()\nax.spines[\"bottom\"].set_color(\"#ffffff\")\nax.spines[\"top\"].set_color(\"#ffffff\")  # Optional: hide or set color\nax.spines[\"left\"].set_color(\"#ffffff\")\nax.spines[\"right\"].set_color(\"#ffffff\")  # Optional: hide or set color\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout()\nplt.savefig('line_32.pdf', bbox_inches='tight')"}
{"idx": "line_33", "instruction": "There is a reference image for you and I also have a set of data about vehicle fuel efficiency. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Sample data (replace with actual values)\ntest_samples = [20, 40, 60, 80, 100]\nsedan_efficiency = [25, 27, 28, 29, 30]\nsuv_efficiency = [22, 24, 25, 26, 27]\ntruck_efficiency = [18, 20, 21, 22, 23]\nev_efficiency = [100, 105, 108, 110, 112]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Test Samples\"\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_sedan = \"Sedan\"\nlabel_suv = \"SUV\"\nlabel_truck = \"Truck\"\nlabel_ev = \"Electric Vehicle\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual values)\ntest_samples = [20, 40, 60, 80, 100]\nsedan_efficiency = [25, 27, 28, 29, 30]\nsuv_efficiency = [22, 24, 25, 26, 27]\ntruck_efficiency = [18, 20, 21, 22, 23]\nev_efficiency = [100, 105, 108, 110, 112]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Test Samples\"\nxlim_values = [5, 105]\nxticks_values = np.arange(20, 101, 20)\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [15, 115]\nyticks_values = np.arange(20, 121, 20)\n\n# Labels\nlabel_sedan = \"Sedan\"\nlabel_suv = \"SUV\"\nlabel_truck = \"Truck\"\nlabel_ev = \"Electric Vehicle\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nplt.figure(figsize=(6, 4))  # Adjusted to match the original image's dimensions\nplt.plot(test_samples, sedan_efficiency, marker=\"v\", color=\"#ffa500\", label=label_sedan)\nplt.plot(test_samples, suv_efficiency, marker=\"^\", color=\"#ff4500\", label=label_suv)\nplt.plot(test_samples, truck_efficiency, marker=\"s\", color=\"#4169e1\", label=label_truck)\nplt.plot(test_samples, ev_efficiency, marker=\"o\", color=\"#00008b\", label=label_ev)\n\n# Set x,y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.xticks(xticks_values, fontsize=10)\nplt.xlim(xlim_values)  # Adjusted y-axis limit\nplt.yticks(yticks_values, fontsize=10)\nplt.ylim(ylim_values)  # Adjusted x-axis limit\n\n# Add vertical dotted line\nplt.axvline(x=20, color=\"blue\", linestyle=\":\", linewidth=1.2)\n\n# Add legend\nplt.legend(loc=\"lower right\", fontsize=12)\n\n# Add labels and title\nplt.xlabel(xlabel_value, fontsize=12)\nplt.ylabel(ylabel_value , fontsize=12)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('line_33.pdf', bbox_inches='tight')"}
{"idx": "line_34", "instruction": "There is a reference image for you and I also have a set of data about vehicle fuel efficiency during test drives. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ntest_drives = [2, 3, 4, 5, 6, 7, 8]\nsedan_efficiency = [30, 32, 33, 34, 35, 36, None] # None value will be handled in the plot commands\nsuv_efficiency = [20, 22, 23, 24, 25, 26, 27]\ntruck_efficiency = [15] * len(test_drives)\nev_efficiency = [25] * len(test_drives)\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Test Drives\"\nylabel_value_1 = \"Sedan Fuel Efficiency (MPG)\"\nylabel_value_2 = \"SUV Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_1 = \"Sedan\"\nlabel_2 = \"SUV\"\nlabel_3 = \"Truck\"\nlabel_4 = \"Electric Vehicle\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D  # Importing Line2D for creating custom legend items\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ntest_drives = [2, 3, 4, 5, 6, 7, 8]\nsedan_efficiency = [30, 32, 33, 34, 35, 36, None]  # None value will be handled in the plot commands\nsuv_efficiency = [20, 22, 23, 24, 25, 26, 27]\ntruck_efficiency = [15] * len(test_drives)\nev_efficiency = [25] * len(test_drives)\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Test Drives\"\nylabel_value_1 = \"Sedan Fuel Efficiency (MPG)\"\nylabel_value_2 = \"SUV Fuel Efficiency (MPG)\"\nylim_values_1 = [10, 40]\nylim_values_2 = [10, 30]\nyticks_values_1 = range(15, 41, 5)\nyticks_values_2 = range(15, 31, 5)\n\n# Labels\nlabel_1 = \"Sedan\"\nlabel_2 = \"SUV\"\nlabel_3 = \"Truck\"\nlabel_4 = \"Electric Vehicle\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax1 = plt.subplots(figsize=(8, 7))\n\n# Sedan plot\n(sedan_line,) = ax1.plot(\n    test_drives,\n    sedan_efficiency,\n    \"o-\",\n    color=\"#377eb8\",\n    label=label_1,\n    markersize=10,\n    linewidth=3,\n    mec=\"black\",\n)\nax1.set_xlabel(xlabel_value, fontsize=14)\nax1.set_ylabel(ylabel_value_1, fontsize=14, color=\"#377eb8\")\nax1.tick_params(\n    axis=\"y\", labelcolor=\"#377eb8\", direction=\"in\", rotation=90, labelsize=12\n)\nax1.tick_params(\n    axis=\"x\",\n    direction=\"in\",\n    labelsize=12,\n)\nax1.set_yticks(yticks_values_1)\nax1.set_ylim(ylim_values_1)\n\n# Adding fuel efficiency values to the plot for sedan\nfor i, txt in enumerate(sedan_efficiency):\n    if txt is not None:  # Skip plotting the text for None values\n        ax1.annotate(\n            f\"{txt} MPG\",\n            (test_drives[i], txt),\n            textcoords=\"offset points\",\n            xytext=(10, 10),\n            ha=\"center\",\n            fontsize=12,\n        )\n\n# SUV plot with a secondary y-axis\nax2 = ax1.twinx()\n(suv_line,) = ax2.plot(\n    test_drives,\n    suv_efficiency,\n    \"^-\",\n    color=\"#ff7f00\",\n    label=label_2,\n    markersize=10,\n    linewidth=3,\n    mec=\"black\",\n)\nax2.set_ylabel(ylabel_value_2, color=\"#ff7f00\", fontsize=14)\nax2.tick_params(\n    axis=\"y\", labelcolor=\"#ff7f00\", direction=\"in\", rotation=90, labelsize=12\n)\nax2.set_yticks(yticks_values_2)\nax2.set_ylim(ylim_values_2)\n\n# Adding fuel efficiency values to the plot for SUV\nfor i, txt in enumerate(suv_efficiency):\n    ax2.annotate(\n        f\"{txt} MPG\",\n        (test_drives[i], txt),\n        textcoords=\"offset points\",\n        xytext=(0, -30),\n        ha=\"center\",\n        fontsize=12,\n    )\n\n# Truck dashed lines\nax1.axhline(y=15, color=\"#377eb8\", linestyle=\":\", linewidth=2)\nax1.axhline(y=15.5, color=\"#ff7f00\", linestyle=\":\", linewidth=2)\n\n# EV dashed lines\nax1.axhline(y=25, color=\"#377eb8\", linestyle=\"--\", linewidth=2)\nax1.axhline(y=26, color=\"#ff7f00\", linestyle=\"--\", linewidth=2)\n\n# Creating custom legend items\ntruck_legend = Line2D([0], [0], color=\"black\", linestyle=\":\", linewidth=2, label=\"Truck\")\nev_legend = Line2D([0], [0], color=\"black\", linestyle=\"--\", linewidth=2, label=\"Electric Vehicle\")\n\n# Adding legends\nfirst_legend = ax1.legend(\n    handles=[truck_legend, ev_legend],\n    loc=\"upper left\",\n    ncol=2,\n    fontsize=14,\n    edgecolor=\"black\",\n)\nax1.add_artist(first_legend)  # Add the first legend manually\nsecond_legend = ax1.legend(\n    handles=[sedan_line, suv_line], loc=\"upper right\", fontsize=14, edgecolor=\"black\"\n)  # Add the second legend\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_34.pdf', bbox_inches='tight')"}
{"idx": "line_36", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency of two vehicle models at different cargo load ratios. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\ncargo_ratios = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nmodel_a_efficiency = np.array([30, 28, 27, 25, 23, 22, 21, 20, 19, 18])\nmodel_b_efficiency = np.array([35, 33, 31, 30, 28, 27, 25, 24, 23, 22])\nmodel_a_std = np.array([1.5] * 10)\nmodel_b_std = np.array([2.0] * 10)\n\n# Axes Limits and Labels\nxlabel_value = \"Cargo Load Ratio\"\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabels = [\"Model A\", \"Model B\"]\n\n# Titles\ntitles = [\"Highway Driving\", \"City Driving\", \"Off-Road Driving\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 15.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\ncargo_ratios = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nmodel_a_efficiency = np.array([30, 28, 27, 25, 23, 22, 21, 20, 19, 18])\nmodel_b_efficiency = np.array([35, 33, 31, 30, 28, 27, 25, 24, 23, 22])\nmodel_a_std = np.array([1.5] * 10)\nmodel_b_std = np.array([2.0] * 10)\n\n# Axes Limits and Labels\nxlabel_value = \"Cargo Load Ratio\"\nxlim_values = [0.05, 1.05]\nxticks_values = np.arange(0.1, 1.1, 0.1)\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nyticks_values_1 = np.arange(15, 36, 5)\nylim_values_1 = [15, 36]\nyticks_values_2 = np.arange(15, 36, 5)\nylim_values_2 = [15, 36]\nyticks_values_3 = np.arange(15, 36, 5)\nylim_values_3 = [15, 36]\n\n# Labels\nlabels = [\"Model A\", \"Model B\"]\n\n# Titles\ntitles = [\"Highway Driving\", \"City Driving\", \"Off-Road Driving\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot settings\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\ncolors = [\"#9467bd\", \"#ff7f0e\"]\nmarkers = [\"s\", \"o\"]  # Square and circle markers\n\nfor i, ax in enumerate(axs):\n    ax.plot(\n        cargo_ratios, model_a_efficiency, label=labels[0], color=colors[0], marker=markers[0]\n    )\n    ax.fill_between(\n        cargo_ratios,\n        model_a_efficiency - model_a_std,\n        model_a_efficiency + model_a_std,\n        color=colors[0],\n        alpha=0.2,\n    )\n    ax.plot(\n        cargo_ratios, model_b_efficiency, label=labels[1], color=colors[1], marker=markers[1]\n    )\n    ax.fill_between(\n        cargo_ratios,\n        model_b_efficiency - model_b_std,\n        model_b_efficiency + model_b_std,\n        color=colors[1],\n        alpha=0.2,\n    )\n    ax.set_xticks(xticks_values)\n    ax.set_xlim(xlim_values)\n    ax.set_title(titles[i])\n    ax.set_xlabel(xlabel_value)\n    ax.grid(True)\n\n# Adjust subplot layout\nplt.subplots_adjust(wspace=0.3)\n\naxs[0].set_yticks(yticks_values_1)\naxs[0].set_ylim(ylim_values_1)\naxs[1].set_yticks(yticks_values_2)\naxs[1].set_ylim(ylim_values_2)\naxs[2].set_yticks(yticks_values_3)\naxs[2].set_ylim(ylim_values_3)\n\n# Move legend inside the plot area\naxs[0].legend(loc=\"upper left\")\naxs[1].legend(loc=\"lower right\")\naxs[2].legend(loc=\"lower left\")\n\n# Adjust y-axis label to match reference picture\naxs[0].set_ylabel(ylabel_value)\naxs[1].set_ylabel(ylabel_value)\naxs[2].set_ylabel(ylabel_value)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_36.pdf', bbox_inches='tight')"}
{"idx": "line_37", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency as it relates to the number of cargo units. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\ncargo_units = np.arange(5, 31, 1)\nfuel_efficiency_mean = np.array(\n[\n25.2, 24.8, 24.5, 24.2, 23.9, 23.6, 23.4, 23.2, 23.0, 22.8,\n22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.1, 22.0, 21.9, 21.8,\n21.7, 21.6, 21.5, 21.4, 21.3, 21.2\n]\n)\nfuel_efficiency_std = np.array(\n[\n1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.3, 0.3, 0.3, 0.3, \n0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, \n0.3, 0.3\n]\n)\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Cargo Units\")\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\ncargo_units = np.arange(5, 31, 1)\nfuel_efficiency_mean = np.array(\n    [\n        25.2, 24.8, 24.5, 24.2, 23.9, 23.6, 23.4, 23.2, 23.0, 22.8,\n        22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.1, 22.0, 21.9, 21.8,\n        21.7, 21.6, 21.5, 21.4, 21.3, 21.2\n    ]\n)\nfuel_efficiency_std = np.array(\n    [\n        1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.3, 0.3, 0.3, 0.3, \n        0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, \n        0.3, 0.3\n    ]\n)\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Cargo Units\"\nxlim_values = [3.5, 32]\nxticks_values = np.arange(6, 31, 3)\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [20.5, 26.0]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the mean fuel efficiency with the standard deviation as a shaded area\nplt.figure(figsize=(6, 5))\nplt.plot(cargo_units, fuel_efficiency_mean, color=\"#1f77b4\")\nplt.fill_between(\n    cargo_units,\n    fuel_efficiency_mean - fuel_efficiency_std,\n    fuel_efficiency_mean + fuel_efficiency_std,\n    color=\"#1f77b4\",\n    alpha=0.2,\n)\n\n# Set x-axis to only display specific ticks and extend y-axis to leave space at top\nplt.xticks(xticks_values, fontsize=12)\nplt.yticks(fontsize=12)\nplt.xlim(xlim_values)  # Adjusted x-axis limit\nplt.ylim(ylim_values)  # Adjusted y-axis limit\n\n# Labeling the axes\nplt.xlabel(xlabel_value, fontsize=16)\nplt.ylabel(ylabel_value, fontsize=16)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('line_37.pdf', bbox_inches='tight')"}
{"idx": "line_38", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency across different models and test runs. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ntest_runs = [\"3\", \"10\", \"30\", \"100\"] # Treat test_runs as strings to make them categorical\nbaseline_efficiency = [30, 30, 30, 30]\nmodel_3 = [28, 27, 26, 29]\nmodel_5 = [27, 29, 24, 25]\nmodel_7 = [26, 27, 25, 27]\nmodel_10 = [23, 24, 23, 22]\nmodel_30 = [20, 23, 28, 21]\n\n# Axes Limits and Labels\nxlabel_value = \"# Test Runs\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_Baseline = \"Baseline\"\nlabel_3 = \"Model 3\"\nlabel_5 = \"Model 5\"\nlabel_7 = \"Model 7\"\nlabel_10 = \"Model 10\"\nlabel_30 = \"Model 30\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ntest_runs = [\"3\", \"10\", \"30\", \"100\"]  # Treat test_runs as strings to make them categorical\nbaseline_efficiency = [30, 30, 30, 30]\nmodel_3 = [28, 27, 26, 29]\nmodel_5 = [27, 29, 24, 25]\nmodel_7 = [26, 27, 25, 27]\nmodel_10 = [23, 24, 23, 22]\nmodel_30 = [20, 23, 28, 21]\n\n# Axes Limits and Labels\nxlabel_value = \"# Test Runs\"\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [0.0, 32]\nyticks_values = np.arange(0, 31, 5)\n\n# Labels\nlabel_Baseline = \"Baseline\"\nlabel_3 = \"Model 3\"\nlabel_5 = \"Model 5\"\nlabel_7 = \"Model 7\"\nlabel_10 = \"Model 10\"\nlabel_30 = \"Model 30\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nplt.figure(figsize=(7, 3))\nplt.axhline(y=30, color=\"black\", linestyle=\"--\", linewidth=1, label=label_Baseline)\nplt.plot(test_runs, model_3, \"r-\", marker=\"s\", label=label_3)\nplt.plot(test_runs, model_5, \"y-\", marker=\"s\", label=label_5)\nplt.plot(test_runs, model_7, \"k-\", marker=\"s\", label=label_7)\nplt.plot(test_runs, model_10, \"b-\", marker=\"s\", label=label_10)\nplt.plot(test_runs, model_30, \"g-\", marker=\"s\", label=label_30)\n\nplt.yticks(yticks_values, fontsize=14)\nplt.ylim(ylim_values)\n\n# Set x-axis labels equidistantly\nax = plt.gca()\nax.set_xticks(np.arange(len(test_runs)))  # Positional indexing for equidistant spacing\nax.set_xticklabels(test_runs, fontsize=14)  # Labeling x-ticks as per test_runs\n\nplt.xlabel(xlabel_value, fontsize=16)\nplt.ylabel(ylabel_value, fontsize=16)\n\nplt.legend(\n    loc=\"lower left\", ncol=3, fontsize=12, columnspacing=5\n)  # Adjusted legend settings\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout()\nplt.savefig('line_38.pdf', bbox_inches='tight')"}
{"idx": "line_39", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency across different car models at varying speeds. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for each subplot\nspeeds = [20, 40, 60, 80, 100]\nfuel_efficiency_a = [30, 28, 27, 25, 24] # Example data for Model A\nfuel_efficiency_b = [28, 26, 23, 20, 18] # Example data for Model B\nfuel_efficiency_c = [24, 22, 19, 16, 14] # Example data for Model C\nfuel_efficiency_d = [20, 18, 15, 12, 11] # Example data for Model D\n\nylabel_value = \"Fuel Efficiency (MPG)\"\n# Labels\nlabel_a = \"Model A\"\nlabel_b = \"Model B\"\nlabel_c = \"Model C\"\nlabel_d = \"Model D\"\n\n# Titles\ndatasets = [\"Dataset 1\", \"Dataset 2\", \"Dataset 3\", \"Dataset 4\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 15.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for each subplot\nspeeds = [20, 40, 60, 80, 100]\nfuel_efficiency_a = [30, 28, 27, 25, 24]  # Example data for Model A\nfuel_efficiency_b = [28, 26, 23, 20, 18]  # Example data for Model B\nfuel_efficiency_c = [24, 22, 19, 16, 14]  # Example data for Model C\nfuel_efficiency_d = [20, 18, 15, 12, 11]  # Example data for Model D\n\n# Axes Limits and Labels\nxlim_values = [15, 105]\nxticks_values = speeds\n\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [10, 35]\nyticks_values = np.arange(10, 36, 5)\n\n\n# Labels\nlabel_a = \"Model A\"\nlabel_b = \"Model B\"\nlabel_c = \"Model C\"\nlabel_d = \"Model D\"\n\n# Titles\ndatasets = [\"Dataset 1\", \"Dataset 2\", \"Dataset 3\", \"Dataset 4\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots\nfig, axs = plt.subplots(1, 4, figsize=(15, 4))\n\n# Plot data on each subplot\naxs[0].plot(speeds, fuel_efficiency_a, \"o--\", label=label_a, color=\"#4c92c3\", markersize=10)\naxs[0].plot(speeds, fuel_efficiency_b, \"^--\", label=label_b, color=\"#ff993e\", markersize=10)\naxs[0].plot(speeds, fuel_efficiency_c, \"s--\", label=label_c, color=\"#56b356\", markersize=10)\naxs[0].plot(speeds, fuel_efficiency_d, \"*--\", label=label_d, color=\"#de5253\", markersize=10)\naxs[0].set_xticks(xticks_values)\naxs[0].set_title(datasets[0], fontsize=14)\naxs[0].set_ylabel(ylabel_value, fontsize=14)\naxs[0].set_yticks(yticks_values)\naxs[0].set_ylim(ylim_values)\n\naxs[1].plot(speeds, fuel_efficiency_a, \"o--\", label=label_a, color=\"#4c92c3\", markersize=10)\naxs[1].plot(speeds, fuel_efficiency_b, \"^--\", label=label_b, color=\"#ff993e\", markersize=10)\naxs[1].plot(speeds, fuel_efficiency_c, \"s--\", label=label_c, color=\"#56b356\", markersize=10)\naxs[1].plot(speeds, fuel_efficiency_d, \"*--\", label=label_d, color=\"#de5253\", markersize=10)\naxs[1].set_xticks(xticks_values)\naxs[1].set_title(datasets[1], fontsize=14)\naxs[1].set_ylabel(ylabel_value, fontsize=14)\naxs[1].set_yticks(yticks_values)\naxs[1].set_ylim(ylim_values)\n\naxs[2].plot(speeds, fuel_efficiency_a, \"o--\", label=label_a, color=\"#4c92c3\", markersize=10)\naxs[2].plot(speeds, fuel_efficiency_b, \"^--\", label=label_b, color=\"#ff993e\", markersize=10)\naxs[2].plot(speeds, fuel_efficiency_c, \"s--\", label=label_c, color=\"#56b356\", markersize=10)\naxs[2].plot(speeds, fuel_efficiency_d, \"*--\", label=label_d, color=\"#de5253\", markersize=10)\naxs[2].set_xticks(xticks_values)\naxs[2].set_title(datasets[2], fontsize=14)\naxs[2].set_ylabel(ylabel_value, fontsize=14)\naxs[2].set_yticks(yticks_values)\naxs[2].set_ylim(ylim_values)\n\naxs[3].plot(speeds, fuel_efficiency_a, \"o--\", label=label_a, color=\"#4c92c3\", markersize=10)\naxs[3].plot(speeds, fuel_efficiency_b, \"^--\", label=label_b, color=\"#ff993e\", markersize=10)\naxs[3].plot(speeds, fuel_efficiency_c, \"s--\", label=label_c, color=\"#56b356\", markersize=10)\naxs[3].plot(speeds, fuel_efficiency_d, \"*--\", label=label_d, color=\"#de5253\", markersize=10)\naxs[3].set_xticks(xticks_values)\naxs[3].set_title(datasets[3], fontsize=14)\naxs[3].set_ylabel(ylabel_value, fontsize=14)\naxs[3].set_yticks(yticks_values)\naxs[3].set_ylim(ylim_values)\n\nplt.legend(loc=\"center\", bbox_to_anchor=(-1.6, -0.2), ncol=4, fontsize=14)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout()\nplt.savefig('line_39.pdf', bbox_inches='tight')"}
{"idx": "line_41", "instruction": "There is a reference image for you and I also have a set of data about traffic flow, fuel consumption, accident rates, and passenger counts. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated steps\ntime_steps = np.linspace(0, 24, 50) # Time of day in hours\n\n# Generating distinct trends for each line\ntraffic_flow = np.sin(time_steps * 0.5) * 100 + 500 # Sinusoidal traffic flow pattern\nfuel_consumption = np.array(time_steps) ** 2 * 0.5 + 200 # Quadratic fuel consumption\naccident_rate = np.array([153.53, 150.8, 151.96, 154.48, 153.74, 148.05, 151.9, 149.7, 149.79, 150.82, 150.29, 152.91, 151.52, 150.24, 150.89, 150.67, 152.99, 149.59, 150.63, 148.29, 144.89, 151.31, 151.73, 148.52, 154.54, 147.09, 150.09, 149.63, 153.07, 152.94, 150.31, 150.76, 148.22, 146.04, 149.3, 150.31, 152.46, 152.4, 149.23, 149.4, 147.9, 147.16, 146.59, 153.9, 148.98, 149.12, 147.49, 151.55, 146.77, 149.57]) # Random noise for accidents\npassenger_count = np.exp(0.05 * time_steps) * 20 # Exponential growth in passenger count\n\n# Simulating standard deviations for error\nstd_dev = 20\ntraffic_flow_std = np.full_like(traffic_flow, std_dev)\nfuel_consumption_std = np.full_like(fuel_consumption, std_dev)\naccident_rate_std = np.full_like(accident_rate, std_dev)\npassenger_count_std = np.full_like(passenger_count, std_dev)\n\n# Axes Limits and Labels\nxlabel_value = \"Time of Day (hours)\"\n\nylabel_value_1 = \"Traffic Flow (vehicles/hour)\"\nylabel_value_2 = \"Passenger Count (thousands)\"\n\n# Labels\nlabel_1 = \"Traffic Flow (Sinusoidal)\"\nlabel_2 = \"Fuel Consumption (Quadratic)\"\nlabel_3 = \"Accident Rate (Random Noise)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated steps\ntime_steps = np.linspace(0, 24, 50)  # Time of day in hours\n\n# Generating distinct trends for each line\ntraffic_flow = np.sin(time_steps * 0.5) * 100 + 500  # Sinusoidal traffic flow pattern\nfuel_consumption = np.array(time_steps) ** 2 * 0.5 + 200  # Quadratic fuel consumption\naccident_rate = np.array([153.53, 150.8, 151.96, 154.48, 153.74, 148.05, 151.9, 149.7, 149.79, 150.82, 150.29, 152.91, 151.52, 150.24, 150.89, 150.67, 152.99, 149.59, 150.63, 148.29, 144.89, 151.31, 151.73, 148.52, 154.54, 147.09, 150.09, 149.63, 153.07, 152.94, 150.31, 150.76, 148.22, 146.04, 149.3, 150.31, 152.46, 152.4, 149.23, 149.4, 147.9, 147.16, 146.59, 153.9, 148.98, 149.12, 147.49, 151.55, 146.77, 149.57])  # Random noise for accidents\npassenger_count = np.exp(0.05 * time_steps) * 20  # Exponential growth in passenger count\n\n# Simulating standard deviations for error\nstd_dev = 20\ntraffic_flow_std = np.full_like(traffic_flow, std_dev)\nfuel_consumption_std = np.full_like(fuel_consumption, std_dev)\naccident_rate_std = np.full_like(accident_rate, std_dev)\npassenger_count_std = np.full_like(passenger_count, std_dev)\n\n# Axes Limits and Labels\nxlabel_value = \"Time of Day (hours)\"\nxlim_values = [0, 24]\nxticks_values = np.linspace(0, 24, 9)\n\nylabel_value_1 = \"Traffic Flow (vehicles/hour)\"\nylabel_value_2 = \"Passenger Count (thousands)\"\nyticks_values_1 = np.arange(0, 1100, 200)\nyticks_values_2 = np.arange(0, 400, 40)\nylim_values_1 = [0, 1000]\nylim_values_2 = [0, 400]\n\n# Labels\nlabel_1 = \"Traffic Flow (Sinusoidal)\"\nlabel_2 = \"Fuel Consumption (Quadratic)\"\nlabel_3 = \"Accident Rate (Random Noise)\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Creating a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 8))\n\n# Plotting on the first subplot\nax1.plot(\n    time_steps, traffic_flow, \"o-\", color=\"purple\", label=label_1\n)\nax1.fill_between(\n    time_steps,\n    traffic_flow - traffic_flow_std,\n    traffic_flow + traffic_flow_std,\n    color=\"purple\",\n    alpha=0.2,\n)\n\nax1.plot(time_steps, fuel_consumption, \"s-\", color=\"blue\", label=label_2)\nax1.fill_between(\n    time_steps,\n    fuel_consumption - fuel_consumption_std,\n    fuel_consumption + fuel_consumption_std,\n    color=\"blue\",\n    alpha=0.2,\n)\n\nax2.plot(\n    time_steps,\n    accident_rate,\n    \"^--\",\n    color=\"green\",\n    markerfacecolor=(0, 0, 0, 0),\n    markeredgecolor=\"green\",\n    label=label_3,\n)\nax2.fill_between(\n    time_steps,\n    accident_rate - accident_rate_std,\n    accident_rate + accident_rate_std,\n    color=\"green\",\n    alpha=0.2,\n)\n\nax1.set_xlabel(xlabel_value, fontsize=12)\nax1.set_ylabel(ylabel_value_1, fontsize=12)\nax1.set_xticks(xticks_values)\nax1.set_yticks(yticks_values_1)\nax1.set_xlim(xlim_values)\nax1.set_ylim(ylim_values_1)\nax1.legend(loc=\"upper center\", frameon=False, ncol=2, bbox_to_anchor=(0.5, 1.15))\nax1.grid(\n    True, which=\"both\", axis=\"both\", color=\"lightgray\", linestyle=\"--\", linewidth=0.5\n)\nax1.set_facecolor(\"#f9f9f9\")\n\n# Plotting on the second subplot\nax2.plot(\n    time_steps, passenger_count, \"*-\", color=\"red\", label=\"Passenger Count (Exponential)\"\n)\nax2.fill_between(\n    time_steps,\n    passenger_count - passenger_count_std,\n    passenger_count + passenger_count_std,\n    color=\"red\",\n    alpha=0.2,\n)\nax2.set_xlabel(xlabel_value, fontsize=12)\nax2.set_ylabel(ylabel_value_2, fontsize=12)\nax2.set_xticks(xticks_values)\nax2.set_yticks(yticks_values_2)\nax2.set_xlim(xlim_values)\nax2.set_ylim(ylim_values_2)\nax2.legend(loc=\"upper center\", frameon=False, ncol=2, bbox_to_anchor=(0.5, 1.15))\nax2.grid(\n    True, which=\"both\", axis=\"both\", color=\"lightgray\", linestyle=\"--\", linewidth=0.5\n)\nax2.set_facecolor(\"#f9f9f9\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_41.pdf', bbox_inches='tight')"}
{"idx": "line_42", "instruction": "There is a reference image for you and I also have a set of data about vehicle sales over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nyears = np.array([2015, 2016, 2017, 2018, 2019])\ncar_sales = np.array([2.5, 2.8, 3.0, 3.2, 3.6]) # in millions\nbike_sales = np.array([1.0, 1.2, 1.1, 1.3, 1.5]) # in millions\nbus_sales = np.array([0.8, 0.9, 0.85, 0.9, 1.0]) # in millions\nelectric_vehicle_sales = np.poly1d(np.polyfit(years, bike_sales, 3))(\nyears\n) # Polynomial trend for electric vehicle sales based on bike sales\n\n# Axes Limits and Labels\nxlabel_value = \"Year\"\n\nylabel_value_1 = \"Sales (in millions)\"\nylabel_value_2 = \"Electric Vehicle Sales (in millions)\"\n\n# Labels\nlabel_1 = \"Car Sales\"\nlabel_2 = \"Bike Sales\"\nlabel_3 = \"Electric Vehicle Sales Trend\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nyears = np.array([2015, 2016, 2017, 2018, 2019])\ncar_sales = np.array([2.5, 2.8, 3.0, 3.2, 3.6])  # in millions\nbike_sales = np.array([1.0, 1.2, 1.1, 1.3, 1.5])  # in millions\nbus_sales = np.array([0.8, 0.9, 0.85, 0.9, 1.0])  # in millions\nelectric_vehicle_sales = np.poly1d(np.polyfit(years, bike_sales, 3))(\n    years\n)  # Polynomial trend for electric vehicle sales based on bike sales\n\n# Axes Limits and Labels\nxlabel_value = \"Year\"\n\nylabel_value_1 = \"Sales (in millions)\"\nylabel_value_2 = \"Electric Vehicle Sales (in millions)\"\nyticks_values_1 = np.arange(0, 4.1, 0.5)\nyticks_values_2 = np.arange(min(electric_vehicle_sales), max(electric_vehicle_sales) + 0.1, 0.2)\n\n# Labels\nlabel_1 = \"Car Sales\"\nlabel_2 = \"Bike Sales\"\nlabel_3 = \"Electric Vehicle Sales Trend\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# First subplot\nax1.plot(years, car_sales, \"o-\", color=\"orange\", label=label_1)\nax1.plot(years, bike_sales, \"s-\", color=\"blue\", label=label_2)\nax1.set_xlabel(xlabel_value)\nax1.set_ylabel(ylabel_value_1)\nax1.set_xticks(years)\nax1.set_yticks(yticks_values_1)\nax1.legend(loc=\"upper left\")\nax1.grid(True)\n\n# Second subplot\nax2.plot(years, bus_sales, \"^--\", color=\"green\", label=\"Bus Sales\")\nax2.plot(years, electric_vehicle_sales, \"*-m\", label=label_3)\nax2.set_xlabel(xlabel_value)\nax2.set_ylabel(ylabel_value_2)\nax2.set_xticks(years)\nax2.set_yticks(yticks_values_2)\nax2.legend(loc=\"upper right\")\nax2.grid(True)\n\n# Annotations and styling\nfor ax in (ax1, ax2):\n    ax.spines[\"left\"].set_position((\"outward\", 10))\n    ax.spines[\"bottom\"].set_position((\"outward\", 10))\n    ax.spines[\"right\"].set_color(\"none\")\n    ax.spines[\"top\"].set_color(\"none\")\nfor x, y in zip(years, car_sales):\n    ax1.annotate(\n        f\"{y:.1f}\", xy=(x, y), textcoords=\"offset points\", xytext=(0, 10), ha=\"center\"\n    )\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_42.pdf', bbox_inches='tight')"}
{"idx": "line_43", "instruction": "There is a reference image for you and I also have a set of data about transportation modes and their corresponding average travel times and delays. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Simulated data\nmodes_x = np.array(\n[\"All\", \"Car\", \"Bus\", \"Train\", \"Bike\", \"Walking\", \"E-scooter\", \"Taxi\"]\n)\ntravel_time_y = np.array([30, 35, 40, 50, 25, 20, 30, 40])\ntravel_time_err = np.array([2, 3, 1, 1, 2, 2, 3, 2])\ntravel_time_y2 = np.array(\n[32, 37, 42, 52, 27, 22, 32, 42]\n) # Adjusted data for clear spacing\ntravel_time_err2 = np.array([3, 3, 1, 2, 2, 3, 3, 4])\n\ndelay_x = np.array(\n[\"All\", \"Car\", \"Bus\", \"Train\", \"Bike\", \"Walking\", \"E-scooter\", \"Taxi\"]\n)\ndelay_y = np.array([25, 27, 30, 35, 23, 22, 25, 28])\ndelay_err = np.array([1, 2, 1, 2, 1, 1, 2, 1])\ndelay_y2 = np.array([26, 28, 32, 38, 24, 23, 26, 29]) # Adjusted data for clear spacing\ndelay_err2 = np.array([2, 3, 1, 1, 2, 2, 3, 2])\n\n# Axes Limits and Labels\nylabel_value = \"Average Travel Time (min)\"\n\n# Labels\nlabel_1 = \"Travel Time 2022\"\nlabel_2 = \"Travel Time 2023\"\nlabel_3 = \"Delay 2022\"\nlabel_4 = \"Delay 2023\"\n\n# Titles\ntitle_1 = \"Average Travel Time Results\"\ntitle_2 = \"Average Delay Results\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulated data\nmodes_x = np.array(\n    [\"All\", \"Car\", \"Bus\", \"Train\", \"Bike\", \"Walking\", \"E-scooter\", \"Taxi\"]\n)\ntravel_time_y = np.array([30, 35, 40, 50, 25, 20, 30, 40])\ntravel_time_err = np.array([2, 3, 1, 1, 2, 2, 3, 2])\ntravel_time_y2 = np.array(\n    [32, 37, 42, 52, 27, 22, 32, 42]\n)  # Adjusted data for clear spacing\ntravel_time_err2 = np.array([3, 3, 1, 2, 2, 3, 3, 4])\n\ndelay_x = np.array(\n    [\"All\", \"Car\", \"Bus\", \"Train\", \"Bike\", \"Walking\", \"E-scooter\", \"Taxi\"]\n)\ndelay_y = np.array([25, 27, 30, 35, 23, 22, 25, 28])\ndelay_err = np.array([1, 2, 1, 2, 1, 1, 2, 1])\ndelay_y2 = np.array([26, 28, 32, 38, 24, 23, 26, 29])  # Adjusted data for clear spacing\ndelay_err2 = np.array([2, 3, 1, 1, 2, 2, 3, 2])\n\n# Axes Limits and Labels\nylabel_value = \"Average Travel Time (min)\"\nylim_values = [15, 55]\nyticks_values = np.arange(15, 56, 5)\n\n# Labels\nlabel_1 = \"Travel Time 2022\"\nlabel_2 = \"Travel Time 2023\"\nlabel_3 = \"Delay 2022\"\nlabel_4 = \"Delay 2023\"\n\n# Titles\ntitle_1 = \"Average Travel Time Results\"\ntitle_2 = \"Average Delay Results\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a subplot layout of 1x2\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n\n# First subplot for Travel Time\nax1.errorbar(\n    modes_x,\n    travel_time_y,\n    yerr=travel_time_err,\n    fmt=\"o-\",\n    label=label_1,\n    color=\"#3d89be\",\n    capsize=5,\n)\nax1.errorbar(\n    modes_x,\n    travel_time_y2,\n    yerr=travel_time_err2,\n    fmt=\"^-\",\n    label=label_2,\n    color=\"#00BFFF\",\n    capsize=5,\n)\nax1.set_title(title_1)\nax1.set_xticks(modes_x)\nax1.set_xticklabels(modes_x, rotation=45, ha=\"right\", fontsize=12)\nax1.set_yticks(yticks_values)\nax1.set_ylim(ylim_values)\nax1.grid(True, which=\"both\", linestyle=\"--\", linewidth=0.5, alpha=0.5)\nax1.set_ylabel(ylabel_value, fontsize=16)\nax1.legend(loc=\"lower left\", fontsize=12)\n\n# Second subplot for Delay\nax2.errorbar(\n    delay_x,\n    delay_y,\n    yerr=delay_err,\n    fmt=\"s--\",\n    label=label_3,\n    color=\"#ff7f0e\",\n    capsize=5,\n)\nax2.errorbar(\n    delay_x,\n    delay_y2,\n    yerr=delay_err2,\n    fmt=\"o-.\",\n    label=label_4,\n    color=\"#FFA500\",\n    capsize=5,\n)\nax2.set_title(title_2)\nax2.set_xticks(delay_x)\nax2.set_xticklabels(delay_x, rotation=45, ha=\"right\", fontsize=12)\nax2.grid(True, which=\"both\", linestyle=\"--\", linewidth=0.5, alpha=0.5)\nax2.legend(loc=\"upper left\", fontsize=12)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Enhance overall layout\nplt.tight_layout()\nplt.savefig('line_43.pdf', bbox_inches='tight')"}
{"idx": "line_44", "instruction": "There is a reference image for you and I also have a set of data about vehicle fleet metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting, using random noise to add variability\nvehicles = np.array([10, 20, 30, 40, 50, 60])\nfuel_efficiency = np.array([929.81, 605.38, 824.61, 937.48, 1173.87, 740.51]) # miles per gallon\nmaintenance_cost = np.array([1156.38, 1837.66, 1945.49, 1075.16, 1687.59, 1293.34]) # dollars per year\n\n# New random data for variability\ncarbon_emissions = np.array([602.37, 352.08, 950.27, 939.01, 985.85, 417.17]) # grams per mile\noperational_costs = np.array([4112.63, 4480.05, 4914.47, 4196.63, 2845.92, 4122.12]) # dollars per year\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Vehicles\"\n\nylabel_value = \"Values\"\n\n# Labels\nlabel_Fuel_Efficiency = \"Fuel Efficiency (MPG)\"\nlabel_Maintenance_Cost = \"Maintenance Cost ($/year)\"\nlabel_Carbon_Emissions = \"Carbon Emissions (g/mile)\"\nlabel_Operational_Costs = \"Operational Costs ($/year)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting, using random noise to add variability\nvehicles = np.array([10, 20, 30, 40, 50, 60])\nfuel_efficiency = np.array([929.81, 605.38, 824.61, 937.48, 1173.87, 740.51])  # miles per gallon\nmaintenance_cost = np.array([1156.38, 1837.66, 1945.49, 1075.16, 1687.59, 1293.34])  # dollars per year\n\n# New random data for variability\ncarbon_emissions = np.array([602.37, 352.08, 950.27, 939.01, 985.85, 417.17])  # grams per mile\noperational_costs = np.array([4112.63, 4480.05, 4914.47, 4196.63, 2845.92, 4122.12])  # dollars per year\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Vehicles\"\n\nylabel_value = \"Values\"\n\n# Labels\nlabel_Fuel_Efficiency = \"Fuel Efficiency (MPG)\"\nlabel_Maintenance_Cost = \"Maintenance Cost ($/year)\"\nlabel_Carbon_Emissions = \"Carbon Emissions (g/mile)\"\nlabel_Operational_Costs = \"Operational Costs ($/year)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Plot the data using different styles and colors\nplt.plot(\n    vehicles,\n    fuel_efficiency,\n    \"o-\",\n    color=\"#1f77b4\",\n    label=label_Fuel_Efficiency,\n    markerfacecolor=\"#1f77b4\",\n    markersize=8,\n    linewidth=2,\n)\nplt.plot(\n    vehicles,\n    maintenance_cost,\n    \"x-\",\n    color=\"#ff7f0e\",\n    label=label_Maintenance_Cost,\n    markersize=8,\n    linewidth=2,\n)\nplt.plot(\n    vehicles,\n    carbon_emissions,\n    \"s--\",\n    color=\"green\",\n    label=label_Carbon_Emissions,\n    markersize=8,\n    linewidth=2,\n)\nplt.plot(\n    vehicles,\n    operational_costs,\n    \"^-\",\n    color=\"purple\",\n    label=label_Operational_Costs,\n    markersize=8,\n    linewidth=2,\n)\n\n# Customize the x and y axes limits and labels\nplt.xlabel(xlabel_value, fontsize=14)\nplt.ylabel(ylabel_value, fontsize=14)\nplt.xticks(vehicles, labels=[str(v) for v in vehicles])  # Ensuring x-ticks match the vehicle numbers\nplt.xlim(\n    left=vehicles[0] * 0.9, right=vehicles[-1] * 1.1\n)  # Set x-axis limits to prevent cutting off data points\nplt.ylim(\n    bottom=0, top=max(fuel_efficiency.max(), maintenance_cost.max(), carbon_emissions.max(), operational_costs.max()) * 1.1\n)  # Extend y-axis to leave some space above and below the data\n\n# Adjust the legend position\nplt.legend(bbox_to_anchor=(1, 0.5), fontsize=12, frameon=True)\n\n# Add grid lines for better readability\nplt.grid(True, which=\"both\", ls=\"--\", color=\"grey\", linewidth=1, alpha=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and save the plot\nplt.tight_layout()\nplt.savefig('line_44.pdf', bbox_inches='tight')"}
{"idx": "line_45", "instruction": "There is a reference image for you and I also have a set of data about vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate distinct data sets for each subplot\nvehicles = np.array([10, 20, 30, 40, 50, 60])\ndatasets = {\n\"Speed\": np.linspace(600, 800, len(vehicles)), # mph\n\"Fuel Efficiency\": np.linspace(1000, 650, len(vehicles)), # mpg\n\"Carbon Emissions\": np.linspace(700, 800, len(vehicles)), # g/mile\n\"Maintenance Cost\": np.linspace(1000, 800, len(vehicles)), # $/year\n}\n\n# Assign each dataset to a subplot\nplot_order = [\"Speed\", \"Fuel Efficiency\", \"Carbon Emissions\", \"Maintenance Cost\"]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Vehicles\"\nylabel_value = \"Metrics\"\n\n# Text\ntext = \"Peak Performance\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate distinct data sets for each subplot\nvehicles = np.array([10, 20, 30, 40, 50, 60])\ndatasets = {\n    \"Speed\": np.linspace(600, 800, len(vehicles)),  # mph\n    \"Fuel Efficiency\": np.linspace(1000, 650, len(vehicles)),  # mpg\n    \"Carbon Emissions\": np.linspace(700, 800, len(vehicles)),  # g/mile\n    \"Maintenance Cost\": np.linspace(1000, 800, len(vehicles)),  # $/year\n}\n\n# Assign each dataset to a subplot\nplot_order = [\"Speed\", \"Fuel Efficiency\", \"Carbon Emissions\", \"Maintenance Cost\"]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Vehicles\"\nylabel_value = \"Metrics\"\n\n# Text\ntext = \"Peak Performance\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size and define colors, markers, and linestyles\nfig, axs = plt.subplots(2, 2, figsize=(12, 8))  # Use a 2x2 subplot grid\ncolors = [\"deepskyblue\", \"magenta\", \"limegreen\", \"orange\"]\nmarkers = [\"o\", \"s\", \"^\", \"d\"]\nlinestyles = [\"-\", \"--\", \":\", \"-.\"]\n\n# Plot data in each subplot\nfor i, (ax, key) in enumerate(zip(axs.flat, plot_order)):\n    for j, data_key in enumerate(plot_order):\n        if key == data_key:\n            ax.plot(\n                vehicles,\n                datasets[data_key],\n                linestyle=linestyles[j],\n                marker=markers[j],\n                color=colors[j],\n                label=data_key,\n                markersize=8,\n            )\n        else:\n            ax.plot(\n                vehicles,\n                datasets[data_key],\n                linestyle=linestyles[j],\n                marker=markers[j],\n                color=colors[j],\n                label=data_key,\n                markersize=8,\n                alpha=0.8,\n            )  # Faded other lines\n\n    ax.set_xlabel(xlabel_value)\n    ax.set_ylabel(ylabel_value)\n    ax.set_ylim([500, 1200])  \n    ax.set_title(f\"Graph Variation {i+1}\")\n    ax.legend()\n\n    # Annotations to explain features, only on primary dataset for clarity\n    ax.annotate(\n        text,\n        xy=(vehicles[-2], datasets[key][-2]),\n        xytext=(vehicles[-4], datasets[key][-2] * 1.1),\n        arrowprops=dict(arrowstyle=\"->\", color=\"navy\"),\n        textcoords=\"data\",\n    )\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap and ensure clarity\nplt.tight_layout()\nplt.savefig('line_45.pdf', bbox_inches='tight')"}
{"idx": "line_47", "instruction": "There is a reference image for you and I also have a set of data about performance metrics over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate new data representing different types of performance metrics over time\ntime_points = np.linspace(0, 12, 100) # Representing time in months\n\n# Different performance data\nperformance_standard = 0.05 * time_points # Linear increase\nperformance_innovation = 0.5 * np.sin(0.5 * np.pi * time_points / 12) + 0.5 # Sinusoidal with increasing trend\n\n# Calculate uncertainty bounds for visual emphasis\nupper_bound_standard = performance_standard + 0.05\nlower_bound_standard = performance_standard - 0.05\nupper_bound_innovation = performance_innovation + 0.1\nlower_bound_innovation = performance_innovation - 0.1\n\n# Axes Limits and Labels\nxlabel_value = \"Time (Months)\"\n\nylabel_value = \"Performance Index\"\n\n# Labels\nlabel_1 = \"Standard Performance\"\nlabel_2 = \"Innovative Performance\"\n\n# Title\ntitle = \"Comparative Performance Analysis Over Time\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate new data representing different types of performance metrics over time\ntime_points = np.linspace(0, 12, 100)  # Representing time in months\n\n# Different performance data\nperformance_standard = 0.05 * time_points  # Linear increase\nperformance_innovation = 0.5 * np.sin(0.5 * np.pi * time_points / 12) + 0.5  # Sinusoidal with increasing trend\n\n# Calculate uncertainty bounds for visual emphasis\nupper_bound_standard = performance_standard + 0.05\nlower_bound_standard = performance_standard - 0.05\nupper_bound_innovation = performance_innovation + 0.1\nlower_bound_innovation = performance_innovation - 0.1\n\n# Axes Limits and Labels\nxlabel_value = \"Time (Months)\"\nxticks_values = np.arange(0, 13, 1)\n\nylabel_value = \"Performance Index\"\nylim_values = [0, 1.1]\nyticks_values = np.linspace(0, 1, 6)\n\n# Labels\nlabel_1 = \"Standard Performance\"\nlabel_2 = \"Innovative Performance\"\n\n# Title\ntitle = \"Comparative Performance Analysis Over Time\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size and create a single plot\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the standard performance with filled uncertainty\nax.fill_between(\n    time_points,\n    lower_bound_standard,\n    upper_bound_standard,\n    color=\"lightblue\",\n    alpha=0.3,\n)\nax.plot(\n    time_points,\n    performance_standard,\n    label=label_1,\n    color=\"blue\",\n    linestyle=\"-\",\n    linewidth=2,\n)\n\n# Plot the innovative performance with filled uncertainty\nax.fill_between(\n    time_points,\n    lower_bound_innovation,\n    upper_bound_innovation,\n    color=\"lightcoral\",\n    alpha=0.3,\n)\nax.plot(\n    time_points,\n    performance_innovation,\n    label=label_2,\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=2,\n)\n\n# Customize the axes and grid\nax.set_title(title)\nax.set_xlabel(xlabel_value, fontsize=14)\nax.set_ylabel(ylabel_value, fontsize=14)\nax.set_ylim(ylim_values)\nax.set_xticks(xticks_values)\nax.set_yticks(yticks_values)\n\n# Add a legend to the plot\nax.legend(loc=\"upper right\", frameon=True, fontsize=12)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Enhance layout and display\nplt.tight_layout()\nplt.savefig('line_47.pdf', bbox_inches='tight')"}
{"idx": "line_48", "instruction": "There is a reference image for you and I also have a set of data about monthly sales and average temperature. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate new data for a complex scenario\nmonths = np.arange(1, 13, 1) # Months of the year\nsales = np.array([1074.41, 1157.59, 1101.38, 1072.44, 1011.83, 1122.95, 1018.79, 1245.89, 1281.83, 991.72, 1195.86, 1064.45]) # Simulate monthly sales with a uniform distribution\ntemperature = 10 + 15 * np.sin(2 * np.pi * (months - 3) / 12) # Simulate average monthly temperature with a phase shift\n\n# Axes Limits and Labels\nxlabel_value = \"Month\"\nylabel_value_1 = \"Sales\"\nylabel_value_2 = \"Temperature (\u00b0C)\"\n\n# Labels\nlabel_1 = \"Monthly Sales\"\nlabel_2 = \"Average Temperature\"\n\n# Titles\ntitle = \"Sales and Temperature Correlation Over a Year\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate new data for a complex scenario\nmonths = np.arange(1, 13, 1)  # Months of the year\nsales = np.array([1074.41, 1157.59, 1101.38, 1072.44, 1011.83, 1122.95, 1018.79, 1245.89, 1281.83, 991.72, 1195.86, 1064.45])  # Simulate monthly sales with a uniform distribution\ntemperature = 10 + 15 * np.sin(2 * np.pi * (months - 3) / 12)  # Simulate average monthly temperature with a phase shift\n\n# Axes Limits and Labels\nxlabel_value = \"Month\"\nylabel_value_1 = \"Sales\"\nylabel_value_2 = \"Temperature (\u00b0C)\"\n\n# Labels\nlabel_1 = \"Monthly Sales\"\nlabel_2 = \"Average Temperature\"\n\n# Titles\ntitle = \"Sales and Temperature Correlation Over a Year\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the main figure and axis\nfig, ax1 = plt.subplots(figsize=(10, 6))\n\n# Plot sales data with primary axis\ncolor = \"tab:blue\"\nax1.set_xlabel(xlabel_value)\nax1.set_ylabel(ylabel_value_1, color=color)\nax1.plot(months, sales, label=label_1, color=color, marker=\"o\", linestyle=\"-\")\nax1.tick_params(axis=\"y\", labelcolor=color)\nax1.set_xticks(months)\nax1.set_title(title)\n\n# Create a second y-axis for temperature\nax2 = ax1.twinx()  # Instantiate a second axes that shares the same x-axis\ncolor = \"tab:red\"\nax2.set_ylabel(ylabel_value_2, color=color)  # We already handled the x-label with ax1\nax2.plot(months, temperature, label=label_2, color=color, marker=\"s\", linestyle=\"--\")\nax2.tick_params(axis=\"y\", labelcolor=color)\n\n# Add legends to the plot\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc=\"upper left\", frameon=True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\nplt.savefig('line_48.pdf', bbox_inches='tight')"}
{"idx": "line_50", "instruction": "There is a reference image for you and I also have a set of data about time series analysis. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate different datasets for each subplot\nx = np.linspace(0, 20, 20)\n\n# Generate original data with some noise\ndata_1 = np.sin(x) + np.array([0.18, 0.91, 0.96, 0.21, -0.69, -0.95, 0.13, 0.87, 0.83, -0.01, -0.88, -0.69, 0.14, 0.91, 0.87, -0.05, -0.76, -0.84, 0.13, 0.83]) # Original data with noise\ndata_2 = np.cos(x) + np.array([0.74, 0.56, -0.42, -1.07, -0.25, 0.38, 1.0, 0.45, -0.38, -0.85, -0.44, 0.59, 0.91, 0.24, -0.6, -0.98, -0.3, 0.7, 0.96, 0.38]) # Different data with noise\ndata_3 = np.tan(x) + np.array([0.74, 0.56, -0.42, -1.07, -0.25, 0.38, 1.0, 0.45, -0.38, -0.85, -0.44, 0.59, 0.91, 0.24, -0.6, -0.98, -0.3, 0.7, 0.96, 0.38]) # Another dataset with noise\n\n# Compute smoothed data using convolution with a moving average filter\nsmoothed_data = np.convolve(data_1, np.ones(5) / 5, mode=\"valid\")\n\n# Compute the difference of the second dataset\ndifference_data = np.diff(data_2)\n\n# Compute the cumulative sum of the third dataset\ncumulative_data = np.cumsum(data_3)\n\n# Axes Limits and Labels\nxlabel_value = \"Time\"\nylabel_value_1 = \"Value\"\nylabel_value_2 = \"Delta Value\"\nylabel_value_3 = \"Cumulative Value\"\n\n# Labels for the plots\nlabel_1 = \"Smoothed Data\"\nlabel_2 = \"Difference Data\"\nlabel_3 = \"Cumulative Sum\"\n\n# Titles for the subplots\ntitle_1 = \"Smoothed Representation\"\ntitle_2 = \"First Difference of Data\"\ntitle_3 = \"Cumulative Sum Over Time\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate different datasets for each subplot\nx = np.linspace(0, 20, 20)\n\n# Generate original data with some noise\ndata_1 = np.sin(x) + np.array([0.18, 0.91, 0.96, 0.21, -0.69, -0.95, 0.13, 0.87, 0.83, -0.01, -0.88, -0.69, 0.14, 0.91, 0.87, -0.05, -0.76, -0.84, 0.13, 0.83])  # Original data with noise\ndata_2 = np.cos(x) + np.array([0.74, 0.56, -0.42, -1.07, -0.25, 0.38, 1.0, 0.45, -0.38, -0.85, -0.44, 0.59, 0.91, 0.24, -0.6, -0.98, -0.3, 0.7, 0.96, 0.38])  # Different data with noise\ndata_3 = np.tan(x) + np.array([0.74, 0.56, -0.42, -1.07, -0.25, 0.38, 1.0, 0.45, -0.38, -0.85, -0.44, 0.59, 0.91, 0.24, -0.6, -0.98, -0.3, 0.7, 0.96, 0.38])  # Another dataset with noise\n\n# Compute smoothed data using convolution with a moving average filter\nsmoothed_data = np.convolve(data_1, np.ones(5) / 5, mode=\"valid\")\n\n# Compute the difference of the second dataset\ndifference_data = np.diff(data_2)\n\n# Compute the cumulative sum of the third dataset\ncumulative_data = np.cumsum(data_3)\n\n# Axes Limits and Labels\nxlabel_value = \"Time\"\nylabel_value_1 = \"Value\"\nylabel_value_2 = \"Delta Value\"\nylabel_value_3 = \"Cumulative Value\"\n\n# Labels for the plots\nlabel_1 = \"Smoothed Data\"\nlabel_2 = \"Difference Data\"\nlabel_3 = \"Cumulative Sum\"\n\n# Titles for the subplots\ntitle_1 = \"Smoothed Representation\"\ntitle_2 = \"First Difference of Data\"\ntitle_3 = \"Cumulative Sum Over Time\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a 3-subplot layout\nfig, axs = plt.subplots(3, 1, figsize=(5, 10))\n\n# First subplot: Smoothed Data\naxs[0].plot(\n    x[2:-2],  # Adjusting x to match the valid mode of the convolution\n    smoothed_data,\n    label=label_1,\n    color=\"purple\",\n    linestyle=\"-\",\n    marker=\"o\",\n)\naxs[0].set_title(title_1)\naxs[0].set_ylabel(ylabel_value_1)\naxs[0].legend(loc=\"upper right\")\naxs[0].grid(True, linestyle=\"--\", alpha=0.5)\n\n# Second subplot: Difference Data\naxs[1].plot(\n    x[1:],  # Adjusting x to match the length of the difference data\n    difference_data,\n    label=label_2,\n    color=\"orange\",\n    linestyle=\"-\",\n    marker=\"x\",\n)\naxs[1].set_title(title_2)\naxs[1].set_ylabel(ylabel_value_2)\naxs[1].legend(loc=\"upper right\")\naxs[1].grid(True, linestyle=\"--\", alpha=0.5)\n\n# Third subplot: Cumulative Sum\naxs[2].plot(\n    x,\n    cumulative_data,\n    label=label_3,\n    color=\"green\",\n    linestyle=\"-\",\n    marker=\"s\",\n)\naxs[2].set_title(title_3)\naxs[2].set_xlabel(xlabel_value)\naxs[2].set_ylabel(ylabel_value_3)\naxs[2].legend(loc=\"upper right\")\naxs[2].grid(True, linestyle=\"--\", alpha=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Save the plot\nplt.savefig('line_50.pdf', bbox_inches='tight')"}
{"idx": "line_52", "instruction": "There is a reference image for you and I also have a set of data about plant growth over days. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for four different scenarios\n# Scenario 1: Sensor readings over time\ntime1 = np.array([1, 2, 3, 4, 5])\nsensor_readings = np.array([20, 21, 19, 22, 20])\nsensor_errors = np.array([1, 0.5, 1.5, 1, 0.8])\n\n# Scenario 2: Temperature measurements at different altitudes\naltitudes = np.array([100, 200, 300, 400])\ntemperatures = np.array([15, 14, 13, 12])\ntemp_errors = np.array([0.5, 0.3, 0.4, 0.6])\n\n# Scenario 3: Sales over different months\nmonths = np.array([1, 2, 3, 4, 5, 6])\nsales = np.array([150, 160, 155, 165, 170, 175])\nsales_errors = np.array([10, 5, 7, 6, 8, 9])\n\n# Scenario 4: Growth of a plant over days\ndays = np.array([1, 3, 5, 7, 9])\nplant_growth = np.array([2, 2.5, 3, 3.5, 4])\ngrowth_errors = np.array([0.2, 0.3, 0.25, 0.3, 0.2])\n\n# Titles for each subplot\ntitles = [\n\"Sensor Readings Over Time\",\n\"Temperature Measurements at Different Altitudes\",\n\"Sales Over Six Months\",\n\"Plant Growth Over Days\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for four different scenarios\n# Scenario 1: Sensor readings over time\ntime1 = np.array([1, 2, 3, 4, 5])\nsensor_readings = np.array([20, 21, 19, 22, 20])\nsensor_errors = np.array([1, 0.5, 1.5, 1, 0.8])\n\n# Scenario 2: Temperature measurements at different altitudes\naltitudes = np.array([100, 200, 300, 400])\ntemperatures = np.array([15, 14, 13, 12])\ntemp_errors = np.array([0.5, 0.3, 0.4, 0.6])\n\n# Scenario 3: Sales over different months\nmonths = np.array([1, 2, 3, 4, 5, 6])\nsales = np.array([150, 160, 155, 165, 170, 175])\nsales_errors = np.array([10, 5, 7, 6, 8, 9])\n\n# Scenario 4: Growth of a plant over days\ndays = np.array([1, 3, 5, 7, 9])\nplant_growth = np.array([2, 2.5, 3, 3.5, 4])\ngrowth_errors = np.array([0.2, 0.3, 0.25, 0.3, 0.2])\n\n# Titles for each subplot\ntitles = [\n    \"Sensor Readings Over Time\",\n    \"Temperature Measurements at Different Altitudes\",\n    \"Sales Over Six Months\",\n    \"Plant Growth Over Days\",\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create 2x2 subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Flatten the axis array for easy iteration\naxs = axs.flatten()\n\n# Setting data for each subplot\ndata = [\n    (time1, sensor_readings, sensor_errors),\n    (altitudes, temperatures, temp_errors),\n    (months, sales, sales_errors),\n    (days, plant_growth, growth_errors),\n]\n\n# Plot with error bars in each subplot\nfor ax, (x, y, e), title in zip(axs, data, titles):\n    ax.errorbar(\n        x, y, yerr=e, fmt=\"-o\", color=\"blue\", ecolor=\"red\", capsize=5, markersize=6\n    )\n    ax.set_title(title, fontsize=14)\n    ax.grid(True, alpha=0.5)\n    ax.set_xticks(x)\n    ax.set_yticks(np.linspace(min(y) - max(e), max(y) + max(e), num=5, endpoint=True))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('line_52.pdf', bbox_inches='tight')"}
{"idx": "line_53", "instruction": "There is a reference image for you and I also have a set of data about transportation and commute statistics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Enhanced sample data to accommodate more subplots\nx1 = np.array([2015, 2016, 2017, 2018, 2019])\ny1 = np.array([1043.64, 1187.68, 1133.0, 1099.66, 989.0]) # Vehicle Miles Traveled (in billions)\ne1 = np.array([24.68, 21.74, 45.99, 38.03, 41.24])\n\nx2 = np.array([2015, 2016, 2017, 2018])\ny2 = np.array([229.96, 276.06, 258.56, 247.89]) # Public Transport Ridership (in millions)\ne2 = np.array([18.12, 18.12, 16.16, 32.32])\n\nx3 = np.array([2010, 2012, 2014, 2016, 2018, 2020])\ny3 = np.array([15.62, 24.26, 20.98, 18.98, 12.34, 12.34]) # Electric Vehicle Adoption Rate (in %)\ne3 = np.array([0.34, 0.91, 0.72, 0.8, 0.31, 0.98])\n\nx4 = np.array([5, 10, 15, 20, 25])\ny4 = np.array([35.62, 44.26, 40.98, 38.98, 32.34]) # Average Commute Time (in minutes)\ne4 = np.array([1.47, 1.17, 3.6, 2.8, 3.12])\n\nx5 = np.array([1, 2, 3, 4, 5])\ny5 = np.array([74.98, 98.03, 89.28, 83.95, 66.24]) # Number of Traffic Accidents (in thousands)\ne5 = np.array([3.78, 3.29, 7.33, 6.01, 6.54])\n\nx6 = np.array([200, 400, 600, 800, 1000])\ny6 = np.array([187.45, 245.07, 223.2, 209.87, 165.6]) # Bicycle Lane Miles (in miles)\ne6 = np.array([6.56, 5.58, 13.66, 11.01, 12.08])\n\n# Titles\ntitles = [\n\"Vehicle Miles Traveled\",\n\"Public Transport Ridership\",\n\"Electric Vehicle Adoption\",\n\"Average Commute Time\",\n\"Traffic Accidents\",\n\"Bicycle Lane Miles\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(42)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Enhanced sample data to accommodate more subplots\nx1 = np.array([2015, 2016, 2017, 2018, 2019])\ny1 = np.array([1043.64, 1187.68, 1133.0, 1099.66, 989.0])  # Vehicle Miles Traveled (in billions)\ne1 = np.array([24.68, 21.74, 45.99, 38.03, 41.24])\n\nx2 = np.array([2015, 2016, 2017, 2018])\ny2 = np.array([229.96, 276.06, 258.56, 247.89])  # Public Transport Ridership (in millions)\ne2 = np.array([18.12, 18.12, 16.16, 32.32])\n\nx3 = np.array([2010, 2012, 2014, 2016, 2018, 2020])\ny3 = np.array([15.62, 24.26, 20.98, 18.98, 12.34, 12.34])  # Electric Vehicle Adoption Rate (in %)\ne3 = np.array([0.34, 0.91, 0.72, 0.8, 0.31, 0.98])\n\nx4 = np.array([5, 10, 15, 20, 25])\ny4 = np.array([35.62, 44.26, 40.98, 38.98, 32.34])  # Average Commute Time (in minutes)\ne4 = np.array([1.47, 1.17, 3.6, 2.8, 3.12])\n\nx5 = np.array([1, 2, 3, 4, 5])\ny5 = np.array([74.98, 98.03, 89.28, 83.95, 66.24])  # Number of Traffic Accidents (in thousands)\ne5 = np.array([3.78, 3.29, 7.33, 6.01, 6.54])\n\nx6 = np.array([200, 400, 600, 800, 1000])\ny6 = np.array([187.45, 245.07, 223.2, 209.87, 165.6])  # Bicycle Lane Miles (in miles)\ne6 = np.array([6.56, 5.58, 13.66, 11.01, 12.08])\n\n# Titles\ntitles = [\n    \"Vehicle Miles Traveled\",\n    \"Public Transport Ridership\",\n    \"Electric Vehicle Adoption\",\n    \"Average Commute Time\",\n    \"Traffic Accidents\",\n    \"Bicycle Lane Miles\",\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create 2x3 subplots for a unified visual presentation\nfig, axs = plt.subplots(2, 3, figsize=(12, 8))\n\ncolors = [\"red\", \"green\", \"blue\", \"purple\", \"magenta\", \"cyan\"]\n\ndata_pairs = [\n    (x1, y1, e1),\n    (x2, y2, e2),\n    (x3, y3, e3),\n    (x4, y4, e4),\n    (x5, y5, e5),\n    (x6, y6, e6),\n]\n\nfor ax, (x, y, e), title, color in zip(axs.flat, data_pairs, titles, colors):\n    ax.errorbar(\n        x, y, yerr=e, fmt=\"-o\", color=color, ecolor=\"lightgray\", capsize=5, label=title\n    )\n    ax.set_title(title)\n    ax.set_xticks(x)\n    ax.set_ylim(min(y) - min(e) - 10, max(y) + max(e) + 10)\n    ax.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to ensure no overlap and labels are clearly visible\nplt.tight_layout()\nplt.savefig('line_53.pdf', bbox_inches='tight')"}
{"idx": "line_54", "instruction": "There is a reference image for you and I also have a set of data about modes of transport and their fuel efficiency under different conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmodes_of_transport = [\"Car\", \"Bus\", \"Bicycle\", \"Train\"]\nfuel_efficiency_city = [25, 8, 2, 50] # MPG for city conditions\nfuel_efficiency_highway = [35, 12, 2, 67] # MPG for highway conditions\nfuel_efficiency_rural = [30, 10, 3, 60] # MPG for rural conditions\nfuel_efficiency_urban = [22, 7, 3, 45] # MPG for urban conditions\nerror = [2, 1, 0.5, 3] # Error margins\n\n# Axes Limits and Labels\nxlabel_value = \"Mode of Transport\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Titles\ntitles = [\"City vs Highway\", \"Rural vs Urban\", \"Highway vs Rural\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodes_of_transport = [\"Car\", \"Bus\", \"Bicycle\", \"Train\"]\nfuel_efficiency_city = [25, 8, 2, 50]  # MPG for city conditions\nfuel_efficiency_highway = [35, 12, 2, 67]  # MPG for highway conditions\nfuel_efficiency_rural = [30, 10, 3, 60]  # MPG for rural conditions\nfuel_efficiency_urban = [22, 7, 3, 45]  # MPG for urban conditions\nerror = [2, 1, 0.5, 3]  # Error margins\n\n# Axes Limits and Labels\nxlabel_value = \"Mode of Transport\"\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [0, 90]\n\n# Titles\ntitles = [\"City vs Highway\", \"Rural vs Urban\", \"Highway vs Rural\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a 1x3 subplot layout\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Titles and setup for subplots\ndata_pairs = [\n    (fuel_efficiency_city, fuel_efficiency_highway),\n    (fuel_efficiency_rural, fuel_efficiency_urban),\n    (fuel_efficiency_highway, fuel_efficiency_rural),\n]\ncolors_pairs = [(\"black\", \"red\"), (\"blue\", \"green\"), (\"red\", \"blue\")]\n\n# Plot each condition in a separate subplot\nfor ax, title, (data1, data2), (color1, color2) in zip(axs, titles, data_pairs, colors_pairs):\n    ax.errorbar(\n        modes_of_transport,\n        data1,\n        yerr=error,\n        fmt=\"o-\",\n        color=color1,\n        ecolor=color1,\n        elinewidth=2,\n        capsize=5,\n        capthick=2,\n        label=f'{title.split(\" vs \")[0]}',\n    )\n    ax.errorbar(\n        modes_of_transport,\n        data2,\n        yerr=error,\n        fmt=\"s-\",\n        color=color2,\n        ecolor=color2,\n        elinewidth=2,\n        capsize=5,\n        capthick=2,\n        label=f'{title.split(\" vs \")[1]}',\n    )\n    ax.set_xlabel(xlabel_value)\n    ax.set_ylabel(ylabel_value)\n    ax.tick_params(\n        axis=\"both\", which=\"major\", length=5, direction=\"in\", top=True, right=True\n    )\n    ax.legend(loc=\"upper right\", frameon=True)\n    ax.set_ylim(ylim_values)\n    ax.grid(True, which=\"major\", linestyle=\"--\", linewidth=0.5, alpha=0.5)\n    ax.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('line_54.pdf', bbox_inches='tight')"}
{"idx": "line_55", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated data for transportation metrics\nn_aug = [\"0\", \"0.125\", \"0.25\", \"0.5\", \"1\", \"2\", \"4\", \"8\"]\nfuel_efficiency = np.array([15, 18, 22, 28, 35, 23, 13, 15]) # Dynamic changes\nsafety_rating = np.array([13, 13.5, 14, 15.5, 4.8, 4.6, 14.3, 4]) # Smooth increase then slight decrease\ncomfort_level = np.array([12, 13, 14, 5, 14, 15, 4, 13]) # Peak in the middle\n\n# Axes Limits and Labels\nxlabel_value = \"Technology Augmentation Level (n$_{aug}$)\"\n\nylabel_value = \"Performance Gain (%)\"\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_safety_rating = \"Safety Rating\"\nlabel_comfort_level = \"Comfort Level\"\n\n# Titles\ntitle = \"Performance Gain Across Different Levels of Technological Augmentation\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated data for transportation metrics\nn_aug = [\"0\", \"0.125\", \"0.25\", \"0.5\", \"1\", \"2\", \"4\", \"8\"]\nfuel_efficiency = np.array([15, 18, 22, 28, 35, 23, 13, 15])  # Dynamic changes\nsafety_rating = np.array([13, 13.5, 14, 15.5, 4.8, 4.6, 14.3, 4])  # Smooth increase then slight decrease\ncomfort_level = np.array([12, 13, 14, 5, 14, 15, 4, 13])  # Peak in the middle\n\n# Axes Limits and Labels\nxlabel_value = \"Technology Augmentation Level (n$_{aug}$)\"\nxlim_values = [0, len(n_aug) - 1]\n\nylabel_value = \"Performance Gain (%)\"\nylim_values = [0, max(fuel_efficiency) + 5]\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_safety_rating = \"Safety Rating\"\nlabel_comfort_level = \"Comfort Level\"\n\n# Titles\ntitle = \"Performance Gain Across Different Levels of Technological Augmentation\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(8, 3))\nax.plot(\n    n_aug, fuel_efficiency, \"o-\", label=label_fuel_efficiency, color=\"royalblue\", linewidth=2, markersize=8\n)\nax.plot(\n    n_aug,\n    safety_rating,\n    \"s--\",\n    label=label_safety_rating,\n    color=\"crimson\",\n    linewidth=2,\n    markersize=8,\n)\nax.plot(\n    n_aug,\n    comfort_level,\n    \"^:\",\n    label=label_comfort_level,\n    color=\"limegreen\",\n    linewidth=2,\n    markersize=8,\n)\n\n# Enhancements for visual appeal\nax.set_facecolor(\"#e6f0ff\")  # Light blue background\nax.spines[\"top\"].set_color(\"none\")\nax.spines[\"right\"].set_color(\"none\")\nax.spines[\"left\"].set_color(\"gray\")\nax.spines[\"bottom\"].set_color(\"gray\")\n\n# Setting axis limits and ticks dynamically based on data\nax.set_ylim(ylim_values)\nax.set_xlim(xlim_values)\n\n# Customizing labels and grid\nax.set_xlabel(xlabel_value, fontsize=14)\nax.set_ylabel(ylabel_value, fontsize=14)\nax.set_title(title, fontsize=16)\n\n# Custom legend\nax.legend(loc=\"upper right\", fontsize=12, frameon=True, shadow=True)\n\n# Grid\nax.grid(True, linestyle=\"--\", alpha=0.5, color=\"grey\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Tight layout for better spacing\nplt.tight_layout()\nplt.savefig('line_55.pdf', bbox_inches='tight')"}
{"idx": "line_56", "instruction": "There is a reference image for you and I also have a set of data about vehicle efficiency and electric range metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data setup\noptimization_levels = np.array([0, 20, 40, 60, 80])\ncity_mpg = np.array([20, 55, 68, 70, 82])\nhighway_mpg = np.array([25, 55, 64, 77, 80])\ncombined_mpg = np.array([72, 107, 150, 173, 286])\nelectric_range = np.array([50, 100, 150, 200, 250])\n\n# Axes Limits and Labels\nxlabel_value = \"Engine Optimization Level\"\nylabel_value = \"Efficiency / Range\"\n\n# Labels\nlabel_city_mpg = \"City MPG\"\nlabel_highway_mpg = \"Highway MPG\"\nlabel_combined_mpg = \"Combined MPG\"\nlabel_electric_range = \"Electric Range (miles)\"\n\n# Titles\ntitle_city_highway = \"City vs Highway MPG\"\ntitle_combined_electric = \"Combined MPG vs Electric Range\"\ntitle_all = \"All Metrics\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define a custom color palette\ncolors = [\"#e74c3c\", \"#3498db\", \"#2ecc71\", \"#f39c12\", \"#9b59b6\"]\n\n# Data setup\noptimization_levels = np.array([0, 20, 40, 60, 80])\ncity_mpg = np.array([20, 55, 68, 70, 82])\nhighway_mpg = np.array([25, 55, 64, 77, 80])\ncombined_mpg = np.array([72, 107, 150, 173, 286])\nelectric_range = np.array([50, 100, 150, 200, 250])\n\n# Axes Limits and Labels\nxlabel_value = \"Engine Optimization Level\"\nxlim_values = [-5, 85]\nylabel_value = \"Efficiency / Range\"\nylim_values = [0, 260]\n\n# Labels\nlabel_city_mpg = \"City MPG\"\nlabel_highway_mpg = \"Highway MPG\"\nlabel_combined_mpg = \"Combined MPG\"\nlabel_electric_range = \"Electric Range (miles)\"\n\n# Titles\ntitle_city_highway = \"City vs Highway MPG\"\ntitle_combined_electric = \"Combined MPG vs Electric Range\"\ntitle_all = \"All Metrics\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the 1x3 subplot configuration\nfig, axs = plt.subplots(1, 3, figsize=(9, 3))\n\n# Plot customization for a fancy look\nmarker_styles = [\"o\", \"^\", \"s\", \"x\"]\nline_styles = [\"-\", \"--\", \":\", \"-.\"]\n\n# First subplot for city and highway mpg\naxs[0].plot(\n    optimization_levels,\n    city_mpg,\n    label=label_city_mpg,\n    color=colors[0],\n    marker=marker_styles[0],\n    linestyle=line_styles[0],\n    markersize=10,\n    linewidth=2,\n)\n\naxs[0].set_title(title_city_highway, fontsize=14)\naxs[0].set_xlabel(xlabel_value, fontsize=12)\naxs[0].set_ylabel(ylabel_value, fontsize=12)\n\n# Second subplot for combined mpg and electric range\naxs[1].plot(\n    optimization_levels,\n    highway_mpg,\n    label=label_highway_mpg,\n    color=colors[1],\n    marker=marker_styles[1],\n    linestyle=line_styles[1],\n    markersize=10,\n    linewidth=2,\n)\naxs[1].set_title(title_combined_electric, fontsize=14)\naxs[1].set_xlabel(xlabel_value, fontsize=12)\naxs[1].set_ylabel(ylabel_value, fontsize=12)\n\n# Third subplot for all metrics\naxs[2].plot(\n    optimization_levels,\n    combined_mpg,\n    label=label_combined_mpg,\n    color=colors[2],\n    marker=marker_styles[2],\n    linestyle=line_styles[2],\n    markersize=10,\n    linewidth=2,\n)\naxs[2].plot(\n    optimization_levels,\n    electric_range,\n    label=label_electric_range,\n    color=colors[3],\n    marker=marker_styles[3],\n    linestyle=line_styles[3],\n    markersize=10,\n    linewidth=2,\n)\naxs[2].set_title(title_all, fontsize=14)\naxs[2].set_xlabel(xlabel_value, fontsize=12)\naxs[2].set_ylabel(ylabel_value, fontsize=12)\n\n# Set global properties and customize each subplot individually\nfor ax in axs:\n    ax.set_xticks(optimization_levels)\n    ax.set_xlim(xlim_values)\n    ax.set_ylim(ylim_values)\n    ax.legend(loc=\"lower right\", fontsize=10)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to ensure no overlap and labels are clearly visible\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('line_56.pdf', bbox_inches='tight')"}
{"idx": "line_57", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics including emission reduction and fuel efficiency at different optimization levels and usage conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Simulated data for transportation metrics\noptimization_levels = [0.01, 0.05, 0.1, 0.2]\nemission_reduction_64 = np.array([5, 10, 15, 20])\nemission_reduction_128 = np.array([6, 12, 18, 22])\nemission_reduction_256 = np.array([7, 14, 21, 25])\nusage_conditions = [0.0, 0.1, 0.2, 0.3]\nfuel_efficiency_64 = np.array([25, 28, 27, 26])\nfuel_efficiency_128 = np.array([27, 30, 29, 28])\n\n# Axes Limits and Labels\nxlabel_value = \"Parameter Rate\"\n\nylabel_value = \"Metric\"\n\n# Labels\nlabel_1 = \" (Engine Size=1.6L)\"\nlabel_2 = \" (Engine Size=2.0L)\"\nlabel_3 = \"Emission Reduction vs. Optimization Level\"\nlabel_4 = \"Fuel Efficiency vs. Usage Conditions\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 9.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulated data for transportation metrics\noptimization_levels = [0.01, 0.05, 0.1, 0.2]\nemission_reduction_64 = np.array([5, 10, 15, 20])\nemission_reduction_128 = np.array([6, 12, 18, 22])\nemission_reduction_256 = np.array([7, 14, 21, 25])\nusage_conditions = [0.0, 0.1, 0.2, 0.3]\nfuel_efficiency_64 = np.array([25, 28, 27, 26])\nfuel_efficiency_128 = np.array([27, 30, 29, 28])\n\n# Axes Limits and Labels\nxlabel_value = \"Parameter Rate\"\n\nylabel_value = \"Metric\"\n\n# Labels\nlabel_1 = \" (Engine Size=1.6L)\"\nlabel_2 = \" (Engine Size=2.0L)\"\nlabel_3 = \"Emission Reduction vs. Optimization Level\"\nlabel_4 = \"Fuel Efficiency vs. Usage Conditions\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with a 3x2 grid\nfig, axs = plt.subplots(3, 2, figsize=(12, 9))\n\n# Custom colors for the plots\ncolors = [\"dodgerblue\", \"tomato\", \"limegreen\", \"gold\", \"purple\"]\n\n# Function to plot the data\ndef plot_data(ax, x, y1, y2, title, marker1, marker2, color1, color2):\n    ax.plot(\n        x,\n        y1,\n        marker=marker1,\n        markersize=8,\n        linewidth=2,\n        color=color1,\n        label=f\"{title}{label_1}\",\n    )\n    ax.plot(\n        x,\n        y2,\n        marker=marker2,\n        markersize=8,\n        linewidth=2,\n        color=color2,\n        label=f\"{title}{label_2}\",\n    )\n    ax.set_title(title, fontsize=14)\n    ax.set_xlabel(xlabel_value, fontsize=12)\n    ax.set_ylabel(ylabel_value, fontsize=12)\n    ax.legend(loc=\"best\", fontsize=10, frameon=True, shadow=True)\n    ax.grid(True, linestyle=\"--\", alpha=0.5)\n\n\n# Assigning data to each subplot\nplot_data(\n    axs[0, 0],\n    optimization_levels,\n    emission_reduction_64,\n    emission_reduction_128,\n    label_3,\n    \"o\",\n    \"s\",\n    colors[0],\n    colors[1],\n)\nplot_data(\n    axs[0, 1],\n    usage_conditions,\n    fuel_efficiency_64,\n    fuel_efficiency_128,\n    label_4,\n    \"^\",\n    \"d\",\n    colors[2],\n    colors[3],\n)\nplot_data(\n    axs[1, 0],\n    optimization_levels,\n    emission_reduction_128,\n    emission_reduction_256,\n    label_3,\n    \">\",\n    \"<\",\n    colors[4],\n    colors[0],\n)\nplot_data(\n    axs[1, 1],\n    usage_conditions,\n    fuel_efficiency_128,\n    fuel_efficiency_64,\n    label_4,\n    \"p\",\n    \"*\",\n    colors[1],\n    colors[2],\n)\nplot_data(\n    axs[2, 0],\n    optimization_levels,\n    emission_reduction_256,\n    emission_reduction_64,\n    label_3,\n    \"H\",\n    \"X\",\n    colors[3],\n    colors[4],\n)\nplot_data(\n    axs[2, 1],\n    usage_conditions,\n    fuel_efficiency_64,\n    fuel_efficiency_128,\n    label_4,\n    \"+\",\n    \"x\",\n    colors[0],\n    colors[1],\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and display the plots\nplt.tight_layout()\nplt.savefig('line_57.pdf', bbox_inches='tight')"}
{"idx": "line_58", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics, specifically fuel efficiency and emission levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Enhanced seaborn style for a fancier look\niterations = np.linspace(0, 200, 200)\n\n# Simulated data for transportation metrics\nfuel_efficiency_base = np.array([32.65, 30.7, 31.68, 33.7, 33.24, 29.01, 32.06, 30.47, 30.65, 31.54, 31.23, 33.37, 32.39, 31.5, 32.1, 32.03, 33.97, 31.38, 32.31, 30.55, 27.92, 33.16, 33.6, 31.11, 36.09, 30.15, 32.69, 32.41, 35.33, 35.33, 33.27, 33.74, 31.74, 30.02, 32.84, 33.78, 35.69, 35.75, 33.16, 33.41, 32.24, 31.7, 31.3, 37.67, 33.54, 33.77, 32.45, 36.07, 32.01, 34.55, 33.46, 35.81, 34.33, 33.24, 35.38, 36.29, 35.75, 36.27, 34.69, 35.28, 34.82, 35.48, 34.76, 33.2, 36.76, 35.8, 33.65, 37.58, 35.16, 37.03, 38.39, 37.38, 39.36, 35.03, 38.19, 36.25, 36.0, 36.65, 37.25, 38.05, 35.82, 39.86, 39.13, 35.4, 41.3, 42.2, 40.92, 38.4, 36.76, 41.0, 38.26, 41.54, 39.65, 41.27, 40.15, 40.94, 39.67, 43.3, 40.1, 40.75, 43.82, 37.45, 37.69, 42.31, 38.08, 44.49, 39.81, 39.23, 44.78, 43.99, 44.89, 43.02, 39.48, 45.31, 40.9, 43.23, 43.63, 41.44, 43.14, 43.89, 42.85, 39.84, 42.89, 45.17, 40.99, 42.24, 41.74, 46.72, 44.31, 43.84, 41.41, 44.33, 41.81, 43.44, 42.09, 45.04, 44.93, 43.31, 44.74, 41.57, 40.78, 45.14, 44.64, 45.78, 49.77, 46.68, 42.63, 47.27, 41.92, 43.94, 44.92, 49.05, 43.59, 43.5, 45.25, 44.07, 48.25, 43.31, 43.25, 44.97, 44.93, 50.64, 48.48, 46.58, 43.63, 48.55, 44.35, 43.17, 49.67, 47.73, 49.25, 47.94, 49.31, 45.84, 45.03, 49.21, 45.77, 46.14, 46.8, 48.03, 47.24, 44.88, 46.74, 43.01, 50.01, 44.7, 46.0, 48.92, 47.09, 52.77, 45.92, 49.85, 49.2, 46.51, 50.79, 49.17, 51.62, 51.85, 55.3, 53.34])\nfuel_efficiency_optimized = np.array([34.35, 34.68, 37.14, 36.46, 36.54, 32.63, 35.56, 34.39, 36.31, 35.73, 37.64, 36.68, 37.63, 35.46, 34.69, 35.76, 36.58, 37.4, 40.97, 36.83, 35.24, 36.47, 36.35, 38.21, 34.53, 37.63, 37.91, 38.15, 36.68, 37.46, 35.31, 37.18, 37.18, 39.11, 36.2, 40.02, 41.5, 34.71, 39.65, 40.24, 37.78, 38.34, 38.96, 38.74, 38.81, 36.21, 41.91, 41.87, 38.2, 37.0, 41.07, 38.97, 40.51, 39.68, 41.82, 41.94, 39.15, 37.91, 37.6, 42.18, 38.59, 40.09, 40.0, 41.22, 37.42, 41.92, 42.72, 41.92, 41.18, 42.14, 42.87, 36.29, 46.37, 43.16, 41.05, 41.71, 43.69, 42.49, 38.49, 47.37, 42.8, 45.34, 41.74, 46.67, 44.06, 44.87, 41.36, 46.39, 45.36, 46.81, 42.66, 43.08, 49.34, 42.0, 44.15, 47.08, 44.87, 46.05, 43.95, 45.78, 42.11, 48.89, 44.98, 43.81, 46.97, 44.5, 42.61, 42.67, 47.44, 45.59, 45.75, 48.64, 43.65, 44.66, 45.56, 46.78, 46.56, 46.09, 46.71, 46.71, 45.37, 45.24, 47.91, 45.25, 44.72, 46.82, 47.29, 53.15, 46.18, 50.23, 49.86, 45.3, 50.13, 45.5, 42.02, 50.04, 44.4, 49.87, 47.2, 53.03, 51.69, 48.06, 47.58, 46.37, 48.38, 48.88, 48.77, 50.16, 51.32, 50.85, 48.16, 46.57, 53.71, 48.64, 48.83, 49.26, 46.01, 49.57, 49.66, 52.56, 52.86, 51.19, 53.67, 52.26, 51.44, 52.0, 51.19, 50.76, 51.19, 49.05, 52.82, 49.59, 54.49, 51.73, 52.62, 53.89, 54.38, 48.64, 52.34, 55.32, 48.58, 54.22, 47.28, 50.66, 53.6, 49.15, 51.05, 49.84, 58.34, 54.44, 55.63, 53.59, 53.34, 50.0, 53.7, 52.52, 57.04, 57.93, 58.93, 57.34])\n\nemission_level_base = np.array([163.23, 152.74, 156.81, 165.97, 162.91, 141.48, 155.55, 147.12, 147.23, 150.77, 148.55, 157.94, 152.58, 147.63, 149.73, 148.67, 156.89, 144.23, 147.75, 139.02, 126.47, 149.45, 150.72, 138.87, 160.31, 133.27, 143.8, 141.88, 153.92, 153.2, 143.57, 144.9, 135.66, 127.67, 139.0, 142.31, 149.63, 149.16, 137.73, 138.08, 132.61, 129.78, 127.55, 152.77, 135.4, 135.66, 129.77, 143.56, 126.81, 136.22, 131.28, 139.84, 133.44, 128.61, 136.24, 139.1, 136.38, 137.73, 131.13, 132.72, 130.39, 132.25, 128.96, 122.59, 135.11, 130.98, 122.54, 136.25, 126.88, 133.01, 137.24, 133.01, 139.42, 123.53, 134.05, 126.66, 125.2, 126.87, 128.37, 130.52, 122.33, 135.49, 132.41, 119.23, 138.49, 140.84, 135.96, 126.99, 121.04, 134.37, 124.82, 134.91, 128.21, 132.82, 128.63, 130.59, 125.95, 136.85, 126.17, 127.64, 136.63, 116.23, 116.47, 130.14, 116.6, 135.63, 120.82, 118.51, 134.68, 131.69, 133.79, 127.64, 116.61, 133.22, 119.73, 125.96, 126.58, 119.67, 124.05, 125.64, 122.1, 113.02, 121.13, 126.99, 114.72, 117.71, 115.77, 129.01, 121.8, 119.98, 112.82, 120.24, 112.89, 116.77, 112.63, 120.01, 119.17, 114.37, 117.61, 108.79, 106.26, 117.09, 115.27, 117.69, 127.38, 118.93, 108.14, 119.38, 105.39, 109.96, 111.93, 121.66, 107.65, 106.95, 110.76, 107.37, 117.05, 104.58, 103.97, 107.64, 107.06, 120.12, 114.48, 109.52, 102.13, 113.13, 102.88, 99.7, 114.19, 109.24, 112.23, 108.74, 111.36, 103.06, 100.79, 109.64, 101.53, 101.89, 102.88, 105.12, 102.92, 97.34, 100.92, 92.46, 107.01, 95.23, 97.56, 103.28, 98.96, 110.42, 95.65, 103.37, 101.56, 95.58, 103.91, 100.14, 104.64, 104.64, 111.09, 106.68])\nemission_level_optimized = np.array([137.42, 138.08, 147.17, 143.81, 143.44, 127.53, 138.32, 133.14, 139.92, 137.06, 143.74, 139.41, 142.37, 133.54, 130.04, 133.44, 135.86, 138.3, 150.78, 134.94, 128.52, 132.39, 131.36, 137.45, 123.65, 134.14, 134.51, 134.76, 128.99, 131.13, 123.03, 128.95, 128.38, 134.45, 123.86, 136.33, 140.74, 117.18, 133.23, 134.61, 125.81, 127.12, 128.59, 127.27, 126.95, 117.91, 135.84, 135.11, 122.74, 118.33, 130.76, 123.52, 127.84, 124.66, 130.8, 130.56, 121.36, 116.99, 115.5, 129.0, 117.5, 121.51, 120.71, 123.84, 111.92, 124.84, 126.65, 123.71, 121.0, 123.26, 124.85, 105.23, 133.83, 124.03, 117.45, 118.79, 123.89, 119.95, 108.18, 132.55, 119.24, 125.75, 115.27, 128.3, 120.6, 122.25, 112.2, 125.29, 121.96, 125.3, 113.7, 114.32, 130.35, 110.45, 115.59, 122.73, 116.45, 119.0, 113.07, 117.26, 107.37, 124.13, 113.7, 110.24, 117.66, 111.0, 105.8, 105.5, 116.78, 111.71, 111.61, 118.15, 105.56, 107.53, 109.21, 111.63, 110.62, 109.02, 110.01, 109.51, 105.9, 105.14, 110.85, 104.24, 102.55, 106.9, 107.49, 120.29, 104.04, 112.66, 111.35, 100.72, 110.96, 100.27, 92.19, 109.3, 96.54, 107.96, 101.72, 113.79, 110.42, 102.2, 100.73, 97.75, 101.53, 102.12, 101.43, 103.87, 105.79, 104.36, 98.4, 94.72, 108.76, 98.06, 98.0, 98.42, 91.51, 98.15, 97.9, 103.15, 103.28, 99.57, 103.92, 100.73, 98.72, 99.34, 97.35, 96.1, 96.48, 92.04, 98.65, 92.22, 100.86, 95.33, 96.52, 98.4, 98.86, 88.03, 94.29, 99.21, 86.73, 96.35, 83.64, 89.21, 93.95, 85.77, 88.67, 86.17, 100.41, 93.27, 94.88, 90.99, 90.14, 84.11, 89.92, 87.54, 94.65, 95.67, 96.87, 93.84])\n\n# Axes Limits and Labels\nxlabel_value = \"Training Iterations\"\nylabel_value_1 = \"Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Emission Level (g CO2/mile)\"\n\n# Labels\nlabels = [\"Base Model\", \"Optimized Model\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Enhanced seaborn style for a fancier look\niterations = np.linspace(0, 200, 200)\n\n# Simulated data for transportation metrics\nfuel_efficiency_base = np.array([32.65, 30.7, 31.68, 33.7, 33.24, 29.01, 32.06, 30.47, 30.65, 31.54, 31.23, 33.37, 32.39, 31.5, 32.1, 32.03, 33.97, 31.38, 32.31, 30.55, 27.92, 33.16, 33.6, 31.11, 36.09, 30.15, 32.69, 32.41, 35.33, 35.33, 33.27, 33.74, 31.74, 30.02, 32.84, 33.78, 35.69, 35.75, 33.16, 33.41, 32.24, 31.7, 31.3, 37.67, 33.54, 33.77, 32.45, 36.07, 32.01, 34.55, 33.46, 35.81, 34.33, 33.24, 35.38, 36.29, 35.75, 36.27, 34.69, 35.28, 34.82, 35.48, 34.76, 33.2, 36.76, 35.8, 33.65, 37.58, 35.16, 37.03, 38.39, 37.38, 39.36, 35.03, 38.19, 36.25, 36.0, 36.65, 37.25, 38.05, 35.82, 39.86, 39.13, 35.4, 41.3, 42.2, 40.92, 38.4, 36.76, 41.0, 38.26, 41.54, 39.65, 41.27, 40.15, 40.94, 39.67, 43.3, 40.1, 40.75, 43.82, 37.45, 37.69, 42.31, 38.08, 44.49, 39.81, 39.23, 44.78, 43.99, 44.89, 43.02, 39.48, 45.31, 40.9, 43.23, 43.63, 41.44, 43.14, 43.89, 42.85, 39.84, 42.89, 45.17, 40.99, 42.24, 41.74, 46.72, 44.31, 43.84, 41.41, 44.33, 41.81, 43.44, 42.09, 45.04, 44.93, 43.31, 44.74, 41.57, 40.78, 45.14, 44.64, 45.78, 49.77, 46.68, 42.63, 47.27, 41.92, 43.94, 44.92, 49.05, 43.59, 43.5, 45.25, 44.07, 48.25, 43.31, 43.25, 44.97, 44.93, 50.64, 48.48, 46.58, 43.63, 48.55, 44.35, 43.17, 49.67, 47.73, 49.25, 47.94, 49.31, 45.84, 45.03, 49.21, 45.77, 46.14, 46.8, 48.03, 47.24, 44.88, 46.74, 43.01, 50.01, 44.7, 46.0, 48.92, 47.09, 52.77, 45.92, 49.85, 49.2, 46.51, 50.79, 49.17, 51.62, 51.85, 55.3, 53.34])\nfuel_efficiency_optimized = np.array([34.35, 34.68, 37.14, 36.46, 36.54, 32.63, 35.56, 34.39, 36.31, 35.73, 37.64, 36.68, 37.63, 35.46, 34.69, 35.76, 36.58, 37.4, 40.97, 36.83, 35.24, 36.47, 36.35, 38.21, 34.53, 37.63, 37.91, 38.15, 36.68, 37.46, 35.31, 37.18, 37.18, 39.11, 36.2, 40.02, 41.5, 34.71, 39.65, 40.24, 37.78, 38.34, 38.96, 38.74, 38.81, 36.21, 41.91, 41.87, 38.2, 37.0, 41.07, 38.97, 40.51, 39.68, 41.82, 41.94, 39.15, 37.91, 37.6, 42.18, 38.59, 40.09, 40.0, 41.22, 37.42, 41.92, 42.72, 41.92, 41.18, 42.14, 42.87, 36.29, 46.37, 43.16, 41.05, 41.71, 43.69, 42.49, 38.49, 47.37, 42.8, 45.34, 41.74, 46.67, 44.06, 44.87, 41.36, 46.39, 45.36, 46.81, 42.66, 43.08, 49.34, 42.0, 44.15, 47.08, 44.87, 46.05, 43.95, 45.78, 42.11, 48.89, 44.98, 43.81, 46.97, 44.5, 42.61, 42.67, 47.44, 45.59, 45.75, 48.64, 43.65, 44.66, 45.56, 46.78, 46.56, 46.09, 46.71, 46.71, 45.37, 45.24, 47.91, 45.25, 44.72, 46.82, 47.29, 53.15, 46.18, 50.23, 49.86, 45.3, 50.13, 45.5, 42.02, 50.04, 44.4, 49.87, 47.2, 53.03, 51.69, 48.06, 47.58, 46.37, 48.38, 48.88, 48.77, 50.16, 51.32, 50.85, 48.16, 46.57, 53.71, 48.64, 48.83, 49.26, 46.01, 49.57, 49.66, 52.56, 52.86, 51.19, 53.67, 52.26, 51.44, 52.0, 51.19, 50.76, 51.19, 49.05, 52.82, 49.59, 54.49, 51.73, 52.62, 53.89, 54.38, 48.64, 52.34, 55.32, 48.58, 54.22, 47.28, 50.66, 53.6, 49.15, 51.05, 49.84, 58.34, 54.44, 55.63, 53.59, 53.34, 50.0, 53.7, 52.52, 57.04, 57.93, 58.93, 57.34])\n\nemission_level_base = np.array([163.23, 152.74, 156.81, 165.97, 162.91, 141.48, 155.55, 147.12, 147.23, 150.77, 148.55, 157.94, 152.58, 147.63, 149.73, 148.67, 156.89, 144.23, 147.75, 139.02, 126.47, 149.45, 150.72, 138.87, 160.31, 133.27, 143.8, 141.88, 153.92, 153.2, 143.57, 144.9, 135.66, 127.67, 139.0, 142.31, 149.63, 149.16, 137.73, 138.08, 132.61, 129.78, 127.55, 152.77, 135.4, 135.66, 129.77, 143.56, 126.81, 136.22, 131.28, 139.84, 133.44, 128.61, 136.24, 139.1, 136.38, 137.73, 131.13, 132.72, 130.39, 132.25, 128.96, 122.59, 135.11, 130.98, 122.54, 136.25, 126.88, 133.01, 137.24, 133.01, 139.42, 123.53, 134.05, 126.66, 125.2, 126.87, 128.37, 130.52, 122.33, 135.49, 132.41, 119.23, 138.49, 140.84, 135.96, 126.99, 121.04, 134.37, 124.82, 134.91, 128.21, 132.82, 128.63, 130.59, 125.95, 136.85, 126.17, 127.64, 136.63, 116.23, 116.47, 130.14, 116.6, 135.63, 120.82, 118.51, 134.68, 131.69, 133.79, 127.64, 116.61, 133.22, 119.73, 125.96, 126.58, 119.67, 124.05, 125.64, 122.1, 113.02, 121.13, 126.99, 114.72, 117.71, 115.77, 129.01, 121.8, 119.98, 112.82, 120.24, 112.89, 116.77, 112.63, 120.01, 119.17, 114.37, 117.61, 108.79, 106.26, 117.09, 115.27, 117.69, 127.38, 118.93, 108.14, 119.38, 105.39, 109.96, 111.93, 121.66, 107.65, 106.95, 110.76, 107.37, 117.05, 104.58, 103.97, 107.64, 107.06, 120.12, 114.48, 109.52, 102.13, 113.13, 102.88, 99.7, 114.19, 109.24, 112.23, 108.74, 111.36, 103.06, 100.79, 109.64, 101.53, 101.89, 102.88, 105.12, 102.92, 97.34, 100.92, 92.46, 107.01, 95.23, 97.56, 103.28, 98.96, 110.42, 95.65, 103.37, 101.56, 95.58, 103.91, 100.14, 104.64, 104.64, 111.09, 106.68])\nemission_level_optimized = np.array([137.42, 138.08, 147.17, 143.81, 143.44, 127.53, 138.32, 133.14, 139.92, 137.06, 143.74, 139.41, 142.37, 133.54, 130.04, 133.44, 135.86, 138.3, 150.78, 134.94, 128.52, 132.39, 131.36, 137.45, 123.65, 134.14, 134.51, 134.76, 128.99, 131.13, 123.03, 128.95, 128.38, 134.45, 123.86, 136.33, 140.74, 117.18, 133.23, 134.61, 125.81, 127.12, 128.59, 127.27, 126.95, 117.91, 135.84, 135.11, 122.74, 118.33, 130.76, 123.52, 127.84, 124.66, 130.8, 130.56, 121.36, 116.99, 115.5, 129.0, 117.5, 121.51, 120.71, 123.84, 111.92, 124.84, 126.65, 123.71, 121.0, 123.26, 124.85, 105.23, 133.83, 124.03, 117.45, 118.79, 123.89, 119.95, 108.18, 132.55, 119.24, 125.75, 115.27, 128.3, 120.6, 122.25, 112.2, 125.29, 121.96, 125.3, 113.7, 114.32, 130.35, 110.45, 115.59, 122.73, 116.45, 119.0, 113.07, 117.26, 107.37, 124.13, 113.7, 110.24, 117.66, 111.0, 105.8, 105.5, 116.78, 111.71, 111.61, 118.15, 105.56, 107.53, 109.21, 111.63, 110.62, 109.02, 110.01, 109.51, 105.9, 105.14, 110.85, 104.24, 102.55, 106.9, 107.49, 120.29, 104.04, 112.66, 111.35, 100.72, 110.96, 100.27, 92.19, 109.3, 96.54, 107.96, 101.72, 113.79, 110.42, 102.2, 100.73, 97.75, 101.53, 102.12, 101.43, 103.87, 105.79, 104.36, 98.4, 94.72, 108.76, 98.06, 98.0, 98.42, 91.51, 98.15, 97.9, 103.15, 103.28, 99.57, 103.92, 100.73, 98.72, 99.34, 97.35, 96.1, 96.48, 92.04, 98.65, 92.22, 100.86, 95.33, 96.52, 98.4, 98.86, 88.03, 94.29, 99.21, 86.73, 96.35, 83.64, 89.21, 93.95, 85.77, 88.67, 86.17, 100.41, 93.27, 94.88, 90.99, 90.14, 84.11, 89.92, 87.54, 94.65, 95.67, 96.87, 93.84])\n\n# Axes Limits and Labels\nxlabel_value = \"Training Iterations\"\nylabel_value_1 = \"Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Emission Level (g CO2/mile)\"\nylim_values_1 = [25, 60]\nylim_values_2 = [80, 160]\n\n# Labels\nlabels = [\"Base Model\", \"Optimized Model\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a 1x2 subplot layout\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\ncolors = [\"#0072B2\", \"#D55E00\"]  # Blue and orange colors for the lines\n\n# Plot the data in each subplot\n# Fuel Efficiency\naxs[0].plot(\n    iterations,\n    fuel_efficiency_base,\n    label=labels[0],\n    color=colors[0],\n    marker=\"o\",\n    markersize=3,\n    linewidth=2,\n)\naxs[0].plot(\n    iterations,\n    fuel_efficiency_optimized,\n    label=labels[1],\n    color=colors[1],\n    marker=\"x\",\n    markersize=3,\n    linewidth=2,\n)\naxs[0].set_title(\"Fuel Efficiency Improvement\")\naxs[0].set_xlabel(xlabel_value)\naxs[0].set_ylabel(ylabel_value_1)\naxs[0].set_ylim(ylim_values_1)  # Ensure consistent y-axis limits\naxs[0].legend(loc=\"upper right\", frameon=True)  # Add a legend\n\n# Emission Level\naxs[1].plot(\n    iterations,\n    emission_level_base,\n    label=labels[0],\n    color=colors[0],\n    marker=\"o\",\n    markersize=3,\n    linewidth=2,\n)\naxs[1].plot(\n    iterations,\n    emission_level_optimized,\n    label=labels[1],\n    color=colors[1],\n    marker=\"x\",\n    markersize=3,\n    linewidth=2,\n)\naxs[1].set_title(\"Emission Level Reduction\")\naxs[1].set_xlabel(xlabel_value)\naxs[1].set_ylabel(ylabel_value_2)\naxs[1].set_ylim(ylim_values_2)  # Ensure consistent y-axis limits\naxs[1].legend(loc=\"upper right\", frameon=True)  # Add a legend\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Save the plot\nplt.savefig('line_58.pdf', bbox_inches='tight')"}
{"idx": "line_59", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\niterations = np.linspace(0, 200, 50)\nbase_fuel_efficiency = np.array([32.65, 31.02, 32.32, 34.72, 34.59, 30.48, 33.99, 32.61, 33.09, 34.36, 34.33, 37.0, 36.23, 35.52, 36.51, 36.73, 39.26, 36.56, 37.93, 36.14, 33.29, 39.83, 40.66, 37.93, 44.31, 37.28, 40.71, 40.64, 44.6, 44.91, 42.57, 43.46, 41.15, 39.16, 43.11, 44.63, 47.44, 47.81, 44.63, 45.22, 43.9, 43.42, 43.12, 52.19, 46.74, 47.31, 45.72, 51.1, 45.59, 49.47])\noptimized_fuel_efficiency = np.array([33.43, 36.09, 34.9, 34.09, 36.58, 37.83, 37.57, 38.43, 37.05, 37.97, 37.77, 38.78, 38.28, 36.83, 41.08, 40.3, 38.15, 42.91, 40.43, 42.87, 44.74, 43.85, 46.49, 41.65, 45.7, 43.66, 43.63, 44.69, 45.71, 46.97, 44.49, 49.8, 49.18, 44.75, 52.51, 53.96, 52.62, 49.65, 47.81, 53.6, 50.29, 54.9, 52.69, 55.12, 53.9, 55.25, 53.8, 59.02, 54.94, 56.11])\n\n# Axes Limits and Labels\nxlabel_value = \"Training Iterations\"\nylabel_value = \"Fuel Efficiency (MPG)\"\n\n# Labels\nlabel_Base_Model = \"Base Model\"\nlabel_Optimized_Model = \"Optimized Model\"\n\n# Titles\ntitle = \"Fuel Efficiency Improvement Over Training Iterations\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\niterations = np.linspace(0, 200, 50)\nbase_fuel_efficiency = np.array([32.65, 31.02, 32.32, 34.72, 34.59, 30.48, 33.99, 32.61, 33.09, 34.36, 34.33, 37.0, 36.23, 35.52, 36.51, 36.73, 39.26, 36.56, 37.93, 36.14, 33.29, 39.83, 40.66, 37.93, 44.31, 37.28, 40.71, 40.64, 44.6, 44.91, 42.57, 43.46, 41.15, 39.16, 43.11, 44.63, 47.44, 47.81, 44.63, 45.22, 43.9, 43.42, 43.12, 52.19, 46.74, 47.31, 45.72, 51.1, 45.59, 49.47])\noptimized_fuel_efficiency = np.array([33.43, 36.09, 34.9, 34.09, 36.58, 37.83, 37.57, 38.43, 37.05, 37.97, 37.77, 38.78, 38.28, 36.83, 41.08, 40.3, 38.15, 42.91, 40.43, 42.87, 44.74, 43.85, 46.49, 41.65, 45.7, 43.66, 43.63, 44.69, 45.71, 46.97, 44.49, 49.8, 49.18, 44.75, 52.51, 53.96, 52.62, 49.65, 47.81, 53.6, 50.29, 54.9, 52.69, 55.12, 53.9, 55.25, 53.8, 59.02, 54.94, 56.11])\n\n# Axes Limits and Labels\nxlabel_value = \"Training Iterations\"\nylabel_value = \"Fuel Efficiency (MPG)\"\nylim_values = [25, 60]\n\n# Labels\nlabel_Base_Model = \"Base Model\"\nlabel_Optimized_Model = \"Optimized Model\"\n\n# Titles\ntitle = \"Fuel Efficiency Improvement Over Training Iterations\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Customization options\ncolor_base = \"deepskyblue\"\nmarker_base = \"o\"\nstyle_base = \"-\"\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Plot the data\nax.plot(\n    iterations,\n    base_fuel_efficiency,\n    label=label_Base_Model,\n    color=color_base,\n    marker=marker_base,\n    markersize=5,\n    linestyle=style_base,\n    linewidth=2,\n)\nax.plot(\n    iterations,\n    optimized_fuel_efficiency,\n    label=label_Optimized_Model,\n    color=color_base,\n    marker=marker_base,\n    markersize=5,\n    linestyle=style_base,\n    linewidth=2,\n)\n\n# Enhance the plot with a title, labels, and legend\nax.set_title(title)\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\n\n# Add a legend to the plot\nax.set_ylim(ylim_values)\nax.legend(loc=\"upper right\", frameon=True, shadow=True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Save the plot\nplt.savefig('line_59.pdf', bbox_inches='tight')"}
{"idx": "line_60", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency and emission levels over a period of weeks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\nweeks = np.arange(1, 29)\nfuel_efficiency_data = np.array([32.88, 32.57, 34.1, 36.15, 36.37, 33.9, 35.95, 34.72, 34.4, 34.32, 33.26, 33.62, 31.87, 30.12, 29.33, 28.16, 28.38, 25.89, 25.81, 24.27, 22.45, 25.78, 26.36, 25.35, 29.15, 26.38, 28.93, 29.81])\nemission_level_data = np.array([139.32, 133.98, 139.26, 148.73, 150.66, 140.66, 154.75, 153.69, 158.16, 164.52, 166.36, 175.29, 173.3, 170.61, 171.72, 169.69, 173.11, 161.44, 160.24, 150.18, 137.24, 148.82, 145.64, 133.82, 145.71, 124.71, 130.73, 129.06])\n\n# Axes Limits and Labels\nxlabel_value = \"Weeks\"\nylabel_value_1 = \"Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Emission Level (g CO2/mile)\"\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_emission_level = \"Emission Level\"\n\n# Titles\ntitle = \"Fuel Efficiency and Emission Levels Over Weeks\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\nweeks = np.arange(1, 29)\nfuel_efficiency_data = np.array([32.88, 32.57, 34.1, 36.15, 36.37, 33.9, 35.95, 34.72, 34.4, 34.32, 33.26, 33.62, 31.87, 30.12, 29.33, 28.16, 28.38, 25.89, 25.81, 24.27, 22.45, 25.78, 26.36, 25.35, 29.15, 26.38, 28.93, 29.81])\nemission_level_data = np.array([139.32, 133.98, 139.26, 148.73, 150.66, 140.66, 154.75, 153.69, 158.16, 164.52, 166.36, 175.29, 173.3, 170.61, 171.72, 169.69, 173.11, 161.44, 160.24, 150.18, 137.24, 148.82, 145.64, 133.82, 145.71, 124.71, 130.73, 129.06])\n\n# Axes Limits and Labels\nxlabel_value = \"Weeks\"\nylabel_value_1 = \"Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Emission Level (g CO2/mile)\"\nylim_values_fuel = [20, 40]\nylim_values_emission = [100, 200]\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_emission_level = \"Emission Level\"\n\n# Titles\ntitle = \"Fuel Efficiency and Emission Levels Over Weeks\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8, 6))\n\n# Plot the data on the primary y-axis\ncolor_fuel = \"tab:blue\"\nax1.set_xlabel(xlabel_value)\nax1.set_ylabel(ylabel_value_1, color=color_fuel)\nax1.plot(\n    weeks, fuel_efficiency_data, label=label_fuel_efficiency, color=color_fuel, marker=\"o\", linestyle=\"-\"\n)\nax1.tick_params(axis=\"y\", labelcolor=color_fuel)\nax1.set_ylim(ylim_values_fuel)\n\n# Create a secondary y-axis and plot the data\nax2 = ax1.twinx()\ncolor_emission = \"tab:red\"\nax2.set_ylabel(ylabel_value_2, color=color_emission)\nax2.plot(\n    weeks, emission_level_data, label=label_emission_level, color=color_emission, marker=\"x\", linestyle=\"--\"\n)\nax2.tick_params(axis=\"y\", labelcolor=color_emission)\nax2.set_ylim(ylim_values_emission)\n\n# Add a legend to the plot\nax1.legend(loc=\"upper left\")\nax2.legend(loc=\"upper right\")\n\n# Customize the plot with a title, grid, and background color\nax1.set_facecolor(\"whitesmoke\")\nax1.grid(True, which=\"both\", linestyle=\"--\", linewidth=0.5, alpha=0.7)\n\n# Set the title\nplt.title(title, fontsize=16)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\nplt.savefig('line_60.pdf', bbox_inches='tight')"}
{"idx": "line_61", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency and emission levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nweeks = np.arange(1, 29)\nfuel_efficiency_data = np.array([32.88, 32.57, 34.1, 36.15, 36.37, 33.9, 35.95, 34.72, 34.4, 34.32, 33.26, 33.62, 31.87, 30.12, 29.33, 28.16, 28.38, 25.89, 25.81, 24.27, 22.45, 25.78, 26.36, 25.35, 29.15, 26.38, 28.93, 29.81])\nemission_level_data = np.array([138.17, 139.33, 135.14, 139.42, 136.88, 135.65, 148.26, 155.23, 164.83, 168.48, 163.7, 166.51, 164.26, 162.9, 160.97, 177.77, 163.09, 160.28, 152.41, 158.34, 141.93, 144.49, 136.84, 139.46, 131.81, 126.08, 130.36, 132.14])\n\n# Calculate the upper and lower bounds for the data\nfuel_efficiency_upper = fuel_efficiency_data + 2\nfuel_efficiency_lower = fuel_efficiency_data - 2\nemission_level_upper = emission_level_data + 10\nemission_level_lower = emission_level_data - 10\n\n# Axes Limits and Labels\nxlabel_value = \"Weeks\"\nylabel_value = \"Values\"\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_emission_level = \"Emission Level\"\n\n# Titles\ntitle = \"Fuel Efficiency and Emission Levels Analysis\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nweeks = np.arange(1, 29)\nfuel_efficiency_data = np.array([32.88, 32.57, 34.1, 36.15, 36.37, 33.9, 35.95, 34.72, 34.4, 34.32, 33.26, 33.62, 31.87, 30.12, 29.33, 28.16, 28.38, 25.89, 25.81, 24.27, 22.45, 25.78, 26.36, 25.35, 29.15, 26.38, 28.93, 29.81])\nemission_level_data = np.array([138.17, 139.33, 135.14, 139.42, 136.88, 135.65, 148.26, 155.23, 164.83, 168.48, 163.7, 166.51, 164.26, 162.9, 160.97, 177.77, 163.09, 160.28, 152.41, 158.34, 141.93, 144.49, 136.84, 139.46, 131.81, 126.08, 130.36, 132.14])\n\n# Calculate the upper and lower bounds for the data\nfuel_efficiency_upper = fuel_efficiency_data + 2\nfuel_efficiency_lower = fuel_efficiency_data - 2\nemission_level_upper = emission_level_data + 10\nemission_level_lower = emission_level_data - 10\n\n# Axes Limits and Labels\nxlabel_value = \"Weeks\"\nylabel_value = \"Values\"\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_emission_level = \"Emission Level\"\n\n# Titles\ntitle = \"Fuel Efficiency and Emission Levels Analysis\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot the fuel efficiency data line and fill the confidence interval\nax.plot(\n    weeks,\n    fuel_efficiency_data,\n    label=label_fuel_efficiency,\n    color=\"deepskyblue\",\n    marker=\"o\",\n    linestyle=\"-\",\n)\nax.fill_between(\n    weeks, fuel_efficiency_lower, fuel_efficiency_upper, color=\"deepskyblue\", alpha=0.3\n)\n\n# Plot the emission level data line and fill the confidence interval\nax.plot(\n    weeks,\n    emission_level_data,\n    label=label_emission_level,\n    color=\"salmon\",\n    marker=\"x\",\n    linestyle=\"--\",\n)\nax.fill_between(weeks, emission_level_lower, emission_level_upper, color=\"salmon\", alpha=0.3)\n\n# Customize the plot with labels, title, and legend\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\nax.set_title(title, fontsize=16)\nax.legend()\n\n# Add a grid to the plot\nax.grid(True, linestyle=\"--\", linewidth=0.5, alpha=0.7)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\nplt.savefig('line_61.pdf', bbox_inches='tight')"}
{"idx": "line_63", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics including fuel efficiency, emission levels, and maintenance costs over a period of weeks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\nweeks = np.arange(1, 29)\nfuel_efficiency = np.array([32.26, 31.39, 32.46, 34.19, 34.26, 31.85, 34.17, 33.44, 33.81, 34.62, 34.6, 36.11, 35.58, 35.05, 35.43, 35.33, 36.45, 34.66, 35.04, 33.69, 31.76, 34.7, 34.59, 32.64, 35.26, 31.12, 32.18, 31.49])\nemission_levels = np.array([138.92, 132.4, 135.79, 142.78, 141.79, 128.61, 139.45, 135.31, 137.05, 141.25, 141.65, 150.02, 148.46, 147.21, 150.8, 152.25, 160.05, 153.52, 158.03, 154.05, 147.33, 165.04, 167.65, 161.04, 177.37, 159.87, 168.31, 167.91])\nmaintenance_costs = np.array([225.11, 218.78, 231.54, 250.64, 252.76, 229.39, 252.87, 245.09, 247.75, 253.98, 251.28, 263.24, 254.06, 244.38, 243.34, 237.11, 242.82, 219.32, 217.5, 198.52, 174.05, 198.65, 193.47, 170.45, 194.12, 151.07, 161.03, 154.55])\n\n# Axes Limits and Labels\nxlabel_value = \"Weeks\"\nylabel_value = \"Normalized Value\"\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_maintenance_costs = \"Maintenance Costs\"\nlabel_legend = [\"Fuel Efficiency\", \"Emission Levels with Gradient\", \"Maintenance Costs\"]\n\n# Titles\ntitle = \"Transportation Metrics Over Weeks\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\nweeks = np.arange(1, 29)\nfuel_efficiency = np.array([32.26, 31.39, 32.46, 34.19, 34.26, 31.85, 34.17, 33.44, 33.81, 34.62, 34.6, 36.11, 35.58, 35.05, 35.43, 35.33, 36.45, 34.66, 35.04, 33.69, 31.76, 34.7, 34.59, 32.64, 35.26, 31.12, 32.18, 31.49])\nemission_levels = np.array([138.92, 132.4, 135.79, 142.78, 141.79, 128.61, 139.45, 135.31, 137.05, 141.25, 141.65, 150.02, 148.46, 147.21, 150.8, 152.25, 160.05, 153.52, 158.03, 154.05, 147.33, 165.04, 167.65, 161.04, 177.37, 159.87, 168.31, 167.91])\nmaintenance_costs = np.array([225.11, 218.78, 231.54, 250.64, 252.76, 229.39, 252.87, 245.09, 247.75, 253.98, 251.28, 263.24, 254.06, 244.38, 243.34, 237.11, 242.82, 219.32, 217.5, 198.52, 174.05, 198.65, 193.47, 170.45, 194.12, 151.07, 161.03, 154.55])\n\n# Axes Limits and Labels\nxlabel_value = \"Weeks\"\nylabel_value = \"Normalized Value\"\n\n# Labels\nlabel_fuel_efficiency = \"Fuel Efficiency\"\nlabel_maintenance_costs = \"Maintenance Costs\"\nlabel_legend = [\"Fuel Efficiency\", \"Emission Levels with Gradient\", \"Maintenance Costs\"]\n\n# Titles\ntitle = \"Transportation Metrics Over Weeks\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the fuel efficiency data\nax.plot(weeks, fuel_efficiency, label=label_fuel_efficiency, color=\"deepskyblue\", linewidth=3)\n\n# Plot the emission levels data with a gradient color\nfor i in range(len(weeks) - 1):\n    ax.plot(\n        weeks[i : i + 2],\n        emission_levels[i : i + 2],\n        linestyle=\"-\",\n        linewidth=3,\n        color=plt.cm.viridis(i / len(weeks)),\n    )\n\n# Plot the maintenance costs data\nax.plot(\n    weeks, maintenance_costs, label=label_maintenance_costs, color=\"magenta\", linestyle=\"--\", linewidth=3\n)\n\n# Customize the plot with labels, title, and legend\nax.set_title(title, fontsize=18)\nax.set_xlabel(xlabel_value, fontsize=14)\nax.set_ylabel(ylabel_value, fontsize=14)\n\n# Add a legend to the plot\ncustom_lines = [\n    plt.Line2D([0], [0], color=\"deepskyblue\", lw=4),\n    plt.Line2D([0], [0], color=\"green\", lw=4),\n    plt.Line2D([0], [0], color=\"magenta\", lw=4, linestyle=\"--\"),\n]\nax.legend(\n    custom_lines,\n    label_legend,\n    fontsize=12,\n)\n\n# Add a grid to the plot\nax.set_facecolor(\"floralwhite\")\nax.grid(True, which=\"both\", linestyle=\":\", linewidth=0.75, color=\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('line_63.pdf', bbox_inches='tight')"}
{"idx": "line_65", "instruction": "There is a reference image for you and I also have a set of data about vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Simulated data for fuel efficiency (MPG) and maintenance costs ($)\ntests = np.arange(1, 11)\nmodel_A_fuel = np.array([31.76, 29.84, 29.87, 30.57, 29.65, 26.24, 27.62, 25.96, 25.45, 25.41])\nmodel_B_fuel = np.array([28.14, 28.9, 27.65, 26.46, 26.22, 25.56, 26.16, 23.91, 23.87, 22.15])\nmodel_C_cost = np.array([348.94, 424.18, 439.51, 418.49, 489.84, 426.47, 467.58, 474.03, 519.54, 529.39])\nmodel_D_cost = np.array([353.1, 368.67, 354.47, 343.72, 387.49, 408.68, 441.27, 451.83, 431.14, 443.95])\n\n# Axes Limits and Labels\nxlabel_value = \"Test Number\"\n\nylabel_value_fuel = \"Fuel Efficiency (MPG)\"\nylabel_value_cost = \"Maintenance Cost ($)\"\n\n# Labels\nlabel_model_A = \"Model A\"\nlabel_model_B = \"Model B\"\nlabel_model_C = \"Model C\"\nlabel_model_D = \"Model D\"\n\n# Titles\ntitle_1 = \"Fuel Efficiency Comparison: Model A vs Model B\"\ntitle_2 = \"Maintenance Cost Comparison: Model C vs Model D\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulated data for fuel efficiency (MPG) and maintenance costs ($)\ntests = np.arange(1, 11)\nmodel_A_fuel = np.array([31.76, 29.84, 29.87, 30.57, 29.65, 26.24, 27.62, 25.96, 25.45, 25.41])\nmodel_B_fuel = np.array([28.14, 28.9, 27.65, 26.46, 26.22, 25.56, 26.16, 23.91, 23.87, 22.15])\nmodel_C_cost = np.array([348.94, 424.18, 439.51, 418.49, 489.84, 426.47, 467.58, 474.03, 519.54, 529.39])\nmodel_D_cost = np.array([353.1, 368.67, 354.47, 343.72, 387.49, 408.68, 441.27, 451.83, 431.14, 443.95])\n\n# Axes Limits and Labels\nxlabel_value = \"Test Number\"\nxticks_values = np.arange(1, 11, 1)\n\nylabel_value_fuel = \"Fuel Efficiency (MPG)\"\nylabel_value_cost = \"Maintenance Cost ($)\"\nylim_values_fuel = [20, 35]\nylim_values_cost = [300, 550]\n\n# Labels\nlabel_model_A = \"Model A\"\nlabel_model_B = \"Model B\"\nlabel_model_C = \"Model C\"\nlabel_model_D = \"Model D\"\n\n# Titles\ntitle_1 = \"Fuel Efficiency Comparison: Model A vs Model B\"\ntitle_2 = \"Maintenance Cost Comparison: Model C vs Model D\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n# Plot the fuel efficiency data\nax1.plot(\n    tests,\n    model_A_fuel,\n    marker=\"s\",\n    markersize=7,\n    color=\"#2171b5\",\n    mfc=\"w\",\n    mew=2,\n    label=label_model_A,\n    linewidth=2,\n)\nax1.plot(\n    tests,\n    model_B_fuel,\n    marker=\"D\",\n    markersize=7,\n    color=\"#bdd7e7\",\n    mfc=\"w\",\n    mew=2,\n    label=label_model_B,\n    linewidth=2,\n)\nax1.set_title(title_1, fontsize=14)\nax1.set_xlabel(xlabel_value, fontsize=12)\nax1.set_ylabel(ylabel_value_fuel, fontsize=12)\nax1.set_ylim(ylim_values_fuel)\nax1.set_xticks(xticks_values)\nax1.legend()\nax1.grid(True, linestyle=\"--\", alpha=0.6)\n\n# Plot the maintenance cost data\nax2.plot(\n    tests,\n    model_C_cost,\n    marker=\"v\",\n    markersize=7,\n    color=\"#e7969c\",\n    mfc=\"w\",\n    mew=2,\n    label=label_model_C,\n    linewidth=2,\n)\nax2.plot(\n    tests,\n    model_D_cost,\n    marker=\"o\",\n    markersize=7,\n    color=\"#de9ed6\",\n    mfc=\"w\",\n    mew=2,\n    label=label_model_D,\n    linewidth=2,\n)\nax2.set_title(title_2, fontsize=14)\nax2.set_xlabel(xlabel_value, fontsize=12)\nax2.set_ylabel(ylabel_value_cost, fontsize=12)\nax2.set_ylim(ylim_values_cost)\nax2.set_xticks(xticks_values)\nax2.legend()\nax2.grid(True, linestyle=\"--\", alpha=0.6)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Save the plot\nplt.savefig('line_65.pdf', bbox_inches='tight')"}
{"idx": "line_66", "instruction": "There is a reference image for you and I also have a set of data about the performance of different models in achieving fuel efficiency targets. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\niterations = np.array([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000])\n\n# Simulated data for the models with distinct trends\ndata = {\n\"Model A\": (\nnp.array([0.14, 0.21, 0.33, 0.46, 0.56, 0.61, 0.76, 0.84, 0.95]),np.array([0.16, 0.24, 0.35, 0.43, 0.5, 0.6, 0.68, 0.79, 0.85])\n),\n\"Model B\": (\nnp.array([0.24, 0.3, 0.39, 0.51, 0.59, 0.62, 0.74, 0.81, 0.9]),np.array([0.26, 0.33, 0.44, 0.5, 0.57, 0.65, 0.73, 0.83, 0.88])\n),\n\"Model C\": (\nnp.array([0.34, 0.38, 0.46, 0.56, 0.63, 0.64, 0.75, 0.8, 0.88]), np.array([0.21, 0.28, 0.39, 0.45, 0.52, 0.6, 0.68, 0.78, 0.83])\n),\n\"Model D\": (\nnp.array([0.09, 0.15, 0.26, 0.38, 0.46, 0.5, 0.63, 0.7, 0.8]), np.array([0.11, 0.19, 0.3, 0.37, 0.44, 0.53, 0.62, 0.72, 0.78])\n),\n}\n# Axes Limits and Labels\nxlabel_value = \"Iterations\"\n\nylabel_value = \"Success Rate\"\n\n# Labels\nlabel_1 = \" Fuel Efficiency Target 1\"\nlabel_2 = \" Fuel Efficiency Target 2\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\niterations = np.array([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000])\n\n# Simulated data for the models with distinct trends\ndata = {\n    \"Model A\": (\n        np.array([0.14, 0.21, 0.33, 0.46, 0.56, 0.61, 0.76, 0.84, 0.95]),np.array([0.16, 0.24, 0.35, 0.43, 0.5, 0.6, 0.68, 0.79, 0.85])\n    ),\n    \"Model B\": (\n        np.array([0.24, 0.3, 0.39, 0.51, 0.59, 0.62, 0.74, 0.81, 0.9]),np.array([0.26, 0.33, 0.44, 0.5, 0.57, 0.65, 0.73, 0.83, 0.88])\n    ),\n    \"Model C\": (\n       np.array([0.34, 0.38, 0.46, 0.56, 0.63, 0.64, 0.75, 0.8, 0.88]), np.array([0.21, 0.28, 0.39, 0.45, 0.52, 0.6, 0.68, 0.78, 0.83])\n    ),\n    \"Model D\": (\n       np.array([0.09, 0.15, 0.26, 0.38, 0.46, 0.5, 0.63, 0.7, 0.8]), np.array([0.11, 0.19, 0.3, 0.37, 0.44, 0.53, 0.62, 0.72, 0.78])\n    ),\n}\n# Axes Limits and Labels\nxlabel_value = \"Iterations\"\nxticks_values = np.arange(0, 2250, 250)\n\nylabel_value = \"Success Rate\"\nylim_values = [0, 1]\n\n# Labels\nlabel_1 = \" Fuel Efficiency Target 1\"\nlabel_2 = \" Fuel Efficiency Target 2\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nplt.figure(figsize=(10, 8))\n\n# Plot the data for each model\ncolors = [\"#0a6ae1\", \"#d75faa\"]\nmarkers = [\"o\", \"v\"]\n\n# Plot the data for each model\nfor i, (key, (series1, series2)) in enumerate(data.items()):\n    ax = plt.subplot(2, 2, i + 1)\n    ax.plot(\n        iterations,\n        series1,\n        marker=markers[0],\n        color=colors[0],\n        markerfacecolor=colors[0],\n        linewidth=2,\n        markersize=5,\n        label=f\"{key}{label_1}\",\n    )\n    ax.plot(\n        iterations,\n        series2,\n        marker=markers[1],\n        color=colors[1],\n        markerfacecolor=colors[1],\n        linewidth=2,\n        markersize=5,\n        label=f\"{key}{label_2}\",\n    )\n    ax.fill_between(\n        iterations, series1 - 0.03, series1 + 0.03, color=colors[0], alpha=0.1\n    )\n    ax.fill_between(\n        iterations, series2 - 0.03, series2 + 0.03, color=colors[1], alpha=0.1\n    )\n    ax.set_title(f\"{key} Performance\", fontsize=14)\n    ax.set_xlabel(xlabel_value, fontsize=12)\n    ax.set_ylabel(ylabel_value, fontsize=12)\n    ax.set_ylim(ylim_values)\n    ax.set_xticks(xticks_values)\n    ax.legend()\n    ax.grid(True, linestyle=\"--\", linewidth=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Save the plot\nplt.savefig('line_66.pdf', bbox_inches='tight')"}
{"idx": "line_67", "instruction": "There is a reference image for you and I also have a set of data about educational statistics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\nyears = np.array([2015, 2016, 2017, 2018, 2019, 2020, 2021])\ngraduation_rates = np.clip(\nnp.linspace(75, 85, len(years)) + np.random.normal(0, 1.5, len(years)),\n70,\n90,\n)\ndropout_rates = np.clip(\nnp.linspace(10, 5, len(years)) + np.random.normal(0, 1, len(years)),\n3,\n12,\n)\nteacher_student_ratio = [15] * len(years) # constant teacher-student ratio\naverage_class_size = [25] * len(years) # constant average class size\n\nlabels = [\"Graduation Rate\", \"Dropout Rate\"]\nxlabel = \"Year\"\nylabels = [\"Graduation Rate (%)\", \"Dropout Rate (%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "# ===================\n# Part 1: Importing Libraries\n# ===================\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\nyears = np.array([2015, 2016, 2017, 2018, 2019, 2020, 2021])\ngraduation_rates = np.clip(\n    np.linspace(75, 85, len(years)) + np.random.normal(0, 1.5, len(years)),\n    70,\n    90,\n)\ndropout_rates = np.clip(\n    np.linspace(10, 5, len(years)) + np.random.normal(0, 1, len(years)),\n    3,\n    12,\n)\nteacher_student_ratio = [15] * len(years)  # constant teacher-student ratio\naverage_class_size = [25] * len(years)  # constant average class size\n\nlabels = [\"Graduation Rate\", \"Dropout Rate\"]\nxlabel = \"Year\"\nylabels = [\"Graduation Rate (%)\", \"Dropout Rate (%)\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(6, 5))\n\n# Graduation and dropout rates plots\n(graduation_line,) = ax1.plot(\n    years,\n    graduation_rates,\n    \"o-\",\n    color=\"#377eb8\",\n    label=labels[0],\n    markersize=10,\n    linewidth=3,\n    mec=\"black\",\n)\nax1.set_xlabel(xlabel, fontsize=14)\nax1.set_ylabel(ylabels[0], fontsize=14, color=\"#377eb8\")\nax1.tick_params(\n    axis=\"y\", labelcolor=\"#377eb8\", direction=\"in\", rotation=90, labelsize=12\n)\nax1.tick_params(axis=\"x\", direction=\"in\", labelsize=12)\nax1.set_yticks(range(70, 95, 5))\nax1.set_ylim(70, 90)\n\nax2 = ax1.twinx()\n(dropout_line,) = ax2.plot(\n    years,\n    dropout_rates,\n    \"^-\",\n    color=\"#ff7f00\",\n    label=labels[1],\n    markersize=10,\n    linewidth=3,\n    mec=\"black\",\n)\nax2.set_ylabel(ylabels[1], color=\"#ff7f00\", fontsize=14)\nax2.tick_params(\n    axis=\"y\", labelcolor=\"#ff7f00\", direction=\"in\", rotation=90, labelsize=12\n)\nax2.set_yticks(range(3, 15, 3))\nax2.set_ylim(3, 15)\n\n# Teacher-student ratio and average class size\nax1.axhline(y=15, color=\"#377eb8\", linestyle=\":\", linewidth=2)\nax1.axhline(y=25, color=\"#ff7f00\", linestyle=\"--\", linewidth=2)\n\n# Custom legend for the plot\nratio_legend = Line2D([0], [0], color=\"black\", linestyle=\":\", linewidth=2, label=\"TS Ratio\")\nclass_size_legend = Line2D([0], [0], color=\"black\", linestyle=\"--\", linewidth=2, label=\"Avg Class Size\")\n\n# Add the legend to the plot\nfirst_legend = ax1.legend(\n    handles=[ratio_legend, class_size_legend],\n    loc=\"upper left\",\n    ncol=2,\n    fontsize=14,\n    edgecolor=\"black\",\n)\nax1.add_artist(first_legend)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Add the second legend to the plot\nplt.tight_layout()\nplt.savefig('line_67.pdf', bbox_inches='tight')"}
{"idx": "line_68", "instruction": "There is a reference image for you and I also have a set of data about machine learning model performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\nepochs = np.array([10, 20, 30, 40, 50, 60, 70])\ncnn_accuracy = np.clip(\nnp.linspace(60, 90, len(epochs)) + np.random.normal(0, 1, len(epochs)),\n60,\n90,\n)\nrnn_accuracy = np.clip(\nnp.linspace(50, 85, len(epochs)) + np.random.normal(0, 1.5, len(epochs)),\n50,\n85,\n)\ncnn_loss = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2] # Decreasing CNN loss rates\nrnn_loss = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4] # Decreasing RNN loss rates\n\n# Axes Limits and Labels\nxlabel_value = \"Epochs\"\n\nylabel_value_1 = \"Accuracy (%)\"\nylabel_value_2 = \"Loss\"\n\n# Labels\nlabel_1 = \"CNN Accuracy\"\nlabel_2 = \"RNN Accuracy\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom matplotlib.lines import Line2D\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\nepochs = np.array([10, 20, 30, 40, 50, 60, 70])\ncnn_accuracy = np.clip(\n    np.linspace(60, 90, len(epochs)) + np.random.normal(0, 1, len(epochs)),\n    60,\n    90,\n)\nrnn_accuracy = np.clip(\n    np.linspace(50, 85, len(epochs)) + np.random.normal(0, 1.5, len(epochs)),\n    50,\n    85,\n)\ncnn_loss = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]  # Decreasing CNN loss rates\nrnn_loss = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]  # Decreasing RNN loss rates\n\n# Axes Limits and Labels\nxlabel_value = \"Epochs\"\n\nylabel_value_1 = \"Accuracy (%)\"\nylabel_value_2 = \"Loss\"\nylim_values_1 = [50, 100]\nylim_values_2 = [0, 1.2]\nyticks_values_1 = np.arange(50, 101, 10)\nyticks_values_2 = np.arange(0, 1.3, 0.2)\n\n# Labels\nlabel_1 = \"CNN Accuracy\"\nlabel_2 = \"RNN Accuracy\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8, 7))\n\n# CNN and RNN Accuracy plots\n(cnn_line,) = ax1.plot(\n    epochs,\n    cnn_accuracy,\n    color=\"#377eb8\",\n    label=label_1,\n    markersize=10,\n    linewidth=3,\n    mec=\"black\",\n    linestyle=\"-.\",\n    marker=\"o\",\n)\nax1.set_xlabel(xlabel_value, fontsize=14)\nax1.set_ylabel(ylabel_value_1, fontsize=14, color=\"#377eb8\")\nax1.tick_params(\n    axis=\"y\", labelcolor=\"#377eb8\", direction=\"in\", rotation=90, labelsize=12\n)\nax1.tick_params(axis=\"x\", direction=\"in\", labelsize=12)\nax1.set_yticks(yticks_values_1)\nax1.set_ylim(ylim_values_1)\n\n# Create a secondary y-axis for RNN Accuracy\nax2 = ax1.twinx()\n(rnn_line,) = ax2.plot(\n    epochs,\n    rnn_accuracy,\n    color=\"#ff7f00\",\n    label=label_2,\n    markersize=10,\n    linewidth=3,\n    mec=\"black\",\n    linestyle=\":\",\n    marker=\"^\",\n)\nax2.set_ylabel(ylabel_value_2, color=\"#ff7f00\", fontsize=14)\nax2.tick_params(\n    axis=\"y\", labelcolor=\"#ff7f00\", direction=\"in\", rotation=90, labelsize=12\n)\nax2.set_yticks(yticks_values_2)\nax2.set_ylim(ylim_values_2)\n\n# CNN and RNN Loss rates\nax1.plot(epochs, cnn_loss, \":\", color=\"green\", linewidth=2, label=\"CNN Loss\")\nax1.plot(epochs, rnn_loss, \"--\", color=\"purple\", linewidth=2, label=\"RNN Loss\")\n\n# Custom legend for the plot\ncnn_legend = Line2D(\n    [0], [0], color=\"green\", linestyle=\":\", linewidth=2, label=\"CNN Loss\"\n)\nrnn_legend = Line2D(\n    [0], [0], color=\"purple\", linestyle=\"--\", linewidth=2, label=\"RNN Loss\"\n)\n\n# Add the legend to the plot\nfirst_legend = ax1.legend(\n    handles=[cnn_legend, rnn_legend],\n    loc=\"upper left\",\n    ncol=2,\n    fontsize=14,\n    edgecolor=\"black\",\n)\nax1.add_artist(first_legend)  # Add the first legend back to the plot\nsecond_legend = ax1.legend(\n    handles=[cnn_line, rnn_line], loc=\"upper right\", fontsize=14, edgecolor=\"black\"\n)  # Add the second legend\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\nplt.savefig('line_68.pdf', bbox_inches='tight')"}
{"idx": "line_69", "instruction": "There is a reference image for you and I also have a set of data about daily weather patterns including temperature and humidity. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\ndays = np.array([1, 2, 3, 4, 5, 6, 7])\ntemperature = np.clip(\n20 + np.sin(np.linspace(0, 2 * np.pi, len(days))) * 5\n+ np.random.normal(0, 2, len(days)),\n15,\n30,\n)\nhumidity = np.clip(\n60 + np.cos(np.linspace(0, 2 * np.pi, len(days))) * 10\n+ np.random.normal(0, 3, len(days)),\n50,\n80,\n)\n# Axes Limits and Labels\nxlabel_value = \"Day of the Week\"\n\nylabel_value_1 = \"Temperature (\u00b0C)\"\nylabel_value_2 = \"Humidity (%)\"\n\n# Labels\nlabel_1 = \"Daily Temperature\"\nlabel_2 = \"Daily Humidity\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\ndays = np.array([1, 2, 3, 4, 5, 6, 7])\ntemperature = np.clip(\n    20 + np.sin(np.linspace(0, 2 * np.pi, len(days))) * 5\n    + np.random.normal(0, 2, len(days)),\n    15,\n    30,\n)\nhumidity = np.clip(\n    60 + np.cos(np.linspace(0, 2 * np.pi, len(days))) * 10\n    + np.random.normal(0, 3, len(days)),\n    50,\n    80,\n)\n# Axes Limits and Labels\nxlabel_value = \"Day of the Week\"\n\nylabel_value_1 = \"Temperature (\u00b0C)\"\nylabel_value_2 = \"Humidity (%)\"\n\n# Labels\nlabel_1 = \"Daily Temperature\"\nlabel_2 = \"Daily Humidity\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 5))\n\n(temperature_line,) = ax.plot(\n    days,\n    temperature,\n    \"o-\",\n    color=\"#ff8b26\",\n    label=label_1,\n    markersize=8,\n    linewidth=2,\n)\nax.set_xlabel(xlabel_value, fontsize=12)\nax.set_ylabel(ylabel_value_1, fontsize=12)\nax.tick_params(axis=\"y\", direction=\"in\", labelsize=10)\nax.tick_params(axis=\"x\", direction=\"in\", labelsize=10)\n\n# Create a secondary y-axis for Humidity\nax2 = ax.twinx()\n(humidity_line,) = ax2.plot(\n    days,\n    humidity,\n    \"s--\",\n    color=\"#0392fb\",\n    label=label_2,\n    markersize=8,\n    linewidth=2,\n)\nax2.set_ylabel(ylabel_value_2, fontsize=12)\nax2.tick_params(axis=\"y\", direction=\"in\", labelsize=10)\n\n# Add a legend to the plot\nthreshold_temp = 25\nthreshold_humid = 70\nax.axhline(y=threshold_temp, color=\"red\", linestyle=\"-\", linewidth=1.5, label=\"Temp Threshold\")\nax2.axhline(y=threshold_humid, color=\"green\", linestyle=\"-\", linewidth=1.5, label=\"Humid Threshold\")\n\n# Highlight the data points above the threshold\nhighlight_temp = [2, 4, 6]  # Days to highlight for temperature\nhighlight_humid = [3, 5, 7]  # Days to highlight for humidity\nfor day in highlight_temp:\n    ax.plot(\n        day, temperature[np.where(days == day)], \"ro\"\n    )  # Highlight Temperature\n    ax.annotate(\n        f\"Temp {day}\",\n        (day, temperature[np.where(days == day)]),\n        textcoords=\"offset points\",\n        xytext=(0, 10),\n        ha=\"center\",\n    )\nfor day in highlight_humid:\n    ax2.plot(\n        day, humidity[np.where(days == day)], \"go\"\n    )  # Highlight Humidity\n    ax2.annotate(\n        f\"Humid {day}\",\n        (day, humidity[np.where(days == day)]),\n        textcoords=\"offset points\",\n        xytext=(0, 10),\n        ha=\"center\",\n    )\n\n# Customize the plot with labels, title, and legend\nfig.legend(loc=\"upper right\", bbox_to_anchor=(0.9, 0.9))\n\n# Add a grid to the plot\nax.grid(True, linestyle=\"--\", alpha=0.6)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\nplt.savefig('line_69.pdf', bbox_inches='tight')"}
{"idx": "line_70", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency and emission levels of vehicles with different numbers of sensors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plot\nsensors = np.array([2, 3, 4, 5, 6, 7, 8])\nfuel_efficiency = np.array(\n[30.88, 34.53, 34.82, 31.12, 28.0, 28.0, 30.48]\n)\nemission_levels = np.array(\n[180.0, 199.48, 220.0, 200.72, 187.27, 203.81, 220.0]\n)\nhighlight = [3, 5, 6]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Sensors\"\nylabel_value_1 = \"Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Emission Levels (g CO2/mile)\"\n\n# Labels\nlabel_1 = \"Fuel Efficiency\"\nlabel_2 = \"Threshold\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\nsensors = np.array([2, 3, 4, 5, 6, 7, 8])\nfuel_efficiency = np.array(\n    [30.88, 34.53, 34.82, 31.12, 28.0, 28.0, 30.48]\n)\nemission_levels = np.array(\n    [180.0, 199.48, 220.0, 200.72, 187.27, 203.81, 220.0]\n)\nhighlight = [3, 5, 6]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Sensors\"\nylabel_value_1 = \"Fuel Efficiency (MPG)\"\nylabel_value_2 = \"Emission Levels (g CO2/mile)\"\n\n# Labels\nlabel_1 = \"Fuel Efficiency\"\nlabel_2 = \"Threshold\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with a 1x2 grid\nfig, axs = plt.subplots(1, 2, figsize=(12, 5))\n\n# Plot the Fuel Efficiency data\n(fuel_line,) = axs[0].plot(\n    sensors,\n    fuel_efficiency,\n    \"o-\",\n    color=\"#ffd638\",\n    label=\"Fuel Efficiency\",\n    markersize=8,\n    linewidth=2,\n)\naxs[0].set_xlabel(xlabel_value, fontsize=12)\naxs[0].set_ylabel(ylabel_value_1, fontsize=12)\naxs[0].tick_params(axis=\"y\", direction=\"in\", labelsize=10)\naxs[0].tick_params(axis=\"x\", direction=\"in\", labelsize=10)\n\n# Plot the Emission Levels data\n(emission_line,) = axs[1].plot(\n    sensors,\n    emission_levels,\n    \"s--\",\n    color=\"green\",\n    label=\"Emission Levels\",\n    markersize=8,\n    linewidth=2,\n)\naxs[1].set_xlabel(xlabel_value, fontsize=12)\naxs[1].set_ylabel(ylabel_value_2, fontsize=12)\naxs[1].tick_params(axis=\"y\", direction=\"in\", labelsize=10)\naxs[1].tick_params(axis=\"x\", direction=\"in\", labelsize=10)\n\n# Add a threshold line\nthreshold_fuel = 34\nthreshold_emission = 190\naxs[0].axhline(y=threshold_fuel, color=\"red\", linestyle=\"-\", linewidth=1.5, label=label_2)\naxs[1].axhline(y=threshold_emission, color=\"red\", linestyle=\"-\", linewidth=1.5, label=label_2)\n\n# Highlight the data points above the threshold\nfor mic in highlight:\n    axs[0].plot(\n        mic, fuel_efficiency[np.where(sensors == mic)], \"ro\"\n    )  # Highlight Fuel Efficiency\n    axs[0].annotate(\n        f\"Highlight {mic}\",\n        (mic, fuel_efficiency[np.where(sensors == mic)]),\n        textcoords=\"offset points\",\n        xytext=(0, -20),\n        ha=\"center\",\n    )\n    axs[1].plot(\n        mic, emission_levels[np.where(sensors == mic)], \"ro\"\n    )  # Highlight Emission Levels\n    axs[1].annotate(\n        f\"Highlight {mic}\",\n        (mic, emission_levels[np.where(sensors == mic)]),\n        textcoords=\"offset points\",\n        xytext=(0, -20),\n        ha=\"center\",\n    )\n\n# Customize the plot with labels, title, and legend\naxs[0].legend()\naxs[1].legend()\n\n# Add a grid to the plot\nfor ax in axs:\n    ax.grid(True, linestyle=\"--\", alpha=0.6)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\nplt.savefig('line_70.pdf', bbox_inches='tight')"}
{"idx": "line_71", "instruction": "There is a reference image for you and I also have a set of data about vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate sample data with distinct performance trends for each subplot\nratios = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Different patterns of performance for each subplot\nperformances = {\n\"Model A\": {\n\"fuel_efficiency\": np.linspace(30, 50, 10),\n\"maintenance_cost\": np.linspace(50, 30, 10),\n},\n\"Model B\": {\n\"fuel_efficiency\": 35 + 5 * np.cos(2 * np.pi * ratios),\n\"maintenance_cost\": 40 + 5 * np.sin(2 * np.pi * ratios),\n},\n\"Model C\": {\n\"fuel_efficiency\": 32 + 10 * ratios,\n\"maintenance_cost\": 45 - 10 * ratios,\n},\n}\n\nstd_dev = {\"fuel_efficiency\": np.array([1.5] * 10), \"maintenance_cost\": np.array([2] * 10)}\n\n# Axes Limits and Labels\nxlabel_value = \"Usage Ratio\"\n\nylabel_value_fuel = \"Efficiency (MPG)\"\n\n# Labels\nlabels = [\"Fuel Efficiency\", \"Maintenance Cost\"]\n\n# Titles\ntitles = [\"Model A\", \"Model B\", \"Model C\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 12.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate sample data with distinct performance trends for each subplot\nratios = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Different patterns of performance for each subplot\nperformances = {\n    \"Model A\": {\n        \"fuel_efficiency\": np.linspace(30, 50, 10),\n        \"maintenance_cost\": np.linspace(50, 30, 10),\n    },\n    \"Model B\": {\n        \"fuel_efficiency\": 35 + 5 * np.cos(2 * np.pi * ratios),\n        \"maintenance_cost\": 40 + 5 * np.sin(2 * np.pi * ratios),\n    },\n    \"Model C\": {\n        \"fuel_efficiency\": 32 + 10 * ratios,\n        \"maintenance_cost\": 45 - 10 * ratios,\n    },\n}\n\nstd_dev = {\"fuel_efficiency\": np.array([1.5] * 10), \"maintenance_cost\": np.array([2] * 10)}\n\n# Axes Limits and Labels\nxlabel_value = \"Usage Ratio\"\nxlim_values = [0.05, 1.05]\nxticks_values = np.arange(0.1, 1.1, 0.1)\n\nylabel_value_fuel = \"Efficiency (MPG)\"\nylim_values_fuel = [25, 60]\nyticks_values_fuel = np.arange(25, 60, 5)\n\n# Labels\nlabels = [\"Fuel Efficiency\", \"Maintenance Cost\"]\n\n# Titles\ntitles = [\"Model A\", \"Model B\", \"Model C\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot settings\nfig, axs = plt.subplots(3, 1, figsize=(6, 12))\ncolors = [\"#1f77b4\", \"#2ca02c\"]\nmarkers = [\"o\", \"^\"]\n\nfor i, ax in enumerate(axs):\n    # Get specific data for this subplot\n    fuel_efficiency_data = performances[titles[i]][\"fuel_efficiency\"]\n    maintenance_cost_data = performances[titles[i]][\"maintenance_cost\"]\n\n    # Fuel Efficiency\n    ax.plot(\n        ratios,\n        fuel_efficiency_data,\n        label=labels[0],\n        color=colors[0],\n        marker=markers[0],\n        linestyle=\"--\",\n    )\n    ax.fill_between(\n        ratios,\n        fuel_efficiency_data - std_dev[\"fuel_efficiency\"],\n        fuel_efficiency_data + std_dev[\"fuel_efficiency\"],\n        color=colors[0],\n        alpha=0.2,\n    )\n\n    # Maintenance Cost\n    ax.plot(\n        ratios,\n        maintenance_cost_data,\n        label=labels[1],\n        color=colors[1],\n        marker=markers[1],\n        linestyle=\"-.\",\n    )\n    ax.fill_between(\n        ratios,\n        maintenance_cost_data - std_dev[\"maintenance_cost\"],\n        maintenance_cost_data + std_dev[\"maintenance_cost\"],\n        color=colors[1],\n        alpha=0.2,\n    )\n\n    ax.set_xticks(xticks_values)\n    ax.set_xlim(xlim_values)\n    ax.set_title(titles[i])\n    ax.set_xlabel(xlabel_value)\n    ax.grid(True, which=\"both\", linestyle=\":\", linewidth=\"0.5\")\n    ax.legend(loc=\"lower right\" if i == 1 else \"upper left\")\n\n    ax.set_yticks(yticks_values_fuel)\n    ax.set_ylim(ylim_values_fuel)\n    ax.set_ylabel(ylabel_value_fuel)\n    \n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_71.pdf', bbox_inches='tight')"}
{"idx": "line_73", "instruction": "There is a reference image for you and I also have a set of data about car model performance in terms of fuel efficiency and maintenance costs. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample linear data for fuel efficiency and maintenance costs\nratios = np.linspace(0.1, 1.0, 20)\nfuel_efficiency = 25 + 10 * ratios # Linear increase in fuel efficiency\nmaintenance_cost = 1000 - 600 * ratios # Linear decrease in maintenance cost\n\n# Error bars to indicate variance\nfuel_efficiency_error = np.linspace(1, 2, 20)\nmaintenance_cost_error = np.linspace(30, 50, 20)\n\n# Axes Limits and Labels\nxlabel_value = \"Usage Ratio\"\n\nylabel_value = \"Performance\"\n\n# Labels\nlabel_1 = \"Fuel Efficiency (MPG)\"\nlabel_2 = \"Maintenance Cost ($)\"\n\n# Titles\ntitle = \"Performance Evaluation of Car Models\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample linear data for fuel efficiency and maintenance costs\nratios = np.linspace(0.1, 1.0, 20)\nfuel_efficiency = 25 + 10 * ratios  # Linear increase in fuel efficiency\nmaintenance_cost = 1000 - 600 * ratios  # Linear decrease in maintenance cost\n\n# Error bars to indicate variance\nfuel_efficiency_error = np.linspace(1, 2, 20)\nmaintenance_cost_error = np.linspace(30, 50, 20)\n\n# Axes Limits and Labels\nxlabel_value = \"Usage Ratio\"\nxlim_values = [0.05, 1.05]\nxticks_values = np.arange(0.1, 1.1, 0.1)\n\nylabel_value = \"Performance\"\nylim_values = [0, 1100]\nyticks_values = np.arange(0, 1100, 100)\n\n# Labels\nlabel_1 = \"Fuel Efficiency (MPG)\"\nlabel_2 = \"Maintenance Cost ($)\"\n\n# Titles\ntitle = \"Performance Evaluation of Car Models\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create plot\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set a vibrant color scheme and background\nax.set_facecolor(\"#f4f4f9\")  # A soft off-white background for a modern look\nax.grid(True, which=\"major\", linestyle=\":\", linewidth=\"0.5\", color=\"gray\")  # Lighter grid for subtlety\n\ncmap_fuel = LinearSegmentedColormap.from_list(\"mycmap\", [\"#8a3ffc\", \"#d4bbff\"])\ncmap_cost = LinearSegmentedColormap.from_list(\"mycmap\", [\"#ff7f0e\", \"#fed8b1\"])\n\n# Plot fuel efficiency\nln_fuel = ax.errorbar(\n    ratios,\n    fuel_efficiency,\n    yerr=fuel_efficiency_error,\n    fmt=\"-o\",\n    color=cmap_fuel(0.5),\n    label=label_1,\n    markersize=8,\n    capsize=3,\n    linewidth=2,\n)\n\n# Plot maintenance cost\nln_cost = ax.errorbar(\n    ratios,\n    maintenance_cost,\n    yerr=maintenance_cost_error,\n    fmt=\"-^\",\n    color=cmap_cost(0.5),\n    label=label_2,\n    markersize=8,\n    capsize=3,\n    linewidth=2,\n)\n\n# Adding labels and title with a modern font style\nax.set_xlabel(xlabel_value, fontsize=14, fontweight=\"regular\")\nax.set_ylabel(ylabel_value, fontsize=14, fontweight=\"regular\")\nax.set_title(title, fontsize=16, color=\"black\")\n\n# Customize ticks for clarity and aesthetic\nax.set_xticks(xticks_values)\nax.set_yticks(yticks_values)\nax.set_xlim(xlim_values)\nax.set_ylim(ylim_values)\n\n# Enhance the legend with a contemporary look\nax.legend(frameon=True, loc=\"upper left\", fontsize=12, framealpha=1, shadow=True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_73.pdf', bbox_inches='tight')"}
{"idx": "line_74", "instruction": "There is a reference image for you and I also have a set of data about car models' fuel efficiency and maintenance costs. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample linear data with added random noise for realism\nratios = np.linspace(0.1, 1.0, 10)\nfuel_efficiency = np.array([32.76, 32.4, 33.98, 36.24, 36.87, 35.02, 37.95, 37.85, 38.9, 40.41])\nmaintenance_cost = np.array([947.2, 952.71, 858.05, 766.08, 722.19, 656.68, 654.7, 509.74, 475.65, 357.3])\n\n# Error bars to indicate variance\nfuel_efficiency_error = np.linspace(1, 2, 10)\nmaintenance_cost_error = np.linspace(30, 50, 10)\n\n# Axes Limits and Labels\nxlabel_value = \"Usage Ratio\"\n\nylabel_value = \"Performance\"\n\n# Labels\nlabel_1 = \"Fuel Efficiency (MPG)\"\nlabel_2 = \"Maintenance Cost ($)\"\n\n# Titles\ntitle = \"Car Models Performance Evaluation\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample linear data with added random noise for realism\nratios = np.linspace(0.1, 1.0, 10)\nfuel_efficiency = np.array([32.76, 32.4, 33.98, 36.24, 36.87, 35.02, 37.95, 37.85, 38.9, 40.41])\nmaintenance_cost = np.array([947.2, 952.71, 858.05, 766.08, 722.19, 656.68, 654.7, 509.74, 475.65, 357.3])\n\n# Error bars to indicate variance\nfuel_efficiency_error = np.linspace(1, 2, 10)\nmaintenance_cost_error = np.linspace(30, 50, 10)\n\n# Axes Limits and Labels\nxlabel_value = \"Usage Ratio\"\nxticks_values = np.arange(0.0, 1.1, 0.2)\n\nylabel_value = \"Performance\"\nylim_values = [0, 1100]\n\n# Labels\nlabel_1 = \"Fuel Efficiency (MPG)\"\nlabel_2 = \"Maintenance Cost ($)\"\n\n# Titles\ntitle = \"Car Models Performance Evaluation\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create plot\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set a soft background color using a simple approach\nax.set_facecolor(\"#f8f9fa\")\n\n# Plot settings with enhanced visual appeal\nax.errorbar(\n    ratios,\n    fuel_efficiency,\n    yerr=fuel_efficiency_error,\n    fmt=\"-o\",\n    color=\"#007bff\",\n    label=label_1,\n    markersize=8,\n    capsize=5,\n    linewidth=2,\n    alpha=0.9,\n)\nax.errorbar(\n    ratios,\n    maintenance_cost,\n    yerr=maintenance_cost_error,\n    fmt=\"-X\",\n    color=\"#dc3545\",\n    label=label_2,\n    markersize=8,\n    capsize=5,\n    linewidth=2,\n    alpha=0.9,\n)\n\n# Styling the chart with a modern look\nax.grid(True, which=\"major\", linestyle=\"--\", linewidth=0.5, color=\"grey\")\nax.set_xlabel(xlabel_value, fontsize=14)\nax.set_ylabel(ylabel_value, fontsize=14)\nax.set_title(title, fontsize=16, color=\"#343a40\")\n\n# Adjusting ticks and limits for optimal data display\nax.set_xticks(xticks_values)\nax.set_ylim(ylim_values)\n\n# Configuring the legend to be more visually pleasing\nax.legend(frameon=True, loc=\"best\", fontsize=12, framealpha=0.95, shadow=True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_74.pdf', bbox_inches='tight')"}
{"idx": "line_75", "instruction": "There is a reference image for you and I also have a set of data about car models' fuel efficiency and maintenance costs. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data generation with non-linear trends\nensemble_size = np.arange(5, 31, 1)\nfuel_efficiency_model1 = np.array([24.1, 23.78, 24.38, 25.28, 25.33, 24.12, 25.27, 24.89, 25.08, 25.48, 25.49, 26.27, 26.05, 25.84, 26.11, 26.16, 26.84, 26.08, 26.43, 25.93, 25.16, 26.84, 27.02, 26.29, 27.87, 26.08])\nfuel_efficiency_model2 = np.array([21.38, 21.58, 22.74, 22.98, 22.58, 22.93, 22.53, 22.21, 23.23, 23.69, 24.42, 24.6, 23.99, 24.21, 24.01, 24.0, 24.02, 26.01, 24.94, 25.13, 24.87, 26.04, 24.99, 25.83, 25.63, 26.41])\n\n# Adding some standard deviation visualization\nfuel_efficiency_std_model1 = np.linspace(0.8, 1.2, len(ensemble_size))\nfuel_efficiency_std_model2 = np.linspace(0.6, 1.0, len(ensemble_size))\n\n# Axes Limits and Labels\nxlabel_value = \"Ensemble Size\"\n\n# Labels\nlabel_fuel_efficiency_1 = \"Model 1 Fuel Efficiency\"\nlabel_fuel_efficiency_2 = \"Model 2 Fuel Efficiency\"\n\n# Titles\ntitle = \"Comparison of Car Models' Fuel Efficiency and Maintenance Costs\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data generation with non-linear trends\nensemble_size = np.arange(5, 31, 1)\nfuel_efficiency_model1 = np.array([24.1, 23.78, 24.38, 25.28, 25.33, 24.12, 25.27, 24.89, 25.08, 25.48, 25.49, 26.27, 26.05, 25.84, 26.11, 26.16, 26.84, 26.08, 26.43, 25.93, 25.16, 26.84, 27.02, 26.29, 27.87, 26.08])\nfuel_efficiency_model2 = np.array([21.38, 21.58, 22.74, 22.98, 22.58, 22.93, 22.53, 22.21, 23.23, 23.69, 24.42, 24.6, 23.99, 24.21, 24.01, 24.0, 24.02, 26.01, 24.94, 25.13, 24.87, 26.04, 24.99, 25.83, 25.63, 26.41])\n\n# Adding some standard deviation visualization\nfuel_efficiency_std_model1 = np.linspace(0.8, 1.2, len(ensemble_size))\nfuel_efficiency_std_model2 = np.linspace(0.6, 1.0, len(ensemble_size))\n\n# Axes Limits and Labels\nxlabel_value = \"Ensemble Size\"\nxticks_values = np.arange(min(ensemble_size), max(ensemble_size) + 1, 2)\n\n# Labels\nlabel_fuel_efficiency_1 = \"Model 1 Fuel Efficiency\"\nlabel_fuel_efficiency_2 = \"Model 2 Fuel Efficiency\"\n\n# Titles\ntitle = \"Comparison of Car Models' Fuel Efficiency and Maintenance Costs\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Background and title\nax.set_facecolor(\"#f9f9f9\")\nax.set_title(title, fontsize=16)\n\n# Plotting the fuel efficiency with standard deviation as a shaded area\nax.plot(\n    ensemble_size,\n    fuel_efficiency_model1,\n    \"o-\",\n    color=\"#3498db\",\n    linewidth=2,\n    markersize=5,\n    label=label_fuel_efficiency_1,\n)\nax.fill_between(\n    ensemble_size,\n    fuel_efficiency_model1 - fuel_efficiency_std_model1,\n    fuel_efficiency_model1 + fuel_efficiency_std_model1,\n    color=\"#3498db\",\n    alpha=0.2,\n)\n\nax.plot(\n    ensemble_size,\n    fuel_efficiency_model2,\n    \"s-\",\n    color=\"#e74c3c\",\n    linewidth=2,\n    markersize=5,\n    label=label_fuel_efficiency_2,\n)\nax.fill_between(\n    ensemble_size,\n    fuel_efficiency_model2 - fuel_efficiency_std_model2,\n    fuel_efficiency_model2 + fuel_efficiency_std_model2,\n    color=\"#e74c3c\",\n    alpha=0.2,\n)\n\n# Enhancing the x ticks and labels\nax.set_xticks(xticks_values)\nax.set_xticklabels([str(i) for i in xticks_values], fontsize=12)\n\n# Axis labels and grid for the primary y-axis (Fuel Efficiency)\nax.set_xlabel(xlabel_value, fontsize=16)\nax.set_ylabel(\"Fuel Efficiency (MPG)\", fontsize=16)\nax.grid(True, linestyle=\"--\", which=\"both\", alpha=0.5)\n\n# Configuring the legends to be visually pleasing\nlines_1, labels_1 = ax.get_legend_handles_labels()\n\n# Legend and layout adjustments\nax.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_75.pdf', bbox_inches='tight')"}
{"idx": "line_77", "instruction": "There is a reference image for you and I also have a set of data about car manufacturers and their models' performance scores over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data generation\nmanufacturers = [\"Tesla\", \"Ford\", \"Toyota\"]\nmodels = [\"Model S\", \"F-150\", \"Camry\"]\nyears = np.arange(2010, 2020)\n\ndata = {\n\"Tesla\": {\n\"Model S\": np.random.rand(10) * 10 + 85,\n\"F-150\": np.random.rand(10) * 10 + 70,\n\"Camry\": np.random.rand(10) * 10 + 75,\n},\n\"Ford\": {\n\"Model S\": np.random.rand(10) * 10 + 75,\n\"F-150\": np.random.rand(10) * 10 + 65,\n\"Camry\": np.random.rand(10) * 10 + 70,\n},\n\"Toyota\": {\n\"Model S\": np.random.rand(10) * 10 + 65,\n\"F-150\": np.random.rand(10) * 10 + 60,\n\"Camry\": np.random.rand(10) * 10 + 80,\n},\n}\n# Axes Limits and Labels\nxlabel_value = \"Year\"\nylabel_value = \"Performance Score\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 12.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data generation\nmanufacturers = [\"Tesla\", \"Ford\", \"Toyota\"]\nmodels = [\"Model S\", \"F-150\", \"Camry\"]\nyears = np.arange(2010, 2020)\n\ndata = {\n    \"Tesla\": {\n        \"Model S\": np.random.rand(10) * 10 + 85,\n        \"F-150\": np.random.rand(10) * 10 + 70,\n        \"Camry\": np.random.rand(10) * 10 + 75,\n    },\n    \"Ford\": {\n        \"Model S\": np.random.rand(10) * 10 + 75,\n        \"F-150\": np.random.rand(10) * 10 + 65,\n        \"Camry\": np.random.rand(10) * 10 + 70,\n    },\n    \"Toyota\": {\n        \"Model S\": np.random.rand(10) * 10 + 65,\n        \"F-150\": np.random.rand(10) * 10 + 60,\n        \"Camry\": np.random.rand(10) * 10 + 80,\n    },\n}\n# Axes Limits and Labels\nxlabel_value = \"Year\"\nylabel_value = \"Performance Score\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting setup\nfig, axs = plt.subplots(3, 1, figsize=(8, 12), sharex=True)\n\n# Styling choices\ncolors = [\"#ff69b4\", \"#00fa9a\", \"#1e90ff\"]  # Brighter, more vivid colors\nmarkers = [\"p\", \"*\", \"h\"]  # More complex marker styles\nline_styles = [\":\", \"-.\", \"--\"]  # More distinct line styles\n\n# Custom background styling\nfig.set_facecolor(\"#f0f0f0\")\nfor ax in axs:\n    ax.set_facecolor(\"#f7f7f7\")\n\n# Plotting\nfor idx, manufacturer in enumerate(manufacturers):\n    ax = axs[idx]\n    ax.grid(color=\"gray\", linestyle=\":\", linewidth=0.5)  # Lighter grid\n    for model, color, marker, line_style in zip(\n        models, colors, markers, line_styles\n    ):\n        scores = data[manufacturer][model]\n        ax.plot(\n            years,\n            scores,\n            marker=marker,\n            color=color,\n            label=f\"{model} - {manufacturer}\",\n            linestyle=line_style,\n            markersize=10,\n        )\n        ax.set_title(f\"Performance of {manufacturer}\", fontsize=14)\n        ax.set_xlabel(xlabel_value, fontsize=12)\n        ax.set_ylabel(ylabel_value, fontsize=12)\n        ax.legend(\n            loc=\"upper left\", fancybox=True, framealpha=1, shadow=True, borderpad=1\n        )\n        # Enhanced visibility\n        for spine in ax.spines.values():\n            spine.set_visible(True)\n            spine.set_color(\"#dddddd\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_77.pdf', bbox_inches='tight')"}
{"idx": "line_78", "instruction": "There is a reference image for you and I also have a set of data about monthly temperature variation for 6 cities over 2 years (24 months). Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Time series data: Monthly temperature variation for 6 cities over 2 years (24 months)\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"] \ntemperatures = {\n\"New York\": np.array([28.23, 32.09, 31.77, 32.26, 31.81, 36.51, 34.75, 42.92, 45.36, 38.02, 45.51, 42.93]),\n\"Los Angeles\": np.array([25.68, 30.62, 23.44, 24.96, 25.66, 35.14, 35.96, 38.25, 40.7, 40.26, 38.25, 42.81]),\n\"Chicago\": np.array([22.37, 34.16, 25.59, 42.98, 35.89, 35.11, 33.47, 45.03, 40.03, 43.64, 34.01, 47.35]),\n\"Houston\": np.array([29.18, 30.62, 36.88, 34.32, 30.85, 33.37, 38.65, 30.45, 40.91, 42.33, 36.79, 36.93]),\n\"Miami\": np.array([25.49, 28.52, 28.75, 29.54, 29.69, 33.28, 32.56, 38.46, 40.55, 36.11, 41.55, 40.29]),\n\"Denver\": np.array([31.36, 39.88, 24.15, 25.83, 25.86, 43.47, 43.74, 46.95, 50.48, 48.26, 42.87, 50.61]),\n}\n\n# Axes Limits and Labels\nxlabel_value = \"Month\"\nylabel_value = \"Temperature (\u00b0C)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Time series data: Monthly temperature variation for 6 cities over 2 years (24 months)\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"] \ntemperatures = {\n    \"New York\": np.array([28.23, 32.09, 31.77, 32.26, 31.81, 36.51, 34.75, 42.92, 45.36, 38.02, 45.51, 42.93]),\n    \"Los Angeles\": np.array([25.68, 30.62, 23.44, 24.96, 25.66, 35.14, 35.96, 38.25, 40.7, 40.26, 38.25, 42.81]),\n    \"Chicago\": np.array([22.37, 34.16, 25.59, 42.98, 35.89, 35.11, 33.47, 45.03, 40.03, 43.64, 34.01, 47.35]),\n    \"Houston\": np.array([29.18, 30.62, 36.88, 34.32, 30.85, 33.37, 38.65, 30.45, 40.91, 42.33, 36.79, 36.93]),\n    \"Miami\": np.array([25.49, 28.52, 28.75, 29.54, 29.69, 33.28, 32.56, 38.46, 40.55, 36.11, 41.55, 40.29]),\n    \"Denver\": np.array([31.36, 39.88, 24.15, 25.83, 25.86, 43.47, 43.74, 46.95, 50.48, 48.26, 42.87, 50.61]),\n}\n\n# Axes Limits and Labels\nxlabel_value = \"Month\"\nylabel_value = \"Temperature (\u00b0C)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Creating custom gradient color maps for each city\ncolors = [\"#ff7f0e\", \"#2ca02c\", \"#1f77b4\", \"#d62728\", \"#9467bd\", \"#8c564b\"]\n\n# Plot setup\nfig, axs = plt.subplots(3, 2, figsize=(10, 10))  # 3x2 subplot grid\naxs = axs.flatten()\n\n# Markers and line styles for diversity\nmarkers = [\"o\", \"^\", \"s\", \"p\", \"*\", \"x\"]\nline_styles = [\"-\", \"--\", \"-.\", \":\", \"-\", \"--\"]\n\n# Plot each city with its distinct color gradient and style\nfor ax, (city, temps), color, marker, line_style in zip(\n    axs, temperatures.items(), colors, markers, line_styles\n):\n    points = ax.plot(\n        months,\n        temps,\n        label=f\"{city} Temperature\",\n        marker=marker,\n        linestyle=line_style,\n        linewidth=2,\n        color=color,\n    )\n    ax.plot(\n        months, temps, marker=marker, linestyle=line_style, color=color, linewidth=2\n    )\n    ax.set_title(f\"{city}\", fontsize=14)\n    ax.set_xlabel(xlabel_value, fontsize=12)\n    ax.set_ylabel(ylabel_value, fontsize=12)\n    ax.set_facecolor(\"#f0f0f0\")  # Light grey background for clarity\n    ax.grid(True, linestyle=\"--\", alpha=0.5)\n    ax.legend(loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('line_78.pdf', bbox_inches='tight')"}
{"idx": "line_79", "instruction": "There is a reference image for you and I also have a set of data about monthly electricity consumption for households. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Example data: Monthly electricity consumption for 5 households over 5 months\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]\nhouseholds = [\"Household 1\", \"Household 2\"]\nconsumption = {\n\"Household 1\": np.array([65.28, 38.0, 49.57, 74.82, 67.35]),\n\"Household 2\": np.array([86.1, 52.0, 66.47, 98.02, 88.69]),\n}\n\n# Axes Limits and Labels\nxlabel_value = \"Month\"\nylabel_value = \"Electricity Consumption (kWh)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 18.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Example data: Monthly electricity consumption for 5 households over 5 months\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]\nhouseholds = [\"Household 1\", \"Household 2\"]\nconsumption = {\n    \"Household 1\": np.array([65.28, 38.0, 49.57, 74.82, 67.35]),\n    \"Household 2\": np.array([86.1, 52.0, 66.47, 98.02, 88.69]),\n}\n\n# Axes Limits and Labels\nxlabel_value = \"Month\"\nylabel_value = \"Electricity Consumption (kWh)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots\nfig, axs = plt.subplots(1, 5, figsize=(18, 4), facecolor=\"whitesmoke\")\n\n# Customize colors and markers\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\"]\nmarkers = [\"o-\", \"s-\", \"p-\", \"*-\", \"x-\"]\n\nfor i, ax in enumerate(axs):\n    for j, household in enumerate(households):\n        y = consumption[household]\n        ax.plot(months, y, markers[j], label=f\"{household}\", color=colors[j])\n    ax.set_title(f\"{months[i]} Electricity\", fontsize=16)\n    ax.set_xlabel(xlabel_value, fontsize=12)\n    ax.set_ylabel(ylabel_value, fontsize=12)\n    ax.grid(True, linestyle=\"--\", which=\"both\", color=\"gray\", alpha=0.5)\n\n# Adjust layout and display legend\nplt.legend(loc=\"center\", bbox_to_anchor=(-1.5, -0.3), ncol=5, fontsize=14)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_79.pdf', bbox_inches='tight')"}
{"idx": "line_80", "instruction": "There is a reference image for you and I also have a set of data about cumulative values across different growth phases for multiple categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nx = np.arange(1, 6)\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"] # Expanded categories\n\n# Generate cumulative data with non-linear trends for two runs each\ny_data = {\n\"Category A\": [\nnp.square(np.arange(1, 6)) + 20,\nnp.square(np.arange(1, 6)) + 30,\n],\n\"Category B\": [np.exp(np.arange(1, 6) * 0.34), np.exp(np.arange(1, 6) * 0.19)],\n\"Category C\": [\nnp.square(np.arange(1, 6) - 3) + 24,\nnp.square(np.arange(1, 6) - 3) + 57,\n],\n\"Category D\": [\nnp.log(np.arange(1, 6) * 5) * 10 + 41,\nnp.log(np.arange(1, 6) * 5) * 10 + 15,\n],\n\"Category E\": [\nnp.cos(np.arange(1, 6)) * 15 + 35,\nnp.cos(np.arange(1, 6)) * 15 + 26,\n],\n\"Category F\": [np.arange(1, 6) ** 1.5 * 10, np.arange(1, 6) ** 1.5 * 12],\n}\n# Axes Limits and Labels\nxlabel_value = \"Growth Phase\"\n\nylabel_value = \"Cumulative Value\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nx = np.arange(1, 6)\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]  # Expanded categories\n\n# Generate cumulative data with non-linear trends for two runs each\ny_data = {\n    \"Category A\": [\n        np.square(np.arange(1, 6))  + 20,\n        np.square(np.arange(1, 6))  + 30,\n    ],\n    \"Category B\": [np.exp(np.arange(1, 6) * 0.34), np.exp(np.arange(1, 6) * 0.19)],\n    \"Category C\": [\n        np.square(np.arange(1, 6) - 3) + 24,\n        np.square(np.arange(1, 6) - 3) + 57,\n    ],\n    \"Category D\": [\n        np.log(np.arange(1, 6) * 5) * 10 + 41,\n        np.log(np.arange(1, 6) * 5) * 10 + 15,\n    ],\n    \"Category E\": [\n        np.cos(np.arange(1, 6)) * 15 + 35,\n        np.cos(np.arange(1, 6)) * 15 + 26,\n    ],\n    \"Category F\": [np.arange(1, 6) ** 1.5 * 10, np.arange(1, 6) ** 1.5 * 12],\n}\n# Axes Limits and Labels\nxlabel_value = \"Growth Phase\"\nxticklabels = [\"Phase 1\", \"Phase 2\", \"Phase 3\", \"Phase 4\", \"Phase 5\"]\n\nylabel_value = \"Cumulative Value\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots\nfig, axs = plt.subplots(2, 3, figsize=(9, 6), facecolor=\"beige\")\naxs = axs.flatten()  # Flatten the array to make indexing easier\n\n# Enhanced color palette\ncolors = [\n    [\"#8034a0\", \"#20b2aa\"],\n    [\"#dd5145\", \"#f08080\"],\n    [\"#faa74b\", \"#8034a0\"],\n    [\"#67a9cf\", \"#dd5145\"],\n    [\"#20b2aa\", \"#67a9cf\"],\n    [\"#f08080\", \"#faa74b\"],\n]\nfor i, category in enumerate(categories):\n    for run in range(2):\n        y = y_data[f\"Category {category}\"][run]\n        axs[i].plot(\n            x,\n            y,\n            \"-o\",\n            label=f\"Run {run+1}\",\n            color=colors[i][run],\n            markersize=10,\n            linewidth=3,\n        )\n    axs[i].set_xticks(x)\n    axs[i].set_xticklabels(\n        xticklabels, rotation=45\n    )\n    axs[i].set_title(f\"Category {category} Growth\", fontsize=14)\n    axs[i].set_xlabel(xlabel_value, fontsize=10)\n    axs[i].set_ylabel(ylabel_value, fontsize=10)\n    axs[i].grid(True, linestyle=\"--\", color=\"gray\", alpha=0.5)\n    axs[i].set_facecolor(\"lavenderblush\")\n    axs[i].legend(loc=\"upper left\", fontsize=9)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_80.pdf', bbox_inches='tight')"}
{"idx": "pie_1", "instruction": "There is a reference image for you and I also have a set of data about energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data to plot\nsizes = [40.2, 25.3, 15.4, 9.6, 7.1, 2.4] # Example: percentages of energy sources\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1) # add explode parameter to separate slices\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data to plot\nsizes = [40.2, 25.3, 15.4, 9.6, 7.1, 2.4]  # Example: percentages of energy sources\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"]\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # add explode parameter to separate slices\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(5, 5))\nax.pie(\n    sizes,\n    colors=colors,\n    autopct=\"%1.1f%%\",\n    startangle=140,\n    wedgeprops=dict(edgecolor=\"w\"),\n    explode=explode,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('pie_1.pdf', bbox_inches='tight')"}
{"idx": "pie_2", "instruction": "There is a reference image for you and I also have a set of data about transportation modes usage and their specific usage for commuting. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Different data for another example\nlabels = [\"Cars 40%\", \"Bikes 25%\", \"Buses 20%\", \"Trains 15%\"]\nouter_sizes = [40, 25, 20, 15] # usage of transportation modes\ninner_sizes = [20, 30, 25, 35] # usage of transportation modes for commuting\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Different data for another example\nlabels = [\"Cars 40%\", \"Bikes 25%\", \"Buses 20%\", \"Trains 15%\"]\nouter_sizes = [40, 25, 20, 15]  # usage of transportation modes\ninner_sizes = [20, 30, 25, 35]  # usage of transportation modes for commuting\n\nouter_colors = [\"#ffcc99\", \"#66b3ff\", \"#99ff99\", \"#ffccff\"]\ninner_colors = [\"#ff9999\", \"#66c2a5\", \"#8da0cb\", \"#e78ac3\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Outer ring\nwedges, texts, autotexts = ax.pie(\n    outer_sizes,\n    labels=labels,\n    radius=1.2,\n    colors=outer_colors,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.85,\n    startangle=160,\n)\n\n# Inner ring\nwedges2, texts2, autotexts2 = ax.pie(\n    inner_sizes,\n    radius=0.8,\n    colors=inner_colors,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.75,\n    startangle=160,\n)\n\n# Equal aspect ratio ensures that pie chart is drawn as a circle\nax.axis(\"equal\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('pie_2.pdf', bbox_inches='tight')"}
{"idx": "pie_4", "instruction": "There is a reference image for you and I also have a set of data about major crop production percentages. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nlabels = [\"Wheat 35%\", \"Corn 25%\", \"Rice 20%\", \"Soybeans 20%\"]\nsizes = [35, 25, 20, 20]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nlabels = [\"Wheat 35%\", \"Corn 25%\", \"Rice 20%\", \"Soybeans 20%\"]\nsizes = [35, 25, 20, 20]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(5, 5))\nax.pie(sizes, labels=labels, hatch=['**O', 'oO', 'O.O', '.||.'])\nplt.title(\"Major Crop Production\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('pie_4.pdf', bbox_inches='tight')"}
{"idx": "pie_5", "instruction": "There is a reference image for you and I also have a set of data about the market share of various tech companies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data to plot - Market share of various tech companies\nsizes = [15, 25, 20, 10, 20, 10]\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1) # add explode parameter to separate slices\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data to plot - Market share of various tech companies\nsizes = [15, 25, 20, 10, 20, 10]\ncolors = plt.cm.Blues(np.linspace(0, 1, 6))  # Use colormap to color the slices\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # add explode parameter to separate slices\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(5, 5))\nax.pie(\n    sizes,\n    colors=colors,\n    autopct=\"%1.1f%%\",\n    startangle=140,\n    wedgeprops=dict(edgecolor=\"w\"),\n    explode=explode,\n)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis(\"equal\")\n\nplt.title(\"Tech Company Market Shares\", fontsize=16)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('pie_5.pdf', bbox_inches='tight')"}
{"idx": "pie_7", "instruction": "There is a reference image for you and I also have a set of data about different modes of transportation usage. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data to plot\nlabels = [\"Cars\", \"Bicycles\", \"Buses\", \"Trains\", \"Walking\"]\nsizes = [40, 15, 25, 10, 10]\nexplode = (0.1, 0, 0, 0, 0)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data to plot\nlabels = [\"Cars\", \"Bicycles\", \"Buses\", \"Trains\", \"Walking\"]\nsizes = [40, 15, 25, 10, 10]\ncolors = plt.cm.Oranges(np.linspace(0.3, 1, len(sizes)))\nexplode = (0.1, 0, 0, 0, 0)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nplt.figure(figsize=(8, 6))\nplt.pie(\n    sizes,\n    explode=explode,\n    colors=colors,\n    autopct=\"%1.1f%%\",\n    shadow=False,\n    startangle=140,\n)\nplt.axis(\"equal\")\n\n# Add legend\nplt.legend(labels, loc=\"upper left\")\nplt.title(\"Modes of Transportation Usage\", fontsize=16, y=1.05)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('pie_7.pdf', bbox_inches='tight')"}
{"idx": "pie_8", "instruction": "There is a reference image for you and I also have a set of data about modes of transportation usage. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data to plot\nlabels = [\"Cars\", \"Bicycles\", \"Buses\", \"Trains\", \"Motorcycles\"]\nsizes = [35.4, 15.3, 25.7, 18.2, 5.4]\ntitle = \"Modes of Transportation Usage\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data to plot\nlabels = [\"Cars\", \"Bicycles\", \"Buses\", \"Trains\", \"Motorcycles\"]\nsizes = [35.4, 15.3, 25.7, 18.2, 5.4]\ncolors = plt.cm.Paired(np.linspace(0, 1, len(sizes)))\nexplode = (0, 0.1, 0, 0, 0)  # only \"explode\" the 2nd slice (Bicycles)\ntitle = \"Modes of Transportation Usage\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot setup\nfig, ax = plt.subplots(figsize=(6, 6))\nwedges, texts, autotexts = ax.pie(\n    sizes,\n    explode=explode,\n    colors=colors,\n    autopct=\"%1.1f%%\",\n    shadow=False,\n    startangle=140,\n)\n\n# Adding annotations\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"), bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1) / 2.0 + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(\n        labels[i],\n        xy=(x, y),\n        xytext=(1.35 * np.sign(x), 1.2 * y),\n        horizontalalignment=horizontalalignment,\n        **kw\n    )\n\n# Title and equal axis\nax.set_title(title, fontsize=16, x=0.5, y=1)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('pie_8.pdf', bbox_inches='tight')"}
{"idx": "pie_9", "instruction": "There is a reference image for you and I also have a set of data about platform usage in a tech company and for a specific project. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Different data for another example\nlabels = [\"iOS\", \"Android\", \"Web\", \"Desktop\", \"Other\"]\nouter_sizes = [350, 450, 200, 120, 80] # usage of platforms in a tech company\ninner_sizes = [150, 250, 120, 60, 20] # usage of platforms for a specific project\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Different data for another example\nlabels = [\"iOS\", \"Android\", \"Web\", \"Desktop\", \"Other\"]\nouter_sizes = [350, 450, 200, 120, 80]  # usage of platforms in a tech company\ninner_sizes = [150, 250, 120, 60, 20]  # usage of platforms for a specific project\n\nouter_colors = [\"#ff9999\", \"#66b3ff\", \"#99ff99\", \"#ffcc99\", \"#c2c2f0\"]\ninner_colors = [\"#c4e17f\", \"#76dd1e\", \"#5a69af\", \"#edc214\", \"#ebefc9\"]\n\nexplode_outer = (0.1, 0, 0, 0, 0)  # only explode the 1st slice (IOS)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Outer ring\nwedges, texts, autotexts = ax.pie(\n    outer_sizes,\n    labels=labels,\n    radius=1.2,\n    colors=outer_colors,\n    explode=explode_outer,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.85,\n    startangle=160,\n)\n\n# Inner ring\nwedges2, texts2, autotexts2 = ax.pie(\n    inner_sizes,\n    radius=0.8,\n    colors=inner_colors,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.75,\n    startangle=160,\n)\n\n# Equal aspect ratio ensures that pie chart is drawn as a circle\nax.axis(\"equal\")\n\n# Title for the double layer pie chart\nax.set_title(\"Platform Usage - Company vs. Project\", fontsize=20, y=1.05)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('pie_9.pdf', bbox_inches='tight')"}
{"idx": "pie_10", "instruction": "There is a reference image for you and I also have a set of data about technology usage statistics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nusage_stats = [\n\"15% Gaming\",\n\"30% Social Media\",\n\"10% Streaming\",\n\"10% Online Shopping\",\n\"15% Remote Work\",\n\"20% Other\",\n]\n\ndata = [15, 30, 10, 10, 15, 20]\ntitle = \"Technology Usage: A Pie Chart\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nusage_stats = [\n    \"15% Gaming\",\n    \"30% Social Media\",\n    \"10% Streaming\",\n    \"10% Online Shopping\",\n    \"15% Remote Work\",\n    \"20% Other\",\n]\n\ndata = [15, 30, 10, 10, 15, 20]\ntitle = \"Technology Usage: A Pie Chart\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(6, 4), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"), bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1) / 2.0 + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = f\"angle,angleA=0,angleB={ang}\"\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(\n        usage_stats[i],\n        xy=(x, y),\n        xytext=(1.35 * np.sign(x), 1.4 * y),\n        horizontalalignment=horizontalalignment,\n        **kw,\n    )\n\nax.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('pie_10.pdf', bbox_inches='tight')"}
{"idx": "pie_11", "instruction": "There is a reference image for you and I also have a set of data about health expenditures for a population and specific health programs. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Different data for another example\nlabels = [\"Hospitals\", \"Clinics\", \"Pharmacy\", \"Fitness\", \"Others\"]\nouter_sizes = [500, 300, 200, 100, 150] # health expenditures for a population\ninner_sizes = [250, 120, 80, 30, 20] # health expenditures for specific health programs\n\ntitle = \"Health Expenditures - Population vs. Programs\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Different data for another example\nlabels = [\"Hospitals\", \"Clinics\", \"Pharmacy\", \"Fitness\", \"Others\"]\nouter_sizes = [500, 300, 200, 100, 150]  # health expenditures for a population\ninner_sizes = [250, 120, 80, 30, 20]  # health expenditures for specific health programs\n\nouter_colors = [\"#ff9999\", \"#66b3ff\", \"#99ff99\", \"#ffcc99\", \"#c2c2f0\"]\ninner_colors = [\"#c4e17f\", \"#76dd1e\", \"#5a69af\", \"#edc214\", \"#ebefc9\"]\nouter_hatch = [\"/\", \"\\\\\", \"|\", \"-\", \"+\"]  # Different hatching for outer ring\ninner_hatch = [\"x\", \"*\", \"o\", \"O\", \".\"]  # Different hatching for inner ring\n\nexplode_outer = (0.1, 0, 0, 0, 0)  # only explode the 1st slice (Hospitals)\ntitle = \"Health Expenditures - Population vs. Programs\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Outer ring\nwedges, texts, autotexts = ax.pie(\n    outer_sizes,\n    labels=labels,\n    radius=1.2,\n    colors=outer_colors,\n    explode=explode_outer,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.85,\n    startangle=160,\n    wedgeprops=dict(width=0.3, edgecolor=\"w\", hatch=\"*\"),\n)\n\n# Inner ring\nwedges2, texts2, autotexts2 = ax.pie(\n    inner_sizes,\n    radius=0.9,\n    colors=inner_colors,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.75,\n    startangle=160,\n    wedgeprops=dict(width=0.3, edgecolor=\"w\", hatch=\"o\"),\n)\n\n# Customizing the autotexts for better visibility\nfor autotext in autotexts + autotexts2:\n    autotext.set_color(\"black\")\n    autotext.set_fontsize(10)\n\n# Title for the double layer pie chart\nax.set_title(title, fontsize=16, y=1.05)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Improve layout to make room for legend or labels if necessary\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('pie_11.pdf', bbox_inches='tight')"}
{"idx": "pie_12", "instruction": "There is a reference image for you and I also have a set of data about traffic modes distribution for the years 2023 and 2024. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the charts\nlabels = [\"Cars\", \"Buses\", \"Trains\", \"Bikes\"]\ntraffic_data_2023 = [35.7, 24.9, 18.0, 21.4]\ntraffic_data_2024 = [32.5, 28.3, 22.4, 16.8]\ntitles = [\"Traffic Distribution 2023\", \"Traffic Distribution 2024\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the charts\nlabels = [\"Cars\", \"Buses\", \"Trains\", \"Bikes\"]\ntraffic_data_2023 = [35.7, 24.9, 18.0, 21.4]\ntraffic_data_2024 = [32.5, 28.3, 22.4, 16.8]\ncolors = [\"#ff9999\", \"#66b3ff\", \"#99ff99\", \"#ffcc99\"]\ntitles = [\"Traffic Distribution 2023\", \"Traffic Distribution 2024\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure with specific dimensions\nfig, ax = plt.subplots(1, 2, figsize=(10, 4))\n\n# Traffic Distribution 2023 Donut Chart\nexplode1 = (0.1, 0, 0, 0)\nax[0].pie(\n    traffic_data_2023,\n    labels=labels,\n    colors=colors,\n    startangle=90,\n    counterclock=False,\n    wedgeprops=dict(width=0.3),\n    explode=explode1,\n    autopct=\"%1.1f%%\",\n)\nax[0].set_title(titles[0])\n\n# Traffic Distribution 2024 Donut Chart\nexplode2 = (0, 0.2, 0, 0)\nax[1].pie(\n    traffic_data_2024,\n    labels=labels,\n    colors=colors,\n    startangle=90,\n    counterclock=False,\n    wedgeprops=dict(width=0.3),\n    explode=explode2,\n    autopct=\"%1.1f%%\",\n)\nax[1].set_title(titles[1])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap and Show plot\nplt.tight_layout()\nplt.savefig('pie_12.pdf', bbox_inches='tight')"}
{"idx": "quiver_1", "instruction": "There is a reference image for you and I also have a set of data about temperature changes in different cities during summer and winter. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the plot\ncities_1 = [\"Berlin\", \"Paris\", \"London\"]\nsummer_avg_temp_1 = [19.5, 20.3, 18.2]\nsummer_temp_change_1 = [5.1, 3.8, 4.3]\nwinter_avg_temp_1 = [3.0, 5.2, 4.8]\nwinter_temp_change_1 = [1.5, -2.3, 3.0]\nax1_labels = [\"Summer Temp\\nChange (\u00b0C)\", \"Winter Temp\\nChange (\u00b0C)\"]\n\ncities_2 = [\"Tokyo\", \"Seoul\", \"Beijing\"]\nsummer_avg_temp_2 = [25.2, 24.5, 26.1]\nsummer_temp_change_2 = [1.5, 1.7, 2.0]\nwinter_avg_temp_2 = [5.8, 1.5, 2.0]\nwinter_temp_change_2 = [4.0, 1.8, 2.8]\nax2_labels = [\"Summer Temp\\nChange (\u00b0C)\", \"Winter Temp\\nChange (\u00b0C)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\ncities_1 = [\"Berlin\", \"Paris\", \"London\"]\nsummer_avg_temp_1 = [19.5, 20.3, 18.2]\nsummer_temp_change_1 = [5.1, 3.8, 4.3]\nwinter_avg_temp_1 = [3.0, 5.2, 4.8]\nwinter_temp_change_1 = [1.5, -2.3, 3.0]\nax1_labels = [\"Summer Temp\\nChange (\u00b0C)\", \"Winter Temp\\nChange (\u00b0C)\"]\n\ncities_2 = [\"Tokyo\", \"Seoul\", \"Beijing\"]\nsummer_avg_temp_2 = [25.2, 24.5, 26.1]\nsummer_temp_change_2 = [1.5, 1.7, 2.0]\nwinter_avg_temp_2 = [5.8, 1.5, 2.0]\nwinter_temp_change_2 = [4.0, 1.8, 2.8]\nax2_labels = [\"Summer Temp\\nChange (\u00b0C)\", \"Winter Temp\\nChange (\u00b0C)\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# Set the y-axis offsets to be in the middle of each grid\noffset = 0.5\n\n# First subplot (cities_1)\nfor i, city in enumerate(cities_1):\n    # Summer temp change line with arrow and black dots at start and end\n    ax1.annotate(\n        \"\",\n        xy=(summer_avg_temp_1[i], i + offset * 3 / 2),\n        xytext=(summer_avg_temp_1[i] + summer_temp_change_1[i], i + offset * 3 / 2),\n        arrowprops=dict(arrowstyle=\"<-\", color=\"red\"),\n    )\n    ax1.scatter(\n        [summer_avg_temp_1[i], summer_avg_temp_1[i] + summer_temp_change_1[i]],\n        [i + offset * 3 / 2, i + offset * 3 / 2],\n        color=\"black\",\n        s=10,\n    )\n    ax1.annotate(\n        f\"{summer_temp_change_1[i]:.1f}\u00b0C\",\n        (summer_avg_temp_1[i] + summer_temp_change_1[i], i + offset * 1.75),\n        color=\"red\",\n        ha=\"right\",\n        va=\"center\",\n    )\n\n    # Winter temp change line with arrow and black dots at start and end\n    ax1.annotate(\n        \"\",\n        xy=(winter_avg_temp_1[i], i + offset / 2),\n        xytext=(winter_avg_temp_1[i] + winter_temp_change_1[i], i + offset / 2),\n        arrowprops=dict(arrowstyle=\"<-\", color=\"blue\"),\n    )\n    ax1.scatter(\n        [winter_avg_temp_1[i], winter_avg_temp_1[i] + winter_temp_change_1[i]],\n        [i + offset / 2, i + offset / 2],\n        color=\"black\",\n        s=10,\n    )\n    ax1.annotate(\n        f\"{winter_temp_change_1[i]:.1f}\u00b0C\",\n        (winter_avg_temp_1[i] + winter_temp_change_1[i], i + offset * 0.75),\n        color=\"blue\",\n        ha=\"left\",\n        va=\"center\",\n    )\n\n# Second subplot (cities_2)\nfor i, city in enumerate(cities_2):\n    ax2.annotate(\n        \"\",\n        xy=(summer_avg_temp_2[i], i + offset * 3 / 2),\n        xytext=(summer_avg_temp_2[i] + summer_temp_change_2[i], i + offset * 3 / 2),\n        arrowprops=dict(arrowstyle=\"<-\", color=\"red\"),\n    )\n    ax2.scatter(\n        [summer_avg_temp_2[i], summer_avg_temp_2[i] + summer_temp_change_2[i]],\n        [i + offset * 3 / 2, i + offset * 3 / 2],\n        color=\"black\",\n        s=10,\n    )\n    ax2.annotate(\n        f\"{summer_temp_change_2[i]:.1f}\u00b0C\",\n        (summer_avg_temp_2[i] + summer_temp_change_2[i], i + offset * 1.75),\n        color=\"red\",\n        ha=\"right\",\n        va=\"center\",\n    )\n\n    ax2.annotate(\n        \"\",\n        xy=(winter_avg_temp_2[i], i + offset / 2),\n        xytext=(winter_avg_temp_2[i] + winter_temp_change_2[i], i + offset / 2),\n        arrowprops=dict(arrowstyle=\"<-\", color=\"blue\"),\n    )\n    ax2.scatter(\n        [winter_avg_temp_2[i], winter_avg_temp_2[i] + winter_temp_change_2[i]],\n        [i + offset / 2, i + offset / 2],\n        color=\"black\",\n        s=10,\n    )\n    ax2.annotate(\n        f\"{winter_temp_change_2[i]:.1f}\u00b0C\",\n        (winter_avg_temp_2[i] + winter_temp_change_2[i], i + offset * 0.75),\n        color=\"blue\",\n        ha=\"left\",\n        va=\"center\",\n    )\n\n# set y-axis limits\nax1.set_ylim(0, len(cities_1))\nax2.set_ylim(0, len(cities_2))\n\n# Set x-axis limits uniformly\nax1.set_xlim(0, 30)\nax2.set_xlim(0, 30)\n\n# Adjust the y-axis tick positions\nax1.set_yticks([i + offset for i in range(len(cities_1))])\nax1.set_yticklabels(cities_1)\nax2.set_yticks([i + offset for i in range(len(cities_2))])\nax2.set_yticklabels(cities_2)\nax2.yaxis.tick_right()\nax2.yaxis.set_label_position(\"right\")\n\n# Offset grid lines on the y-axis\nax1.set_yticks([i for i in range(len(cities_1))], minor=True)\nax2.set_yticks([i for i in range(len(cities_2))], minor=True)\nax1.yaxis.grid(True, which=\"minor\", linewidth=0.5, alpha=0.7, color=\"black\")\nax2.yaxis.grid(True, which=\"minor\", linewidth=0.5, alpha=0.7, color=\"black\")\n\n# add x-axis grid lines and set gap is 1\nax1.xaxis.set_major_locator(plt.MultipleLocator(2))\nax2.xaxis.set_major_locator(plt.MultipleLocator(2))\nax1.grid(axis=\"x\", linestyle=\"--\", linewidth=0.5)\nax2.grid(axis=\"x\", linestyle=\"--\", linewidth=0.5)\n\n# Create arrow-shaped legend entries with a line that aligns with the arrowhead\nred_arrow = mlines.Line2D(\n    [],\n    [],\n    color=\"red\",\n    marker=\">\",\n    linestyle=\"-\",\n    markersize=8,\n    label=ax1_labels[0],\n    linewidth=2,\n    markeredgewidth=2,\n    markevery=(1, 1),\n)\nblue_arrow = mlines.Line2D(\n    [],\n    [],\n    color=\"blue\",\n    marker=\">\",\n    linestyle=\"-\",\n    markersize=8,\n    label=ax1_labels[1],\n    linewidth=2,\n    markeredgewidth=2,\n    markevery=(1, 1),\n)\nfig.legend(handles=[red_arrow, blue_arrow], bbox_to_anchor=(0.45, 0), ncol=2)\n\nred_arrow = mlines.Line2D(\n    [],\n    [],\n    color=\"red\",\n    marker=\">\",\n    linestyle=\"-\",\n    markersize=8,\n    label=ax2_labels[0],\n    linewidth=2,\n    markeredgewidth=2,\n    markevery=(1, 1),\n)\nblue_arrow = mlines.Line2D(\n    [],\n    [],\n    color=\"blue\",\n    marker=\">\",\n    linestyle=\"-\",\n    markersize=8,\n    label=ax2_labels[1],\n    linewidth=2,\n    markeredgewidth=2,\n    markevery=(1, 1),\n)\nfig.legend(handles=[red_arrow, blue_arrow], bbox_to_anchor=(0.85, 0), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('quiver_1.pdf', bbox_inches='tight')"}
{"idx": "quiver_3", "instruction": "There is a reference image for you and I also have a set of data about wind vector fields and temperature variations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the vector field function for wind\ndef wind_vector_field(X, Y):\n# Example function simulating wind directions\nU = -Y\nV = X\nreturn U, V\ndef modified_wind_vector_field(X, Y):\n# Example modification to wind directions\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nreturn U, V\n# Create a grid of points\nx = np.linspace(0, 0.6, 10)\ny = np.linspace(0, 0.6, 10)\nX, Y = np.meshgrid(x, y)\n\n# Compute the wind vector field\nU, V = wind_vector_field(X, Y)\n\n# Compute the modified wind vector field\nU_mod, V_mod = modified_wind_vector_field(X, Y)\n\n# Plot temperature variations as curves with slightly different denominators for variation\nx = np.linspace(0.2, 0.5, 100)\nxlabel = \"Longitude\"\nylabel = \"Latitude\"\npatch_labels = [\"Original Wind Field\", \"Modified Wind Field\"]\nline_labels = [\"Summer Temperature\", \"Winter Temperature\", \"Spring Temperature\", \"Autumn Temperature\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the vector field function for wind\ndef wind_vector_field(X, Y):\n    # Example function simulating wind directions\n    U = -Y\n    V = X\n    return U, V\n\n\ndef modified_wind_vector_field(X, Y):\n    # Example modification to wind directions\n    U = -1 - X**2 + Y\n    V = 1 + X - Y**2\n    return U, V\n\n\n# Create a grid of points\nx = np.linspace(0, 0.6, 10)\ny = np.linspace(0, 0.6, 10)\nX, Y = np.meshgrid(x, y)\n\n# Compute the wind vector field\nU, V = wind_vector_field(X, Y)\n\n# Compute the modified wind vector field\nU_mod, V_mod = modified_wind_vector_field(X, Y)\n\n# Plot temperature variations as curves with slightly different denominators for variation\nx = np.linspace(0.2, 0.5, 100)\nxlabel = \"Longitude\"\nylabel = \"Latitude\"\npatch_labels = [\"Original Wind Field\", \"Modified Wind Field\"]\nline_labels = [\"Summer Temperature\", \"Winter Temperature\", \"Spring Temperature\", \"Autumn Temperature\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(8, 6))\nplt.quiver(X, Y, U, V, color=\"#f15b50\", alpha=0.6)\nplt.quiver(X, Y, U_mod, V_mod, color=\"#6e5dc6\", alpha=0.6)\nplt.plot(x, 0.09 / (x**1.2), color=\"#3b75af\", label=line_labels[0])\nplt.plot(x, 0.08 / (x**1.2 + 0.04), color=\"#ef8636\", label=line_labels[1])\nplt.plot(x, 0.075 / (x**1 + 0.04), color=\"#519e3e\", label=line_labels[2])\nplt.plot(x, 0.12 / (x**1 + 0.05), color=\"#000000\", label=line_labels[3])\n\n# Add labels and legend\nplt.xlabel(xlabel, fontsize=14, style=\"italic\")\nplt.ylabel(ylabel, fontsize=14, style=\"italic\")\n\nred_patch = mpatches.Patch(color=\"#f15b50\", label=patch_labels[0], alpha=0.6)\nblue_patch = mpatches.Patch(color=\"#6e5dc6\", label=patch_labels[1], alpha=0.6)\n\n# Create legend for curves\nsummer_line = mlines.Line2D([], [], color=\"#3b75af\", label=line_labels[0])\nwinter_line = mlines.Line2D([], [], color=\"#ef8636\", label=line_labels[1])\nspring_line = mlines.Line2D([], [], color=\"#519e3e\", label=line_labels[2])\nautumn_line = mlines.Line2D([], [], color=\"#000000\", label=line_labels[3])\n\n# Combine all legend handles\nhandles = [\n    red_patch,\n    blue_patch,\n    summer_line,\n    winter_line,\n    spring_line,\n    autumn_line,\n]\n\n# Add the legend to the plot with specified location\nplt.legend(handles=handles, loc=\"lower left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('quiver_3.pdf', bbox_inches='tight')"}
{"idx": "quiver_4", "instruction": "There is a reference image for you and I also have a set of data about information flow in a network. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the vector field function\ndef info_flow(X, Y):\n# Function to simulate information flow in a network\nU = np.sin(np.pi * X) * np.cos(np.pi * Y)\nV = -np.cos(np.pi * X) * np.sin(np.pi * Y)\nreturn U, V\n\n# Create a grid of points\nx = np.linspace(-2.0, 2.0, 20)\ny = np.linspace(-2.0, 2.0, 20)\nX, Y = np.meshgrid(x, y)\n\n# Compute the vector field\nU, V = info_flow(X, Y)\nxlabel = \"Node X Position\"\nylabel = \"Node Y Position\"\ntitle = \"Information Flow in a Network\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the vector field function\ndef info_flow(X, Y):\n    # Function to simulate information flow in a network\n    U = np.sin(np.pi * X) * np.cos(np.pi * Y)\n    V = -np.cos(np.pi * X) * np.sin(np.pi * Y)\n    return U, V\n\n# Create a grid of points\nx = np.linspace(-2.0, 2.0, 20)\ny = np.linspace(-2.0, 2.0, 20)\nX, Y = np.meshgrid(x, y)\n\n# Compute the vector field\nU, V = info_flow(X, Y)\nxlabel = \"Node X Position\"\nylabel = \"Node Y Position\"\ntitle = \"Information Flow in a Network\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nfig, ax = plt.subplots(figsize=(6, 5))\nax.quiver(X, Y, U, V, color=\"#3171ad\")\n\n# Set labels and title\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_title(title)\n\n# Show grid\nax.grid(True, linestyle=\"--\", alpha=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.savefig('quiver_4.pdf', bbox_inches='tight')"}
{"idx": "quiver_5", "instruction": "There is a reference image for you and I also have a set of data about wind patterns. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the vector field function\ndef vector_field(X, Y):\n# Placeholder function for the vector field\n# Replace with the actual function based on the provided image\nU = Y\nV = -2 * X\nreturn U, V\n# Create a finer grid of points\nx = np.linspace(-2.0, 2.0, 20)\ny = np.linspace(-2.0, 2.0, 20)\nX, Y = np.meshgrid(x, y)\n\n# Compute the vector field\nU, V = vector_field(X, Y)\nxlabel = \"Longitude\"\nylabel = \"Latitude\"\ntitle = \"Simulated Wind Patterns\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the vector field function\ndef vector_field(X, Y):\n    # Placeholder function for the vector field\n    # Replace with the actual function based on the provided image\n    U = Y\n    V = -2 * X\n    return U, V\n\n\n# Create a finer grid of points\nx = np.linspace(-2.0, 2.0, 20)\ny = np.linspace(-2.0, 2.0, 20)\nX, Y = np.meshgrid(x, y)\n\n# Compute the vector field\nU, V = vector_field(X, Y)\nxlabel = \"Longitude\"\nylabel = \"Latitude\"\ntitle = \"Simulated Wind Patterns\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nfig, ax = plt.subplots(figsize=(6, 5))\n# Use a more contrasting color scheme\ncolors = np.sqrt(U**2 + V**2)\nax.quiver(X, Y, U, V, colors, cmap=\"viridis\")\n\n# Add several streamlines to the vector field plot\n# strm = ax.streamplot(X, Y, U, V, color='black', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_title(title)\n\n# Show grid\nax.grid(True, linestyle=\"--\", alpha=0.7)\n\n# Adjust the aspect ratio\nax.set_aspect(\"equal\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.savefig('quiver_5.pdf', bbox_inches='tight')"}
{"idx": "scatter_1", "instruction": "There is a reference image for you and I also have a set of data about weather conditions in various cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\ncities = [\n\"New York\",\n\"Los Angeles\",\n\"Chicago\",\n\"Houston\",\n\"Phoenix\",\n\"Philadelphia\",\n\"San Antonio\",\n\"San Diego\",\n\"Dallas\",\n]\nweather_metrics = {\n\"Temperature (\u00b0C)\": [20, 25, 22, 30, 35, 18, 33, 27, 24],\n\"Humidity (%)\": [60, 50, 55, 70, 40, 65, 75, 45, 55],\n\"Wind Speed (km/h)\": [45, 60, 68, 25, 30, 62, 30, 27, 39],\n\"Precipitation (mm)\": [100, 50, 80, 30, 10, 120, 60, 40, 70],\n\"Visibility (km)\": [28, 28, 29, 37, 56, 21, 25, 21, 39],\n\"UV Index\": [25, 30, 20, 37, 25, 30, 35, 40, 45],\n}\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ncities = [\n    \"New York\",\n    \"Los Angeles\",\n    \"Chicago\",\n    \"Houston\",\n    \"Phoenix\",\n    \"Philadelphia\",\n    \"San Antonio\",\n    \"San Diego\",\n    \"Dallas\",\n]\nweather_metrics = {\n    \"Temperature (\u00b0C)\": [20, 25, 22, 30, 35, 18, 33, 27, 24],\n    \"Humidity (%)\": [60, 50, 55, 70, 40, 65, 75, 45, 55],\n    \"Wind Speed (km/h)\": [45, 60, 68, 25, 30, 62, 30, 27, 39],\n    \"Precipitation (mm)\": [100, 50, 80, 30, 10, 120, 60, 40, 70],\n    \"Visibility (km)\": [28, 28, 29, 37, 56, 21, 25, 21, 39],\n    \"UV Index\": [25, 30, 20, 37, 25, 30, 35, 40, 45],\n}\ncolors = [\"blue\", \"orange\", \"green\", \"red\", \"purple\", \"brown\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, axes = plt.subplots(1, 6, figsize=(12, 4), sharey=True)\n\n# Plot each category\nfor ax, (metric, color) in zip(axes, zip(weather_metrics.keys(), colors)):\n    ax.scatter(weather_metrics[metric], cities, color=color)\n    ax.set_title(metric)\n    ax.axvline(x=20 if metric == \"Temperature (\u00b0C)\" else 50, color=\"black\", linestyle=\"--\", linewidth=1)\n\n# Set common labels\nfig.text(0.5, 0.04, \"Value\", ha=\"center\", va=\"center\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout(rect=[0.03, 0.05, 1, 0.95])\nplt.savefig('scatters_1.pdf', bbox_inches='tight')"}
{"idx": "scatter_2", "instruction": "There is a reference image for you and I also have a set of data about the performance of different pose estimation models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nx_sc = [70, 74, 78]\ny_sc = [27.5, 32.5, 40]\nsizes_sc = [100, 200, 300]\n\nx_ft = [71, 75, 77]\ny_ft = [28, 36, 38]\nsizes_ft = [100, 200, 300]\n\nx_vl = [73, 76, 78]\ny_vl = [29, 34, 42.5]\nsizes_vl = [100, 200, 300]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 4.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nx_sc = [70, 74, 78]\ny_sc = [27.5, 32.5, 40]\nsizes_sc = [100, 200, 300]\n\nx_ft = [71, 75, 77]\ny_ft = [28, 36, 38]\nsizes_ft = [100, 200, 300]\n\nx_vl = [73, 76, 78]\ny_vl = [29, 34, 42.5]\nsizes_vl = [100, 200, 300]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot\nfig, ax = plt.subplots(\n    figsize=(4, 8)\n)  # Adjust the size to match the original image's dimensions\n\n# Scatter points\nsc_scatter = ax.scatter(x_sc, y_sc, s=sizes_sc, alpha=0.8, color=\"lightblue\")\nft_scatter = ax.scatter(x_ft, y_ft, s=sizes_ft, alpha=0.8, color=\"salmon\")\nvl_scatter = ax.scatter(x_vl, y_vl, s=sizes_vl, alpha=0.8, color=\"grey\")\n\n# Connect points with dashed lines\nax.plot(x_sc, y_sc, linestyle=\"--\", color=\"lightblue\", alpha=0.8)\nax.plot(x_ft, y_ft, linestyle=\"--\", color=\"salmon\", alpha=0.8)\nax.plot(x_vl, y_vl, linestyle=\"--\", color=\"grey\", alpha=0.8)\n\n# Legend\nlegend_labels = [\"ViTPose (sc)\", \"ViTPose (ft)\", \"VLPose\"]\nlegend = ax.legend(\n    [sc_scatter, ft_scatter, vl_scatter],\n    legend_labels,\n    title=\"Models\",\n    loc=\"upper left\",\n)\nlegend.get_frame().set_alpha(1)  # Make legend background opaque\n\n# Axes labels\nax.set_xlabel(\"Average Precision on MSCOCO (%)\")\nax.set_ylabel(\"Average Precision on HumanArt (%)\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout\nplt.tight_layout()\nplt.savefig('scatters_2.pdf', bbox_inches='tight')"}
{"idx": "scatter_3", "instruction": "There is a reference image for you and I also have a set of data about software development methodologies and their impact on code quality and development speed. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Sample data for the plot; replace with actual data.\nmethods = [\"Agile\", \"Scrum\", \"Kanban\", \"Waterfall\", \"Lean\", \"XP\"]\n\n# Data for the subplots; each list within quality_data and speed_data corresponds to a subplot.\nquality_data = [[6.2, 7.9, 6.7, 6.9, 7.6, 7.3], [7.8, 8.1, 8.5, 8.9, 8.6, 8.3]]\n\nspeed_data = [[30, 45, 55, 25, 40, 35], [50, 60, 70, 75, 65, 72]]\n\n# Sizes for the scatter points, shared across both subplots.\nscatter_sizes = [60, 110, 90, 140, 180, 130]\n\n# Legend labels for the subplots.\nax1_legend_names = [\"Small\", \"Medium\", \"Large\", \"X-Large\"]\nax2_legend_names = [\"<100\", \"100-200\", \"200-300\", \">300\"]\nax1_legend_title = \"Project Size\"\nax2_legend_title = \"LOC (k)\"\nxlabel = \"Code Quality\"\nylabel = \"Development Speed (days)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the plot; replace with actual data.\nmethods = [\"Agile\", \"Scrum\", \"Kanban\", \"Waterfall\", \"Lean\", \"XP\"]\ncolors = [\n    \"black\",\n    \"green\",\n    \"red\",\n    \"orange\",\n    \"purple\",\n    \"brown\",\n]  # Colors for each method.\n\n# Data for the subplots; each list within quality_data and speed_data corresponds to a subplot.\nquality_data = [[6.2, 7.9, 6.7, 6.9, 7.6, 7.3], [7.8, 8.1, 8.5, 8.9, 8.6, 8.3]]\n\nspeed_data = [[30, 45, 55, 25, 40, 35], [50, 60, 70, 75, 65, 72]]\n\n# Sizes for the scatter points, shared across both subplots.\nscatter_sizes = [60, 110, 90, 140, 180, 130]\n\n# Legend labels for the subplots.\nax1_legend_names = [\"Small\", \"Medium\", \"Large\", \"X-Large\"]\nax2_legend_names = [\"<100\", \"100-200\", \"200-300\", \">300\"]\nax1_legend_title = \"Project Size\"\nax2_legend_title = \"LOC (k)\"\nxlabel = \"Code Quality\"\nylabel = \"Development Speed (days)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create 2x1 grid of subplots with a specified figure size.\nfig, axs = plt.subplots(2, 1, figsize=(6, 6))\n\n# Populate the subplots with scatter points and add text labels.\nfor idx, ax in enumerate(axs):\n    for method, qual, speed, size, color in zip(\n        methods, quality_data[idx], speed_data[idx], scatter_sizes, colors\n    ):\n        ax.scatter(qual, speed, s=size, color=color, alpha=0.5)  # Plot the scatter points.\n        ax.text(\n            qual, speed + 1, method, fontsize=9\n        )  # Add text labels above scatter points.\n\n    ax.set_xlabel(xlabel)  # X-axis label.\n    ax.set_ylabel(ylabel)  # Y-axis label.\n\n# Adjust the x and y limits and ticks for the subplots.\naxs[0].set_xlim(6.0, 9.0)\naxs[0].set_ylim(20, 60)\naxs[0].set_xticks([6.5, 7.0, 7.5, 8.0, 8.5])\naxs[0].set_yticks([20, 30, 40, 50, 60])\naxs[1].set_xlim(7.5, 9.5)\naxs[1].set_ylim(40, 80)\naxs[1].set_xticks([8.0, 8.5, 9.0, 9.5])\naxs[1].set_yticks([40, 50, 60, 70, 80])\n\n\nsize_legend_handles = [60, 110, 140, 180]  # Sizes for the legend handles.\n\n# Create custom legend handles for the first subplot.\nax1_legend_handles = [\n    mlines.Line2D(\n        [],\n        [],\n        color=\"#8080f7\",\n        marker=\"o\",\n        linestyle=\"None\",\n        markersize=(size**0.5) * 0.8,\n        label=name,\n    )  # Adjust marker size here.\n    for size, name in zip(size_legend_handles, ax1_legend_names)\n]\n\n# Create custom legend handles for the second subplot.\nax2_legend_handles = [\n    mlines.Line2D(\n        [],\n        [],\n        color=\"#8080f7\",\n        marker=\"o\",\n        linestyle=\"None\",\n        markersize=(size**0.5) * 0.8,\n        label=name,\n    )  # Adjust marker size here.\n    for size, name in zip(size_legend_handles, ax2_legend_names)\n]\n\n# Add legends to the subplots.\naxs[0].legend(\n    handles=ax1_legend_handles,\n    loc=\"lower right\",\n    title=ax1_legend_title,\n    labelspacing=2.0,\n    edgecolor=\"black\",\n)\naxs[1].legend(\n    handles=ax2_legend_handles,\n    loc=\"lower right\",\n    title=ax2_legend_title,\n    labelspacing=2.0,\n    edgecolor=\"black\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('scatters_3.pdf', bbox_inches='tight')"}
{"idx": "scatter_5", "instruction": "There is a reference image for you and I also have a set of data about energy consumption and cost for different energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data points for each group\nsolar = [(50, 950), (100, 800)]\nwind = [(70, 850), (120, 700)]\nhydro = [(60, 450), (110, 400)]\nnuclear = [(80, 600), (130, 550)]\ncoal = [(90, 250), (140, 200)]\ngas = [(150, 300), (200, 100)]\nlabels = [\"Solar\", \"Wind\", \"Hydro\", \"Nuclear\", \"Coal\", \"Gas\"]\nxlabel = \"Energy Consumption (MWh)\"\nylabel = \"Cost (USD)\"\ntitle = \"Scatter Plot of Energy Consumption vs Cost\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data points for each group\nsolar = [(50, 950), (100, 800)]\nwind = [(70, 850), (120, 700)]\nhydro = [(60, 450), (110, 400)]\nnuclear = [(80, 600), (130, 550)]\ncoal = [(90, 250), (140, 200)]\ngas = [(150, 300), (200, 100)]\nlabels = [\"Solar\", \"Wind\", \"Hydro\", \"Nuclear\", \"Coal\", \"Gas\"]\nxlabel = \"Energy Consumption (MWh)\"\nylabel = \"Cost (USD)\"\ntitle = \"Scatter Plot of Energy Consumption vs Cost\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot each group with different color and marker\nax.scatter(*zip(*solar), color=\"blue\", label=labels[0])\nax.scatter(*zip(*wind), color=\"cyan\", label=labels[1])\nax.scatter(*zip(*hydro), color=\"red\", label=labels[2])\nax.scatter(*zip(*nuclear), color=\"green\", label=labels[3])\nax.scatter(*zip(*coal), color=\"magenta\", label=labels[4], marker=\"x\")\nax.scatter(*zip(*gas), color=\"orange\", label=labels[5])\n\n# Add legend\nax.legend(loc=\"upper right\")\n\n# Add labels and title\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nfig.tight_layout()\nplt.savefig('scatters_5.pdf', bbox_inches='tight')"}
{"idx": "scatter_6", "instruction": "There is a reference image for you and I also have a set of data about weather conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate sample data for the three clusters with adjusted positions and spread\nx1 = np.random.exponential(1 / 2, 100) - np.random.normal(0, 0.5, 100)\ny1 = np.random.exponential(1 / 1.5, 100)\n\nx2 = np.random.exponential(1 / 2, 100)\ny2 = -np.random.exponential(1 / 1.2, 100)\n\nx3 = np.random.normal(2, 1, 100)\ny3 = np.random.normal(0, 1, 100)\n\nlabels = [\"Daytime Sunny\", \"Night Rainy\", \"PGST\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate sample data for the three clusters with adjusted positions and spread\nx1 = np.random.exponential(1 / 2, 100) - np.random.normal(0, 0.5, 100)\ny1 = np.random.exponential(1 / 1.5, 100)\n\nx2 = np.random.exponential(1 / 2, 100)\ny2 = -np.random.exponential(1 / 1.2, 100)\n\nx3 = np.random.normal(2, 1, 100)\ny3 = np.random.normal(0, 1, 100)\n\nlabels = [\"Daytime Sunny\", \"Night Rainy\", \"PGST\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(8, 8))\n\n# Plot the data with adjusted colors\nplt.scatter(x1, y1, c=\"orange\", label=labels[0])\nplt.scatter(x2, y2, c=\"blue\", label=labels[1])\nplt.scatter(x3, y3, c=\"green\", label=labels[2])\n\n# Add the legend with adjusted order of labels\nplt.legend(labels, loc=\"upper right\", frameon=True)\n\n# Remove axis for clean look\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('scatters_6.pdf', bbox_inches='tight')"}
{"idx": "scatter_7", "instruction": "There is a reference image for you and I also have a set of data about energy sources, their costs, and CO2 emissions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data points for energy sources, their costs, and CO2 emissions.\nenergy_sources = [\"Solar\", \"Wind\", \"Hydro\", \"Coal\", \"Nuclear\", \"Natural Gas\"]\ncosts = [1.0, 1.5, 2.0, 1.5, 6.0, 4.0] # Costs (in cents per kWh)\nco2_emissions = [0.02, 0.03, 0.01, 1.0, 0.05, 1.0] # CO2 emissions (kg CO2 per kWh)\nxlabel = \"Cost (cents per kWh)\" # X-axis label for energy costs.\nylabel = \"CO2 Emissions (kg CO2 per kWh)\" # Y-axis label for CO2 emissions.\ntitle = \"Energy Source Costs vs. CO2 Emissions\" # Title of the plot.\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data points for energy sources, their costs, and CO2 emissions.\nenergy_sources = [\"Solar\", \"Wind\", \"Hydro\", \"Coal\", \"Nuclear\", \"Natural Gas\"]\ncosts = [1.0, 1.5, 2.0, 1.5, 6.0, 4.0]  # Costs (in cents per kWh)\nco2_emissions = [0.02, 0.03, 0.01, 1.0, 0.05, 1.0]  # CO2 emissions (kg CO2 per kWh)\ncolors = [\"yellow\", \"blue\", \"green\", \"black\", \"purple\", \"orange\"]\nxlabel = \"Cost (cents per kWh)\"  # X-axis label for energy costs.\nylabel = \"CO2 Emissions (kg CO2 per kWh)\"  # Y-axis label for CO2 emissions.\ntitle = \"Energy Source Costs vs. CO2 Emissions\"  # Title of the plot.\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and a subplot with a specific size.\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Scatter plot each energy source's data point and add text annotation.\nfor i in range(len(energy_sources)):\n    ax.scatter(\n        costs[i], co2_emissions[i], color=colors[i]\n    )  # Plot data points with specific color.\n    # Align text annotations based on position for better readability.\n    ax.text(\n        costs[i] + 0.1, co2_emissions[i] + 0.01, energy_sources[i], fontsize=10, ha=\"left\", va=\"bottom\"\n    )\n\n# Add a horizontal and a vertical dashed reference line.\nax.axhline(\n    y=0.02, color=\"gray\", linestyle=\"--\", linewidth=1\n)  # Horizontal line at CO2 Emissions=0.02 kg CO2 per kWh\nax.axvline(\n    x=1.0, color=\"gray\", linestyle=\"--\", linewidth=1\n)  # Vertical line at Cost=1.0 cents per kWh\n\n# Set the scales of the axes to logarithmic.\nax.set_xscale(\"log\")\nax.set_yscale(\"log\")\n\n# Set the labels for the axes.\nax.set_xlabel(xlabel)  # X-axis label for energy costs.\nax.set_ylabel(ylabel)  # Y-axis label for CO2 emissions.\n\n# Set the title of the plot.\nax.set_title(title)  # Title of the plot.\n\n# Adjust the tick labels to match the reference image.\n# Define major ticks for both axes.\nax.set_xticks([0.5, 1, 1.5, 2, 3, 6, 10])\nax.get_xaxis().set_major_formatter(\n    plt.ScalarFormatter()\n)  # Format the tick labels as scalar values.\nax.set_yticks([0.01, 0.02, 0.03, 0.1, 1, 2.5])\nax.get_yaxis().set_major_formatter(\n    plt.ScalarFormatter()\n)  # Format the tick labels as scalar values.\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with a tight layout to ensure all elements fit within the figure area.\nplt.tight_layout()\nplt.savefig('scatters_7.pdf', bbox_inches='tight')"}
{"idx": "scatter_10", "instruction": "There is a reference image for you and I also have a set of data about energy consumption and renewable energy usage percentages. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data points\nenergy_consumed = [100, 400, 300, 400, 500, 600] # in TWh\nrenewable_energy_percent = [15, 25, 35, 45, 55, 65] # in %\n\nlabels = [None, \"Plant A\", None, \"Plant B\", \"Plant C\", \"Plant D\"]\ndashed_lines = [(100, 15, 200, 25), (500, 55, 600, 65)]\n\ntitle = \"Energy Consumption vs. Renewable Energy Usage\"\nxlabel = \"Energy Consumed (TWh)\"\nylabel = \"Renewable Energy Usage (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data points\nenergy_consumed = [100, 400, 300, 400, 500, 600]  # in TWh\nrenewable_energy_percent = [15, 25, 35, 45, 55, 65]  # in %\n\nlabels = [None, \"Plant A\", None, \"Plant B\", \"Plant C\", \"Plant D\"]\ndashed_lines = [(100, 15, 200, 25), (500, 55, 600, 65)]\n\ntitle = \"Energy Consumption vs. Renewable Energy Usage\"\nxlabel = \"Energy Consumed (TWh)\"\nylabel = \"Renewable Energy Usage (%)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data points\nplt.figure(figsize=(8, 5))\nplt.scatter(energy_consumed, renewable_energy_percent, color=\"black\", s=100)  # Adjusted marker size and color\n\n# Annotating the data points\nfor i, label in enumerate(labels):\n    plt.annotate(\n        label,\n        (energy_consumed[i], renewable_energy_percent[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 10),\n        ha=\"center\",\n    )\n\n# Plotting the dashed lines with correct colors and annotations\nplt.plot([100, 200], [15, 25], linestyle=\"--\", color=\"green\")\nplt.annotate(\"+10%\", (150, 20), color=\"green\")\nplt.plot([100, 300], [15, 35], linestyle=\"--\", color=\"black\")\nplt.annotate(\"Growth A\", (200, 25), color=\"black\")\nplt.plot([500, 600], [55, 65], linestyle=\"--\", color=\"orange\")\nplt.annotate(\n    \"Plant D\",\n    (550, 60),\n    color=\"orange\",\n    textcoords=\"offset points\",\n    xytext=(0, 10),\n    ha=\"center\",\n)\n\n# Setting the title and labels\nplt.title(title)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# Adjusting y-axis scale\nplt.ylim(10, 70)\nplt.yticks([15, 25, 35, 45, 55, 65])\nplt.xlim(50, 650)\nplt.xticks([100, 200, 300, 400, 500, 600])\nplt.grid(True)\n\n# removing the top, left, and right spines\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"left\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout\nplt.tight_layout()\nplt.savefig('scatters_10.pdf', bbox_inches='tight')"}
{"idx": "scatter_12", "instruction": "There is a reference image for you and I also have a set of data about various companies and their market shares, revenue growth, and sizes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\ncompanies = [\n\"TechCorp\",\n\"HealthInc\",\n\"EduWorks\",\n\"AutoMotive\",\n\"GreenEnergy\",\n\"FinServe\",\n\"AgriGoods\",\n\"RetailHub\",\n\"LogiTrans\",\n]\nmarket_share = [15, 20, 25, 20, 25, 30, 35, 30, 35]\nrevenue_growth = [5, 7, 9, 11, 13, 15, 17, 20, 10]\nsizes = [500, 1000, 2000, 3000, 3000, 3000, 3000, 3000, 3000]\nxlabel = \"Market Share (%)\"\nylabel = \"Revenue Growth (%)\"\nlegend_sizes = [500, 1000, 2000, 3000, 4000]\nlegend_labels = [\"Small\", \"Medium\", \"Large\", \"Very Large\", \"Giant\"]\nlegend_title = \"Company Size\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ncompanies = [\n    \"TechCorp\",\n    \"HealthInc\",\n    \"EduWorks\",\n    \"AutoMotive\",\n    \"GreenEnergy\",\n    \"FinServe\",\n    \"AgriGoods\",\n    \"RetailHub\",\n    \"LogiTrans\",\n]\nmarket_share = [15, 20, 25, 20, 25, 30, 35, 30, 35]\nrevenue_growth = [5, 7, 9, 11, 13, 15, 17, 20, 10]\nsizes = [500, 1000, 2000, 3000, 3000, 3000, 3000, 3000, 3000]\ncolors = [\"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"blue\", \"blue\"]\nxlabel = \"Market Share (%)\"\nylabel = \"Revenue Growth (%)\"\nlegend_sizes = [500, 1000, 2000, 3000, 4000]\nlegend_labels = [\"Small\", \"Medium\", \"Large\", \"Very Large\", \"Giant\"]\nlegend_title = \"Company Size\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and plot\nfig, ax = plt.subplots(figsize=(8, 6))\nscatter = ax.scatter(market_share, revenue_growth, s=sizes, c=colors, alpha=0.3)\n\n# Add annotations\nfor i, company in enumerate(companies):\n    ax.annotate(\n        company,\n        (market_share[i], revenue_growth[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 0),\n        ha=\"center\",\n        fontsize=8,\n    )\n\n# Customize the axes\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_xlim(10, 40)\nax.set_ylim(0, 25)\n\n# Add legend for bubble sizes\nfor size, label in zip(legend_sizes, legend_labels):\n    ax.scatter([], [], c=\"grey\", alpha=0.3, s=size, label=label)\n\n# Adjust the legend to have increased spacing\nax.legend(\n    scatterpoints=1,\n    frameon=False,\n    labelspacing=3,\n    handletextpad=-2,\n    columnspacing=8,\n    title=legend_title,\n    fontsize=8,\n    loc=\"upper center\",\n    bbox_to_anchor=(0.5, 1.3),\n    ncol=len(legend_sizes),\n)\n\nplt.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('scatters_12.pdf', bbox_inches='tight')"}
{"idx": "scatter_14", "instruction": "There is a reference image for you and I also have a set of data about various medical conditions including Hypertension, Diabetes, Asthma, Cancer, Heart Disease, Stroke, Obesity, and Arthritis. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nconditions = [\n\"Hypertension\",\n\"Diabetes\",\n\"Asthma\",\n\"Cancer\",\n\"Heart Disease\",\n\"Stroke\",\n\"Obesity\",\n\"Arthritis\",\n]\nprevalence_rate = [0.45, 0.32, 0.10, 0.08, 0.12, 0.04, 0.36, 0.25]\ntreatment_success_rate = [0.70, 0.65, 0.80, 0.55, 0.60, 0.50, 0.55, 0.60]\nxlabel = \"Medical Conditions\"\nylabel = \"Rate\"\nlabels = [\"Prevalence Rate\", \"Treatment Success Rate\"]\ntitle = \"Prevalence and Treatment Success Rates for Various Medical Conditions\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nconditions = [\n    \"Hypertension\",\n    \"Diabetes\",\n    \"Asthma\",\n    \"Cancer\",\n    \"Heart Disease\",\n    \"Stroke\",\n    \"Obesity\",\n    \"Arthritis\",\n]\nprevalence_rate = [0.45, 0.32, 0.10, 0.08, 0.12, 0.04, 0.36, 0.25]\ntreatment_success_rate = [0.70, 0.65, 0.80, 0.55, 0.60, 0.50, 0.55, 0.60]\nxlabel = \"Medical Conditions\"\nylabel = \"Rate\"\nlabels = [\"Prevalence Rate\", \"Treatment Success Rate\"]\ntitle = \"Prevalence and Treatment Success Rates for Various Medical Conditions\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(6, 3))\n\n# Plotting the data without error bars\nplt.scatter(conditions, prevalence_rate, color=\"blue\", label=labels[0])\nplt.scatter(conditions, treatment_success_rate, color=\"red\", label=labels[1])\n\n# Adding labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\n\n# Adding grid\nplt.grid(True, linestyle=\"--\", linewidth=0.5)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=90)\nplt.ylim(0, 1.5)\n# Adjusting legend placement to match the reference picture\nplt.legend(loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout to match the reference picture\nplt.tight_layout()\nplt.savefig('scatters_14.pdf', bbox_inches='tight')"}
{"idx": "scatter_15", "instruction": "There is a reference image for you and I also have a set of data about renewable energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the plots\nrenewables = [\"Solar\", \"Wind\", \"Hydro\", \"Geothermal\", \"Biomass\", \"Tidal\", \"Wave\"]\nx1 = [150, 100, 50, 70, 80, 120, 110]\ny1 = [85, 88, 90, 83, 87, 85, 89]\n\nx2 = [5e3, 3.5e3, 1.5e3, 2e3, 2.2e3, 4.5e3, 4e3]\ny2 = [85, 88, 90, 83, 87, 85, 89]\n\ntitles = [\"Renewable Energy Sources (Efficiency vs Installation Cost)\", \"Renewable Energy Sources (Efficiency vs Energy Output)\"]\nxlabels = [\"Installation Cost ($ thousands)\", \"Energy Output (MWh)\"]\nylabels = [\"Efficiency (%)\", \"Efficiency (%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plots\nrenewables = [\"Solar\", \"Wind\", \"Hydro\", \"Geothermal\", \"Biomass\", \"Tidal\", \"Wave\"]\nx1 = [150, 100, 50, 70, 80, 120, 110]\ny1 = [85, 88, 90, 83, 87, 85, 89]\ncolors1 = [\"yellow\", \"blue\", \"cyan\", \"orange\", \"green\", \"purple\", \"magenta\"]\n\nx2 = [5e3, 3.5e3, 1.5e3, 2e3, 2.2e3, 4.5e3, 4e3]\ny2 = [85, 88, 90, 83, 87, 85, 89]\ncolors2 = [\"yellow\", \"blue\", \"cyan\", \"orange\", \"green\", \"purple\", \"magenta\"]\n\ntitles = [\"Renewable Energy Sources (Efficiency vs Installation Cost)\", \"Renewable Energy Sources (Efficiency vs Energy Output)\"]\nxlabels = [\"Installation Cost ($ thousands)\", \"Energy Output (MWh)\"]\nylabels = [\"Efficiency (%)\", \"Efficiency (%)\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# First subplot\nax1.scatter(x1, y1, c=colors1)\nax1.set_title(titles[0])\nax1.set_xlabel(xlabels[0])\nax1.set_ylabel(ylabels[0])\nax1.invert_xaxis()  # Invert x-axis\nfor i, txt in enumerate(renewables):\n    ax1.annotate(txt, (x1[i], y1[i]), xytext=(-10, 5), textcoords=\"offset points\")\nax1.set_xlim([160, 40])\nax1.set_ylim([80, 95])\n\n# Second subplot\nax2.scatter(x2, y2, c=colors2)\nax2.set_title(titles[1])\nax2.set_xlabel(xlabels[1])\nax2.set_ylabel(ylabels[1])\nax2.ticklabel_format(style=\"sci\", axis=\"x\", scilimits=(0, 0))  # Use scientific notation\nfor i, txt in enumerate(renewables):\n    ax2.annotate(txt, (x2[i], y2[i]), xytext=(-15, 5), textcoords=\"offset points\")\nax2.set_xlim([6e3, 1e3])\nax2.set_ylim([80, 95])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('scatters_15.pdf', bbox_inches='tight')"}
{"idx": "scatter_16", "instruction": "There is a reference image for you and I also have a set of data about the performance of different machine learning models in terms of efficiency and AUROC macro scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nefficiency = [\n0.1,\n0.35,\n0.55,\n0.7,\n0.9,\n0.25,\n0.45,\n0.6,\n] # Added missing efficiency values\nauroc_macro = [\n0.84,\n0.82,\n0.80,\n0.78,\n0.76,\n0.79,\n0.77,\n0.75,\n] # Added missing auroc_macro values\nmodel_names = [\n\"BioBERT\",\n\"BioDistilBERT\",\n\"BioMobileBERT\",\n\"TinyBioBERT\",\n\"Llama-2-7b\",\n\"PEFT method\",\n\"Full\",\n\"LORA\",\n]\nxlabel = \"Efficiency\"\nylabel = \"AUROC macro\"\nlegend_title = \"Model name\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nefficiency = [\n    0.1,\n    0.35,\n    0.55,\n    0.7,\n    0.9,\n    0.25,\n    0.45,\n    0.6,\n]  # Added missing efficiency values\nauroc_macro = [\n    0.84,\n    0.82,\n    0.80,\n    0.78,\n    0.76,\n    0.79,\n    0.77,\n    0.75,\n]  # Added missing auroc_macro values\nmodel_names = [\n    \"BioBERT\",\n    \"BioDistilBERT\",\n    \"BioMobileBERT\",\n    \"TinyBioBERT\",\n    \"Llama-2-7b\",\n    \"PEFT method\",\n    \"Full\",\n    \"LORA\",\n]\ncolors = [\n    \"green\",\n    \"orange\",\n    \"cyan\",\n    \"purple\",\n    \"gray\",\n    \"pink\",\n    \"black\",\n    \"red\",\n]  # Corrected color for 'Llama-2-7b'\nmarkers = [\"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"x\"]  # Corrected marker for 'LORA'\nxlabel = \"Efficiency\"\nylabel = \"AUROC macro\"\nlegend_title = \"Model name\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Plot each point with corresponding color and marker\nfor i, (eff, auroc, color, marker) in enumerate(\n    zip(efficiency, auroc_macro, colors, markers)\n):\n    ax.scatter(eff, auroc, color=color, marker=marker, label=model_names[i])\n\n# Set labels and title\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Create legend\nlegend = ax.legend(title=legend_title, bbox_to_anchor=(1.05, 1), loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to make room for the legend\nplt.tight_layout()\nplt.savefig('scatters_16.pdf', bbox_inches='tight')"}
{"idx": "scatter_17", "instruction": "There is a reference image for you and I also have a set of data about the relationship between \u0394 Robust Accuracy and \u0394 RNFR. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Simulating data for the left plot\nx_main = np.random.normal(-10, 10, 100) + 15 * np.random.exponential(1 / 2, 100)\ny_main = np.random.normal(10, 10, 100) \nxlabel = \"\u0394 Robust Accuracy (%)\"\nylabel = \"\u0394 RNFR (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulating data for the left plot\nx_main = np.random.normal(-10, 10, 100) + 15 * np.random.exponential(1 / 2, 100)\ny_main = np.random.normal(10, 10, 100) \nxlabel = \"\u0394 Robust Accuracy (%)\"\nylabel = \"\u0394 RNFR (%)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the main figure and axis\nplt.figure(figsize=(9, 6))\n\n# Scatter plot for the left plot\ncolors = np.random.rand(100)\nsizes = 1000 * np.random.rand(100)\nplt.scatter(x_main, y_main, c=colors, s=sizes, alpha=0.3, cmap=\"viridis\")\nplt.grid(True)\n\n# Set labels and title for the plot\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('scatters_17.pdf', bbox_inches='tight')"}
{"idx": "scatter_18", "instruction": "There is a reference image for you and I also have a set of data about blood pressure readings for patients on two different days. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Day one, the age and blood pressure of 13 patients:\nages_day1 = np.array([30, 45, 50, 60, 25, 70, 30, 55, 40, 65, 75, 55, 35])\nbp_day1 = np.array([120, 135, 130, 145, 125, 140, 128, 130, 135, 138, 145, 132, 130])\n\n# Day two, the age and blood pressure of 15 patients:\nages_day2 = np.array([25, 30, 55, 20, 70, 50, 65, 60, 40, 35, 75, 45, 55, 68, 62])\nbp_day2 = np.array([122, 128, 133, 130, 140, 135, 142, 138, 134, 136, 145, 138, 137, 139, 141])\n\nlegend_labels = [\"Monday\", \"Tuesday\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Day one, the age and blood pressure of 13 patients:\nages_day1 = np.array([30, 45, 50, 60, 25, 70, 30, 55, 40, 65, 75, 55, 35])\nbp_day1 = np.array([120, 135, 130, 145, 125, 140, 128, 130, 135, 138, 145, 132, 130])\n\n# Day two, the age and blood pressure of 15 patients:\nages_day2 = np.array([25, 30, 55, 20, 70, 50, 65, 60, 40, 35, 75, 45, 55, 68, 62])\nbp_day2 = np.array([122, 128, 133, 130, 140, 135, 142, 138, 134, 136, 145, 138, 137, 139, 141])\n\nlegend_labels = [\"Monday\", \"Tuesday\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(6, 6))\nplt.scatter(ages_day1, bp_day1)\nplt.scatter(ages_day2, bp_day2)\nplt.grid(True)\nplt.legend(legend_labels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('scatters_18.pdf', bbox_inches='tight')"}
{"idx": "scatter_19", "instruction": "There is a reference image for you and I also have a set of data about technology trends. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the scatter plot - Technology Trends\nyears = np.array([2010, 2012, 2014, 2016, 2018, 2020, 2022, 2024, 2026, 2028, 2030, 2032, 2034])\nadoption_rate = np.array([56, 21, 44, 32, 67, 23, 45, 56, 78, 23, 45, 23, 45])\ninvestment_amount = np.array([100, 429, 242, 1241, 1234, 500, 941, 234, 600, 234, 423, 734, 123])\nxlabel = \"Years\"\nylabel = \"Technology Adoption Rate (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the scatter plot - Technology Trends\nyears = np.array([2010, 2012, 2014, 2016, 2018, 2020, 2022, 2024, 2026, 2028, 2030, 2032, 2034])\nadoption_rate = np.array([56, 21, 44, 32, 67, 23, 45, 56, 78, 23, 45, 23, 45])\ninvestment_amount = np.array([100, 429, 242, 1241, 1234, 500, 941, 234, 600, 234, 423, 734, 123])\nxlabel = \"Years\"\nylabel = \"Technology Adoption Rate (%)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(8, 6))\nplt.scatter(years, adoption_rate, c=investment_amount, cmap=\"viridis\")\nplt.grid(True)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.colorbar()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('scatters_19.pdf', bbox_inches='tight')"}
{"idx": "scatter_20", "instruction": "There is a reference image for you and I also have a set of data about various measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data points\nx = np.random.randint(100, size=(20))\ny = np.random.randint(100, size=(20)) / 2 + np.random.exponential(1 / 2, 20) * 50\nsizes = 10 * np.random.randint(100, size=(20))\ntitle = \"Scatter plot with colorbar\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data points\nx = np.random.randint(100, size=(20))\ny = np.random.randint(100, size=(20)) / 2 + np.random.exponential(1 / 2, 20) * 50\ncolors = np.random.randint(100, size=(20))\nsizes = 10 * np.random.randint(100, size=(20))\ntitle = \"Scatter plot with colorbar\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data points\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap=\"nipy_spectral\")\n\nplt.colorbar()\nplt.title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('scatters_20.pdf', bbox_inches='tight')"}
{"idx": "scatter_21", "instruction": "There is a reference image for you and I also have a set of data about health measurements across different age groups. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting\nage_groups = np.array([20, 30, 40, 50, 60, 70, 80])\nsteps_per_day = np.clip(\nnp.sin(np.linspace(0, 2 * np.pi, len(age_groups)))\n+ np.random.normal(0, 0.1, len(age_groups)),\n0.2,\n0.9,\n)\nheart_rate = np.clip(\nnp.cos(np.linspace(0, 2 * np.pi, len(age_groups)))\n+ np.random.normal(0, 0.1, len(age_groups)),\n0.3,\n1,\n)\ncholesterol_levels = np.clip(\nnp.sin(np.linspace(0, 1 * np.pi, len(age_groups)))\n+ np.random.normal(0, 0.1, len(age_groups)),\n0.3,\n0.8,\n)\nblood_pressure = np.clip(\nnp.cos(np.linspace(0, 1.5 * np.pi, len(age_groups)))\n+ np.random.normal(0, 0.05, len(age_groups)),\n0.4,\n0.9,\n)\ntitles = [\"Steps per Day vs Cholesterol Levels\", \"Heart Rate vs Blood Pressure\"]\nfigure1_scatter_labels = [\"Steps per Day\", \"Cholesterol Levels\"]\nfigure2_scatter_labels = [\"Heart Rate\", \"Blood Pressure\"]\nxlabel = \"Age Groups (years)\"\nylabel = \"Measurements (normalized)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nage_groups = np.array([20, 30, 40, 50, 60, 70, 80])\nsteps_per_day = np.clip(\n    np.sin(np.linspace(0, 2 * np.pi, len(age_groups)))\n    + np.random.normal(0, 0.1, len(age_groups)),\n    0.2,\n    0.9,\n)\nheart_rate = np.clip(\n    np.cos(np.linspace(0, 2 * np.pi, len(age_groups)))\n    + np.random.normal(0, 0.1, len(age_groups)),\n    0.3,\n    1,\n)\ncholesterol_levels = np.clip(\n    np.sin(np.linspace(0, 1 * np.pi, len(age_groups)))\n    + np.random.normal(0, 0.1, len(age_groups)),\n    0.3,\n    0.8,\n)\nblood_pressure = np.clip(\n    np.cos(np.linspace(0, 1.5 * np.pi, len(age_groups)))\n    + np.random.normal(0, 0.05, len(age_groups)),\n    0.4,\n    0.9,\n)\ntitles = [\"Steps per Day vs Cholesterol Levels\", \"Heart Rate vs Blood Pressure\"]\nfigure1_scatter_labels = [\"Steps per Day\", \"Cholesterol Levels\"]\nfigure2_scatter_labels = [\"Heart Rate\", \"Blood Pressure\"]\nxlabel = \"Age Groups (years)\"\nylabel = \"Measurements (normalized)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# The first subplot plots Steps per Day and Cholesterol Levels\nax1.scatter(\n    age_groups,\n    steps_per_day,\n    color=\"cyan\",\n    label=figure1_scatter_labels[0],\n    marker=\"o\",\n    s=80,\n    edgecolor=\"black\",\n)\nax1.scatter(\n    age_groups,\n    cholesterol_levels,\n    color=\"blue\",\n    label=figure1_scatter_labels[1],\n    marker=\"s\",\n    s=80,\n    edgecolor=\"black\",\n)\nax1.set_title(titles[0], fontsize=14)\nax1.set_xlabel(xlabel, fontsize=12)\nax1.set_ylabel(ylabel, fontsize=12)\nax1.legend(loc=\"upper right\")\n\n# The second subplot plots Heart Rate and Blood Pressure\nax2.scatter(\n    age_groups,\n    heart_rate,\n    color=\"magenta\",\n    label=figure2_scatter_labels[0],\n    marker=\"^\",\n    s=80,\n    edgecolor=\"black\",\n)\nax2.scatter(\n    age_groups,\n    blood_pressure,\n    color=\"red\",\n    label=figure2_scatter_labels[1],\n    marker=\"d\",\n    s=80,\n    edgecolor=\"black\",\n)\nax2.set_title(titles[1], fontsize=14)\nax2.set_xlabel(xlabel, fontsize=12)\nax2.set_ylabel(ylabel, fontsize=12)\nax2.legend(loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('scatters_21.pdf', bbox_inches='tight')"}
{"idx": "scatter_22", "instruction": "There is a reference image for you and I also have a set of data about different business models and their financial metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nbusiness_models = [\n\"Freemium\",\n\"Subscription\",\n\"E-commerce\",\n\"Marketplace\",\n\"Ad-Based\",\n\"Franchise\",\n\"Retail\",\n\"Consulting\",\n\"Manufacturing\",\n]\nfinancial_metrics = {\n\"Revenue Growth\": [10, 8, 12, 7, 5, 9, 6, 11, 13],\n\"Profit Margin\": [20, 15, 18, 12, 25, 10, 14, 22, 16],\n\"Customer Acquisition Cost\": [50, 45, 40, 60, 55, 35, 30, 65, 70],\n\"Customer Lifetime Value\": [200, 180, 220, 170, 210, 160, 150, 230, 240],\n\"Market Share\": [8, 7, 9, 6, 10, 5, 4, 11, 12],\n\"Churn Rate\": [5, 6, 4, 7, 3, 8, 9, 2, 1],\n}\nmetrics_group1 = [\"Revenue Growth\", \"Profit Margin\"]\nmetrics_group2 = [\"Customer Acquisition Cost\", \"Customer Lifetime Value\"]\ntitles = [\"Growth and Profitability\", \"Customer Metrics\"]\nxlabel = \"Value\"\nylabel = \"Business Models\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nbusiness_models = [\n    \"Freemium\",\n    \"Subscription\",\n    \"E-commerce\",\n    \"Marketplace\",\n    \"Ad-Based\",\n    \"Franchise\",\n    \"Retail\",\n    \"Consulting\",\n    \"Manufacturing\",\n]\nfinancial_metrics = {\n    \"Revenue Growth\": [10, 8, 12, 7, 5, 9, 6, 11, 13],\n    \"Profit Margin\": [20, 15, 18, 12, 25, 10, 14, 22, 16],\n    \"Customer Acquisition Cost\": [50, 45, 40, 60, 55, 35, 30, 65, 70],\n    \"Customer Lifetime Value\": [200, 180, 220, 170, 210, 160, 150, 230, 240],\n    \"Market Share\": [8, 7, 9, 6, 10, 5, 4, 11, 12],\n    \"Churn Rate\": [5, 6, 4, 7, 3, 8, 9, 2, 1],\n}\nmetrics_group1 = [\"Revenue Growth\", \"Profit Margin\"]\ncolors1 = [\"blue\", \"orange\"]\nmetrics_group2 = [\"Customer Acquisition Cost\", \"Customer Lifetime Value\"]\ncolors2 = [\"green\", \"red\"]\ntitles = [\"Growth and Profitability\", \"Customer Metrics\"]\nxlabel = \"Value\"\nylabel = \"Business Models\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n\n# Plotting for ax1 - first two metrics\nfor metric, color in zip(metrics_group1, colors1):\n    ax1.scatter(financial_metrics[metric], business_models, color=color, label=metric)\nax1.set_title(titles[0])\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabel)\nax1.legend()\n\n# Plotting for ax2 - next two metrics\nfor metric, color in zip(metrics_group2, colors2):\n    ax2.scatter(financial_metrics[metric], business_models, color=color, label=metric)\nax2.set_title(titles[1])\nax2.set_xlabel(xlabel)\nax2.legend()\n\n# Common settings\nfor ax in [ax1, ax2]:\n    ax.set_yticks(range(len(business_models)))\n    ax.set_yticklabels(business_models)\n    ax.grid(True, linestyle=\"--\", alpha=0.6)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout()\nplt.savefig('scatters_22.pdf', bbox_inches='tight')"}
{"idx": "scatter_23", "instruction": "There is a reference image for you and I also have a set of data about regional performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nregions = [\n\"North America\",\n\"Europe\",\n\"Asia\",\n\"South America\",\n\"Africa\",\n\"Australia\",\n\"Middle East\",\n\"Central America\",\n\"Antarctica\",\n]\nvalues = {\n\"Efficiency\": [85, 78, 90, 65, 70, 80, 75, 60, 50],\n\"Cost\": [60, 55, 70, 40, 50, 65, 45, 35, 30],\n\"Environmental Impact\": [30, 25, 40, 20, 35, 50, 45, 25, 15],\n\"Availability\": [75, 80, 85, 60, 65, 70, 55, 50, 45],\n\"Public Acceptance\": [65, 60, 70, 50, 55, 75, 40, 35, 30],\n}\nxlabel = \"Regions\"\nylabel = \"Score\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nregions = [\n    \"North America\",\n    \"Europe\",\n    \"Asia\",\n    \"South America\",\n    \"Africa\",\n    \"Australia\",\n    \"Middle East\",\n    \"Central America\",\n    \"Antarctica\",\n]\nvalues = {\n    \"Efficiency\": [85, 78, 90, 65, 70, 80, 75, 60, 50],\n    \"Cost\": [60, 55, 70, 40, 50, 65, 45, 35, 30],\n    \"Environmental Impact\": [30, 25, 40, 20, 35, 50, 45, 25, 15],\n    \"Availability\": [75, 80, 85, 60, 65, 70, 55, 50, 45],\n    \"Public Acceptance\": [65, 60, 70, 50, 55, 75, 40, 35, 30],\n}\ncolors = [\"blue\", \"orange\", \"green\", \"red\", \"purple\"]\nxlabel = \"Regions\"\nylabel = \"Score\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots 2x2\nfig, axs = plt.subplots(2, 2, figsize=(10, 10), sharey=True)\naxes = axs.flatten()\n\n# Plot each category\nfor ax, (category, color) in zip(axes, zip(values.keys(), colors)):\n    ax.scatter(\n        regions,\n        values[category],\n        color=color,\n        label=category,\n        s=100,\n        edgecolor=\"black\",\n        alpha=0.6,\n        marker=\"o\",\n    )\n    ax.set_title(category)\n    ax.set_xticks(regions)\n    ax.set_xticklabels(regions, rotation=45, ha=\"right\")\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.legend()\n\n# Enhance style\nfor ax in axes:\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.grid(True, linestyle=\"--\", alpha=0.5)\n    ax.set_ylim(0, 100)  # Ensure all plots have the same y-axis limits\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('scatters_23.pdf', bbox_inches='tight')"}
{"idx": "scatter_24", "instruction": "There is a reference image for you and I also have a set of data about product revenue over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nyears = np.linspace(2010, 2018, 9)\nproduct1_revenue = years * np.random.uniform(1.0, 1.5, 9) + np.random.normal(0, 5, 9)\nproduct2_revenue = years * np.random.uniform(0.8, 1.2, 9) + np.random.normal(0, 5, 9)\nproduct3_revenue = years * np.random.uniform(0.5, 1.0, 9) + np.random.normal(0, 5, 9)\n\nsizes = np.linspace(50, 150, 9) # Define marker sizes\n\n# Define color gradients for visual appeal\ntitles = [\"Revenue Growth - Product 1\", \"Revenue Growth - Product 2\", \"Revenue Growth - Product 3\"]\nxlabel = \"Year\"\nylabel = \"Revenue (in millions)\"\ncbar_label = \"Year Scale\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 15.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate data\nyears = np.linspace(2010, 2018, 9)\nproduct1_revenue = years * np.random.uniform(1.0, 1.5, 9) + np.random.normal(0, 5, 9)\nproduct2_revenue = years * np.random.uniform(0.8, 1.2, 9) + np.random.normal(0, 5, 9)\nproduct3_revenue = years * np.random.uniform(0.5, 1.0, 9) + np.random.normal(0, 5, 9)\n\nsizes = np.linspace(50, 150, 9)  # Define marker sizes\n\n# Define color gradients for visual appeal\ncolors = [\"deepskyblue\", \"magenta\", \"limegreen\"]\ntitles = [\"Revenue Growth - Product 1\", \"Revenue Growth - Product 2\", \"Revenue Growth - Product 3\"]\nxlabel = \"Year\"\nylabel = \"Revenue (in millions)\"\ncbar_label = \"Year Scale\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes objects\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot scatter plots\nfor ax, revenue, color, title in zip(axs, [product1_revenue, product2_revenue, product3_revenue], colors, titles):\n    sc = ax.scatter(\n        years,\n        revenue,\n        s=sizes,\n        c=years,\n        cmap=\"viridis\",\n        alpha=0.6,\n        edgecolor=\"black\",\n    )\n    ax.plot(\n        years, revenue, color=color, linestyle=\"--\", alpha=0.6\n    )  # Connect points with dashed lines\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_ylim(min(revenue) - 10, max(revenue) + 10)\n\n# Add color bars to each subplot for color mapping explanation\nfor ax in axs:\n    cb = plt.colorbar(sc, ax=ax, orientation=\"vertical\")\n    cb.set_label(cbar_label)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlapping\nplt.tight_layout()\n\n\n# Display the plot\nplt.savefig('scatters_24.pdf', bbox_inches='tight')"}
{"idx": "scatter_25", "instruction": "There is a reference image for you and I also have a set of data about renewable energy performance. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Prepare data\nx_solar = np.array([50, 55, 60, 65, 70]) # Installed capacity in GW\ny_solar = np.array([18, 20, 22, 24, 27]) # Efficiency percentage\nsizes_solar = np.random.randint(100, 300, size=len(x_solar))\n\nx_wind = np.array([45, 50, 55, 60, 65])\ny_wind = np.array([25, 38, 29, 31, 33])\nsizes_wind = np.random.randint(100, 300, size=len(x_wind))\n\nx_hydro = np.array([60, 65, 70, 75, 80])\ny_hydro = np.array([35, 30, 39, 32, 43])\nsizes_hydro = np.random.randint(100, 300, size=len(x_hydro))\n\nlabels = [\"Solar Power\", \"Wind Power\", \"Hydropower\"]\ntitles = [\"Solar Power Performance\", \"Wind Power Performance\", \"Hydropower Performance\"]\nxlabel = \"Installed Capacity (GW)\"\nylabel = \"Efficiency (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 15.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Prepare data\nx_solar = np.array([50, 55, 60, 65, 70])  # Installed capacity in GW\ny_solar = np.array([18, 20, 22, 24, 27])  # Efficiency percentage\nsizes_solar = np.random.randint(100, 300, size=len(x_solar))\n\nx_wind = np.array([45, 50, 55, 60, 65])\ny_wind = np.array([25, 38, 29, 31, 33])\nsizes_wind = np.random.randint(100, 300, size=len(x_wind))\n\nx_hydro = np.array([60, 65, 70, 75, 80])\ny_hydro = np.array([35, 30, 39, 32, 43])\nsizes_hydro = np.random.randint(100, 300, size=len(x_hydro))\n\nlabels = [\"Solar Power\", \"Wind Power\", \"Hydropower\"]\ntitles = [\"Solar Power Performance\", \"Wind Power Performance\", \"Hydropower Performance\"]\nxlabel = \"Installed Capacity (GW)\"\nylabel = \"Efficiency (%)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots with 1 row and 3 columns\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Define a color gradient\ncolors = [\"cyan\", \"magenta\", \"lime\"]\n\n# Plot each dataset in a separate subplot with gradient colors\nfor ax, x, y, sizes, color, label, title in zip(\n    axs,\n    [x_solar, x_wind, x_hydro],\n    [y_solar, y_wind, y_hydro],\n    [sizes_solar, sizes_wind, sizes_hydro],\n    colors,\n    labels,\n    titles,\n):\n    scatter = ax.scatter(\n        x,\n        y,\n        s=sizes,\n        c=np.linspace(0.1, 1, len(x)),\n        cmap=\"summer\",\n        alpha=0.6,\n        label=label,\n    )\n    ax.plot(x, y, linestyle=\"-\", color=color, alpha=0.5)  # Use lighter alpha for lines\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better presentation\nplt.tight_layout()\n# Show the plot\nplt.savefig('scatters_25.pdf', bbox_inches='tight')"}
{"idx": "tree_2", "instruction": "There is a reference image for you and I also have a set of data about renewable energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nsizes = [0.30, 0.20, 0.15, 0.10, 0.15, 0.10]\nlabels = [\n\"Solar\\n30%\",\n\"Wind\\n20%\",\n\"Hydro\\n15%\",\n\"Biomass\\n10%\",\n\"Geothermal\\n15%\",\n\"Other\\n10%\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nsizes = [0.30, 0.20, 0.15, 0.10, 0.15, 0.10]\nlabels = [\n    \"Solar\\n30%\",\n    \"Wind\\n20%\",\n    \"Hydro\\n15%\",\n    \"Biomass\\n10%\",\n    \"Geothermal\\n15%\",\n    \"Other\\n10%\",\n]\ncolors = [\"#FFD700\", \"#ADFF2F\", \"#00CED1\", \"#8B4513\", \"#FF8C00\", \"#D3D3D3\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with the specified size\nfig = plt.figure(figsize=(12, 8))\n\n# Create a treemap\nsquarify.plot(\n    sizes=sizes,\n    label=labels,\n    color=colors,\n    text_kwargs={\"fontsize\": 18, \"color\": \"black\"},\n    pad=0.25,\n)\n\n# Remove axes\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\n# Show plot\nplt.savefig('tree_2.pdf', bbox_inches='tight')"}
{"idx": "tree_3", "instruction": "There is a reference image for you and I also have a set of data about energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nsizes = [27.0, 24.2, 16.3, 11.4, 10.2, 8.9]\nlabels = [\n\"Oil\\n27.0%\",\n\"Coal\\n24.2%\",\n\"Natural Gas\\n16.3%\",\n\"Hydropower\\n11.4%\",\n\"Nuclear\\n10.2%\",\n\"Renewables\\n8.9%\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nsizes = [27.0, 24.2, 16.3, 11.4, 10.2, 8.9]\nlabels = [\n    \"Oil\\n27.0%\",\n    \"Coal\\n24.2%\",\n    \"Natural Gas\\n16.3%\",\n    \"Hydropower\\n11.4%\",\n    \"Nuclear\\n10.2%\",\n    \"Renewables\\n8.9%\",\n]\ncolors = [\"#FFDDC1\", \"#F7A072\", \"#FF9B71\", \"#FFD571\", \"#EDE574\", \"#8CBA80\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with the specified size\nfig = plt.figure(figsize=(12, 8))\n\n# Create a treemap\nsquarify.plot(\n    sizes=sizes,\n    label=labels,\n    color=colors,\n    alpha=0.7,\n    text_kwargs={\"fontsize\": 18},\n    ec=\"black\",\n)\n\n# Remove axes\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('tree_3.pdf', bbox_inches='tight')"}
{"idx": "tree_4", "instruction": "There is a reference image for you and I also have a set of data about Chinese internet company market shares. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmarket_shares = [35, 23, 17, 10, 8, 7]\nlabels = [\"Tencent - 35%\", \"Alibaba - 23%\", \"Baidu - 17%\", \"JD.com - 10%\", \"NetEase - 8%\", \"Others - 7%\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmarket_shares = [35, 23, 17, 10, 8, 7]\nlabels = [\"Tencent - 35%\", \"Alibaba - 23%\", \"Baidu - 17%\", \"JD.com - 10%\", \"NetEase - 8%\", \"Others - 7%\"]\ncolors = [\"#FF6347\", \"#4682B4\", \"#32CD32\", \"#FFD700\", \"#FF69B4\", \"#8A2BE2\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with the specified size\nfig = plt.figure(figsize=(6, 4))\n\n# Create a treemap\nsquarify.plot(\n    sizes=market_shares,\n    label=labels,\n    color=colors,\n    alpha=0.7,\n    text_kwargs={\"fontsize\": 12, \"color\": \"black\"},\n    ec=\"black\",\n)\n\n# Remove axes\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout and save to file\nplt.tight_layout()\nplt.savefig('tree_4.pdf', bbox_inches='tight')"}
{"idx": "tree_5", "instruction": "There is a reference image for you and I also have a set of data about energy sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nsizes = [30, 20, 25, 10, 8, 7]\nlabels = [\n\"Coal\\n30%\",\n\"Natural Gas\\n20%\",\n\"Renewables\\n25%\",\n\"Nuclear\\n10%\",\n\"Hydro\\n8%\",\n\"Oil\\n7%\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nsizes = [30, 20, 25, 10, 8, 7]\nlabels = [\n    \"Coal\\n30%\",\n    \"Natural Gas\\n20%\",\n    \"Renewables\\n25%\",\n    \"Nuclear\\n10%\",\n    \"Hydro\\n8%\",\n    \"Oil\\n7%\",\n]\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with the specified size\nfig = plt.figure(figsize=(6, 6))\n\n# Create a treemap\nsquarify.plot(\n    sizes=sizes,\n    label=labels,\n    color=colors,\n    alpha=0.8,\n    text_kwargs={\"fontsize\": 12, \"color\": \"black\"},\n    pad=True,\n    ec=\"black\",\n)\n\n# Remove axes\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout and save to file\nplt.tight_layout()\nplt.savefig('tree_5.pdf', bbox_inches='tight')"}
{"idx": "3d_10", "instruction": "There is a reference image for you and I also have a set of data about the number of devices connected over different time periods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Data for devices connected over time periods\nhist = np.array([[10, 0, 0, 0], [0, 8, 0, 0], [0, 0, 6, 0], [0, 0, 0, 4]])\n# Edges of the bins (time periods)\ntime_periods = np.array([0, 1, 2, 3, 4])\n# Device types\ndevice_types = np.array([0, 1, 2, 3, 4])\n# Label of x axis\nax_xlabel = \"Time Periods\"\n# Label of y axis\nax_ylabel = \"Device Types\"\n# Label of z axis\nax_zlabel = \"Number of Devices\"\n# xpos, ypos\nxpos, ypos = np.meshgrid(time_periods[:-1] + 0.25, device_types[:-1] + 0.25, indexing=\"ij\")\n# zpos\nzpos = 0\n# zticks_values\nzticks_values = [0, 2, 4, 6, 8, 10]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Fixing random state for reproducibility\n\n# Define custom histogram data for devices connected over time periods\nhist = np.array([[10, 0, 0, 0], [0, 8, 0, 0], [0, 0, 6, 0], [0, 0, 0, 4]])\n\n# Define the edges of the bins (time periods)\ntime_periods = np.array([0, 1, 2, 3, 4])\ndevice_types = np.array([0, 1, 2, 3, 4])\n\n# Construct arrays for the anchor positions of the bars\nxpos, ypos = np.meshgrid(time_periods[:-1] + 0.25, device_types[:-1] + 0.25, indexing=\"ij\")\nxpos = xpos.ravel()\nypos = ypos.ravel()\nzpos = 0\n\n# Only keep positions where there is a non-zero bar\nnon_zero_indices = hist.ravel() > 0\nxpos = xpos[non_zero_indices]\nypos = ypos[non_zero_indices]\ndz = hist.ravel()[non_zero_indices]\n\n# All bars have the same width and depth\ndx = dy = 0.5 * np.ones_like(dz)\n\n# Axes Limits and Labels\nax_xlabel = \"Time Periods\"\nax_ylabel = \"Device Types\"\nax_zlabel = \"Number of Devices\"\nzticks_values = [0, 2, 4, 6, 8, 10]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a new figure for the modified 3D bar plot\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(projection=\"3d\")\n\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, zsort=\"average\", color=\"blue\")\n\nax.set_xlabel(ax_xlabel)\nax.set_ylabel(ax_ylabel)\nax.set_zlabel(ax_zlabel)\n\nax.set_zticks(zticks_values)\n\nax.set_box_aspect(aspect=None, zoom=0.8)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('3d_10.pdf', bbox_inches='tight')"}
{"idx": "HR_4", "instruction": "There is a reference image for you and I also have a set of data about business revenue and profit margins. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business data is as follows:\n# k,h,a\nk = 0.4, h = 10, a = 5\n# Profit margins\nprofit_margins = np.linspace(5, 20, 400)\n# Revenue\nrevenue = a * (profit_margins - k) ** 2 + h\n# Points Profit\npoints_profit = np.linspace(7, 18, 20)\n# Points Revenue\npoints_revenue = a * (points_profit - k) ** 2 + h - 1.5\n# Labels\nlabel_1 = \"Revenue vs. Profit Margin\", label_2 = \"\u00b1 3-\u03c3 of Prediction\", label_3 = \"Data Points\"\n# # Varied sizes of ellipses\nellipse_sizes = np.linspace(15, 15, len(points_profit))\n# Label of x axis\nxlabel_value = \"Revenue (in millions)\"\n# Label of y axis\nylabel_value = \"Profit Margin (%)\"\n# Title\ntitle = \"Revenue vs. Profit Margin with Uncertainty Ellipses\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulate business data for revenue and profit margins\n# Assuming a more realistic scenario with different parameters\nk = 0.4\nh = 10  # Base revenue value\na = 5  # Adjusted to fit a business revenue-profits relationship\nprofit_margins = np.linspace(5, 20, 400)  # Profit margins from 5% to 20%\nrevenue = a * (profit_margins - k) ** 2 + h  # Revenue function based on profit margins\n\n# Increasing the number of points for density\npoints_profit = np.linspace(7, 18, 20)  # Denser profit margin points for higher resolution\npoints_revenue = a * (points_profit - k) ** 2 + h - 1.5  # Offset to simulate variability\n\n# Labels and Plot Types\nlabel_1 = \"Revenue vs. Profit Margin\"\nlabel_2 = \"\u00b1 3-\u03c3 of Prediction\"\nlabel_3 = \"Data Points\"\nylim_values = [5, 20]\nellipse_sizes = np.linspace(15, 15, len(points_profit))  # Varied sizes of ellipses\n\n# Axes Limits and Labels\nxlabel_value = \"Revenue (in millions)\"\nylabel_value = \"Profit Margin (%)\"\ntitle = \"Revenue vs. Profit Margin with Uncertainty Ellipses\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Adjusting the size of the error ellipses to make them larger and more clearly elliptical, with black borders\nplt.figure(figsize=(8, 6))\nplt.plot(revenue, profit_margins, label=label_1, color=\"red\")\n\n# Making error ellipses perfectly circular\nellipse_sizes = ellipse_sizes\n\n# Adding error ellipses\nfor i, (px, py, size) in enumerate(zip(points_revenue, points_profit, ellipse_sizes)):\n    if i == 0:  # Only for the first ellipse add label\n        ellipse = plt.matplotlib.patches.Ellipse(\n            (px, py),\n            width=size,\n            height=size / 4,\n            edgecolor=\"black\",\n            facecolor=\"none\",\n            label=label_2,\n        )\n    else:\n        ellipse = plt.matplotlib.patches.Ellipse(\n            (px, py), width=size, height=size / 4, edgecolor=\"black\", facecolor=\"none\"\n        )\n    plt.gca().add_patch(ellipse)\n\nplt.scatter(points_revenue, points_profit, color=\"blue\", label=label_3, zorder=5)\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\nplt.title(title)\nplt.ylim(ylim_values)\nplt.grid(True, color=\"white\")\nplt.gca().set_facecolor(\"#eaeaf2\")\nplt.gca().set_axisbelow(True)\n\n# Adjusting the legend to include the representative ellipse\nplt.legend(facecolor=\"#eaeaf2\")\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nplt.gca().tick_params(axis=\"both\", length=0)  # Hide tick marks\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_4.pdf', bbox_inches='tight')"}
{"idx": "box_3", "instruction": "There is a reference image for you and I also have a set of data about the effectiveness of four different treatments. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Effectiveness scores for Treatment A\ndata_Treatment_A = [77.64, 64.0, 69.79, 82.41, 78.68, 50.23, 69.5, 58.49, 58.97, 64.11, 61.44, 74.54, 67.61, 61.22, 64.44, 63.34, 74.94, 57.95, 63.13, 51.46, 34.47, 66.54, 68.64, 52.58, 82.7, 45.46, 60.46, 58.13, 75.33, 74.69, 61.55, 63.78, 51.12, 40.19, 56.52, 61.56, 72.3, 72.02, 56.13, 56.98, 49.51, 45.8, 42.94, 79.51, 54.9, 55.62, 47.47, 67.77, 43.86, 57.87, 51.05, 63.87, 54.89, 48.19, 59.72, 64.28, 60.67, 63.02, 53.66, 56.37, 53.28, 56.4, 51.87, 42.74, 61.77, 55.98, 43.7, 64.63, 50.93, 60.52, 67.29, 61.29, 71.39, 47.65, 64.02, 53.15, 51.29, 54.21, 56.88, 60.56, 48.35, 69.01, 64.66, 44.64, 74.88, 78.96, 71.79, 58.2, 49.29, 70.54, 55.97, 72.22, 62.08, 69.77, 63.56, 67.07, 60.11, 77.86, 61.27, 64.02]\n# Effectiveness scores for Treatment B\ndata_Treatment_B = [68.83, 36.52, 37.3, 59.69, 38.27, 69.44, 45.86, 42.53, 69.23, 64.81, 68.68, 59.06, 41.39, 69.1, 47.32, 58.02, 59.47, 48.45, 56.14, 59.22, 53.76, 39.01, 52.98, 63.26, 43.05, 48.5, 45.65, 68.49, 56.72, 54.07, 42.3, 55.39, 43.26, 50.32, 43.64, 56.76, 55.77, 47.92, 53.96, 39.07, 35.09, 54.39, 51.67, 56.35, 73.83, 59.44, 40.87, 61.17, 36.84, 45.38, 49.32, 67.13, 42.55, 41.74, 49.02, 43.37, 61.27, 39.2, 38.53, 45.62, 45.02, 69.3, 59.49, 50.88, 37.75, 58.44, 40.0, 34.55, 61.88, 53.17, 59.21, 53.19, 58.57, 43.49, 39.66, 56.82, 41.97, 43.1, 45.44, 50.17, 46.46, 36.25, 43.56, 27.77, 56.25, 33.98, 38.96, 50.52, 42.6, 65.43, 37.07, 52.67, 49.61, 38.32, 55.23, 48.28, 57.72, 58.24, 71.63, 63.37]\n# Effectiveness scores for Treatment C\ndata_Treatment_C = [34.46, 36.41, 56.49, 49.83, 49.6, 15.75, 39.64, 28.93, 44.2, 38.53, 53.65, 44.76, 51.79, 33.0, 25.83, 33.85, 39.74, 45.69, 73.89, 39.37, 25.66, 34.81, 33.05, 47.22, 16.89, 40.95, 42.35, 43.48, 31.04, 36.43, 18.64, 32.6, 31.86, 46.24, 22.66, 51.72, 62.42, 8.95, 46.39, 50.15, 30.44, 34.04, 38.01, 35.53, 35.36, 14.86, 57.28, 56.19, 27.8, 18.0, 47.82, 31.36, 42.13, 35.21, 50.37, 50.42, 29.12, 19.25, 16.26, 49.16, 22.17, 32.4, 31.06, 39.21, 10.96, 42.83, 47.86, 41.33, 35.34, 41.46, 45.99, -1.59, 69.34, 45.85, 30.21, 34.14, 47.41, 38.26, 9.54, 70.97, 38.34, 55.3, 29.62, 63.05, 44.3, 49.13, 24.32, 58.17, 50.35, 59.53, 30.58, 32.78, 74.56, 24.1, 37.96, 57.05, 41.47, 48.74, 34.01, 45.55]\n# Effectiveness scores for Treatment D\ndata_Treatment_D = [16.93, 46.58, 28.82, 23.2, 36.66, 25.39, 16.66, 16.53, 36.94, 28.4, 28.66, 40.78, 18.73, 22.69, 26.15, 30.94, 29.58, 27.13, 29.38, 28.93, 22.8, 21.87, 32.75, 21.09, 18.43, 26.88, 28.42, 52.57, 22.95, 39.43, 37.47, 18.11, 37.73, 18.16, 3.41, 36.06, 12.44, 34.51, 23.16, 46.6, 40.69, 25.47, 23.12, 17.86, 25.59, 27.2, 26.35, 31.57, 35.79, 33.5, 22.36, 15.62, 43.65, 23.11, 23.48, 24.79, 11.57, 25.22, 25.2, 36.2, 36.98, 30.04, 39.32, 33.4, 29.84, 31.61, 28.09, 26.05, 27.32, 18.72, 32.8, 20.07, 38.42, 27.51, 30.49, 34.94, 36.43, 14.29, 27.93, 38.8, 13.02, 33.87, 7.44, 19.77, 30.39, 13.43, 20.14, 15.28, 46.48, 31.64, 35.67, 27.77, 26.47, 13.84, 27.08, 22.39, 38.58, 41.41, 44.67, 38.53]\n# Legend Labels\nlegend_labels = [\"Treatment A\", \"Treatment B\", \"Treatment C\", \"Treatment D\"]\n# Xticklabels\nxticklabels = [\"Treatment A\", \"Treatment B\", \"Treatment C\", \"Treatment D\"]\n# Label of y axis\nylabel_value = \"Effectiveness Score\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Random data to simulate the boxplot values for different treatments\ndata_Treatment_A = np.array([77.64, 64.0, 69.79, 82.41, 78.68, 50.23, 69.5, 58.49, 58.97, 64.11, 61.44, 74.54, 67.61, 61.22, 64.44, 63.34, 74.94, 57.95, 63.13, 51.46, 34.47, 66.54, 68.64, 52.58, 82.7, 45.46, 60.46, 58.13, 75.33, 74.69, 61.55, 63.78, 51.12, 40.19, 56.52, 61.56, 72.3, 72.02, 56.13, 56.98, 49.51, 45.8, 42.94, 79.51, 54.9, 55.62, 47.47, 67.77, 43.86, 57.87, 51.05, 63.87, 54.89, 48.19, 59.72, 64.28, 60.67, 63.02, 53.66, 56.37, 53.28, 56.4, 51.87, 42.74, 61.77, 55.98, 43.7, 64.63, 50.93, 60.52, 67.29, 61.29, 71.39, 47.65, 64.02, 53.15, 51.29, 54.21, 56.88, 60.56, 48.35, 69.01, 64.66, 44.64, 74.88, 78.96, 71.79, 58.2, 49.29, 70.54, 55.97, 72.22, 62.08, 69.77, 63.56, 67.07, 60.11, 77.86, 61.27, 64.02])\ndata_Treatment_B = np.array([68.83, 36.52, 37.3, 59.69, 38.27, 69.44, 45.86, 42.53, 69.23, 64.81, 68.68, 59.06, 41.39, 69.1, 47.32, 58.02, 59.47, 48.45, 56.14, 59.22, 53.76, 39.01, 52.98, 63.26, 43.05, 48.5, 45.65, 68.49, 56.72, 54.07, 42.3, 55.39, 43.26, 50.32, 43.64, 56.76, 55.77, 47.92, 53.96, 39.07, 35.09, 54.39, 51.67, 56.35, 73.83, 59.44, 40.87, 61.17, 36.84, 45.38, 49.32, 67.13, 42.55, 41.74, 49.02, 43.37, 61.27, 39.2, 38.53, 45.62, 45.02, 69.3, 59.49, 50.88, 37.75, 58.44, 40.0, 34.55, 61.88, 53.17, 59.21, 53.19, 58.57, 43.49, 39.66, 56.82, 41.97, 43.1, 45.44, 50.17, 46.46, 36.25, 43.56, 27.77, 56.25, 33.98, 38.96, 50.52, 42.6, 65.43, 37.07, 52.67, 49.61, 38.32, 55.23, 48.28, 57.72, 58.24, 71.63, 63.37])\ndata_Treatment_C = np.array([34.46, 36.41, 56.49, 49.83, 49.6, 15.75, 39.64, 28.93, 44.2, 38.53, 53.65, 44.76, 51.79, 33.0, 25.83, 33.85, 39.74, 45.69, 73.89, 39.37, 25.66, 34.81, 33.05, 47.22, 16.89, 40.95, 42.35, 43.48, 31.04, 36.43, 18.64, 32.6, 31.86, 46.24, 22.66, 51.72, 62.42, 8.95, 46.39, 50.15, 30.44, 34.04, 38.01, 35.53, 35.36, 14.86, 57.28, 56.19, 27.8, 18.0, 47.82, 31.36, 42.13, 35.21, 50.37, 50.42, 29.12, 19.25, 16.26, 49.16, 22.17, 32.4, 31.06, 39.21, 10.96, 42.83, 47.86, 41.33, 35.34, 41.46, 45.99, -1.59, 69.34, 45.85, 30.21, 34.14, 47.41, 38.26, 9.54, 70.97, 38.34, 55.3, 29.62, 63.05, 44.3, 49.13, 24.32, 58.17, 50.35, 59.53, 30.58, 32.78, 74.56, 24.1, 37.96, 57.05, 41.47, 48.74, 34.01, 45.55])\ndata_Treatment_D = np.array([16.93, 46.58, 28.82, 23.2, 36.66, 25.39, 16.66, 16.53, 36.94, 28.4, 28.66, 40.78, 18.73, 22.69, 26.15, 30.94, 29.58, 27.13, 29.38, 28.93, 22.8, 21.87, 32.75, 21.09, 18.43, 26.88, 28.42, 52.57, 22.95, 39.43, 37.47, 18.11, 37.73, 18.16, 3.41, 36.06, 12.44, 34.51, 23.16, 46.6, 40.69, 25.47, 23.12, 17.86, 25.59, 27.2, 26.35, 31.57, 35.79, 33.5, 22.36, 15.62, 43.65, 23.11, 23.48, 24.79, 11.57, 25.22, 25.2, 36.2, 36.98, 30.04, 39.32, 33.4, 29.84, 31.61, 28.09, 26.05, 27.32, 18.72, 32.8, 20.07, 38.42, 27.51, 30.49, 34.94, 36.43, 14.29, 27.93, 38.8, 13.02, 33.87, 7.44, 19.77, 30.39, 13.43, 20.14, 15.28, 46.48, 31.64, 35.67, 27.77, 26.47, 13.84, 27.08, 22.39, 38.58, 41.41, 44.67, 38.53])\n\ndata = [data_Treatment_A, data_Treatment_B, data_Treatment_C, data_Treatment_D]\n\n# Labels and Plot Types\nlegend_labels = [\"Treatment A\", \"Treatment B\", \"Treatment C\", \"Treatment D\"]\n\n# Axes Limits and Labels\nxticklabels = [\"Treatment A\", \"Treatment B\", \"Treatment C\", \"Treatment D\"]\nylabel_value = \"Effectiveness Score\"\nylim_values = [0, 100]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the boxplot\nfig, ax = plt.subplots(\n    figsize=(8, 6)\n)  # Adjusting figure size to match original image dimensions\nbp = ax.boxplot(data, patch_artist=True, notch=False, showfliers=False)\n\n# Customizing the boxplot colors\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"]\nfor patch, color in zip(bp[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Customizing the boxplot median lines\nfor median in bp[\"medians\"]:\n    median.set(color=\"black\", linewidth=1)\n\nlegend_patches = [\n    mpatches.Patch(color=color, label=label)\n    for color, label in zip(colors, legend_labels)\n]\nax.legend(handles=legend_patches, loc=\"upper right\")\n\n# Setting the x-axis labels\nax.set_xticklabels(xticklabels)\n\n# Setting the y-axis label\nax.set_ylabel(ylabel_value)\n\n# Setting the y-axis limits\nax.set_ylim(ylim_values)\n\n# Adding grid lines\nax.yaxis.grid(True, which=\"major\", color=\"grey\", alpha=0.5)\n\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_3.pdf', bbox_inches='tight')"}
{"idx": "heatmap_1", "instruction": "There is a reference image for you and I also have a set of data about the efficiency of different energy-saving products in comparison to each other. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Row labels\nrow_labels = [\"AVG\", \"LED Lighting\", \"Solar Panels\", \"Smart Thermostats\", \"Energy-efficient Windows\", \"Insulation\"]\n# Column labels\ncol_labels = [\"LED Lighting\", \"Solar Panels\", \"Smart Thermostats\", \"Energy-efficient Windows\", \"Insulation\"]\n# Data for the heatmap\ndata = [\n    [0.85, 0.78, 0.75, 0.74, 0.70],\n    [0.88, 0.82, 0.77, 0.76, 0.68],\n    [np.nan, 0.85, 0.79, 0.78, 0.72],\n    [np.nan, np.nan, 0.83, 0.80, 0.75],\n    [np.nan, np.nan, np.nan, 0.84, 0.78],\n    [np.nan, np.nan, np.nan, np.nan, 0.88],\n]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data in the heatmap\ndata = np.array(\n    [\n        [0.85, 0.78, 0.75, 0.74, 0.70],\n        [0.88, 0.82, 0.77, 0.76, 0.68],\n        [np.nan, 0.85, 0.79, 0.78, 0.72],\n        [np.nan, np.nan, 0.83, 0.80, 0.75],\n        [np.nan, np.nan, np.nan, 0.84, 0.78],\n        [np.nan, np.nan, np.nan, np.nan, 0.88],\n    ]\n)\n\n# Labels for the rows and columns\nrow_labels = [\"AVG\", \"LED Lighting\", \"Solar Panels\", \"Smart Thermostats\", \"Energy-efficient Windows\", \"Insulation\"]\ncol_labels = [\"LED Lighting\", \"Solar Panels\", \"Smart Thermostats\", \"Energy-efficient Windows\", \"Insulation\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap=\"Reds\")\n\n# Set the ticks\nax.set_xticks(np.arange(len(col_labels)))\nax.set_yticks(np.arange(len(row_labels)))\n\n# Set the tick labels\nax.set_xticklabels(col_labels)\nax.set_yticklabels(row_labels)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n\n# Move the row labels to the right side\nax.yaxis.tick_right()\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(row_labels)):\n    for j in range(len(col_labels)):\n        if not np.isnan(data[i, j]):\n            text = ax.text(\n                j, i, f\"{data[i, j]:.2f}\", ha=\"center\", va=\"center\", color=\"black\"\n            )\n\n# Set the visibility of the spines\nax.spines[\"top\"].set_visible(True)\nax.spines[\"right\"].set_visible(True)\nax.spines[\"left\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\n\n# Set the visibility of the ticks with only the top and right axes\nax.xaxis.set_ticks_position(\"top\")\nax.yaxis.set_ticks_position(\"right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('heatmap_1.pdf', bbox_inches='tight')"}
{"idx": "line_40", "instruction": "There is a reference image for you and I also have a set of data about the relationship between advertising budget and sales growth. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Advertising budget in thousands\nbudget_values = [10, 32.5, 55, 77.5, 100]\n# Sales growth for different advertising methods\nsales_growth_tv = [28.82, 22.00, 24.89, 31.20, 29.33]\nsales_growth_online = [47.64, 34.00, 39.78, 52.40, 48.67]\nsales_growth_print = [5.11, 14.75, 9.24, 9.48, 12.05]\nsales_growth_total = [40.72, 47.27, 43.80, 40.60, 42.21]\n# Label of x axis\nxlabel_value = \"Advertising Budget (in $1000s)\"\n# Label of y axis\nylabel_value = \"Sales Growth (%)\"\n# Labels and Plot Types\nlabel_tv = \"TV Advertising\"\nlabel_online = \"Online Advertising\"\nlabel_print = \"Print Advertising\"\nlabel_total = \"Total Sales Growth\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# New generated data\nbudget_values = np.array([10.,32.5,55.,77.5,100.])  # Advertising budget in thousands\nsales_growth_tv = np.array([28.82, 22.00, 24.89, 31.20, 29.33])\nsales_growth_online = np.array([47.64, 34.00, 39.78, 52.40, 48.67])\nsales_growth_print = np.array([5.11, 14.75, 9.24, 9.48, 12.05])\nsales_growth_total = np.array([40.72, 47.27, 43.80, 40.60, 42.21])\n\n# Labels and Plot Types\nlabel_tv = \"TV Advertising\"\nlabel_online = \"Online Advertising\"\nlabel_print = \"Print Advertising\"\nlabel_total = \"Total Sales Growth\"\n\n# Axes Limits and Labels\nyticks_values = np.arange(0, 85, 10)\nylim_values = [0, 85]\nxlabel_value = \"Advertising Budget (in $1000s)\"\nylabel_value = \"Sales Growth (%)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting with error bars (second-level element)\nplt.figure(figsize=(8, 6))  # Increased figure size for clarity\nplt.plot(budget_values, sales_growth_tv, \"-o\", label=label_tv, color=\"#1f77b4\")\nplt.fill_between(budget_values, sales_growth_tv - 5, sales_growth_tv + 5, color=\"#1f77b4\", alpha=0.2)\nplt.plot(budget_values, sales_growth_online, \"-^\", label=label_online, color=\"#ff7f0e\")\nplt.fill_between(\n    budget_values, sales_growth_online - 10, sales_growth_online + 10, color=\"#ff7f0e\", alpha=0.2\n)\nplt.plot(budget_values, sales_growth_print, \"-x\", label=label_print, color=\"#2ca02c\")\nplt.fill_between(\n    budget_values, sales_growth_print - 5, sales_growth_print + 5, color=\"#2ca02c\", alpha=0.2\n)\nplt.plot(budget_values, sales_growth_total, \"-s\", label=label_total, color=\"#d62728\")\nplt.fill_between(budget_values, sales_growth_total - 5, sales_growth_total + 5, color=\"#d62728\", alpha=0.2)\n\n# Customizing axes and labels (third-level elements)\nplt.yticks(yticks_values, fontsize=12)\nplt.xticks(fontsize=12)\nplt.ylim(ylim_values)\nplt.grid(True)\n\n# Relocating the legend to ensure no overlap with data lines\nplt.legend(loc=\"lower right\", frameon=True, shadow=True, fontsize=10)\n\n# Customizing the background (third-level element)\nplt.gca().set_facecolor(\"#f4f4f5\")\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\n\n# Labels\nplt.xlabel(xlabel_value, fontsize=14)\nplt.ylabel(ylabel_value, fontsize=14)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('line_40.pdf', bbox_inches='tight')"}
{"idx": "3d_2", "instruction": "There is a reference image for you and I also have a set of data about temperature and precipitation distributions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Temperature distribution data\ndef temperature(x, y, sigma=0.1, mu=0):\n    return 30 * np.exp(-((x - mu) ** 2 + (y - mu) ** 2) / (2.0 * sigma**2)) + 10  # Temperature in Celsius\n# Precipitation distribution data\ndef precipitation(x, y, sigma=0.1, mu=0):\n    return 200 * np.exp(-((x - mu) ** 2 + (y - mu) ** 2) / (2.0 * sigma**2))  # Precipitation in mm\n# Labels for the axes\nax1_title = \"Temperature Distribution (\u00b0C)\"\nax2_title = \"Precipitation Distribution (mm)\"\n # Create Date\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\nz1 = temperature(x, y, sigma=0.4)\nz2 = precipitation(x, y, sigma=0.3)\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the Gaussian function for temperature and precipitation\ndef temperature(x, y, sigma=0.1, mu=0):\n    return 30 * np.exp(-((x - mu) ** 2 + (y - mu) ** 2) / (2.0 * sigma**2)) + 10  # Temperature in Celsius\n\ndef precipitation(x, y, sigma=0.1, mu=0):\n    return 200 * np.exp(-((x - mu) ** 2 + (y - mu) ** 2) / (2.0 * sigma**2))  # Precipitation in mm\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\nz1 = temperature(x, y, sigma=0.4)\nz2 = precipitation(x, y, sigma=0.3)\n\n# Axes Limits and Labels\nax1_title = \"Temperature Distribution (\u00b0C)\"\nxlim1_values = np.linspace(-1, 1, 9)\nylim1_values = np.linspace(-1, 1, 9)\nax2_title = \"Precipitation Distribution (mm)\"\nxlim2_values = np.linspace(-1, 1, 9)\nylim2_values = np.linspace(-1, 1, 9)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure with specified size\nfig = plt.figure(figsize=(10, 7))\n\n# First subplot\nax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot_surface(x, y, z1, cmap=\"jet\")\nax1.set_title(ax1_title)\nax1.set_xticks(xlim1_values)\nax1.set_xticklabels(xlim1_values, rotation=45)\nax1.set_yticks(ylim1_values)\nax1.set_yticklabels(ylim1_values, rotation=0)\n\n# Second subplot\nax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot_surface(x, y, z2, cmap=\"jet\")\nax2.set_title(ax2_title)\nax2.set_xticks(xlim2_values)\nax2.set_xticklabels(xlim2_values, rotation=45)\nax2.set_yticks(ylim2_values)\nax2.set_yticklabels(ylim2_values, rotation=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('3d_2.pdf', bbox_inches='tight')"}
{"idx": "PIP_6", "instruction": "There is a reference image for you and I also have a set of data about health metric data over time steps. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Time steps\nx = np.linspace(0, 10000, 100)\n# Heart Rate\ny1 = 90 - 60 * np.exp(-x / 1000)\n# Blood Pressure\ny2 = 85 - 55 * np.exp(-x / 1250)\n# BMI\ny3 = 75 - 45 * np.exp(-x / 2000)\n# Label of x axis\nxlabel_value = \"Time Steps\"\n# Label of y axis\nylabel_value = \"Health Metric Value\"\n# Zoomed in Axes\n[0.4, 0.2, 0.3, 0.3]\n# Labels and Plot Types\nlabel_HeartRate = \"Heart Rate\"\nlabel_BloodPressure = \"Blood Pressure\"\nlabel_BMI = \"BMI\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to approximate the curves in the picture\nx = np.linspace(0, 10000, 100)\ny1 = 90 - 60 * np.exp(-x / 1000)\ny2 = 85 - 55 * np.exp(-x / 1250)\ny3 = 75 - 45 * np.exp(-x / 2000)\n\n# Labels and Plot Types\nlabel_HeartRate = \"Heart Rate\"\nlabel_BloodPressure = \"Blood Pressure\"\nlabel_BMI = \"BMI\"\n\n# Axes Limits and Labels\nxlabel_value = \"Time Steps\"\nylabel_value = \"Health Metric Value\"\nzoomed_in_axes = [0.4, 0.2, 0.3, 0.3]\nxlim_values = [9600, 10000]\nylim_values = [75, 90]\nxticks_values = [9600, 9800, 10000]\nyticks_values = [80, 90, 100]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot the curves\nax.plot(x, y1, \"r\", label=label_HeartRate)\nax.plot(x, y2, \"g\", label=label_BloodPressure)\nax.plot(x, y3, \"b\", label=label_BMI)\n\n# Set labels and title\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\n\n# Create the inset with the zoomed-in view\nax_inset = fig.add_axes(\n    zoomed_in_axes\n)  # Adjust the position to align with the right side of the main plot\nax_inset.plot(x, y1, \"r\")\nax_inset.plot(x, y2, \"g\")\nax_inset.plot(x, y3, \"b\")\nax_inset.set_xlim(xlim_values)\nax_inset.set_ylim(ylim_values)\nax_inset.set_xticks(xticks_values)\nax_inset.set_yticks(yticks_values)\nax_inset.spines[\"bottom\"].set_color(\"black\")  # Add black border to the inset\nax_inset.spines[\"left\"].set_color(\"black\")\nax_inset.spines[\"top\"].set_color(\"black\")\nax_inset.spines[\"right\"].set_color(\"black\")\n\n# Add the legend to the main axis, outside the plot area\nax.legend(loc=\"lower right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('PIP_6.pdf', bbox_inches='tight')"}
{"idx": "contour_4", "instruction": "There is a reference image for you and I also have a set of data about temperature distribution across different latitudes and longitudes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Latitude values\nlatitude = np.array([-90.0, -70.0, -50.0, -30.0, -10.0, 10.0, 30.0, 50.0, 70.0, 90.0])\n# Longitude values\nlongitude = np.array([-180.0, -140.0, -100.0, -60.0, -20.0, 20.0, 60.0, 100.0, 140.0, 180.0])\n# Temperature values calculated from latitude and longitude\nTemperature = np.sqrt(Longitude**2 + Latitude**2)\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nlatitude = np.array([-90.0, -70.0, -50.0, -30.0, -10.0, 10.0, 30.0, 50.0, 70.0, 90.0])\nlongitude = np.array([-180.0, -140.0, -100.0, -60.0, -20.0, 20.0, 60.0, 100.0, 140.0, 180.0])\nLongitude, Latitude = np.meshgrid(longitude, latitude)\nTemperature = np.sqrt(Longitude**2 + Latitude**2)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Contour\nfig, ax = plt.subplots(figsize=(6, 6))\ncnt = ax.contour(Longitude, Latitude, Temperature)\nax.clabel(cnt, cnt.levels, inline=True, fontsize=10)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('contour_4.pdf', bbox_inches='tight')"}
{"idx": "heatmap_19", "instruction": "There is a reference image for you and I also have two sets of data about health conditions by age group. The data for the first subplot is as follows:Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Data for the first subplot\ndata1 = [\n    [8.3, 12.0, 25.9, 7.0, 18.4, 28.3],\n    [4.2, 11.2, 30.6, 9.8, 21.3, 22.9],\n    [6.8, 15.3, 20.9, 12.2, 25.5, 19.3],\n    [10.0, 12.1, 15.5, 14.1, 30.1, 18.2],\n    [15.7, 18.1, 10.6, 24.5, 20.6, 10.5],\n]\nThe data for the second subplot is as follows:\n# Data for the second subplot\ndata2 = [\n    [11.5, 7.0, 18.7, 10.9, 25.0, 26.9],\n    [9.4, 10.0, 17.8, 19.9, 22.0, 21.9],\n    [8.6, 12.2, 16.8, 21.3, 24.1, 17.0],\n    [7.3, 14.2, 14.0, 20.5, 26.0, 18.8],\n    [6.5, 13.3, 20.4, 22.5, 23.1, 14.3],\n]\n# X-axis labels\nx_labels = [\"Diabetes\", \"Heart Disease\", \"Cancer\", \"Stroke\", \"Respiratory Disease\", \"Other\"]\n# Y-axis labels\ny_labels = [\"Diabetes\", \"Heart Disease\", \"Cancer\", \"Stroke\", \"Respiratory Disease\"]\n# Titles\ntitles = [\"(a) Health condition distribution by age group\", \"(b) Final health state of age groups\"]\n# Set up the colormap and norm (log scale)\nnorm = LogNorm(vmin=0.1, vmax=100)\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 20.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Defining the colormap from white to blue\ncmap = plt.cm.Blues\n\n# Data for the two subplots\ndata1 = np.array(\n    [\n        [8.3, 12.0, 25.9, 7.0, 18.4, 28.3],\n        [4.2, 11.2, 30.6, 9.8, 21.3, 22.9],\n        [6.8, 15.3, 20.9, 12.2, 25.5, 19.3],\n        [10.0, 12.1, 15.5, 14.1, 30.1, 18.2],\n        [15.7, 18.1, 10.6, 24.5, 20.6, 10.5],\n    ]\n)\n\ndata2 = np.array(\n    [\n        [11.5, 7.0, 18.7, 10.9, 25.0, 26.9],\n        [9.4, 10.0, 17.8, 19.9, 22.0, 21.9],\n        [8.6, 12.2, 16.8, 21.3, 24.1, 17.0],\n        [7.3, 14.2, 14.0, 20.5, 26.0, 18.8],\n        [6.5, 13.3, 20.4, 22.5, 23.1, 14.3],\n    ]\n)\n\n# X and Y labels\nx_labels = [\"Diabetes\", \"Heart Disease\", \"Cancer\", \"Stroke\", \"Respiratory Disease\", \"Other\"]\ny_labels = [\"Diabetes\", \"Heart Disease\", \"Cancer\", \"Stroke\", \"Respiratory Disease\"]\n# Subplot titles\ntitles = [\"(a) Health condition distribution by age group\", \"(b) Final health state of age groups\"]\n\n# Set up the colormap and norm (log scale)\nnorm = LogNorm(vmin=0.1, vmax=100)\n\n# Axes Limits and Labels\nxticks_values = range(len(x_labels))\nyticks_values = range(len(y_labels))\ncolorbar_ticks = [0.1, 1, 10, 100]\nyticklabels = [\"0.1\", \"1\", \"10\", \"100\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure\nfig, axes = plt.subplots(\n    1, 2, figsize=(20, 8), gridspec_kw={\"width_ratios\": [1, 1], \"wspace\": 0.3}\n)\n\n\n# Function to create a subplot\ndef create_subplot(ax, data, title):\n    # Create the scatter plot\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            # Calculate the color based on the original value\n            color = cmap(norm(data[i, j]))\n\n            # Draw the circle with a fixed size\n            circle = plt.Circle((j, i), 0.4, color=color)  # Fixed size\n            ax.add_artist(circle)\n\n            # Determine text color based on the value\n            text_color = \"white\" if data[i, j] > 25 else \"black\"\n\n            # Add the text inside the circle\n            ax.text(\n                j, i, f\"{data[i, j]:.1f}%\", ha=\"center\", va=\"center\", color=text_color\n            )\n\n    # Set labels for x and y axes\n    ax.set_xticks(range(len(x_labels)))\n    ax.set_xticklabels(x_labels, ha=\"center\")\n    ax.set_yticks(range(len(y_labels)))\n    ax.set_yticklabels(y_labels, va=\"center\")\n\n    # Adding the title for the subplot\n    ax.set_title(title, fontsize=16)\n\n    # Set the limits of the axes; they should be one more than your data range\n    ax.set_xlim(-0.5, data.shape[1] - 0.5)\n    ax.set_ylim(-0.5, data.shape[0] - 0.5)\n\n    # Set the aspect of the plot to be equal and add a frame\n    ax.set_aspect(\"equal\")\n    for spine in ax.spines.values():\n        spine.set_visible(True)\n\n\n# Create each subplot\ncreate_subplot(axes[0], data1, titles[0])\ncreate_subplot(axes[1], data2, titles[1])\n\n# Create a colorbar on the far right side of the figure\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(\n    sm,\n    ax=axes,\n    ticks=colorbar_ticks,\n    orientation=\"vertical\",\n    fraction=0.015,\n    pad=0.05,\n)\ncbar.ax.set_yticklabels(yticklabels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_19.pdf', bbox_inches='tight')"}
{"idx": "line_5", "instruction": "There is a reference image for you and I also have a set of data about vehicle speed and fuel efficiency using three different methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Vehicle Speed\nvehicle_speed = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n# Fuel Efficiency using Direct Method\nfuel_efficiency_direct = [30, 28, 25, 23, 20, 18, 15, 13, 10, 8]\n# Fuel Efficiency using Scratchpad Method\nfuel_efficiency_scratchpad = [32, 29, 26, 24, 21, 19, 16, 14, 11, 9]\n# Fuel Efficiency using Rule-Following Method\nfuel_efficiency_rule_following = [33, 31, 27, 25, 22, 20, 17, 15, 12, 10]\n# Label of x axis\nxlabel_value = \"Vehicle Speed (km/h)\"\n# Label of y axis\nylabel_value = \"Fuel Efficiency (mpg)\"\n# Labels and Plot Types\nlabel_direct_method = \"Direct Method\"\nlabel_scratchpad_method = \"Scratchpad Method\"\nlabel_rule_following_method = \"Rule-Following Method\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\nvehicle_speed = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nfuel_efficiency_direct = [30, 28, 25, 23, 20, 18, 15, 13, 10, 8]\nfuel_efficiency_scratchpad = [32, 29, 26, 24, 21, 19, 16, 14, 11, 9]\nfuel_efficiency_rule_following = [33, 31, 27, 25, 22, 20, 17, 15, 12, 10]\n\n# Labels and Plot Types\nlabel_direct_method = \"Direct Method\"\nlabel_scratchpad_method = \"Scratchpad Method\"\nlabel_rule_following_method = \"Rule-Following Method\"\n\n# Axes Limits and Labels\nxlabel_value = \"Vehicle Speed (km/h)\"\nylabel_value = \"Fuel Efficiency (mpg)\"\nxlim_values = [5, 105]\nylim_values = [5, 35]\nxticks_values = range(10, 101, 10)\nyticks_values = [i * 5 for i in range(2, 8)]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(6, 4))  # Adjusting figure size as per the given dimensions\nplt.plot(vehicle_speed, fuel_efficiency_direct, \"o--\", label=label_direct_method, color=\"#1f77b4\")\nplt.plot(\n    vehicle_speed, fuel_efficiency_scratchpad, \"o--\", label=label_scratchpad_method, color=\"#ff7f0e\"\n)\nplt.plot(\n    vehicle_speed,\n    fuel_efficiency_rule_following,\n    \"o--\",\n    label=label_rule_following_method,\n    color=\"#2ca02c\",\n)\n\n# Adding labels and title\nplt.xlabel(xlabel_value, fontsize=16)\nplt.ylabel(ylabel_value, fontsize=16)\n\n# Adjusting x and y axis limits to add some space before the start and after the end\nplt.xlim(xlim_values)\nplt.ylim(ylim_values)\n\n# Setting x and y ticks\nplt.xticks(xticks_values)  # X-axis from 10 to 100 with a step of 10\nplt.yticks(yticks_values)  # Y-axis from 10 to 35 with a step of 5\n\n# Adding legend outside the plot area\nplt.legend(loc=\"upper right\", fancybox=True, shadow=False)\n\n# Adding semi-transparent grid\nplt.grid(True, which=\"both\", linewidth=0.5, alpha=0.2)  # Semi-transparent grid\n\n# Removing top and right borders\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('line_5.pdf', bbox_inches='tight')"}
{"idx": "3d_6", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# X-axis data\nX = np.arange(-10, 10, 0.5)\n# Y-axis data\nY = np.arange(-10, 10, 0.5)\n# Z-axis data (surface height values)\nZ = np.cos(X / 2) * np.sin(Y / 2)\n# Label of x axis\nxlabel_value = \"Longitude\"\n# Label of y axis\nylabel_value = \"Latitude\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom matplotlib import cm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Make data.\nX = np.arange(-10, 10, 0.5)\nY = np.arange(-10, 10, 0.5)\nX, Y = np.meshgrid(X, Y)\nZ = np.cos(X / 2) * np.sin(Y / 2)\n\n# Axes Limits and Labels\nxlabel_value = \"Longitude\"\nylabel_value = \"Latitude\"\nzlim_values = [-1, 1]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw={\"projection\": \"3d\"})\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)\n\n# Customize the z axis.\nax.set_zlim(zlim_values)\n\n# A StrMethodFormatter is used automatically\nax.zaxis.set_major_formatter(\"{x:.02f}\")\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=10)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('3d_6.pdf', bbox_inches='tight')"}
{"idx": "bar_1", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Scores for different modes of transportation\ncar = (0, 0.4, 0.6, 0.2)\nbicycle = (0, 0.5, 0.7, 0.3)\ntrain = (0, 0.6, 0.5, 0.1)\nbus = (0, 0.3, 0.4, 0.2)\nairplane = (0, 0.2, 0.3, 0.1)\n# Label of y axis\nylabel_value = \"Scores\"\n# Legend labels for each mode of transportation\nlegend_labels = (\"Car\", \"Bicycle\", \"Train\", \"Bus\", \"Airplane\",)\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nN = 5\ncar = (0, 0.4, 0.6, 0.2)\nbicycle = (0, 0.5, 0.7, 0.3)\ntrain = (0, 0.6, 0.5, 0.1)\nbus = (0, 0.3, 0.4, 0.2)\nairplane = (0, 0.2, 0.3, 0.1)\n\n\nind = np.arange(4)  # the x locations for the groups\nwidth = 0.1  # the width of the bars\n\n# Axes Limits and Labels\nylabel_value = \"Scores\"\nxlim_values = [0.7, 3.7]\nxticklabels = (\"0\", \"20\", \"40\", \"60\")\nlegend_labels = (\n        \"Car\",\n        \"Bicycle\",\n        \"Train\",\n        \"Bus\",\n        \"Airplane\",\n    )\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.figure(figsize=(7, 5))  # Adjusting figure size as per the given dimensions\nax = fig.add_subplot(111)\n\nrects1 = ax.bar(ind, car, width, color=\"#495c80\")\nrects2 = ax.bar(ind + width, bicycle, width, color=\"#6d8abb\")\nrects3 = ax.bar(ind + 2 * width, train, width, color=\"#eadcd1\")\nrects4 = ax.bar(ind + 3 * width, bus, width, color=\"#5899b8\")\nrects5 = ax.bar(ind + 4 * width, airplane, width, color=\"#2b5a75\")\n\nax.set_ylabel(ylabel_value)\nax.set_xlim(xlim_values)\nax.set_xticks(ind + 7 * width)\nax.set_xticklabels(xticklabels)\n\nax.legend(\n    (rects1[0], rects2[0], rects3[0], rects4[0], rects5[0]),\n    legend_labels,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_1.pdf', bbox_inches='tight')"}
{"idx": "density_3", "instruction": "There is a reference image for you and I also have a set of data about student test scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Test scores for two groups\nscores_group1 = [34.47, 66.54, 68.64, 52.58, 82.70, 45.46, 60.46, 58.13, 75.33, 74.69]\nscores_group2 = [81.55, 83.78, 71.12, 60.19, 76.52, 81.56, 92.30, 92.02, 76.13, 76.98]\n# Label of x axis\nxlabel_value = \"Test Score\"\n# Label of y axis\nylabel_value = \"Density\"\n# Title\ntitle = \"KDE Plot of Student Test Scores Distribution\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate a bimodal distribution for test scores\nscores_group1 = np.array([34.47, 66.54, 68.64, 52.58, 82.70, 45.46, 60.46, 58.13, 75.33, 74.69]) \nscores_group2 = np.array([81.55, 83.78, 71.12, 60.19, 76.52, 81.56, 92.30, 92.02, 76.13, 76.98])  \ntest_scores = np.concatenate([scores_group1, scores_group2])\nscore_range = np.linspace(30, 110, 200)\n\n# Axes Limits and Labels\nxticks_values = [40, 50, 60, 70, 80, 90, 100]\nxticklabels = [\"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"]\nyticks_values = [0, 0.01, 0.02, 0.03, 0.04]\nyticklabels = [\"0.00\", \"0.01\", \"0.02\", \"0.03\", \"0.04\"]\nxlim_values = [30, 110]\nylim_values = [0, 0.04]\ntitle = \"KDE Plot of Student Test Scores Distribution\"\nxlabel_value = \"Test Score\"\nylabel_value = \"Density\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Create the KDE plot with adjusted x-axis range\ndensity = gaussian_kde(test_scores)\ndensity.covariance_factor = lambda: 0.5\ndensity._compute_covariance()\nplt.fill_between(score_range, density(score_range), color=\"#d1e4e5\", edgecolor=\"teal\")\n\nax.set_xticks(xticks_values)\nax.set_xticklabels(xticklabels)\n\nax.set_yticks(yticks_values)\nax.set_yticklabels(yticklabels)\n\nplt.xlim(xlim_values)\nplt.ylim(ylim_values)\n# Set the title and labels\nplt.title(title)\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('density_3.pdf', bbox_inches='tight')"}
{"idx": "heatmap_22", "instruction": "There is a reference image for you and I also have two sets of data about student performance and teaching techniques. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The student performance and teaching techniques data is as follows:\n# Student1 Performance\ndata_Techniques = pd.DataFrame(\n    {\n        \"Homework\": [\"#1\", \"#2\", \"#3\", \"#4\"],\n        \"Projects\": [\"#5\", \"#6\", \"#7\", \"#8\"],\n        \"Exams\": [\"#9\", \"#10\", \"#11\", \"#12\"],\n    }\n)\n# Student2 Performance\ndata_Performance = pd.DataFrame(\n    {\n        \"Homework\": [\"#3\", \"#4\", \"#5\", \"#6\"],\n        \"Projects\": [\"#7\", \"#8\", \"#9\", \"#10\"],\n        \"Exams\": [\"#11\", \"#12\", \"#1\", \"#2\"],\n    }\n)\n# Label of y axis\nax1_ylabel = \"Rank\"\n# Titles\nax1_title = \"Student1 Performance\"\nax2_title = \"Student2 Performance\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Creating dummy data based on the new domain 'education'\ndata_Techniques = pd.DataFrame(\n    {\n        \"Homework\": [\"#1\", \"#2\", \"#3\", \"#4\"],\n        \"Projects\": [\"#5\", \"#6\", \"#7\", \"#8\"],\n        \"Exams\": [\"#9\", \"#10\", \"#11\", \"#12\"],\n    }\n)\n\ndata_Performance = pd.DataFrame(\n    {\n        \"Homework\": [\"#3\", \"#4\", \"#5\", \"#6\"],\n        \"Projects\": [\"#7\", \"#8\", \"#9\", \"#10\"],\n        \"Exams\": [\"#11\", \"#12\", \"#1\", \"#2\"],\n    }\n)\n\n# Creating a function to convert the string indices to numeric values for plotting\ndef convert_to_numeric(cell):\n    return int(cell.replace(\"#\", \"\"))\n\n\n# Convert the dataframes\ndata_Techniques_numeric = data_Techniques.applymap(convert_to_numeric)\ndata_Performance_numeric = data_Performance.applymap(convert_to_numeric)\n\n# Axes Limits and Labels\nax1_title = \"Student1 Performance\"\nax1_ylabel = \"Rank\"\nax2_title = \"Student2 Performance\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Creating the heatmap using matplotlib with increased linewidths for separation\nfig, (ax1, ax2) = plt.subplots(\n    ncols=2, figsize=(6, 3), gridspec_kw={\"width_ratios\": [1, 1], \"wspace\": 0.1}\n)\n\n# Setting the color map to match the new domain\ncmap_Techniques = plt.get_cmap(\"Oranges\")\ncmap_Performance = plt.get_cmap(\"Blues\")\n\n# Heatmap for Teaching Techniques with increased cell borders\nim1 = ax1.imshow(data_Techniques_numeric, cmap=cmap_Techniques)\nax1.set_title(ax1_title)\nax1.set_ylabel(ax1_ylabel)\nax1.set_xticks(range(len(data_Techniques.columns)))\nax1.set_xticklabels(data_Techniques.columns, rotation=45)\nax1.set_yticks(range(len(data_Techniques.index)))\nax1.set_yticklabels(data_Techniques.index, rotation=0)\n\n# Add annotations for Teaching Techniques\nfor i in range(len(data_Techniques.index)):\n    for j in range(len(data_Techniques.columns)):\n        ax1.text(j, i, data_Techniques.iloc[i, j], ha=\"center\", va=\"center\", color=\"black\")\n\n# Heatmap for Student Performance with increased cell borders\nim2 = ax2.imshow(data_Performance_numeric, cmap=cmap_Performance)\nax2.set_title(ax2_title)\nax2.set_xticks(range(len(data_Performance.columns)))\nax2.set_xticklabels(data_Performance.columns, rotation=45)\nax2.set_yticks(range(len(data_Performance.index)))\nax2.set_yticklabels(data_Performance.index, rotation=0)\n\n# Add annotations for Student Performance\nfor i in range(len(data_Performance.index)):\n    for j in range(len(data_Performance.columns)):\n        ax2.text(j, i, data_Performance.iloc[i, j], ha=\"center\", va=\"center\", color=\"black\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('heatmap_22.pdf', bbox_inches='tight')"}
{"idx": "multidiff_1", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Sizes 1\nsizes_1 = [50, 20, 15, 10, 3, 2]\n# Labels 1\nlabels_1 = [\"Coal\\n50%\", \"Natural Gas\\n20%\", \"Hydro\\n15%\", \"Solar\\n10%\", \"Wind\\n3%\", \"Others\\n2%\"]\n# Sizes 2 \nsizes_2 = [45, 25, 15, 10, 5]\n# Labels 2\nlabels_2 = [\"North\", \"South\", \"East\", \"West\", \"Central\"]\n# Colors 2\ncolors_2 = plt.cm.Set3(np.linspace(0, 1, len(sizes_pie)))\n# Explode\nexplode = (0.1, 0, 0, 0, 0)\n# Title\ntitle = \"Renewable Energy Adoption Rate by Region\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport squarify\nfrom matplotlib.gridspec import GridSpec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Treemap data for energy resources allocation by region\nsizes_treemap = [50, 20, 15, 10, 3, 2]\nlabels_treemap = [\n    \"Coal\\n50%\",\n    \"Natural Gas\\n20%\",\n    \"Hydro\\n15%\",\n    \"Solar\\n10%\",\n    \"Wind\\n3%\",\n    \"Others\\n2%\",\n]\ncolors_treemap = [\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\", \"#80b1d3\", \"#fdb462\"]\n\n# Pie chart data for renewable energy adoption rates in regions\nsizes_pie = [45, 25, 15, 10, 5]\nlabels_pie = [\"North\", \"South\", \"East\", \"West\", \"Central\"]\ncolors_pie = plt.cm.Set3(np.linspace(0, 1, len(sizes_pie)))\nexplode_pie = (0.1, 0, 0, 0, 0)  # Highlight the first slice\n\ntitle = \"Renewable Energy Adoption Rate by Region\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and set GridSpec\nfig = plt.figure(figsize=(10, 5))\ngs = GridSpec(1, 2, figure=fig)\n\n# Create treemap subplot\nax1 = fig.add_subplot(gs[0, 0])\nsquarify.plot(\n    sizes=sizes_treemap,\n    label=labels_treemap,\n    color=colors_treemap,\n    alpha=0.7,\n    text_kwargs={\"fontsize\": 14},\n)\nax1.axis(\"off\")  # Disable the axes\n\n# Create pie chart subplot\nax2 = fig.add_subplot(gs[0, 1])\nwedges, texts, autotexts = ax2.pie(\n    sizes_pie,\n    explode=explode_pie,\n    labels=labels_pie,\n    colors=colors_pie,\n    autopct=\"%1.1f%%\",\n    shadow=True,\n    startangle=90,\n)\nax2.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('multidiff_1.pdf', bbox_inches='tight')"}
{"idx": "CB_1", "instruction": "There is a reference image for you and I also have two sets of temperature distribution data for regions A and B. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The temperature distribution data is as follows:\n# Temperature distribution data for region A\ndata_region_a = np.array([24.42, 8.26, 8.65, 19.85, 9.13, 24.72, 12.93, 11.26, 24.61, 22.4, 24.34, 19.53, 10.69, 24.55, 13.66, 19.01, 19.74, 14.22, 18.07, 19.61, 16.88, 9.5, 16.49, 21.63, 11.53, 14.25, 12.82, 24.25, 18.36, 17.04, 11.15, 17.7, 11.63, 15.16, 11.82, 18.38, 17.88, 13.96, 16.98, 9.53, 7.54, 17.2, 15.83, 18.18, 26.92, 19.72, 10.44, 20.59, 8.42, 12.69])\n# Temperature distribution data for region B\ndata_region_b = np.array([24.66, 33.57, 21.28, 20.87, 24.51, 21.68, 30.63, 19.6, 19.26, 22.81, 22.51, 34.65, 29.75, 25.44, 18.87, 29.22, 20.0, 17.28, 30.94, 26.58, 29.6, 26.59, 29.28, 21.74, 19.83, 28.41, 20.98, 21.55, 22.72, 25.09, 23.23, 18.13, 21.78, 13.88, 28.13, 16.99, 19.48, 25.26, 21.3, 32.72, 18.54, 26.34, 24.8, 19.16, 27.62, 24.14, 28.86, 29.12, 35.82, 31.68])\n# Label of x axis\nxlabel_value = \"Temperature (\u00b0C)\"\n# Label of y axis\nylabel_value = \"Density\"\n# Labels and Plot Types\nax1_label = \"Region A\"\nax2_label = \"Region B\"\nax1_text = \"Mean Temp A\"\nax2_text = \"Mean Temp B\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nfrom scipy.stats import norm\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration representing temperature distributions (\u00b0C) for two regions\ndata_region_a = np.array([24.42, 8.26, 8.65, 19.85, 9.13, 24.72, 12.93, 11.26, 24.61, 22.4, 24.34, 19.53, 10.69, 24.55, 13.66, 19.01, 19.74, 14.22, 18.07, 19.61, 16.88, 9.5, 16.49, 21.63, 11.53, 14.25, 12.82, 24.25, 18.36, 17.04, 11.15, 17.7, 11.63, 15.16, 11.82, 18.38, 17.88, 13.96, 16.98, 9.53, 7.54, 17.2, 15.83, 18.18, 26.92, 19.72, 10.44, 20.59, 8.42, 12.69])\ndata_region_b = np.array([24.66, 33.57, 21.28, 20.87, 24.51, 21.68, 30.63, 19.6, 19.26, 22.81, 22.51, 34.65, 29.75, 25.44, 18.87, 29.22, 20.0, 17.28, 30.94, 26.58, 29.6, 26.59, 29.28, 21.74, 19.83, 28.41, 20.98, 21.55, 22.72, 25.09, 23.23, 18.13, 21.78, 13.88, 28.13, 16.99, 19.48, 25.26, 21.3, 32.72, 18.54, 26.34, 24.8, 19.16, 27.62, 24.14, 28.86, 29.12, 35.82, 31.68])\n\n# Labels and Plot Types\nax1_label = \"Region A\"\nax2_label = \"Region B\"\nax1_text = \"Mean Temp A\"\nax2_text = \"Mean Temp B\"\n\n# Axes Limits and Labels\nxlabel_value = \"Temperature (\u00b0C)\"\nylabel_value = \"Density\"\nxticks_values = [0, 5, 10, 15, 20, 25, 30, 35, 40]\nxlim_values = [-5, 45]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(\n    figsize=(10, 8)\n)  # Adjusted to match the original image's dimensions\n\n# Plot histograms\nax.hist(data_region_a, bins=15, density=True, alpha=0.7, color=\"#1982c4\", label=ax1_label)\nax.hist(data_region_b, bins=15, density=True, alpha=0.7, color=\"#ff595e\", label=ax2_label)\n\n# Plot normal distributions\nxmin, xmax = ax.get_xlim()\nx = np.linspace(xmin, xmax, 100)\np_region_a = norm.pdf(x, np.mean(data_region_a), np.std(data_region_a))\np_region_b = norm.pdf(x, np.mean(data_region_b), np.std(data_region_b))\nax.plot(x, p_region_a, color=\"#7bc8f6\", linewidth=3)\nax.plot(x, p_region_b, color=\"#f87469\", linewidth=3)\n\n# Add dashed lines at mean\nax.axvline(np.mean(data_region_a), color=\"black\", linestyle=\"dashed\")\nax.axvline(np.mean(data_region_b), color=\"black\", linestyle=\"dashed\")\n\n# Add text labels for dashed lines\nax.text(\n    np.mean(data_region_a) + 1.5,\n    ax.get_ylim()[1] - 0.01,\n    ax1_text,\n    ha=\"center\",\n    va=\"top\",\n    fontsize=18,\n)\nax.text(\n    np.mean(data_region_b) + 1.5,\n    ax.get_ylim()[1] - 0.005,\n    ax2_text,\n    ha=\"center\",\n    va=\"top\",\n    fontsize=18,\n)\n\n# Set labels and title\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\nax.set_xticks(xticks_values)\nax.set_xlim(xlim_values)\n\n# Add legend\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('CB_1.pdf', bbox_inches='tight')"}
{"idx": "bar_4", "instruction": "There is a reference image for you and I also have a set of data about student performance in various subjects. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The student performance data is as follows:\n# Subjects\nlabels = [\"Math\", \"Science\", \"History\", \"English\", \"Art\", \"PE\", \"Music\", \"Geography\", \"Math\", \"Science\", \"History\", \"Math\", \"Science\", \"History\",]\n# Percentage of students excelling\nexcelling = [55, 48, 0, 0, 0, 70, 65, 60, 0, 0, 0, 0, 0, 0]\n# Percentage of students needing improvement\nneeding_improvement = [0, 0, 30, 35, 28, 0, 0, 0, 40, 60, 50, 45, 55, 42]\n# Label of y axis\nylabel_value = \"Percentage (%)\"\n# Title\ntitle_value = \"Student Performance in Various Subjects\"\n# Lines\nline_y_1 = 25\nline_y_2 = 55\nline_x_1 = 4.5\nline_x_2 = 10.5\n# Labels and Plot Types\nlabel_Excelling = \"Excelling\"\nlabel_Needing_Improvement = \"Needing Improvement\"\nlegend_title = \"Student Performance\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nlabels = [\n    \"Math\",\n    \"Science\",\n    \"History\",\n    \"English\",\n    \"Art\",\n    \"PE\",\n    \"Music\",\n    \"Geography\",\n    \"Math\",\n    \"Science\",\n    \"History\",\n    \"Math\",\n    \"Science\",\n    \"History\",\n]\nexcelling = [55, 48, 0, 0, 0, 70, 65, 60, 0, 0, 0, 0, 0, 0]\nneeding_improvement = [\n    0,\n    0,\n    30,\n    35,\n    28,\n    0,\n    0,\n    0,\n    40,\n    60,\n    50,\n    45,\n    55,\n    42,\n]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.7  # the width of the bars\n\nline_y_1 = 25\nline_y_2 = 55\nline_x_1 = 4.5\nline_x_2 = 10.5\n\n# Labels and Plot Types\nlabel_Excelling = \"Excelling\"\nlabel_Needing_Improvement = \"Needing Improvement\"\nlegend_title = \"Student Performance\"\n\n# Axes Limits and Labels\nylabel_value = \"Percentage (%)\"\ntitle_value = \"Student Performance in Various Subjects\"\nylim_values = [0, 80]\nxlim_values = [-0.6, 14]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(10, 5)\n)  # Adjust the size to match the original image's dimensions\nrects1 = ax.bar(x, excelling, width, label=label_Excelling, color=\"#81b4a2\")\nrects2 = ax.bar(x, needing_improvement, width, label=label_Needing_Improvement, color=\"#dd997b\")\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel(ylabel_value)\nax.set_title(title_value)\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation=45, ha=\"center\")\nax.set_ylim(ylim_values)\nax.set_xlim(xlim_values)\n\n# Adding the values on top of the bars\nfor rect in rects1:\n    if rect.get_height() > 0:\n        height = rect.get_height()\n        ax.annotate(\n            \"{}\".format(height),\n            xy=(rect.get_x() + rect.get_width() / 2, height),\n            xytext=(0, 3),  # 3 points vertical offset\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"bottom\",\n        )\nfor rect in rects2:\n    if rect.get_height() > 0:\n        height = rect.get_height()\n        ax.annotate(\n            \"{}\".format(height),\n            xy=(rect.get_x() + rect.get_width() / 2, height),\n            xytext=(0, 3),  # 3 points vertical offset\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"bottom\",\n        )\n\n# Reference lines\nax.axhline(y=line_y_1, color=\"red\", linestyle=\"--\")\nax.axhline(y=line_y_2, color=\"gray\", linestyle=\"--\")\nax.axvline(x=line_x_1, color=\"gray\", linestyle=\"--\")\nax.axvline(x=line_x_2, color=\"gray\", linestyle=\"--\")\n\n# Hide the ticks\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Hide the right and top spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.legend(title=legend_title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_4.pdf', bbox_inches='tight')"}
{"idx": "errorbar_10", "instruction": "There is a reference image for you and I also have a set of data about average revenue by the number of sales teams. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The average revenue data is as follows:\n# Number of sales teams\nnumber_of_teams = [1, 2, 3, 4]\n# Baseline revenue\nbaseline_revenue = [60, 60, 60, 60]\n# Revenue for Team A\nrevenue_team_a = [58, 61, 75, 62]\n# Revenue for Team B\nrevenue_team_b = [55, 62, 69, 64]\n# Error values\nerrors = [2, 1.5, 1, 0.5]\n# Label of x axis\nxlabel_value = \"Number of Sales Teams\"\n# Label of y axis\nylabel_value = \"Average Revenue (in $1000s)\"\n# Titles\ntitle = \"Revenue by Number of Sales Teams\"\n# Labels\nlabel1 = \"Team A\"\nlabel2 = \"Team B\"\nlabel3 = \"Baseline\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nnumber_of_teams = [1, 2, 3, 4]\nbaseline_revenue = [60] * len(number_of_teams)\nrevenue_team_a = [58, 61, 75, 62]\nrevenue_team_b = [55, 62, 69, 64]\nerrors = [2, 1.5, 1, 0.5]\n\n# Labels and Plot Types\nlabel1 = \"Team A\"\nlabel2 = \"Team B\"\nlabel3 = \"Baseline\"\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Sales Teams\"\nylabel_value = \"Average Revenue (in $1000s)\"\ntitle = \"Revenue by Number of Sales Teams\"\nxticklabels = [\"1\", \"2\", \"3\", \"4\"]\nylim_values = [50, 80]\nyticks_values = np.arange(50, 81, 5)\nlegend_title = \"Sales Teams\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(figsize=(8, 6))  # Adjusted for the given dimensions\nbar_width = 0.4\nopacity = 0.8\n\nbar1 = ax.bar(\n    np.array(number_of_teams) - bar_width / 2,\n    revenue_team_a,\n    bar_width,\n    alpha=opacity,\n    color=\"#41886c\",\n    label=label1,\n    yerr=errors,\n    capsize=3,\n)\n\nbar2 = ax.bar(\n    np.array(number_of_teams) + bar_width / 2,\n    revenue_team_b,\n    bar_width,\n    alpha=opacity,\n    color=\"#b886b3\",\n    label=label2,\n    yerr=errors,\n    capsize=3,\n)\n\nax.plot(\n    number_of_teams,\n    baseline_revenue,\n    linestyle=\"--\",\n    color=\"b\",\n    linewidth=2,\n    label=label3,\n)\n\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\nax.set_title(title)\nax.set_xticks(number_of_teams)\nax.set_xticklabels(xticklabels)\nax.set_ylim(ylim_values)\nax.set_yticks(yticks_values)\nax.legend(loc=\"upper left\", title=legend_title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('errorbar_10.pdf', bbox_inches='tight')"}
{"idx": "heatmap_23", "instruction": "There is a reference image for you and I also have a set of data about original and adjusted values in the transportation domain. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Original values\noriginal_values = [0.15, 0.10, 0.25, 0.05, 0.20, 0.08, 0.12, 0.05]\n# Adjusted values\nadjusted_values = [0.18, 0.12, 0.28, 0.07, 0.22, 0.10, 0.13, 0.05]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np; np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for the original and adjusted values in the transportation domain\noriginal_values = [0.15, 0.10, 0.25, 0.05, 0.20, 0.08, 0.12, 0.05]\nadjusted_values = [0.18, 0.12, 0.28, 0.07, 0.22, 0.10, 0.13, 0.05]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with two subplots (one for original and one for adjusted values)\nfig, axs = plt.subplots(2, 1, figsize=(10, 6), sharex=True)\n\n# Define the color palette\ncmap = plt.get_cmap(\"Greys\")\n\n# Plot heatmap for original values\nim1 = axs[0].imshow(pd.DataFrame([original_values], index=[\"\"]), cmap=cmap)\naxs[0].set_xticks([])\naxs[0].set_yticks([])\n\n# Add annotations for original values\nfor j in range(len(original_values)):\n    if original_values[j] > np.mean(original_values):\n        axs[0].text(\n            j, 0, f\"{original_values[j]:.2f}\", ha=\"center\", va=\"center\", color=\"white\"\n        )\n    else:\n        axs[0].text(\n            j, 0, f\"{original_values[j]:.2f}\", ha=\"center\", va=\"center\", color=\"black\"\n        )\n\n# Plot heatmap for adjusted values\nim2 = axs[1].imshow(pd.DataFrame([adjusted_values], index=[\"\"]), cmap=cmap)\naxs[1].set_xticks([])\naxs[1].set_yticks([])\n\n# Add annotations for adjusted values\nfor j in range(len(adjusted_values)):\n    if adjusted_values[j] > np.mean(adjusted_values):\n        axs[1].text(\n            j, 0, f\"{adjusted_values[j]:.2f}\", ha=\"center\", va=\"center\", color=\"white\"\n        )\n    else:\n        axs[1].text(\n            j, 0, f\"{adjusted_values[j]:.2f}\", ha=\"center\", va=\"center\", color=\"black\"\n        )\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the figure with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_23.pdf', bbox_inches='tight')"}
{"idx": "multidiff_24", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Categories of business revenue sources\ncategories = [\"Product Sales\", \"Service Fees\", \"Subscriptions\", \"Advertisements\", \"Investments\"]\n# Percentages of each revenue source\nsizes = [35, 25, 20, 10, 10]\n# Highlight the first category\nexplode = (0.1, 0, 0, 0, 0)\n# Title 1\ntitle_1 = \"Distribution of Business Revenue Sources\"\n# Labels for Key Performance Indicators (KPIs)\nlabels = [\"Growth\", \"Profitability\", \"Customer Satisfaction\", \"Market Share\", \"Employee Engagement\"]\n# Values for each KPI\nvalues = [0.8, 0.7, 0.9, 0.6, 0.85]\n# Title 2\ntitle_2 = \"Key Performance Indicators (KPIs)\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nfrom matplotlib.lines import Line2D\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create a figure and a GridSpec layout\nfig = plt.figure(figsize=(10, 5))\ngs = GridSpec(1, 2, figure=fig)\n\n# ------- Pie Chart Data for Business Revenue Sources -------\ncategories = [\"Product Sales\", \"Service Fees\", \"Subscriptions\", \"Advertisements\", \"Investments\"]\nsizes = [35, 25, 20, 10, 10]  # Percentages of each revenue source\ncolors = [\"#ff9999\", \"#66b3ff\", \"#99ff99\", \"#ffcc99\", \"#c2c2f0\"]\nexplode = (0.1, 0, 0, 0, 0)  # Highlight Product Sales\n\n# ------- Radar Chart Data for Key Performance Indicators (KPIs) -------\nlabels = np.array([\"Growth\", \"Profitability\", \"Customer Satisfaction\", \"Market Share\", \"Employee Engagement\"])\nnum_vars = len(labels)\nvalues = np.array([0.8, 0.7, 0.9, 0.6, 0.85])\nvalues = np.concatenate((values, [values[0]]))\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]\n\ntitle_1 = \"Distribution of Business Revenue Sources\"\ntitle_2 = \"Key Performance Indicators (KPIs)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the pie chart in the left panel\nax1 = fig.add_subplot(gs[0, 0])\nwedges, texts, autotexts = ax1.pie(\n    sizes,\n    labels=categories,\n    colors=colors,\n    autopct=\"%1.1f%%\",\n    startangle=140,\n    explode=explode,\n)\nax1.set_title(title_1)\nax1.axis(\"equal\")  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Create the radar chart in the right panel\nax2 = fig.add_subplot(gs[0, 1], polar=True)\nax2.fill(angles, values, color=\"blue\", alpha=0.25)\nax2.plot(angles, values, color=\"blue\", linewidth=1)\nax2.set_xticks(angles[:-1])\nax2.set_xticklabels(labels)\nax2.set_title(title_2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('multidiff_24.pdf', bbox_inches='tight')"}
{"idx": "CB_17", "instruction": "There is a reference image for you and I also have two sets of data about test methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Methods\nmethods = [\"Method A\", \"Method B\", \"Method C\", \"Method D\"]\n# Average Scores\naverage_scores = [0.785, 0.823, 0.856, 0.902]\n# Label of y axis 1\nax1_ylabel = \"Scores\"\nTitle 2\nax1_title = \"Average Test Scores by Method\"\n# Pass Rates\npass_rates = [0.76, 0.83, 0.88, 0.95]\n# Label of y axis 2\nax2_ylabel = \"Rates\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmethods = [\"Method A\", \"Method B\", \"Method C\", \"Method D\"]\naverage_scores = [0.785, 0.823, 0.856, 0.902]\npass_rates = [0.76, 0.83, 0.88, 0.95]\n\n# Axes Limits and Labels\nax1_title = \"Average Test Scores by Method\"\nax1_ylim = [0.70, 1.00]\nax1_ylabel = \"Scores\"\nax2_title = \"Pass Rates by Method\"\nax2_ylim = [0.60, 1.00]\nax2_ylabel = \"Rates\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# Bar chart for Average Test Scores\nax1.bar(methods, average_scores, color=\"skyblue\")\nax1.plot(methods, average_scores, marker=\"o\", color=\"blue\")\nfor i, score in enumerate(average_scores):\n    ax1.text(i, score, f\"{score*100:.2f}%\", ha=\"center\", va=\"bottom\")\nax1.set_title(ax1_title)\nax1.set_ylim(ax1_ylim)\nax1.set_ylabel(ax1_ylabel)\n# set ax1 background color\nax1.set_facecolor(\"#f5f5f5\")\n\n# Bar chart for Pass Rates\nax2.bar(methods, pass_rates, color=\"skyblue\")\nax2.plot(methods, pass_rates, marker=\"o\", color=\"red\")\nfor i, rate in enumerate(pass_rates):\n    ax2.text(i, rate, f\"{rate*100:.2f}%\", ha=\"center\", va=\"bottom\")\nax2.set_title(ax2_title)\nax2.set_ylim(ax2_ylim)\nax2.set_ylabel(ax2_ylabel)\nax2.set_facecolor(\"#f5f5f5\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('CB_17.pdf', bbox_inches='tight')"}
{"idx": "bar_51", "instruction": "There is a reference image for you and I also have a set of data about the number of videos by profession. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data about the number of videos by profession is as follows:\n# Profession\nprofessions = [\"Software Developer\", \"Data Scientist\", \"Graphic Designer\", \"Marketing Manager\", \"Teacher\", \"Nurse\", \"Civil Engineer\", \"Chef\", \"Electrician\", \"Plumber\",]\n# Number of Videos\nnumber_of_videos = [1850, 2100, 1950, 2250, 2400, 2600, 2300, 2500, 2050, 2200]\n# Label of x axis\nxlabel_value = \"Number of Videos\"\n# Title\ntitle = \"Number of Videos by Profession\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nprofessions = [\n    \"Software Developer\",\n    \"Data Scientist\",\n    \"Graphic Designer\",\n    \"Marketing Manager\",\n    \"Teacher\",\n    \"Nurse\",\n    \"Civil Engineer\",\n    \"Chef\",\n    \"Electrician\",\n    \"Plumber\",\n]\nnumber_of_videos = [1850, 2100, 1950, 2250, 2400, 2600, 2300, 2500, 2050, 2200]\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Videos\"\ntitle = \"Number of Videos by Profession\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nplt.figure(figsize=(12, 8))  # Adjust figure size to match original image's dimensions\nplt.barh(professions, number_of_videos, color=\"#685bc6\")  # Change bar color to purple\nplt.xlabel(xlabel_value)\nplt.title(title)\n\n# Add data labels\nfor index, value in enumerate(number_of_videos):\n    plt.text(\n        value + 50, index, str(value), va=\"center\", fontsize=10\n    )  # Adjust text position and font size\n\n# Rotate y-axis labels if needed\nplt.yticks(rotation=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_51.pdf', bbox_inches='tight')"}
{"idx": "errorbar_14", "instruction": "There is a reference image for you and I also have a set of data about the change in average travel time for different modes of transport. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Modes of transport\nmodes_of_transport = [\"Car\", \"Bus\", \"Bike\", \"Train\", \"Walk\", \"Scooter\", \"Ferry\", \"Taxi\", \"Tram\", \"Subway\"]\n# Change in average travel time\naverage_travel_time_change = [0.18, 0.17, 0.11, 0.06, 0.06, 0.02, -0.07, -0.01, -0.02, -0.02]\n# Error values\nerrors = [0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01]\n# Label of y axis\nylabel_value = \"Change in Average Travel Time\\n(\u0394 to previous period)\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodes_of_transport = [\"Car\", \"Bus\", \"Bike\", \"Train\", \"Walk\", \"Scooter\", \"Ferry\", \"Taxi\", \"Tram\", \"Subway\"]\naverage_travel_time_change = [0.18, 0.17, 0.11, 0.06, 0.06, 0.02, -0.07, -0.01, -0.02, -0.02]\nerrors = [0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01]\ncolors = [\n    \"#c0d5e6\",\n    \"#709ec6\",\n    \"#f2a965\",\n    \"#c6e1c2\",\n    \"#7fba74\",\n    \"#eac0bf\",\n    \"#d36e6c\",\n    \"#7f7f7f\",\n    \"#bcbd22\",\n    \"#a88a83\",\n]\n\n# Axes Limits and Labels\nylabel_value = \"Change in Average Travel Time\\n(\u0394 to previous period)\"\nylim_values = [-0.08, 0.22]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Bar chart\nbars = ax.bar(\n    modes_of_transport, average_travel_time_change, yerr=errors, color=colors, capsize=0, edgecolor=\"none\"\n)\nax.set_xticks([])\n# Set labels\nax.set_ylabel(ylabel_value)\n\n# Set x-axis limits and y-axis limits\nax.set_ylim(ylim_values)\n\n# Remove top and right spines\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(True)\nax.spines[\"bottom\"].set_visible(True)\n\n# Remove grid lines\nax.yaxis.grid(False)\nax.xaxis.grid(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent clipping of ylabel\nplt.tight_layout()\nplt.savefig('errorbar_14.pdf', bbox_inches='tight')"}
{"idx": "heatmap_9", "instruction": "There is a reference image for you and I also have a set of data about school performance analysis. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The school performance data is as follows:\n# Subjects\nsubjects = [\"Math\", \"Science\", \"English\"]\n# Grades\ngrades = [1, 2, 3, 4, 5]\n# Test scores for the upper subplot\ndata_upper = [\n    [0.55, 0.72, 0.6, 0.54, 0.42],\n    [0.65, 0.44, 0.89, 0.96, 0.38],\n   [0.79, 0.53, 0.57, 0.93, 0.07]\n]\n# Participation rates for the lower subplot\ndata_lower = [\n   [0.09, 0.02, 0.83, 0.78, 0.87],\n    [0.98, 0.8, 0.46, 0.78, 0.12],\n    [0.64, 0.14, 0.94, 0.52, 0.41]\n]\n# Label of x axis\nxlabel_value = \"Grades\"\n# Title\ntitle = \"School Performance Analysis - Test Scores\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 10.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration\ndata_upper = np.array([[0.55, 0.72, 0.6, 0.54, 0.42], [0.65, 0.44, 0.89, 0.96, 0.38], [0.79, 0.53, 0.57, 0.93, 0.07]])  # Data for the upper subplot\ndata_lower = np.array([[0.09, 0.02, 0.83, 0.78, 0.87], [0.98, 0.8, 0.46, 0.78, 0.12], [0.64, 0.14, 0.94, 0.52, 0.41]])  # Data for the lower subplot\n\n# Common labels for both subplots\nsubjects = [\n    \"Math\",\n    \"Science\",\n    \"English\",\n]\ngrades = list(range(1, 6))\n\n# Axes Limits and Labels\ntitle = \"School Performance Analysis - Test Scores\"\nxlabel_value = \"Grades\"\nxticks_values = [0, 1, 2, 3, 4]\nxticklabels = [0, 1, 2, 3, 4]\nyticks_values = range(len(subjects))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 10))  # Adjust figsize as needed\n\n# First subplot: Test Scores\nim1 = ax1.imshow(data_upper, cmap=\"Purples\")\nax1.set_title(title)\n# Hide x-axis labels and ticks for the first subplot\nax1.set_yticks(range(len(subjects)))\nax1.set_yticklabels(subjects)\n\n# Second subplot: Participation Rates\nim2 = ax2.imshow(data_lower, cmap=\"Purples\")\n# Set x-axis label and ticks for the second subplot\nax2.set_xlabel(xlabel_value)\nax2.set_xticks(xticks_values)  # Show ticks at [0, 5, 10, 15]\nax2.set_xticklabels(xticklabels)  # Label ticks at [1, 6, 11, 16]\nax2.set_yticks(yticks_values)\nax2.set_yticklabels(subjects)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the entire figure with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('heatmap_9.pdf', bbox_inches='tight')"}
{"idx": "multidiff_4", "instruction": "There is a reference image for you and I also have two sets of data. The first set of data is about fuel consumption over time, and the second set of data is about traffic density over a geographical area. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Fuel Consumption over Time\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\nt3 = np.arange(0.0, 2.0, 0.01)\nf(t) = np.sin(2 * np.pi * t) * np.exp(-t)\n# Label of y axis 1\nylabel_value_1 = \"Fuel Consumption (L/100km)\"\n# Label of x axis 1\nxlabel_value_1 = \"Relative Year\"\n# Traffic Density over Geographical Area\nX = np.arange(-5, 5, 0.25)\nY = np.arange(-5, 5, 0.25)\nZ = np.cos(np.sqrt(X**2 + Y**2))\n# Labels 2\nxlabel_value_2 = \"X-Axis (km)\"\nylabel_value_2 = \"Y-Axis (km)\"\nzlabel_value_2 = \"Traffic Density (vehicles/km^2)\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ndef f(t):\n    return np.sin(2 * np.pi * t) * np.exp(-t)\n\n\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\nt3 = np.arange(0.0, 2.0, 0.01)\n\nX = np.arange(-5, 5, 0.25)\nY = np.arange(-5, 5, 0.25)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X**2 + Y**2)\nZ = np.cos(R)\n\n# Axes Limits and Labels\nylabel_value_1 = \"Fuel Consumption (L/100km)\"\nxlabel_value_1 = \"Relative Year\"\n\nzlim_values = [-1, 1]\nxlabel_value_2 = \"X-Axis (km)\"\nylabel_value_2 = \"Y-Axis (km)\"\nzlabel_value_2 = \"Traffic Density (vehicles/km^2)\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up a figure twice as tall as it is wide\nfig = plt.figure(figsize=(8, 10))\n\n# First subplot\nax = fig.add_subplot(2, 1, 1)\nax.plot(t1, f(t1), \"bo\", t2, f(t2), \"k--\", markerfacecolor=\"green\")\nax.grid(True)\nax.set_ylabel(ylabel_value_1)\nax.set_xlabel(xlabel_value_1)\n\n# Second subplot\nax = fig.add_subplot(2, 1, 2, projection=\"3d\")\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, linewidth=0, antialiased=False)\nax.set_zlim(zlim_values)\nax.set_xlabel(xlabel_value_2)\nax.set_ylabel(ylabel_value_2)\nax.set_zlabel(zlabel_value_2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\n# Show the plot\nplt.savefig('multidiff_4.pdf', bbox_inches='tight')"}
{"idx": "CB_23", "instruction": "There is a reference image for you and I also have a set of data about battery efficiency over charge cycles. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The battery efficiency data is as follows:\n# Number of Charge Cycles\ncharge_cycles = [110, 190, 320, 560, 1550]\n# Efficiency (RMSE)\nefficiency = [1.19, 1.25, 1.27, 1.29, 1.30]\n# Additional data point for comparison\ncharge_cycles2 = [550]\nefficiency2 = [1.20]\n# Label of x axis\nxlabel_value = \"Number of Charge Cycles\"\n# Label of y axis\nylabel_value = \"Efficiency (RMSE)\"\n# Labels and Plot Types\nlabel_method1 = \"Method 1\"\nlabel_method2 = \"Method 2\"\nefficiency_annotations = [\"1.30\nTest 1\",\"1.21\nTest 2\",\"1.27\nTest 3\",\"1.28\nTest 4\",\"1.29\nTest 5\"]\nefficiency2_annotation = \"1.19\nTest 6\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ncharge_cycles = [110, 190, 320, 560, 1550]\nefficiency = [1.19, 1.25, 1.27, 1.29, 1.30]\ncharge_cycles2 = [550]\nefficiency2 = [1.20]\n\n# Labels and Plot Types\nlabel_method1 = \"Method 1\"\nlabel_method2 = \"Method 2\"\nefficiency_annotations = [\n    \"1.30\\nTest 1\",\n    \"1.21\\nTest 2\",\n    \"1.27\\nTest 3\",\n    \"1.28\\nTest 4\",\n    \"1.29\\nTest 5\",\n]\nefficiency2_annotation = \"1.19\\nTest 6\"\n\n# Axes Limits and Labels\nxlabel_value = \"Number of Charge Cycles\"\nylabel_value = \"Efficiency (RMSE)\"\nxticklabels1 = [str(num) for num in charge_cycles]\nylim_values = [1.15, 1.35]\nyticks_values = [1.15, 1.20, 1.25, 1.30]\nxlim_values = [-100, 1700]\nxticks_values = [0, 500, 1000, 1500]\nxticklabels2 = [\"0\", \"500\", \"1000\", \"1500\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(6, 8))  # Adjust the size to match the original image's dimensions\n\n# Plot the data\nax.plot(charge_cycles, efficiency, \"ro-\", label=label_method1, linewidth=2)\nax.plot(charge_cycles2, efficiency2, \"b*\", markersize=10, label=label_method2)\n\n# Annotate the points\nfor i, txt in enumerate(efficiency_annotations):\n    ax.annotate(\n        txt,\n        (charge_cycles[i], efficiency[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 5),\n        ha=\"center\",\n        fontsize=10,\n    )\nax.annotate(\n    efficiency2_annotation,\n    (charge_cycles2[0], efficiency2[0]),\n    textcoords=\"offset points\",\n    xytext=(0, 5),\n    ha=\"center\",\n    color=\"black\",\n    fontsize=10,\n)\n\n# Set labels and title\nax.set_xlabel(xlabel_value, fontsize=10)\nax.set_ylabel(ylabel_value, fontsize=10)\n\n# Set the legend\nlegend = ax.legend(fontsize=10)\n\n# Adjust x-axis labels\nax.set_xticks(charge_cycles)\nax.set_xticklabels(xticklabels1, ha=\"center\")\nax.set_ylim(ylim_values)\nax.set_yticks(yticks_values)\nax.set_xlim(xlim_values)\nax.set_xticks(xticks_values)\nax.set_xticklabels(xticklabels2, ha=\"center\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout\nplt.tight_layout()\nplt.savefig('CB_23.pdf', bbox_inches='tight')"}
{"idx": "bar_60", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency changes for different car models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The fuel efficiency changes data is as follows:\n# Car models\ncar_models = [\"Sedan\", \"SUV\", \"Truck\", \"Hybrid\", \"Electric\"]\n# Changes in fuel efficiency\nfuel_efficiency_changes = [10.5, -5.2, -2.0, 12.3, 15.7]\n# Title\ntitle = \"Fuel Efficiency Improvements\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plots\ncar_models = [\"Sedan\", \"SUV\", \"Truck\", \"Hybrid\", \"Electric\"]\nfuel_efficiency_changes = [10.5, -5.2, -2.0, 12.3, 15.7]\n\n# Axes Limits and Labels\nax_title = \"Fuel Efficiency Improvements\"\nxticks_values = range(-20, 21, 5)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot for Fuel Efficiency Improvements\nbars = ax.barh(car_models, fuel_efficiency_changes, color=\"white\", edgecolor=\"black\", hatch=\"//\")\nfor bar, value in zip(bars, fuel_efficiency_changes):\n    if value < 0:\n        bar.set_hatch(\"\\\\\\\\\")\n        bar.set_edgecolor(\"red\")\nax.set_title(ax_title)\nfor i, v in enumerate(fuel_efficiency_changes):\n    ax.text(\n        v - 0.5 if v < 0 else v + 0.5,\n        i,\n        f\"{v}%\",\n        color=\"black\" if v > 0 else \"red\",\n        va=\"center\",\n        ha=\"right\" if v < 0 else \"left\",\n    )\n# Add a vertical line at x=0\nax.axvline(0, color=\"black\")\nax.set_xticks(xticks_values)\n# Remove y-axis tick marks\nax.tick_params(axis=\"y\", which=\"both\", left=False)\n\n# Hide all axes except the bottom one\nfor spine in [\"left\", \"right\", \"top\"]:\n    ax.spines[spine].set_visible(False)\n\n# Add x-axis label\nax.set_xlabel(\"\u25b2%\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_60.pdf', bbox_inches='tight')"}
{"idx": "errorbar_24", "instruction": "There is a reference image for you and I also have a set of data about transportation metrics by region. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation metrics data is as follows:\n# Regions\nregions = [\"North America\", \"Europe\", \"Asia\", \"South America\", \"Africa\", \"Australia\", \"Central America\", \"Middle East\", \"Southeast Asia\", \"Scandinavia\",]\n# Car Ownership Rates\ncar_ownership_rates = [409.76, 443.03, 420.55, 408.97, 384.73, 429.17, 387.51, 478.35, 492.73, 376.68]\n# Public Transport Usage Rates\npublic_transport_usage_rates = [45.83, 40.57, 41.36, 48.51, 31.42, 31.74, 30.40, 46.65, 45.56, 47.40]\n# Errors for Car Ownership Rates\ncar_ownership_errors = [59.14, 51.96, 38.45, 51.22, 24.73, 45.59, 25.73, 57.78, 40.87, 36.58]\n# Errors for Public Transport Usage Rates\npublic_transport_errors = [6.58, 9.64, 7.73, 8.41, 5.11, 8.70, 8.67, 8.70, 10.66, 9.09]\n# Label of y axis\nylabel_value = \"Rates\"\n# Title\ntitle = \"Transportation Metrics by Region\"\n# Labels\nlabel_Car_Ownership = \"Car Ownership Rates\"\nlabel_Public_Transport_Usage = \"Public Transport Usage Rates\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define regions as groups\nregions = [\n    \"North America\",\n    \"Europe\",\n    \"Asia\",\n    \"South America\",\n    \"Africa\",\n    \"Australia\",\n    \"Central America\",\n    \"Middle East\",\n    \"Southeast Asia\",\n    \"Scandinavia\",\n]\n\n# Transportation data: Car Ownership Rates (solid_bar) and Public Transport Usage Rates (striped_bar)\ncar_ownership_rates = (\n    np.array([409.76, 443.03, 420.55, 408.97, 384.73, 429.17, 387.51, 478.35, 492.73, 376.68])\n)  # Car ownership rates ranging from 300 to 500 cars per 1000 people\npublic_transport_usage_rates = (\n    np.array([45.83, 40.57, 41.36, 48.51, 31.42, 31.74, 30.40, 46.65, 45.56, 47.40])\n)  # Public transport usage rates ranging from 30% to 50%\n\n# Errors for both metrics\ncar_ownership_errors = np.array([59.14, 51.96, 38.45, 51.22, 24.73, 45.59, 25.73, 57.78, 40.87, 36.58])  # Error bars for car ownership rates\npublic_transport_errors = np.array([6.58, 9.64, 7.73, 8.41, 5.11, 8.70, 8.67, 8.70, 10.66, 9.09])  # Error bars for public transport usage rates\n\n# Labels and Plot Types\nlabel_Car_Ownership = \"Car Ownership Rates\"\nlabel_Public_Transport_Usage = \"Public Transport Usage Rates\"\n\n# Axes Limits and Labels\nylabel_value = \"Rates\"\ntitle = \"Transportation Metrics by Region\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# X-axis positions for the bars\nx = np.arange(len(regions))\n\n# Create vertical stacked bar chart\nax.bar(\n    x,\n    car_ownership_rates,\n    color=\"#8bb09e\",\n    yerr=car_ownership_errors,\n    label=label_Car_Ownership,\n    capsize=3,\n)\nax.bar(\n    x,\n    public_transport_usage_rates,\n    bottom=car_ownership_rates,\n    color=\"#eaca8f\",\n    yerr=public_transport_errors,\n    label=label_Public_Transport_Usage,\n    capsize=3,\n)\n\n# Add labels and title\nax.set_ylabel(ylabel_value)\nax.set_title(title)\nax.set_xticks(x)\nax.set_xticklabels(regions, rotation=45, ha=\"right\")\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('errorbar_24.pdf', bbox_inches='tight')"}
{"idx": "hist_15", "instruction": "There is a reference image for you and I also have a set of data about annual sales in millions for a number of businesses. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The annual sales data is as follows:\n# Annual sales data (in millions)\ndata = np.array([76.46, 56.00, 64.68, 83.61, 78.01, 35.34, 64.25, 47.73, 48.45, 56.16, 52.16, 71.81, 61.42, 51.83, 56.66, 55.01, 72.41, 46.92, 54.70, 37.19, \n                 11.71, 59.80, 62.97, 38.87, 84.05, 28.18, 50.69, 47.19, 72.99, 72.04, 52.32, 55.67, 36.68, 20.29, 44.78, 52.35, 68.45, 68.04, 44.19, 45.47, \n                 34.27, 28.70, 24.41, 79.26, 42.36, 43.43, 31.21, 61.66, 25.79, 46.81, 36.57, 55.80, 42.34, 32.29, 49.58, 56.42, 50.99, 54.54, 40.49, 44.56, \n                 39.91, 44.61, 37.80, 24.11, 52.66, 43.97, 25.55, 56.94, 36.39, 50.78, 60.94, 51.93, 67.09, 31.48, 56.04, 39.73, 36.94, 41.32, 45.33, 50.84, \n                 32.52, 63.51, 56.98, 26.96, 72.32, 78.44, 67.68, 47.30, 33.94, 65.82, 43.95, 68.34, 53.12, 64.65, 55.35, 60.60, 50.16, 76.79, 51.90, 56.03])\n# Label of x axis\nxlabel_value = \"Annual Sales (in millions)\"\n# Label of y axis\nylabel_value = \"Number of Businesses\"\n# Title\n title = \"Histogram of Annual Sales\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate normally distributed data for annual sales (in millions)\ndata = np.array([76.46, 56.00, 64.68, 83.61, 78.01, 35.34, 64.25, 47.73, 48.45, 56.16, 52.16, 71.81, 61.42, 51.83, 56.66, 55.01, 72.41, 46.92, 54.70, 37.19, \n                 11.71, 59.80, 62.97, 38.87, 84.05, 28.18, 50.69, 47.19, 72.99, 72.04, 52.32, 55.67, 36.68, 20.29, 44.78, 52.35, 68.45, 68.04, 44.19, 45.47, \n                 34.27, 28.70, 24.41, 79.26, 42.36, 43.43, 31.21, 61.66, 25.79, 46.81, 36.57, 55.80, 42.34, 32.29, 49.58, 56.42, 50.99, 54.54, 40.49, 44.56, \n                 39.91, 44.61, 37.80, 24.11, 52.66, 43.97, 25.55, 56.94, 36.39, 50.78, 60.94, 51.93, 67.09, 31.48, 56.04, 39.73, 36.94, 41.32, 45.33, 50.84, \n                 32.52, 63.51, 56.98, 26.96, 72.32, 78.44, 67.68, 47.30, 33.94, 65.82, 43.95, 68.34, 53.12, 64.65, 55.35, 60.60, 50.16, 76.79, 51.90, 56.03])\n# Axes Limits and Labels\ntitle = \"Histogram of Annual Sales\"\nxlabel_value = \"Annual Sales (in millions)\"\nylabel_value = \"Number of Businesses\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nplt.figure(figsize=(8, 6))\n\n# Enable the grid\nplt.grid(True, linestyle=\"--\", linewidth=0.5, alpha=0.7)\n\n# Histogram of the data\nn, bins, patches = plt.hist(data, bins=25, color=\"skyblue\", edgecolor=\"blue\", alpha=0.7)\n\n# Highlight the median of the data\nmedian = np.median(data)\nplt.axvline(median, color=\"purple\", linestyle=\"dashed\", linewidth=2)\n\n# Add text for the median\nplt.text(median + 0.5, max(n) * 0.9, f\"Median: ${median:.2f}M\", color=\"purple\")\n\n# Title and labels relevant to annual sales data\nplt.title(title)\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout\nplt.tight_layout()\n\n# Save the plot as a PDF file\nplt.savefig('hist_15.pdf', bbox_inches='tight')"}
{"idx": "multidiff_5", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Revenue sources\nrevenue_sources = [\"Product Sales\", \"Service Fees\", \"Investments\", \"Other Income\"]\n# Revenue counts\nrevenue_counts = [400, 300, 150, 150]\n# Title 1\ntitle_1 = \"Revenue Sources Breakdown\"\n# Quarters\nquarters = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n# Years\nyears = [2020, 2017, 2016, 2022]\n# Revenue\nrevenue = [200, 300, 350, 400]\n# Title 2\ntitle_2 = \"Quarterly Revenue and Profit\"\n# Label for x-axis\nxlabel_value = \"Year\"\n# Label for y-axis\nylabel_value = \"Amount (in $ thousands)\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Revenue sources for the pie chart\nrevenue_sources = [\n    \"Product Sales\",\n    \"Service Fees\",\n    \"Investments\",\n    \"Other Income\",\n]\nrevenue_counts = [400, 300, 150, 150]\n\n# Quarterly revenue and profit for the scatter plot\nquarters = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\nyears = [2020, 2017, 2016, 2022]\nrevenue = [200, 300, 350, 400]\n\n# Axes Limits and Labels\ntitle_1 = \"Revenue Sources Breakdown\"\n\ntitle_2 = \"Quarterly Revenue and Profit\"\nxlabel_value = \"Year\"\nylabel_value = \"Amount (in $ thousands)\"\nylim_values = [0, 450]\nxlim_values = [2015, 2023]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and set up GridSpec\nfig = plt.figure(figsize=(10, 5))\ngs = gridspec.GridSpec(1, 2, width_ratios=[1, 1])\n\n# Create pie chart on the left\nax1 = fig.add_subplot(gs[0])\nwedges, texts, autotexts = ax1.pie(\n    revenue_counts,\n    labels=revenue_sources,\n    autopct=\"%1.1f%%\",\n    startangle=90,\n    colors=[\"gold\", \"lightblue\", \"lightgreen\", \"salmon\"],\n)\nax1.set_title(title_1)\n\n# Create scatter plot on the right\nax2 = fig.add_subplot(gs[1])\nscatter = ax2.scatter(\n    years,\n    revenue,\n    color=\"blue\",\n    s=np.array(revenue),\n    alpha=0.5,\n    edgecolor=\"black\",\n)\nax2.set_title(title_2)\nax2.set_xlabel(xlabel_value)\nax2.set_ylabel(ylabel_value)\nax2.grid(True)\nax2.set_ylim(ylim_values)\nax2.set_xlim(xlim_values)\n\n# Add text labels to scatter points\nfor i, txt in enumerate(quarters):\n    ax2.annotate(txt, (years[i], revenue[i] + 20))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('multidiff_5.pdf', bbox_inches='tight')"}
{"idx": "CB_7", "instruction": "There is a reference image for you and I also have a set of data about battery capacity before and after a certain number of charge cycles. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The battery capacity data is as follows:\n# Battery capacity before charge cycles\nx = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100]\n# Battery capacity after charge cycles\ny = [95, 190, 280, 370, 460, 550, 640, 730, 820, 910, 1000]\n# Percentage of battery capacity retained\npercentages = [\"95%\", \"95%\", \"93%\", \"92.5%\", \"92%\", \"91.6%\", \"91.4%\", \"91.2%\", \"91.1%\", \"91%\", \"90.9%\"]\n# Label of x axis\nxlabel_value = \"Battery Capacity (mAh) Before Charge Cycles\"\n# Label of y axis\nylabel_value = \"Battery Capacity (mAh) After Charge Cycles\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data representing battery capacity (mAh) before and after a certain number of charge cycles\nx = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100]\ny = [95, 190, 280, 370, 460, 550, 640, 730, 820, 910, 1000]\npercentages = [\n    \"95%\",\n    \"95%\",\n    \"93%\",\n    \"92.5%\",\n    \"92%\",\n    \"91.6%\",\n    \"91.4%\",\n    \"91.2%\",\n    \"91.1%\",\n    \"91%\",\n    \"90.9%\",\n]\n\n# Axes Limits and Labels\nxlabel_value = \"Battery Capacity (mAh) Before Charge Cycles\"\nylabel_value = \"Battery Capacity (mAh) After Charge Cycles\"\nxticklabels = [f\"{num}mAh\" for num in x]\nyticklabels = [f\"{num}mAh\" for num in y]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot data with different marker style\nax.plot(x, y, color=\"black\", linewidth=2)\nax.scatter(x, y, marker=\"o\", color=\"#3b76af\", s=100)\n\n# Annotate percentages with different font style\nfor i, txt in enumerate(percentages):\n    ax.annotate(\n        txt,\n        (x[i], y[i]),\n        textcoords=\"offset points\",\n        xytext=(0, 10),\n        ha=\"center\",\n        fontsize=9,\n    )\n\n# Set labels with different font style\nax.set_xlabel(xlabel_value, fontsize=12)\nax.set_ylabel(ylabel_value, fontsize=12)\n\n# Set ticks\nax.set_xticks(x)\nax.set_yticks(y)\n\n# Set tick labels with different font style\nax.set_xticklabels(xticklabels, fontsize=9)\nax.set_yticklabels(yticklabels, fontsize=9)\n\n# Set grid with lighter lines\nax.grid(True, linestyle=\"--\", linewidth=0.5, color=\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('CB_7.pdf', bbox_inches='tight')"}
{"idx": "bar_65", "instruction": "There is a reference image for you and I also have a set of data about transportation method scores with different constraints. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation method scores data is as follows:\n# Transportation methods\ncategories = [\"Car\", \"Bicycle\", \"Train\", \"Bus\"]\n# Scores with different constraints\nscores_3 = np.array([-4.51, -2.85, -3.97, -4.55])\nscores_5 = np.array([-5.76, -3.54, -5.62, -1.08])\nscores_7 = np.array([-0.36, -6.17, -2.08, -4.71])\nscores_10 = np.array([-4.32, -0.74, -9.29, -9.13])\n# Label of x axis\nxlabel_value = \"Score\"\n# Title\nax_title = \"Scores by transportation method and number of constraints\"\n# Labels\nlabel_3_Constraints = \"3 Constraints\"\nlabel_5_Constraints = \"5 Constraints\"\nlabel_7_Constraints = \"7 Constraints\"\nlabel_10_Constraints = \"10 Constraints\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the categories and scores\ncategories = [\"Car\", \"Bicycle\", \"Train\", \"Bus\"]\nnum_scores = 4\nscore_range = (-10, 0)  # Updated score range for transportation scores\nscores_3 = np.array([-4.51, -2.85, -3.97, -4.55])\nscores_5 = np.array([-5.76, -3.54, -5.62, -1.08])\nscores_7 = np.array([-0.36, -6.17, -2.08, -4.71])\nscores_10 = np.array([-4.32, -0.74, -9.29, -9.13])\n\n# The x locations for the groups\nind = np.arange(len(scores_3))\n\n# The width of the bars\nbar_width = 0.2\n\n# Labels and Plot Types\nlabel_3_Constraints = \"3 Constraints\"\nlabel_5_Constraints = \"5 Constraints\"\nlabel_7_Constraints = \"7 Constraints\"\nlabel_10_Constraints = \"10 Constraints\"\n\n# Axes Limits and Labels\nxlabel_value = \"Score\"\nax_title = \"Scores by transportation method and number of constraints\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and axes objects\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plotting data\nbars_3 = ax.barh(\n    ind - bar_width * 1.5,\n    scores_3,\n    bar_width,\n    label=label_3_Constraints,\n    color=\"salmon\",\n)\nbars_5 = ax.barh(\n    ind - bar_width * 0.5,\n    scores_5,\n    bar_width,\n    label=label_5_Constraints,\n    color=\"skyblue\",\n)\nbars_7 = ax.barh(\n    ind + bar_width * 0.5,\n    scores_7,\n    bar_width,\n    label=label_7_Constraints,\n    color=\"coral\",\n)\nbars_10 = ax.barh(\n    ind + bar_width * 1.5,\n    scores_10,\n    bar_width,\n    label=label_10_Constraints,\n    color=\"lightblue\",\n)\n\n# Adding text inside the bars\nfor i, (score_3, score_5, score_7, score_10) in enumerate(\n    zip(scores_3, scores_5, scores_7, scores_10)\n):\n    ax.text(\n        score_3,\n        i - bar_width * 1.5,\n        f\"{score_3:.1f}\",\n        va=\"center\",\n        ha=\"right\" if score_3 < score_range[1] / 2 else \"left\",\n        color=\"black\",\n    )\n    ax.text(\n        score_5,\n        i - bar_width * 0.5,\n        f\"{score_5:.1f}\",\n        va=\"center\",\n        ha=\"right\" if score_5 < score_range[1] / 2 else \"left\",\n        color=\"black\",\n    )\n    ax.text(\n        score_7,\n        i + bar_width * 0.5,\n        f\"{score_7:.1f}\",\n        va=\"center\",\n        ha=\"right\" if score_7 < score_range[1] / 2 else \"left\",\n        color=\"black\",\n    )\n    ax.text(\n        score_10,\n        i + bar_width * 1.5,\n        f\"{score_10:.1f}\",\n        va=\"center\",\n        ha=\"right\" if score_10 < score_range[1] / 2 else \"left\",\n        color=\"black\",\n    )\n\n# Adding labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel(xlabel_value)\nax.set_title(ax_title)\nax.set_yticks(ind)\nax.set_yticklabels(categories)\nax.legend()\n\n# Invert y-axis to have the first entry at the top\nplt.gca().invert_yaxis()\n\n# Show grid lines for x-axis\nax.xaxis.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_65.pdf', bbox_inches='tight')"}
{"idx": "errorbar_28", "instruction": "There is a reference image for you and I also have a set of data about business factors affecting employee productivity. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business factors data is as follows:\n# Category of business factors\ncategories = [\"Work Environment\", \"Management Quality\", \"Training Programs\", \"Work-Life Balance\", \"Salary and Benefits\", \"Company Culture\", \"Job Security\", \"Career Growth Opportunities\", \"Workload\", \"Commute Time\",]\n# Impact on Employee Productivity\nvalues = [0.21, 0.20, 0.13, 0.10, 0.05, 0.05, -0.09, -0.08, -0.02, -0.01]\n# Error values\nerrors = [0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.01, 0.01, 0.01]\n# Label of y axis\nylabel_value = \"Business Factors\"\n# Label of x axis\nxlabel_value = \"Impact on Employee Productivity (\u0394 to baseline)\"\n# Normalizing function to convert values to a 0-1 range for color scaling\ndef normalize(value, min_val, max_val):\n    return (value - min_val) / (max_val - min_val)\n# Determine color based on normalized value\ndef get_color(value):\n    norm_value = normalize(value, min_val, max_val)\n    blue_base = np.array(mcolors.to_rgb(\"#6a8347\"))\n    return mcolors.to_hex((1 - blue_base) * (1 - norm_value) + blue_base)\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for business factors affecting employee productivity\ncategories = [\n    \"Work Environment\",\n    \"Management Quality\",\n    \"Training Programs\",\n    \"Work-Life Balance\",\n    \"Salary and Benefits\",\n    \"Company Culture\",\n    \"Job Security\",\n    \"Career Growth Opportunities\",\n    \"Workload\",\n    \"Commute Time\",\n]\nvalues = [0.21, 0.20, 0.13, 0.10, 0.05, 0.05, -0.09, -0.08, -0.02, -0.01]\nerrors = [0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.01, 0.01, 0.01]\n\nmin_val = min(values) - 0.1\nmax_val = max(values) + 0.1\n\n\n# Normalizing function to convert values to a 0-1 range for color scaling\ndef normalize(value, min_val, max_val):\n    return (value - min_val) / (max_val - min_val)\n\n\n# Determine color based on normalized value\ndef get_color(value):\n    norm_value = normalize(value, min_val, max_val)\n    blue_base = np.array(mcolors.to_rgb(\"#6a8347\"))\n    # Create a color that ranges from very light blue to the base blue\n    return mcolors.to_hex((1 - blue_base) * (1 - norm_value) + blue_base)\n\n\ncolors = [get_color(value) for value in values]\n\n# Axes Limits and Labels\nylabel_value = \"Business Factors\"\nxlabel_value = \"Impact on Employee Productivity (\u0394 to baseline)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Horizontal bar chart\nbars = ax.barh(\n    categories, values, xerr=errors, color=colors, capsize=3, edgecolor=\"none\"\n)\nax.set_ylabel(ylabel_value)\nax.set_xlabel(xlabel_value)\n\n# Set y-axis limits and x-axis limits\nax.set_xlim(min_val, max_val)  # Adjust limits to encompass errors\n\n# Remove top and right spines for a cleaner look\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\n# Customize grid lines\nax.xaxis.grid(True, linestyle=\"--\", which=\"major\", color=\"gray\", alpha=0.6)\nax.set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent clipping of ylabel\nplt.tight_layout()\nplt.savefig('errorbar_28.pdf', bbox_inches='tight')"}
{"idx": "hist_16", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Data for correctly classified devices\ncorrectly_classified = [0.64, 1.0, 0.74, 0.63, 0.44, 0.83, 0.46, 1.78, 2.65, 0.39, 1.26, 0.6, 0.67, 2.08, 0.06, 0.07, 0.02, 1.43, 1.2, 1.63, 3.08, 1.28, 0.5, 1.21, 0.1, 0.82, 0.12, 2.32, 0.59, 0.43, 0.25, 1.19, 0.49, 0.67, 0.02, 0.77, 0.76, 0.77, 2.3, 0.92, 0.36, 0.46, 0.96, 0.05, 0.88, 0.89, 0.19, 0.11, 0.3, 0.36, 0.68, 0.46, 3.56, 0.09, 0.19, 0.14, 0.85, 0.23, 0.5, 0.22, 0.14, 0.09, 0.85, 0.12, 0.18, 0.37, 1.38, 0.08, 1.46, 0.08, 3.0, 0.51, 3.01, 0.74, 1.08, 0.03, 0.27, 0.1, 0.28, 0.1, 0.31, 0.43, 0.05, 0.94, 0.67, 0.25, 0.59, 0.08, 0.69, 2.12, 0.31, 0.88, 0.11, 1.01, 0.27, 0.16, 0.71, 0.02, 1.41, 0.0]\n# Data for misclassified devices\nmisclassified = [2.88, 2.2, 2.49, 3.12, 2.93, 1.51, 2.48, 1.92, 1.95, 2.21, 2.07, 2.73, 2.38, 2.06, 2.22, 2.17, 2.75, 1.9, 2.16, 1.57, 0.72, 2.33, 2.43, 1.63, 3.13, 1.27, 2.02, 1.91, 2.77, 2.73, 2.08, 2.19, 1.56, 1.01, 1.83, 2.08, 2.62, 2.6, 1.81, 1.85, 1.48, 1.29, 1.15, 2.98, 1.75, 1.78, 1.37, 2.39, 1.19, 1.89, 1.55, 2.19, 1.74, 1.41, 1.99, 2.21, 2.03, 2.15, 1.68, 1.82, 1.66, 1.82, 1.59, 1.14, 2.09, 1.8, 1.18, 2.23, 1.55, 2.03, 2.36, 2.06, 2.57, 1.38, 2.2, 1.66, 1.56, 1.71, 1.84, 2.03, 1.42, 2.45, 2.23, 1.23, 2.74, 2.95, 2.59, 1.91, 1.46, 2.53, 1.8, 2.61, 2.1, 2.49, 2.18, 2.35, 2.01, 2.89, 2.06, 2.2]\n# Labels\nhist_label = [\"Correctly Classified Devices\", \"Misclassified Devices\"]\n# Label for x axis\nxlabel_value = \"Distance to Decision Boundary\"\n# Label for y axis\nylabel_value = \"Frequency\"\n# Title\ntitle = \"Machine Learning Model Accuracy Analysis\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data with modified distributions for technology domain\ncorrectly_classified = np.array([0.64, 1.0, 0.74, 0.63, 0.44, 0.83, 0.46, 1.78, 2.65, 0.39, 1.26, 0.6, 0.67, 2.08, 0.06, 0.07, 0.02, 1.43, 1.2, 1.63, 3.08, 1.28, 0.5, 1.21, 0.1, 0.82, 0.12, 2.32, 0.59, 0.43, 0.25, 1.19, 0.49, 0.67, 0.02, 0.77, 0.76, 0.77, 2.3, 0.92, 0.36, 0.46, 0.96, 0.05, 0.88, 0.89, 0.19, 0.11, 0.3, 0.36, 0.68, 0.46, 3.56, 0.09, 0.19, 0.14, 0.85, 0.23, 0.5, 0.22, 0.14, 0.09, 0.85, 0.12, 0.18, 0.37, 1.38, 0.08, 1.46, 0.08, 3.0, 0.51, 3.01, 0.74, 1.08, 0.03, 0.27, 0.1, 0.28, 0.1, 0.31, 0.43, 0.05, 0.94, 0.67, 0.25, 0.59, 0.08, 0.69, 2.12, 0.31, 0.88, 0.11, 1.01, 0.27, 0.16, 0.71, 0.02, 1.41, 0.0])\nmisclassified = np.array([2.88, 2.2, 2.49, 3.12, 2.93, 1.51, 2.48, 1.92, 1.95, 2.21, 2.07, 2.73, 2.38, 2.06, 2.22, 2.17, 2.75, 1.9, 2.16, 1.57, 0.72, 2.33, 2.43, 1.63, 3.13, 1.27, 2.02, 1.91, 2.77, 2.73, 2.08, 2.19, 1.56, 1.01, 1.83, 2.08, 2.62, 2.6, 1.81, 1.85, 1.48, 1.29, 1.15, 2.98, 1.75, 1.78, 1.37, 2.39, 1.19, 1.89, 1.55, 2.19, 1.74, 1.41, 1.99, 2.21, 2.03, 2.15, 1.68, 1.82, 1.66, 1.82, 1.59, 1.14, 2.09, 1.8, 1.18, 2.23, 1.55, 2.03, 2.36, 2.06, 2.57, 1.38, 2.2, 1.66, 1.56, 1.71, 1.84, 2.03, 1.42, 2.45, 2.23, 1.23, 2.74, 2.95, 2.59, 1.91, 1.46, 2.53, 1.8, 2.61, 2.1, 2.49, 2.18, 2.35, 2.01, 2.89, 2.06, 2.2])\n\n# Labels and Plot Types\nhist_label = [\"Correctly Classified Devices\", \"Misclassified Devices\"]\n\n# Axes Limits and Labels\nxlabel_value = \"Distance to Decision Boundary\"\nylabel_value = \"Frequency\"\ntitle = \"Machine Learning Model Accuracy Analysis\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nplt.figure(figsize=(5, 4))\n\n# Plot histograms with stacked bars, modified colors, and alpha for transparency\nplt.hist(\n    [correctly_classified, misclassified],\n    bins=50,\n    stacked=True,\n    label=hist_label,\n    color=[\"#6495ED\", \"#FFA07A\"],\n    alpha=0.6,\n)\n\n# Add labels, title, and modify the style of the labels\nplt.xlabel(xlabel_value, color=\"#333333\")\nplt.ylabel(ylabel_value, color=\"#333333\")\nplt.title(title)\n\n# Modify the legend style and position to lower center\nplt.legend(frameon=True, loc=\"lower center\", ncol=2, bbox_to_anchor=(0.5, -0.4))\n\n# Adjust x-axis range and add some space at the beginning of the x-axis\nplt.xlim(left=plt.xlim()[0] + 0.1, right=3)  # Adjusted right xlim\n\n# Add grid with lighter color and set behind the histograms\nplt.grid(color=\"grey\", linestyle=\"--\", linewidth=0.5, alpha=0.7)\nplt.gca().set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('hist_16.pdf', bbox_inches='tight')"}
{"idx": "multidiff_8", "instruction": "There is a reference image for you and I also have two sets of performance data for a system. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The performance data is as follows:\n# Category of system performance metrics\ncategories = [\"CPU Utilization\", \"Memory Usage\", \"Disk I/O\", \"Network Throughput\", \"Latency\", \"Error Rate\"]\n# Performance scores\nvalues = [0.9, 0.8, 0.7, 0.6, 0.5, 0.3]\n# Label of x axis 1\nxlabel_value_1 = \"Performance Score\"\n# Performance metrics\ncpu_performance = np.array([0.34, 0.32, 0.32, 0.31, 0.3, 0.28, 0.28, 0.26, 0.26, 0.25, 0.24, 0.24, 0.22, 0.21, 0.2, 0.19, 0.19, 0.17, 0.17, 0.15, 0.13, 0.14, 0.13, 0.11, 0.12, 0.09])\nmemory_performance = np.array([0.36, 0.34, 0.34, 0.34, 0.33, 0.3, 0.3, 0.28, 0.28, 0.27, 0.26, 0.26, 0.24, 0.23, 0.22, 0.21, 0.21, 0.19, 0.19, 0.17, 0.15, 0.16, 0.15, 0.13, 0.15, 0.11])\ndisk_io_performance = np.array([0.33, 0.31, 0.31, 0.31, 0.29, 0.27, 0.27, 0.25, 0.25, 0.24, 0.23, 0.23, 0.21, 0.2, 0.19, 0.18, 0.18, 0.16, 0.16, 0.14, 0.12, 0.13, 0.12, 0.1, 0.11, 0.08])\nnetwork_throughput_performance = np.array([0.35, 0.33, 0.33, 0.33, 0.31, 0.28, 0.29, 0.27, 0.26, 0.25, 0.24, 0.24, 0.22, 0.21, 0.2, 0.19, 0.19, 0.16, 0.16, 0.14, 0.11, 0.13, 0.12, 0.09, 0.11, 0.07])\nlatency_performance = np.array([0.32, 0.3, 0.29, 0.29, 0.28, 0.26, 0.26, 0.24, 0.23, 0.23, 0.21, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.11, 0.11, 0.1, 0.09, 0.09, 0.06])\nerror_rate_performance = np.array([0.38, 0.35, 0.34, 0.34, 0.33, 0.29, 0.3, 0.27, 0.26, 0.26, 0.24, 0.24, 0.22, 0.21, 0.2, 0.18, 0.18, 0.15, 0.15, 0.12, 0.1, 0.11, 0.1, 0.08, 0.09, 0.05])\n# Label of x axis 2\nxlabel_value_2 = \"Iterations\"\n# Label of y axis 2\nylabel_value_2 = \"Performance Metric\"\n# Labels\nlabel_cpu = \"CPU Utilization\"\nlabel_memory = \"Memory Usage\"\nlabel_disk_io = \"Disk I/O\"\nlabel_network_throughput = \"Network Throughput\"\nax2_label_latency = \"Latency\"\nax2_label_error_rate = \"Error Rate\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 9.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Assuming data values for the bar chart\ncategories = [\n    \"CPU Utilization\",\n    \"Memory Usage\",\n    \"Disk I/O\",\n    \"Network Throughput\",\n    \"Latency\",\n    \"Error Rate\",\n]\nvalues = [0.9, 0.8, 0.7, 0.6, 0.5, 0.3]\n\n# Generate y values for the line chart with a monotonically decreasing array\n# Creating arrays for y values with 26 numbers each and random add or subtract 0.01 to make them different\ncpu_performance = np.array([0.34, 0.32, 0.32, 0.31, 0.3, 0.28, 0.28, 0.26, 0.26, 0.25, 0.24, 0.24, 0.22, 0.21, 0.2, 0.19, 0.19, 0.17, 0.17, 0.15, 0.13, 0.14, 0.13, 0.11, 0.12, 0.09])\nmemory_performance = np.array([0.36, 0.34, 0.34, 0.34, 0.33, 0.3, 0.3, 0.28, 0.28, 0.27, 0.26, 0.26, 0.24, 0.23, 0.22, 0.21, 0.21, 0.19, 0.19, 0.17, 0.15, 0.16, 0.15, 0.13, 0.15, 0.11])\ndisk_io_performance = np.array([0.33, 0.31, 0.31, 0.31, 0.29, 0.27, 0.27, 0.25, 0.25, 0.24, 0.23, 0.23, 0.21, 0.2, 0.19, 0.18, 0.18, 0.16, 0.16, 0.14, 0.12, 0.13, 0.12, 0.1, 0.11, 0.08])\nnetwork_throughput_performance = np.array([0.35, 0.33, 0.33, 0.33, 0.31, 0.28, 0.29, 0.27, 0.26, 0.25, 0.24, 0.24, 0.22, 0.21, 0.2, 0.19, 0.19, 0.16, 0.16, 0.14, 0.11, 0.13, 0.12, 0.09, 0.11, 0.07])\nlatency_performance = np.array([0.32, 0.3, 0.29, 0.29, 0.28, 0.26, 0.26, 0.24, 0.23, 0.23, 0.21, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.11, 0.11, 0.1, 0.09, 0.09, 0.06])\nerror_rate_performance = np.array([0.38, 0.35, 0.34, 0.34, 0.33, 0.29, 0.3, 0.27, 0.26, 0.26, 0.24, 0.24, 0.22, 0.21, 0.2, 0.18, 0.18, 0.15, 0.15, 0.12, 0.1, 0.11, 0.1, 0.08, 0.09, 0.05])\n\n# Axes Limits and Labels\nxlabel_value_1 = \"Performance Score\"\nxlim_values_1 = [0, 1]\nxticks_all_1 = np.arange(0, 1.05, 0.05)\nxticks_labeled_1 = np.arange(0, 1.1, 0.2)\n\nxticks_2 = np.arange(0, 26, 1)\nlabel_cpu = \"CPU Utilization\"\nlabel_memory = \"Memory Usage\"\nlabel_disk_io = \"Disk I/O\"\nlabel_network_throughput = \"Network Throughput\"\nax2_label_latency = \"Latency\"\nax2_label_error_rate = \"Error Rate\"\nxlabel_value_2 = \"Iterations\"\nylabel_value_2 = \"Performance Metric\"\nylim_values_2 = [0, 0.37]\nxticks_all_2 = np.arange(0, 26, 1)\nxticks_labeled_2 = np.arange(0, 26, 5)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create bar chart\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(7, 9))\nax1.barh(categories, values, color=\"#6194bf\")\nax1.set_xlabel(xlabel_value_1)\nax1.set_xlim(xlim_values_1)\n\n# Add more x-ticks but only label some of them\nall_xticks = xticks_all_1\nlabeled_xticks = xticks_labeled_1\nax1.set_xticks(all_xticks)\nax1.set_xticklabels(\n    [f\"{tick:.1f}\" if tick in labeled_xticks else \"\" for tick in all_xticks]\n)\n\n# Create line chart\ntrials = xticks_2\nax2.plot(trials, cpu_performance, label=label_cpu, color=\"blue\")\nax2.plot(trials, memory_performance, label=label_memory, color=\"green\")\nax2.plot(trials, disk_io_performance, label=label_disk_io, color=\"orange\")\nax2.plot(trials, network_throughput_performance, label=label_network_throughput, color=\"purple\", linestyle=\":\")\nax2.plot(\n    trials,\n    latency_performance,\n    label=ax2_label_latency,\n    color=\"purple\",\n    linestyle=\"--\",\n)\nax2.plot(\n    trials, error_rate_performance, label=ax2_label_error_rate, color=\"purple\", linestyle=\"-\"\n)\nax2.set_xlabel(xlabel_value_2)\nax2.set_ylabel(ylabel_value_2)\n\n# Set the y limit to match the uploaded image aspect\nax2.set_ylim(ylim_values_2)\nax2.legend(loc=\"upper right\", frameon=False)\nall_xticks = xticks_all_2\nlabeled_xticks = xticks_labeled_2\nax2.set_xticks(all_xticks)\nax2.set_xticklabels(\n    [f\"{tick}\" if tick in labeled_xticks else \"\" for tick in all_xticks]\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('multidiff_8.pdf', bbox_inches='tight')"}
{"idx": "HR_13", "instruction": "There is a reference image for you and I also have a set of data about the intersection of online and in-store shoppers. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Online Shoppers only\nonline_shoppers = 350\n# In-Store Shoppers only\nin_store_shoppers = 250\n# Both Online and In-Store Shoppers\nboth_shoppers = 100\n# Labels for the sets\nset_labels = (\"Online Shoppers\", \"In-Store Shoppers\")\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Set the figure size\nplt.figure(figsize=(8, 6))\n\n# Create a Venn diagram with updated data values for business domain\nvenn = venn2(subsets=(350, 250, 100), set_labels=(\"Online Shoppers\", \"In-Store Shoppers\"))\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Customize the colors and edge styles\nvenn.get_patch_by_id(\"10\").set_color(\"pink\")\nvenn.get_patch_by_id(\"10\").set_edgecolor(\"black\")\nvenn.get_patch_by_id(\"10\").set_linestyle(\"dashed\")\nvenn.get_patch_by_id(\"01\").set_color(\"lightgreen\")\nvenn.get_patch_by_id(\"01\").set_edgecolor(\"black\")\nvenn.get_patch_by_id(\"01\").set_linestyle(\"dashed\")\nvenn.get_patch_by_id(\"11\").set_color(\"sandybrown\")\n\n# Remove axis\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Display the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_13.pdf', bbox_inches='tight')"}
{"idx": "box_12", "instruction": "There is a reference image for you and I also have a set of data about average fuel efficiency for different vehicle categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The fuel efficiency data is as follows:\n# Average fuel efficiency (mpg) for different vehicle categories\ndata = [\n    [24, 25, 26, 27, 28],\n    [22, 23, 24, 25, 26],\n    [18, 19, 20, 21, 22],\n    [20, 21, 22, 23, 24],\n    [15, 16, 17, 18, 19],\n]\n# Vehicle categories\ncategories = [\"Sedans\", \"SUVs\", \"Trucks\", \"Hybrids\", \"Electric\",]\n# Label of y axis\nylabel_value = \"Fuel Efficiency (mpg)\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the boxplots representing average fuel efficiency (mpg) for different vehicle categories\ndata = [\n    [24, 25, 26, 27, 28],\n    [22, 23, 24, 25, 26],\n    [18, 19, 20, 21, 22],\n    [20, 21, 22, 23, 24],\n    [15, 16, 17, 18, 19],\n]\n\n# Vehicle categories for the x-axis\ncategories = [\n    \"Sedans\",\n    \"SUVs\",\n    \"Trucks\",\n    \"Hybrids\",\n    \"Electric\",\n]\n\n# Axes Limits and Labels\nxticks_values = range(1, len(categories) + 1)\nylim_values = [14, 30]\nyticks_values = [15, 18, 21, 24, 27, 30]\nyticks_label = [\"15\", \"18\", \"21\", \"24\", \"27\", \"30\"]\nylabel_value = \"Fuel Efficiency (mpg)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the boxplot\nplt.figure(figsize=(8, 6))  # Size in inches (converted from provided dimensions)\nplt.boxplot(data, medianprops=dict(color=\"orange\"))\n\n# Set the x-axis labels\nplt.xticks(xticks_values, categories)\nplt.ylim(ylim_values)\nplt.yticks(\n    yticks_values,\n    yticks_label,\n)\n# Set the y-axis label\nplt.ylabel(ylabel_value)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_12.pdf', bbox_inches='tight')"}
{"idx": "errorbar_3", "instruction": "There is a reference image for you and I also have a set of data about renewable energy source configurations and their efficiency. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The renewable energy source configurations and efficiency data is as follows:\n# Configurations\nconfigurations = [\n    \"Solar / 5kW / 30\u00b0\",\n    \"Solar / 5kW / 45\u00b0\",\n    \"Solar / 10kW / 30\u00b0\",\n    \"Solar / 10kW / 45\u00b0\",\n    \"Wind / 3MW / 80m\",\n    \"Wind / 3MW / 100m\",\n    \"Wind / 5MW / 80m\",\n    \"Wind / 5MW / 100m\",\n    \"Hydro / 1MW / 10m\",\n    \"Hydro / 1MW / 15m\",\n    \"Hydro / 2MW / 10m\",\n    \"Hydro / 2MW / 15m\",\n    \"Biomass / 1MW / 50%\",\n    \"Biomass / 1MW / 70%\",\n    \"Biomass / 2MW / 50%\",\n    \"Biomass / 2MW / 70%\",\n    \"Geothermal / 1MW / 150\u00b0C\",\n    \"Geothermal / 1MW / 200\u00b0C\",\n]\n# Efficiency percentage for Configuration A\nstriped_bar_values = [77.82, 87.00, 97.86, 79.92, 46.15, 78.05, 11.83, 63.99, 14.34, 94.47, 52.18, 41.47, 26.46, 77.42, 45.62, 56.84, 1.88, 61.76]\n# Efficiency percentage for Configuration B\nsolid_bar_values = [54.88, 71.52, 60.28, 54.49, 42.37, 64.59, 43.76, 89.18, 96.37, 38.34, 79.17, 52.89, 56.80, 92.56, 7.10, 8.71, 2.02, 83.26]\n# Error percentage\nerror = [2.74, 3.58, 3.01, 2.72, 2.12, 3.23, 2.19, 4.46, 4.82, 1.92, 3.96, 2.64, 2.84, 4.63, 0.36, 0.44, 0.10, 4.16]\n# Label of x axis\nxlabel_value = \"Efficiency (%)\"\n# Label of y axis\nylabel_value = \"Configurations\"\n# Title\n\"Renewable Energy Source Configurations and Efficiency\"\n# Labels\nlabel_Striped = \"Configuration A\"\nlabel_Solid = \"Configuration B\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual values)\nconfigurations = [\n    \"Solar / 5kW / 30\u00b0\",\n    \"Solar / 5kW / 45\u00b0\",\n    \"Solar / 10kW / 30\u00b0\",\n    \"Solar / 10kW / 45\u00b0\",\n    \"Wind / 3MW / 80m\",\n    \"Wind / 3MW / 100m\",\n    \"Wind / 5MW / 80m\",\n    \"Wind / 5MW / 100m\",\n    \"Hydro / 1MW / 10m\",\n    \"Hydro / 1MW / 15m\",\n    \"Hydro / 2MW / 10m\",\n    \"Hydro / 2MW / 15m\",\n    \"Biomass / 1MW / 50%\",\n    \"Biomass / 1MW / 70%\",\n    \"Biomass / 2MW / 50%\",\n    \"Biomass / 2MW / 70%\",\n    \"Geothermal / 1MW / 150\u00b0C\",\n    \"Geothermal / 1MW / 200\u00b0C\",\n]\nsolid_bar_values = np.array([54.88, 71.52, 60.28, 54.49, 42.37, 64.59, 43.76, 89.18, 96.37, 38.34, 79.17, 52.89, 56.80, 92.56, 7.10, 8.71, 2.02, 83.26])  # Efficiency percentage\nstriped_bar_values = np.array([77.82, 87.00, 97.86, 79.92, 46.15, 78.05, 11.83, 63.99, 14.34, 94.47, 52.18, 41.47, 26.46, 77.42, 45.62, 56.84, 1.88, 61.76])  # Efficiency percentage\nerror = np.array([2.74, 3.58, 3.01, 2.72, 2.12, 3.23, 2.19, 4.46, 4.82, 1.92, 3.96, 2.64, 2.84, 4.63, 0.36, 0.44, 0.10, 4.16])  # Error percentage\n\n\n# Labels and Plot Types\nlabel_Striped = \"Configuration A\"\nlabel_Solid = \"Configuration B\"\n\n# Axes Limits and Labels\nxlabel_value = \"Efficiency (%)\"\nylabel_value = \"Configurations\"\ntitle = \"Renewable Energy Source Configurations and Efficiency\"\nylim_values = [-0.4, 17.4]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(10, 10))\n\n# Create grouped bar chart with error bars\nbar_width = 0.4\nindex = np.arange(len(configurations))\nplt.barh(\n    index - 0.2,\n    striped_bar_values,\n    bar_width,\n    color=\"#d8d7db\",\n    hatch=\"//\",\n    xerr=error,\n    label=label_Striped,\n    capsize=3,\n    edgecolor=\"black\",\n    alpha=0.6,\n)\nplt.barh(\n    index + 0.2,\n    solid_bar_values,\n    bar_width,\n    color=\"#ebb08c\",\n    hatch=\"\",\n    xerr=error,\n    label=label_Solid,\n    capsize=3,\n    edgecolor=\"black\",\n    alpha=0.6,\n)\n\n# Add labels and title\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\nplt.title(title)\nplt.yticks(index, configurations, rotation=0)\nplt.gca().set_ylim(ylim_values)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('errorbar_3.pdf', bbox_inches='tight')"}
{"idx": "hist_7", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Forecast Confidence\nconfidence = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n# Forecast Accuracy in Bin\naccuracy = [0.14, 0.27, 0.32, 0.49, 0.50, 0.56, 0.33, 0.38, 0.75]\n# Calibration Error\ncalibration_error = 0.25\n# Label of x axis\nxlabel_value = \"Forecast Confidence\"\n# Label of y axis\nylabel_value = \"Forecast Accuracy in Bin\"\n# Title\ntitle = \"Weather Forecast Calibration\"\n# Text\ntext = f\"Calibration Error:\n{calibration_error:.2f}\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nconfidence = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\naccuracy = np.array([0.14, 0.27, 0.32, 0.49, 0.50, 0.56, 0.33, 0.38, 0.75])\ncalibration_error = 0.25\ntext = f\"Calibration Error:\\n{calibration_error:.2f}\"\n\n# Axes Limits and Labels\nxlabel_value = \"Forecast Confidence\"\nylabel_value = \"Forecast Accuracy in Bin\"\ntitle = \"Weather Forecast Calibration\"\nxlim_values = [0, 1]\nylim_values = [0, 1]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(8, 8))\n\n# Plot histogram using plt.hist and specify bins\nplt.hist(confidence, bins=9, weights=accuracy, color=\"tan\", edgecolor=\"black\")\n\n# Add diagonal dashed line\nplt.plot([0, 1], [0, 1], \"k--\", linestyle=\"--\", linewidth=1, color=\"#808080\")\n\n# Add text for calibration error\nplt.text(\n    0.08, 0.85, text, color=\"#c06c27\", fontsize=18\n)\n\n# Set labels and title\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\nplt.title(title)\n\n# Adjust x and y axis limits to match the reference picture\nplt.xlim(xlim_values)\nplt.ylim(ylim_values)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('hist_7.pdf', bbox_inches='tight')"}
{"idx": "quiver_2", "instruction": "There is a reference image for you and I also have a set of data about athletes' performance changes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The athletes' performance data is as follows:\n# Athletes in the first group\nathletes_1 = [\"Athlete A\", \"Athlete B\", \"Athlete C\"]\n# Data for the first group\nperformance_start_1 = [8.2, 8.7, 9.0]\nimprovement_1 = [+1.3, +1.5, +1.0]\nbaseline_start_1 = [7.0, 7.5, 8.0]\ndecline_1 = [-1.0, -1.2, -0.8]\n# Athletes in the second group\nathletes_2 = [\"Athlete D\", \"Athlete E\", \"Athlete F\"]\n# Data for the second group\nperformance_start_2 = [9.5, 9.0, 8.8]\n\nimprovement_2 = [+1.0, +1.2, +1.1]\nbaseline_start_2 = [8.2, 8.5, 8.0]\ndecline_2 = [-0.8, -1.0, -0.9]\n# Label\nlabel = \"Performance Change\\n(Sports)\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot\nathletes_1 = [\"Athlete A\", \"Athlete B\", \"Athlete C\"]\nperformance_start_1 = [8.2, 8.7, 9.0]\nimprovement_1 = [+1.3, +1.5, +1.0]\nbaseline_start_1 = [7.0, 7.5, 8.0]\ndecline_1 = [-1.0, -1.2, -0.8]\n\nathletes_2 = [\"Athlete D\", \"Athlete E\", \"Athlete F\"]\nperformance_start_2 = [9.5, 9.0, 8.8]\nimprovement_2 = [+1.0, +1.2, +1.1]\nbaseline_start_2 = [8.2, 8.5, 8.0]\ndecline_2 = [-0.8, -1.0, -0.9]\n\n# Axes Limits and Labels\nxlim_values = [5, 11]\nlabel = \"Performance Change\\n(Sports)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure with two subplots\nfig, ax1 = plt.subplots(figsize=(5, 4))\n\n# Set the y-axis offsets to be in the middle of each grid\noffset = 0.5\n\n# First subplot (athletes_1)\nfor i, athlete in enumerate(athletes_1):\n    # Performance improvement line with arrow and black dots at start and end\n    ax1.annotate(\n        \"\",\n        xy=(performance_start_1[i], i + offset * 3 / 2),\n        xytext=(performance_start_1[i] + improvement_1[i], i + offset * 3 / 2),\n        arrowprops=dict(arrowstyle=\"<-\", color=\"red\"),\n    )\n    ax1.scatter(\n        [performance_start_1[i], performance_start_1[i] + improvement_1[i]],\n        [i + offset * 3 / 2, i + offset * 3 / 2],\n        color=\"black\",\n        s=10,\n    )\n    ax1.annotate(\n        f\"{improvement_1[i]:.2f}\",\n        (performance_start_1[i] + improvement_1[i], i + offset * 1.75),\n        color=\"red\",\n        ha=\"right\",\n        va=\"center\",\n    )\n\n# set y-axis limits\nax1.set_ylim(0, len(athletes_1))\n\n# Set x-axis limits uniformly\nax1.set_xlim(xlim_values)\n\n# Adjust the y-axis tick positions\nax1.set_yticks([i + offset for i in range(len(athletes_1))])\nax1.set_yticklabels(athletes_1)\n\n# Offset grid lines on the y-axis\nax1.set_yticks([i for i in range(len(athletes_1))], minor=True)\n\nax1.yaxis.grid(True, which=\"minor\", linewidth=0.5, alpha=0.7, color=\"black\")\n\n# add x-axis grid lines and set gap is 1\nax1.xaxis.set_major_locator(plt.MultipleLocator(1))\n\nax1.grid(axis=\"x\", linestyle=\"--\", linewidth=0.5)\n\n# Create arrow-shaped legend entries with a line that aligns with the arrowhead\ngreen_arrow = mlines.Line2D(\n    [],\n    [],\n    color=\"red\",\n    marker=\">\",\n    linestyle=\"-\",\n    markersize=8,\n    label=label,\n    linewidth=2,\n    markeredgewidth=2,\n    markevery=(1, 1),\n)\n\nfig.legend(handles=[green_arrow], bbox_to_anchor=(0.45, 0), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('quiver_2.pdf', bbox_inches='tight')"}
{"idx": "HR_19", "instruction": "There is a reference image for you and I also have a set of data about quarterly sales for two sales teams. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The quarterly sales data is as follows:\n# Quarters\nxlabels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\"]\n# Sales for Team A\nsales_team_A = [15000, 30000, 45000, 40000, 52000]\n# Sales for Team B\nsales_team_B = [40000, 55000, 70000, 68000, 75000]\n# Labels for the sales teams\nhat_graph_label = [\"Sales Team A\", \"Sales Team B\"]\n# Label of x axis\nxlabel_value = \"Quarters\"\n# Label of y axis\nylabel_value = \"Sales ($)\"\n# Title\ntitle = \"Quarterly Sales by Team\"\n# Labels\nhat_graph_label = [\"Sales Team A\", \"Sales Team B\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Initialize labels and a numpy array to make sure you have\n# N labels of N number of values in the array\nxlabels = [\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\"]\nsales_team_A = np.array([15000, 30000, 45000, 40000, 52000])\nsales_team_B = np.array([40000, 55000, 70000, 68000, 75000])\n\n# Labels and Plot Types\nhat_graph_label = [\"Sales Team A\", \"Sales Team B\"]\n\n# Axes Limits and Labels\nxlabel_value = \"Quarters\"\nylabel_value = \"Sales ($)\"\nylim_values = [0, 100000]\ntitle = \"Quarterly Sales by Team\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\ndef hat_graph(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        \"\"\"Attach a text label on top of each bar.\"\"\"\n        for height, rect in zip(heights, rects):\n            ax.annotate(\n                f\"{height}\",\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 4),  # 4 points vertical offset.\n                textcoords=\"offset points\",\n                ha=\"center\",\n                va=\"bottom\",\n            )\n\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  # spacing between hat groups\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = (\n            {\"fill\": False, \"edgecolor\": \"black\"}\n            if i == 0\n            else {\"edgecolor\": \"black\", \"color\": \"#64a36c\"}\n        )\n        rects = ax.bar(\n            x - spacing / 2 + i * width,\n            heights - heights0,\n            width,\n            bottom=heights0,\n            label=group_label,\n            **style,\n        )\n        label_bars(heights, rects)\n\n\nfig, ax = plt.subplots(figsize=(7, 5))\nhat_graph(ax, xlabels, [sales_team_A, sales_team_B], hat_graph_label)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\nax.set_ylim(ylim_values)\nax.set_title(title)\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nfig.tight_layout()\nplt.savefig('HR_19.pdf', bbox_inches='tight')"}
{"idx": "box_2", "instruction": "There is a reference image for you and I also have a set of data about comfort and efficiency data for two different modes of transportation, Car and Bicycle. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Sample data for demonstration purposes\ncomfort_data = [np.array([8.38, 7.7, 7.99, 8.62, 8.43, 7.01, 7.98, 7.42, 7.45, 7.71]),np.array([7.38, 6.7, 6.99, 7.62, 7.43, 6.01, 6.98, 6.42, 6.45, 6.71])]\nefficiency_data = [np.array([8.71, 8.16, 8.39, 8.9, 8.75, 7.61, 8.38, 7.94, 7.96, 8.16]),np.array([7.71, 7.16, 7.39, 7.9, 7.75, 6.61, 7.38, 6.94, 6.96, 7.16])]\n# Titles\ntitle_1 = \"Comfort\"\ntitle_2 = \"Efficiency\"\n# Xticklabels\nxticklabels = [\"Car\", \"Bicycle\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\ncomfort_data = [np.array([8.38, 7.7, 7.99, 8.62, 8.43, 7.01, 7.98, 7.42, 7.45, 7.71]),\n                np.array([7.38, 6.7, 6.99, 7.62, 7.43, 6.01, 6.98, 6.42, 6.45, 6.71])]\nefficiency_data = [np.array([8.71, 8.16, 8.39, 8.9, 8.75, 7.61, 8.38, 7.94, 7.96, 8.16]), \n                   np.array([7.71, 7.16, 7.39, 7.9, 7.75, 6.61, 7.38, 6.94, 6.96, 7.16])]\n\ntitle_1 = \"Comfort\"\ntitle_2 = \"Efficiency\"\nxticklabels = [\"Car\", \"Bicycle\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(8, 6))\n\n# Create subplots\nfig, axs = plt.subplots(2, 2)\n\n# Plot the boxplots\nbp1 = axs[0, 0].boxplot(\n    comfort_data,\n    patch_artist=True,\n    widths=0.5,\n    showfliers=False,\n    medianprops=dict(color=\"black\"),\n)\nbp2 = axs[0, 1].boxplot(\n    efficiency_data,\n    patch_artist=True,\n    widths=0.5,\n    showfliers=False,\n    medianprops=dict(color=\"black\"),\n)\nbp3 = axs[1, 0].boxplot(\n    comfort_data,\n    patch_artist=True,\n    widths=0.5,\n    showfliers=False,\n    medianprops=dict(color=\"black\"),\n)\nbp4 = axs[1, 1].boxplot(\n    efficiency_data,\n    patch_artist=True,\n    widths=0.5,\n    showfliers=False,\n    medianprops=dict(color=\"black\"),\n)\n\n# Set the colors of the boxes\nbp1[\"boxes\"][0].set_facecolor(\"#d98694\")\nbp1[\"boxes\"][1].set_facecolor(\"#5d9c97\")\nbp2[\"boxes\"][0].set_facecolor(\"#d98694\")\nbp2[\"boxes\"][1].set_facecolor(\"#5d9c97\")\nbp3[\"boxes\"][0].set_facecolor(\"#d98694\")\nbp3[\"boxes\"][1].set_facecolor(\"#5d9c97\")\nbp4[\"boxes\"][0].set_facecolor(\"#d98694\")\nbp4[\"boxes\"][1].set_facecolor(\"#5d9c97\")\n\n# Set titles and labels\naxs[0, 0].set_title(title_1)\naxs[0, 0].grid(True)\naxs[0, 1].set_title(title_2)\naxs[0, 1].grid(True)\naxs[0, 0].set_xticklabels(xticklabels)\naxs[0, 1].set_xticklabels(xticklabels)\naxs[1, 0].set_title(title_1)\naxs[1, 0].grid(True)\naxs[1, 1].set_title(title_2)\naxs[1, 1].grid(True)\naxs[1, 0].set_xticklabels(xticklabels)\naxs[1, 1].set_xticklabels(xticklabels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('box_2.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_1", "instruction": "There is a reference image for you and I also have a set of data about time spent on various activities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The activities data is as follows:\n# Activities\nactivities = [\"Exercise\", \"Meditation\", \"Sleep\", \"Healthy Eating\", \"Work-life Balance\", \"Medical Checkups\",]\n# Mean time spent on each activity\nmeans = np.array([0.0875, 0.1451, 0.1232, 0.1099, 0.0656, 0.0656])\n# Standard deviation of time spent on each activity\nstd_devs = np.array([0.0123, 0.0446, 0.034, 0.0383, 0.0108, 0.0488])\n# Mean time spent on all activities\ndataset_mean = np.float64(0.0994)\n# Label of y axis\nylabel_value = \"Time Spent (Fraction of total time)\"\n# Labels\nlabel_Mean = \"Mean\"\nlabel_Dataset_mean = \"Dataset Mean\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(42)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual data)\nactivities = [\n    \"Exercise\",\n    \"Meditation\",\n    \"Sleep\",\n    \"Healthy Eating\",\n    \"Work-life Balance\",\n    \"Medical Checkups\",\n]\nmeans = np.array([0.0875, 0.1451, 0.1232, 0.1099, 0.0656, 0.0656])\nstd_devs = np.array([0.0123, 0.0446, 0.034, 0.0383, 0.0108, 0.0488])\ndataset_mean = np.float64(0.0994)\n\n# Labels and Plot Types\nlabel_Mean = \"Mean\"\nlabel_Dataset_mean = \"Dataset Mean\"\n\n# Axes Limits and Labels\nylabel_value = \"Time Spent (Fraction of total time)\"\nylim_values = [0.01, 0.18]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Error bar plot\nax.errorbar(\n    activities,\n    means,\n    yerr=std_devs,\n    fmt=\"o\",\n    color=\"blue\",\n    ecolor=\"blue\",\n    capsize=5,\n    label=label_Mean,\n)\n\n# Dataset mean line\nax.axhline(y=dataset_mean, color=\"grey\", linestyle=\"--\", label=label_Dataset_mean)\n\n# Customizing the plot\nax.set_ylabel(ylabel_value)\nax.set_xticklabels(activities, rotation=45, ha=\"right\")\nax.legend()\nax.set_ylim(ylim_values)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent clipping of tick-labels\nplt.tight_layout()\nplt.savefig('errorpoint_1.pdf', bbox_inches='tight')"}
{"idx": "hist_8", "instruction": "There is a reference image for you and I also have a set of data about market overlap and customer queries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The market analysis data is as follows:\n# Market Overlap\nmarket_overlap = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n# Customer Queries\ncustomer_queries = [1600, 1700, 2100, 2200, 4700, 4900, 4400, 2800, 1000]\n# Label of x axis\nxlabel_value = \"% Market Overlap\"\n# Label of y axis\nylabel_value = \"Number of Customer Queries\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for business market analysis\nmarket_overlap = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ncustomer_queries = [1600, 1700, 2100, 2200, 4700, 4900, 4400, 2800, 1000]\n\n# Axes Limits and Labels\nxlabel_value = \"% Market Overlap\"\nylabel_value = \"Number of Customer Queries\"\nxlim_values = [0, 1.0]\nylim_values = [0, 6000]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a histogram\nplt.figure(figsize=(6, 5))  # Adjusted to match the original image's dimensions\nplt.hist(market_overlap, bins=9, weights=customer_queries, color=\"#7f95c0\")\n\n# Set the labels and title\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\n\n# Remove ticks on both axes\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Set the range for the axes\nplt.xlim(xlim_values)\nplt.ylim(ylim_values)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.savefig('hist_8.pdf', bbox_inches='tight')"}
{"idx": "tree_1", "instruction": "There is a reference image for you and I also have a set of data about transportation preferences. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation preferences data is as follows:\n# Sizes of each category\nsizes = [28.45, 22.35, 16.75, 12.80, 9.90, 5.75, 3.60, 0.40]\n# Labels of each category\nlabels = [\n    \"Uber\\n28.45%\",\n    \"Lyft\\n22.35%\",\n    \"Public Transport\\n16.75%\",\n    \"Bicycles\\n12.80%\",\n    \"Electric Scooters\\n9.90%\",\n    \"Car Rentals\\n5.75%\",\n    \"Walking\\n3.60%\",\n    \"Other\\n0.40%\",\n]\n# Colors for each category\ncolors = [\n    \"#1f77b4\",\n    \"#ff7f0e\",\n    \"#2ca02c\",\n    \"#d62728\",\n    \"#9467bd\",\n    \"#8c564b\",\n    \"#e377c2\",\n    \"#7f7f7f\",\n]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nsizes = [28.45, 22.35, 16.75, 12.80, 9.90, 5.75, 3.60, 0.40]\nlabels = [\n    \"Uber\\n28.45%\",\n    \"Lyft\\n22.35%\",\n    \"Public Transport\\n16.75%\",\n    \"Bicycles\\n12.80%\",\n    \"Electric Scooters\\n9.90%\",\n    \"Car Rentals\\n5.75%\",\n    \"Walking\\n3.60%\",\n    \"Other\\n0.40%\",\n]\ncolors = [\n    \"#1f77b4\",\n    \"#ff7f0e\",\n    \"#2ca02c\",\n    \"#d62728\",\n    \"#9467bd\",\n    \"#8c564b\",\n    \"#e377c2\",\n    \"#7f7f7f\",\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with the specified size\nfig = plt.figure(figsize=(12, 8))\n\n# Create a treemap\nsquarify.plot(\n    sizes=sizes, label=labels, color=colors, alpha=0.7, text_kwargs={\"fontsize\": 18}\n)\n\n# Remove axes\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout and save to file\nplt.tight_layout()\nplt.savefig('tree_1.pdf', bbox_inches='tight')"}
{"idx": "HR_23", "instruction": "There is a reference image for you and I also have a set of data about health index changes over a series of health checks and treatments. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The health index data is as follows:\n# Increments and decrements for each step\nincrements = [40, 60, -15, -30, 50, -20, 25, -35, 30, 20, -45]\n# Labels for each step\nlabels = [\"Initial\", \"Health Check 1\", \"Health Check 2\", \"Medication 1\", \"Medication 2\", \"Recovery 1\", \"Setback 1\", \"Treatment\", \"Recovery 2\", \"Recovery 3\", \"Final\"]\n# Label of y axis\nylabel_value = \"Health Index\"\n# Axes Labels\nylabel_value = \"Health Index\"\n# Title\ntitle = \"Health Progress Waterfall Chart\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the increments and decrements for each step of the waterfall chart\nincrements = [40, 60, -15, -30, 50, -20, 25, -35, 30, 20, -45]\n\n# Define the labels for each step\nlabels = [\n    \"Initial\",\n    \"Health Check 1\",\n    \"Health Check 2\",\n    \"Medication 1\",\n    \"Medication 2\",\n    \"Recovery 1\",\n    \"Setback 1\",\n    \"Treatment\",\n    \"Recovery 2\",\n    \"Recovery 3\",\n    \"Final\",\n]\n\n# Determine starting point and end point\nstart_value = 100\nend_value = start_value + sum(increments)\n\n# Calculate the bottom of each bar (cumulative)\nbottoms = np.hstack(([start_value], np.cumsum(increments)[:-1])) + start_value\n\n# Set the colors based on increment or decrement\ncolors = [\"green\" if x > 0 else \"red\" for x in increments]\n\n# Axes Limits and Labels\nylabel_value = \"Health Index\"\ntitle = \"Health Progress Waterfall Chart\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Plot bars\nbars = ax.bar(labels, increments, bottom=bottoms, color=colors)\n\n# Plot lines connecting the tops of each bar\nfor i in range(len(increments) - 1):  # Exclude the last increment\n    start_top = bottoms[i] + increments[i]\n    end_top = bottoms[i + 1] + increments[i + 1]\n    ax.plot([i, i + 1], [start_top, end_top], color=\"k\", linestyle=\"--\")\n\n# Annotate bars with value labels\nfor i, bar in enumerate(bars):\n    height = bar.get_height()\n    ax.annotate(\n        f\"{height}\",\n        xy=(bar.get_x() + bar.get_width() / 2, bar.get_y() + height),\n        xytext=(\n            0,\n            3 if height > 0 else -12,\n        ),  # 3 points vertical offset or -12 if negative\n        textcoords=\"offset points\",\n        ha=\"center\",\n        va=\"bottom\",\n    )\n\n# Set the y-axis label and title\nax.set_ylabel(ylabel_value)\nax.set_title(title)\n\n# Format y-axis as index values\nformatter = FuncFormatter(lambda y, _: f\"{int(y)}\")\nax.yaxis.set_major_formatter(formatter)\n\n# Remove x-axis line and ticks\nax.spines[\"bottom\"].set_visible(False)\nax.xaxis.set_ticks([])\n\n# Set grid\nax.grid(True, axis=\"y\", linestyle=\"--\", linewidth=0.7, alpha=0.7)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_23.pdf', bbox_inches='tight')"}
{"idx": "box_22", "instruction": "There is a reference image for you and I also have a set of data about annual population growth rates for different countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The annual population growth rates data is as follows:\n# Annual population growth rates (%)\ndata = [\n    np.array([0.93, 1.32, 1.05, 0.85, 1.19, 1.33, 1.22, 1.29, 1.01, 1.09]),\n    np.array([0.73, 0.86, 0.67, 0.31, 1.07, 0.84, 0.35, 1.19, 0.64, 1.02]),\n    np.array([0.98, 0.83, 1.08, 0.49, 0.9, 0.63, 0.58, 0.66, 0.72, 0.81]),\n    np.array([1.09, 1.82, 1.66, 0.96, 2.02, 2.16, 1.91, 1.44, 1.13, 1.87]),\n    np.array([1.18, 1.67, 1.36, 1.59, 1.41, 1.51, 1.3, 1.84, 1.34, 1.42]),\n]\n# Country labels\nlabels = [\"Country A\", \"Country B\", \"Country C\", \"Country D\", \"Country E\"]\n# Label of y axis\nylabel_value = \"Annual Population Growth Rate (%)\"\n\n# Label of y axis\nxlabel_value = \"Countries\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the boxplots representing annual population growth rates (%) for different countries\ndata = [\n    np.array([0.93, 1.32, 1.05, 0.85, 1.19, 1.33, 1.22, 1.29, 1.01, 1.09]),\n    np.array([0.73, 0.86, 0.67, 0.31, 1.07, 0.84, 0.35, 1.19, 0.64, 1.02]),\n    np.array([0.98, 0.83, 1.08, 0.49, 0.9, 0.63, 0.58, 0.66, 0.72, 0.81]),\n    np.array([1.09, 1.82, 1.66, 0.96, 2.02, 2.16, 1.91, 1.44, 1.13, 1.87]),\n    np.array([1.18, 1.67, 1.36, 1.59, 1.41, 1.51, 1.3, 1.84, 1.34, 1.42]),\n]\n\n# Country labels for the x-axis\nlabels = [\"Country A\", \"Country B\", \"Country C\", \"Country D\", \"Country E\"]\n\n# Axes Limits and Labels\nylim_values = [-0.5, 2.5]\nxlabel_value = \"Countries\"\nylabel_value = \"Annual Population Growth Rate (%)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the boxplot\nfig, ax = plt.subplots(\n    figsize=(6, 5)\n)  # Adjusting figure size as per the dimensions provided\nbp = ax.boxplot(\n    data,\n    labels=labels,\n    patch_artist=True,\n    boxprops=dict(facecolor=\"#3171ad\", color=\"black\"),\n    showfliers=False,\n    showcaps=False,\n    medianprops=dict(color=\"black\"),\n    whiskerprops=dict(color=\"black\", linestyle=\"-\", linewidth=0),\n    capprops=dict(color=\"black\", linestyle=\"-\"),\n)\n\nax.set_ylim(ylim_values)\n# Set labels\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\n\n# Set grid\nax.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_22.pdf', bbox_inches='tight')"}
{"idx": "graph_1", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# The node colors and edge labels are as follows:\n# Nodes with colors\nnodes = {\n    0: \"purple\",\n    1: \"green\",\n    2: \"olive\",\n    3: \"brown\",\n    4: \"blue\",\n    5: \"lime\",\n    6: \"darkgreen\",\n}\n# Edges with labels\nedges = [(0, 2, \"2\"), (1, 5, \"44\"), (2, 5, \"91\"), \n         (3, 1, \"57\"), (4, 2, \"59\"), (5, 6, \"97\")]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add nodes with their respective colors\nnodes = {\n    0: \"purple\",\n    1: \"green\",\n    2: \"olive\",\n    3: \"brown\",\n    4: \"blue\",\n    5: \"lime\",\n    6: \"darkgreen\",\n}\nfor node, color in nodes.items():\n    G.add_node(node, color=color)\n\n# Add edges with labels representing network connections\nedges = [(0, 2, \"2\"), (1, 5, \"44\"), (2, 5, \"91\"), \n         (3, 1, \"57\"), (4, 2, \"59\"), (5, 6, \"97\")]\nfor u, v, label in edges:\n    G.add_edge(u, v, label=label)\n\n# Define node positions in a circular layout\npos = nx.circular_layout(G)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.subplots(figsize=(8, 8))\n\n# Draw nodes with color attribute\nnode_colors = [G.nodes[node][\"color\"] for node in G.nodes]\nnx.draw_networkx_nodes(G, pos, node_color=node_colors)\n\n# Draw edges with labels\nnx.draw_networkx_edges(G, pos, arrows=True)\nedge_labels = {(u, v): G[u][v][\"label\"] for u, v in G.edges}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\n\n# Remove axis\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('graph_1.pdf', bbox_inches='tight')"}
{"idx": "line_35", "instruction": "There is a reference image for you and I also have a set of data about the relationship between humidity levels and wind speed. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data and labels are as follows:\n# Humidity levels\nhumidity_level = [10 ** (1), 10 ** (1.2), 10 ** (1.5), 10 ** (1.8), 10 ** (2), 10 ** (2.3)]\n# Wind speed ratio\nwind_speed_ratio = [5, 5.5, 6.5, 7, 10, 15]\n# Label of x axis\nxlabel_value = \"Humidity Level (%)\"\n# Label of y axis\nylabel_value = \"Wind Speed (km/h)\"\n# x_humidity_level_10 = 10 ** (1.3)\nlabel_humidity_level_10 = \"Humidity Level 10%\"\nx_humidity_level_20 = 10 ** (1.4)\nlabel_humidity_level_20 = \"Humidity Level 20%\"\nx_humidity_level_50 = 10 ** (1.7)\nlabel_humidity_level_50 = \"Humidity Level 50%\"\nx_humidity_level_80 = 10 ** (1.9)\nlabel_humidity_level_80 = \"Humidity Level 80%\"\nlabel_empirical_relat_wind = \"Empirical Relationship\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nhumidity_level = np.array(\n    [10 ** (1), 10 ** (1.2), 10 ** (1.5), 10 ** (1.8), 10 ** (2), 10 ** (2.3)]\n)\nwind_speed_ratio = np.array([5, 5.5, 6.5, 7, 10, 15])\n\n# Labels and Plot Types\nx_humidity_level_10 = 10 ** (1.3)\nlabel_humidity_level_10 = \"Humidity Level 10%\"\nx_humidity_level_20 = 10 ** (1.4)\nlabel_humidity_level_20 = \"Humidity Level 20%\"\nx_humidity_level_50 = 10 ** (1.7)\nlabel_humidity_level_50 = \"Humidity Level 50%\"\nx_humidity_level_80 = 10 ** (1.9)\nlabel_humidity_level_80 = \"Humidity Level 80%\"\nlabel_empirical_relat_wind = \"Empirical Relationship\"\n\n# Axes Limits and Labels\nyticks_values = np.arange(0, 16, 2)\nylim_values = [0, 16]\nxlabel_value = \"Humidity Level (%)\"\nylabel_value = \"Wind Speed (km/h)\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Add vertical lines\nax.axvline(\n    x=x_humidity_level_10, color=\"#d86810\", linestyle=\"--\", label=label_humidity_level_10, linewidth=3\n)\nax.axvline(\n    x=x_humidity_level_20, color=\"#029e73\", linestyle=\"--\", label=label_humidity_level_20, linewidth=3\n)\nax.axvline(\n    x=x_humidity_level_50, color=\"#de8f05\", linestyle=\"--\", label=label_humidity_level_50, linewidth=3\n)\nax.axvline(\n    x=x_humidity_level_80, color=\"#cc78bc\", linestyle=\"--\", label=label_humidity_level_80, linewidth=3\n)\n\n# Plot the empirical relationship line\nax.plot(\n    humidity_level,\n    wind_speed_ratio,\n    label=label_empirical_relat_wind,\n    color=\"#0173b2\",\n    marker=\"o\",\n    markersize=8,\n    mec=\"white\",\n    linewidth=3,\n)\n\n# Set yticks\nplt.yticks(yticks_values, fontsize=10)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\n\n# Customize the plot\nax.set_xscale(\"log\")\nax.set_xlabel(xlabel_value, fontsize=16)\nax.set_ylabel(ylabel_value, fontsize=16)\n\n# Remove x-axis minor ticks\nax.tick_params(axis=\"x\", which=\"minor\", bottom=False)\n\n# Add grid for major ticks only\nax.grid(True, which=\"major\", linestyle=\"-\", linewidth=0.5)\n\n# Add legend\nax.legend(loc=\"upper left\", bbox_to_anchor=(0, 1), fontsize=13)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()  # Adjust layout to not cut off legend\nplt.savefig('line_35.pdf', bbox_inches='tight')"}
{"idx": "violin_2", "instruction": "There is a reference image for you and I also have a set of data about scores for different categories across two sessions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:The categories are \"Speed\", \"Strength\", and \"Endurance\".\n# Data\n data_1 = [[0.91, 0.91, 0.49], [0.6, 0.99, 0.35], [0.88, 0.74, 0.01], [0.91, 0.84, 0.3], [0.73, 0.99, 0.29], [0.9, 0.96, 0.15], [0.8, 1.0, 0.24], [0.66, 0.94, 0.17], [0.83, 0.96, 0.26], [0.36, 0.93, 0.34]]\ndata_2 = [[0.91, 0.91, 0.49], [0.6, 0.99, 0.35], [0.88, 0.74, 0.01], [0.91, 0.84, 0.3], [0.73, 0.99, 0.29], [0.9, 0.96, 0.15], [0.8, 1.0, 0.24], [0.66, 0.94, 0.17], [0.83, 0.96, 0.26], [0.36, 0.93, 0.34]]\n# Width\nwidth = 0.02\n# Axes Labels\nylabel_value = \"Score\"\n# Labels\nlabels = [\"Session 1\", \"Session 2\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic the picture provided\ndata_1 = np.array([[0.91, 0.91, 0.49], [0.6, 0.99, 0.35], [0.88, 0.74, 0.01], [0.91, 0.84, 0.3], [0.73, 0.99, 0.29], [0.9, 0.96, 0.15], [0.8, 1.0, 0.24], [0.66, 0.94, 0.17], [0.83, 0.96, 0.26], [0.36, 0.93, 0.34]])\ndata_2 = np.array([[0.91, 0.91, 0.49], [0.6, 0.99, 0.35], [0.88, 0.74, 0.01], [0.91, 0.84, 0.3], [0.73, 0.99, 0.29], [0.9, 0.96, 0.15], [0.8, 1.0, 0.24], [0.66, 0.94, 0.17], [0.83, 0.96, 0.26], [0.36, 0.93, 0.34]])\n\ncategories = [\"Speed\", \"Strength\", \"Endurance\"]\nviolin_width = 0.02\n\n# Axes Limits and Labels\nylabel_value = \"Score\"\nlabels = [\"Session 1\", \"Session 2\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nfig, ax = plt.subplots(figsize=(6, 6))  # Use the subplots function to create a figure and single axes\n\n# Define the categories and the colors for each group\ncolors = [\"#f0b7b0\", \"#b8cce1\"]\n\n# The scaling factor is used to ensure the violins do not overlap\nscaling_factor = 1\n\n# Define offset to separate the half violin plots in the single Axes object\noffsets = [-0.05, 0, 0.05]\n\n# Plot the half-violins with an offset\nfor i, category in enumerate(categories):\n    offset = offsets[i]\n\n    # Plot data for Session 1\n    kde_data = gaussian_kde(data_1[:, i])\n    kde_x = np.linspace(0, 1, 300)\n    kde_data_y = kde_data(kde_x)\n    kde_data_y_scaled = kde_data_y / max(kde_data_y) * violin_width\n    ax.fill_betweenx(\n        kde_x,\n        kde_data_y_scaled * scaling_factor + offset,\n        offset,\n        color=colors[0],\n        edgecolor=\"#9e8d8b\",\n    )\n\n    # Plot data for Session 2\n    kde_data_memory = gaussian_kde(data_2[:, i])\n    kde_data_memory_y = kde_data_memory(kde_x)\n    kde_data_memory_y_scaled = kde_data_memory_y / max(kde_data_memory_y) * violin_width\n    ax.fill_betweenx(\n        kde_x,\n        offset,\n        -kde_data_memory_y_scaled * scaling_factor + offset,\n        color=colors[1],\n        edgecolor=\"#9e8d8b\",\n    )\n    ax.text(\n        offset, -0.1, category, ha=\"center\", va=\"top\"\n    )  # Add the category label below the violin plot\n\n# Set x and y axis labels and limits\nax.set_xlim(\n    min(offsets) - scaling_factor * violin_width - 0.01,\n    max(offsets) + scaling_factor * violin_width + 0.01,\n)\ny_margin = 0.01  # Adding 1% margin at top and bottom of the y-axis\ny_min, y_max = ax.get_ylim()\nax.set_ylim(y_min - y_margin, y_max + y_margin)\nax.set_ylabel(ylabel_value)\nax.set_xticks([])  # Remove x-ticks as they are not meaningful here\n\n# Adjust the legend\nhandles = [\n    plt.Rectangle((0, 0), 1, 1, color=color, edgecolor=\"#9e8d8b\") for color in colors\n]\nax.legend(handles, labels, loc=\"lower left\", bbox_to_anchor=(0.6, -0.2), ncol=1)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('violin_2.pdf', bbox_inches='tight')"}
{"idx": "area_1", "instruction": "There is a reference image for you and I also have a set of data about monthly temperatures for four cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The temperature data is as follows:\n# Months\nx = [1, 2, 3, 4, 5]\n# Temperatures\ny1 = [200, 450, 650, 800, 900] # New York Temperature\ny2 = [150, 300, 500, 650, 750] # Los Angeles Temperature\ny3 = [100, 250, 400, 500, 600] # Chicago Temperature\ny4 = [50, 200, 300, 400, 500]  # Miami Temperature\n# Label of x axis\nxlabel_values = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]\n# Label of y axis\nylabel_values = [0, 200, 400, 600, 800, 1000]\n# Labels for legend\nlabel_activity_net_mIoU = \"New York Temperature\"\nlabel_breakfast_mof = \"Los Angeles Temperature\"\nlabel_activity_net_cider = \"Chicago Temperature\"\nlabel_qvhighlights_map = \"Miami Temperature\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nx = [1, 2, 3, 4, 5]\ny1 = [200, 450, 650, 800, 900]\ny2 = [150, 300, 500, 650, 750]\ny3 = [100, 250, 400, 500, 600]\ny4 = [50, 200, 300, 400, 500]\n\n# Labels for legend\nlabel_activity_net_mIoU = \"New York Temperature\"\nlabel_breakfast_mof = \"Los Angeles Temperature\"\nlabel_activity_net_cider = \"Chicago Temperature\"\nlabel_qvhighlights_map = \"Miami Temperature\"\n\n# Plot limits\nxlim_values = (1, 5)\nylim_values = (0, 1000)\n\n# Axis labels\nxlabel_values = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]\nylabel_values = [0, 200, 400, 600, 800, 1000]\n\n# Axis ticks\nxticks_values = x\nyticks_values = [0, 200, 400, 600, 800, 1000]\n\n# Horizontal line value\naxhline_value = 750\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(9, 8))  # Adjusting figure size to match original image dimensions\nplt.plot(\n    x,\n    y1,\n    \"o-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#eec7bb\",\n    markeredgecolor=\"#d77659\",\n    markersize=12,\n    color=\"#d77659\",\n    label=label_activity_net_mIoU,\n)\nplt.plot(\n    x,\n    y2,\n    \"o-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#f5dbc3\",\n    markeredgecolor=\"#e8a66c\",\n    markersize=12,\n    color=\"#e8a66c\",\n    label=label_breakfast_mof,\n)\nplt.plot(\n    x,\n    y3,\n    \"o-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#b4d7d1\",\n    markeredgecolor=\"#509b8d\",\n    markersize=12,\n    color=\"#509b8d\",\n    label=label_activity_net_cider,\n)\nplt.plot(\n    x,\n    y4,\n    \"o-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#abb5ba\",\n    markeredgecolor=\"#2e4552\",\n    markersize=12,\n    color=\"#2e4552\",\n    label=label_qvhighlights_map,\n)\n\n# Filling the area under the curves\nplt.fill_between(x, y1, y2, color=\"#eec7bb\", alpha=1)\nplt.fill_between(x, y2, y3, color=\"#f5dbc3\", alpha=1)\nplt.fill_between(x, y3, y4, color=\"#b4d7d1\", alpha=1)\nplt.fill_between(x, y4, color=\"#abb5ba\", alpha=1)\n\n# Adding a horizontal dashed line at y=axhline_value\nplt.axhline(axhline_value, color=\"black\", linestyle=\"dotted\")\n\n# Setting the x-axis\u3001y-axis limits\nplt.xlim(*xlim_values)\nplt.ylim(*ylim_values)\n\n# Setting the x-axis tick labels\nplt.xticks(xticks_values, xlabel_values)\nplt.yticks(yticks_values, ylabel_values)\n\n# Adding a legend\nplt.legend(loc=\"lower center\", ncol=4, bbox_to_anchor=(0.5, -0.1), frameon=False)\nplt.gca().tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('area_1.pdf', bbox_inches='tight')"}
{"idx": "bar_17", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency for different car models across various driving conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The fuel efficiency data is as follows:\n# Driving Conditions\nconditions = [\"City\", \"Highway\", \"Combined\", \"Off-road\", \"Average\"]\n# Fuel Efficiency (MPG) for different car models\nSedan = [30.5, 40.6, 35.3, 20.1, 31.6]\nSUV = [22.3, 28.8, 25.5, 15.4, 23.0]\nTruck = [18.4, 25.0, 21.5, 14.2, 19.8]\nHybrid = [50.2, 45.6, 48.0, 30.8, 43.7]\nElectric = [99.0, 120.3, 110.0, 85.8, 103.8]\n# Label of x axis\nxlabel = \"Driving Conditions\"\n# Label of y axis\nylabel = \"Fuel Efficiency (MPG)\"\n# Title\ntitle = \"Fuel Efficiency of Different Car Models Across Various Driving Conditions\"\n# Legend labels\nSedan_label = \"Sedan\"\nSUV_label = \"SUV\"\nTruck_label = \"Truck\"\nHybrid_label = \"Hybrid\"\nElectric_label = \"Electric\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nconditions = [\"City\", \"Highway\", \"Combined\", \"Off-road\", \"Average\"]\nSedan = [30.5, 40.6, 35.3, 20.1, 31.6]\nSUV = [22.3, 28.8, 25.5, 15.4, 23.0]\nTruck = [18.4, 25.0, 21.5, 14.2, 19.8]\nHybrid = [50.2, 45.6, 48.0, 30.8, 43.7]\nElectric = [99.0, 120.3, 110.0, 85.8, 103.8]\n\n# Plot labels\nxlabel = \"Driving Conditions\"\nylabel = \"Fuel Efficiency (MPG)\"\ntitle = \"Fuel Efficiency of Different Car Models Across Various Driving Conditions\"\nbarWidth = 0.16\nxticks = [r + barWidth * 2 for r in range(len(Sedan))]\nxtickslabel = conditions\nyticks = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130]\nylim = (10, 130)\n\n# Legend labels\nSedan_label = \"Sedan\"\nSUV_label = \"SUV\"\nTruck_label = \"Truck\"\nHybrid_label = \"Hybrid\"\nElectric_label = \"Electric\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(10, 4))\n\n# # Bar width\n# barWidth = 0.16\n\n# Set position of bar on X axis\nr1 = np.arange(len(conditions))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\nr5 = [x + barWidth for x in r4]\n\n# Make the plot\nplt.bar(\n    r1,\n    Sedan,\n    color=\"#b4cbda\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=Sedan_label,\n)\nplt.bar(\n    r2,\n    SUV,\n    color=\"#44739d\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=SUV_label,\n)\nplt.bar(\n    r3,\n    Truck,\n    color=\"#bad39b\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=Truck_label,\n)\nplt.bar(\n    r4,\n    Hybrid,\n    color=\"#569046\",\n    width=barWidth,\n    edgecolor=\"white\",\n    label=Hybrid_label,\n)\nplt.bar(\n    r5, Electric, color=\"#e4a9a7\", width=barWidth, edgecolor=\"white\", label=Electric_label\n)\n\n# Add labels\nfor i in range(len(conditions)):\n    plt.text(\n        r1[i],\n        Sedan[i] + 1,\n        str(Sedan[i]),\n        ha=\"center\",\n        fontsize=6,\n        rotation=45,\n    )\n    plt.text(\n        r2[i],\n        SUV[i] + 1,\n        str(SUV[i]),\n        ha=\"center\",\n        fontsize=6,\n        rotation=45,\n    )\n    plt.text(\n        r3[i],\n        Truck[i] + 1,\n        str(Truck[i]),\n        ha=\"center\",\n        fontsize=6,\n        rotation=45,\n    )\n    plt.text(\n        r4[i],\n        Hybrid[i] + 1,\n        str(Hybrid[i]),\n        ha=\"center\",\n        fontsize=6,\n        rotation=45,\n    )\n    plt.text(\n        r5[i], Electric[i] + 1, str(Electric[i]), ha=\"center\", fontsize=6, rotation=45\n    )\n\n# Add xticks on the middle of the group bars\nplt.xlabel(xlabel, fontsize=12)\nplt.xticks(xticks, xtickslabel)\n\n# Create legend & Show graphic\nplt.ylabel(ylabel, fontsize=12)\nplt.ylim(ylim)\nplt.yticks(yticks)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.2), frameon=False, ncol=5)\n\nplt.tick_params(axis=\"x\", which=\"both\", length=0)\nplt.tick_params(axis=\"y\", color=\"gray\")\n\n# Add y grid\nplt.gca().yaxis.grid(True)\nplt.gca().set_axisbelow(True)\n\n# Remove top and right borders\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"bottom\"].set_visible(False)\nplt.gca().spines[\"left\"].set_color(\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_17.pdf', bbox_inches='tight')"}
{"idx": "line_1", "instruction": "There is a reference image for you and I also have a set of data about heart health scores across different age groups and activities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The heart health data is as follows:\n# Age groups\nage_groups = [20, 25, 30, 35, 40, 50, 65]\n# Heart health scores for different activities\nyoga = [60, 65, 62, 70, 68, 75, 72]\nrunning = [70, 72, 78, 80, 75, 85, 82]\ncycling = [65, 68, 73, 70, 77, 75, 80]\nswimming = [75, 70, 85, 80, 82, 87, 90]\n# Label of x axis\nxlabel_value = \"Age\"\n# Label of y axis\nylabel_value = \"Heart Health Score\"\n# Labels\n label_yoga = \"Yoga\"\nlabel_running = \"Running\"\nlabel_cycling = \"Cycling\"\nlabel_swimming = \"Swimming\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nage_groups = [20, 25, 30, 35, 40, 50, 65]\nyoga = [60, 65, 62, 70, 68, 75, 72]\nrunning = [70, 72, 78, 80, 75, 85, 82]\ncycling = [65, 68, 73, 70, 77, 75, 80]\nswimming = [75, 70, 85, 80, 82, 87, 90]\n\n# Labels and Plot Types\nlabel_yoga = \"Yoga\"\nlabel_running = \"Running\"\nlabel_cycling = \"Cycling\"\nlabel_swimming = \"Swimming\"\n\n# Axes Limits and Labels\nxlim_values = [20, 65]\nylim_values = [50, 100]\nxlabel_value = \"Age\"\nylabel_value = \"Heart Health Score\"\nxticks_values = np.arange(20, 66, 10)\nyticks_values = np.arange(50, 101, 10)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nplt.figure(figsize=(8, 6))  # Adjusting figure size to match original image dimensions\nplt.plot(\n    age_groups,\n    yoga,\n    \"-o\",\n    label=label_yoga,\n    color=\"#1f77b4\",\n    clip_on=False,\n    zorder=10,\n)\nplt.plot(\n    age_groups,\n    running,\n    \"-^\",\n    label=label_running,\n    color=\"#ff7f0e\",\n    clip_on=False,\n    zorder=10,\n)\nplt.plot(\n    age_groups,\n    cycling,\n    \"-x\",\n    label=label_cycling,\n    color=\"#2ca02c\",\n    clip_on=False,\n    zorder=10,\n)\nplt.plot(\n    age_groups,\n    swimming,\n    \"-x\",\n    label=label_swimming,\n    color=\"#d62728\",\n    clip_on=False,\n    zorder=10,\n)\n\n# Set y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\nplt.xticks(xticks_values)\nplt.xlim(xlim_values)\n\n# Adding grid, legend, and labels\nplt.grid(True)\nplt.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.08), ncol=4, frameon=False)\nplt.xlabel(xlabel_value)\nplt.ylabel(ylabel_value)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig(\"line_1.pdf\", bbox_inches=\"tight\")"}
{"idx": "line_51", "instruction": "There is a reference image for you and I also have a set of data about the growth and trends in technology over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Time in years\nt = [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016,]\n\n# Internet Usage\ninternet_usage = [5.8, 18.0, 65.0, 72.0, 73.5, 72.5, 69.0, 65.0, 61.0]\n# Label for legend\nlabel_internet_usage = \"Internet Usage\"\n# Title for the chart\ntitle_internet_usage = \"Growth in Internet Usage\"\n# Label for y-axis\nylabel_value_usage = \"Percentage (%)\"\n\n# Mobile Device Adoption\nmobile_device_adoption = [1.2, 10.0, 35.0, 65.0, 80.0, 92.0, 92.5, 92.8, 93.0]\n# Label for legend\nlabel_mobile_device_adoption = \"Mobile Device Adoption\"\n# Title for the chart\ntitle_mobile_device_adoption = \"Rise of Mobile Device Adoption\"\n# Label for y-axis\nylabel_value_adoption = \"Percentage (%)\"\n\n# Software Development Jobs\nsoftware_development_jobs = [0.35, 0.55, 1.10,  2.02, 2.03, 2.00, 1.90, 1.80, 1.70]\n# Label for legend\nlabel_software_development_jobs = \"Software Development Jobs\"\n# Title for the chart\ntitle_software_development_jobs = \"Increase in Software Development Jobs\"\n# Label for y-axis\nylabel_value_jobs = \"Number of Jobs (Millions)\"\n\n# Tech Investment Growth\ntech_investment_growth = [50, 100, 210, 360, 520, 620, 670, 690, 720]\n# Label for legend\nlabel_tech_investment_growth = \"Tech Investment Growth\"\n# Title for the chart\ntitle_tech_investment_growth = \"Growth of Tech Investments\"\n# Label for y-axis\nylabel_value_investment = \"Investment (Billion USD)\"\n\n# Label for x-axis for all charts\nxlabel_value = \"Year\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 12.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Time in years\nt = [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016,]\n\n# Data representing different technology trends with varied growth speeds\ninternet_usage = [5.8, 18.0, 65.0, 72.0, 73.5, 72.5, 69.0, 65.0, 61.0]  # in percentage, rise then fall\nmobile_device_adoption = [1.2, 10.0, 35.0, 65.0, 80.0, 92.0, 92.5, 92.8, 93.0]  # in percentage, rapid then steady rise\nsoftware_development_jobs = [0.35, 0.55, 1.10,  2.02, 2.03, 2.00, 1.90, 1.80, 1.70]  # in millions, rapid rise then fall\ntech_investment_growth = [50, 100, 210, 360, 520, 620, 670, 690, 720]  # in billions USD, rapid then slow rise\n# Labels for legend\nlabel_internet_usage = \"Internet Usage\"\nlabel_mobile_device_adoption = \"Mobile Device Adoption\"\nlabel_software_development_jobs = \"Software Development Jobs\"\nlabel_tech_investment_growth = \"Tech Investment Growth\"\n\n# Plot configuration\nxlim_values = (2000, 2016)\nylim_values_usage_adoption = (0, 100)\nylim_values_jobs = (0, 2.5)\nylim_values_investment = (0, 2000)\n\nxlabel_value = \"Year\"\nylabel_value_usage = \"Percentage (%)\"\nylabel_value_adoption = \"Percentage (%)\"\nylabel_value_jobs = \"Number of Jobs (Millions)\"\nylabel_value_investment = \"Investment (Billion USD)\"\n\ntitle_internet_usage = \"Growth in Internet Usage\"\ntitle_mobile_device_adoption = \"Rise of Mobile Device Adoption\"\ntitle_software_development_jobs = \"Increase in Software Development Jobs\"\ntitle_tech_investment_growth = \"Growth of Tech Investments\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axs = plt.subplots(4, 1, figsize=(6, 12))\n\naxs[0].plot(t, internet_usage, label=label_internet_usage, color=\"magenta\")\naxs[0].set_xlim(*xlim_values)\naxs[0].set_ylim(*ylim_values_usage_adoption)\naxs[0].set_title(title_internet_usage, y=1.1)\naxs[0].set_xlabel(xlabel_value)\naxs[0].set_ylabel(ylabel_value_usage)\n\naxs[1].plot(t, mobile_device_adoption, label=label_mobile_device_adoption, color=\"green\")\naxs[1].set_xlim(*xlim_values)\naxs[1].set_ylim(*ylim_values_usage_adoption)\naxs[1].set_title(title_mobile_device_adoption, y=1.1)\naxs[1].set_xlabel(xlabel_value)\naxs[1].set_ylabel(ylabel_value_adoption)\n\naxs[2].plot(t, software_development_jobs, label=label_software_development_jobs, color=\"blue\")\naxs[2].set_xlim(*xlim_values)\naxs[2].set_ylim(*ylim_values_jobs)\naxs[2].set_title(title_software_development_jobs, y=1.1)\naxs[2].set_xlabel(xlabel_value)\naxs[2].set_ylabel(ylabel_value_jobs)\n\naxs[3].plot(t, tech_investment_growth, label=label_tech_investment_growth, color=\"red\")\naxs[3].set_xlim(*xlim_values)\naxs[3].set_ylim(*ylim_values_investment)\naxs[3].set_title(title_tech_investment_growth, y=1.1)\naxs[3].set_xlabel(xlabel_value)\naxs[3].set_ylabel(ylabel_value_investment)\n\nfor ax in axs.flat:\n    ax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.15), frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_51.pdf', bbox_inches='tight')"}
{"idx": "radar_11", "instruction": "There is a reference image for you and I also have a set of data about the performance of two athletes across different categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Categories for comparison\ncategories = [\"Speed\", \"Strength\", \"Endurance\", \"Agility\", \"Technique\", \"Strategy\", \"Stamina\"]\n# Performance values for Athlete A\nvalues1 = [7, 8, 6, 4.5, 9, 8.5, 7]\n# Performance values for Athlete B\nvalues2 = [8.5, 3, 7, 8, 8.5, 6.5, 8]\n# Labels for the lines representing each athlete\nline_label1 = \"Athlete A\"\nline_label2 = \"Athlete B\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 4.0, "height": 4.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for the radar chart\ncategories = [\n    \"Speed\",\n    \"Strength\",\n    \"Endurance\",\n    \"Agility\",\n    \"Technique\",\n    \"Strategy\",\n    \"Stamina\",\n]\nvalues1 = [7, 8, 6, 4.5, 9, 8.5, 7]  # Values for Athlete A\nvalues2 = [8.5, 3, 7, 8, 8.5, 6.5, 8]  # Values for Athlete B\n\n# Number of variables\nN = len(categories)\n# Compute angle for each category\nangles = [n / float(N) * 2 * np.pi for n in range(N)]\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nangles += angles[:1]\n\n# Extracted variables\nline_label1 = \"Athlete A\"\nline_label2 = \"Athlete B\"\nxticks = angles[:-1]\nxtickslabel = categories\nyticks = [0, 2, 4, 6, 8, 10]\nytickslabel = [\"0\", \"2\", \"4\", \"6\", \"8\", \"10\"]\nylim = (0, 10)\n\nlegend_loc = \"lower center\"\nlegend_bbox_to_anchor = (0.5, 1.2)\nlegend_ncol = 2\nlegend_frameon = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialize the spider plot\nfig, ax = plt.subplots(figsize=(4, 4), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels with increased padding\nplt.xticks(xticks, xtickslabel, color=\"black\", size=10)\nax.tick_params(pad=20)  # Increase the distance of the label from the axis\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, ytickslabel, color=\"black\", size=7)\nplt.ylim(ylim)\n\n# Plot data\nax.plot(angles, values1, linewidth=1, linestyle=\"solid\", label=line_label1, color=\"#4ca730\")\nax.fill(angles, values1, \"green\", alpha=0.2)\n\nax.plot(\n    angles, values2, linewidth=1, linestyle=\"solid\", label=line_label2, color=\"#81cbac\"\n)\nax.fill(angles, values2, \"lightgreen\", alpha=0.2)\n\n# Add legend\nplt.legend(loc=legend_loc, bbox_to_anchor=legend_bbox_to_anchor, ncol=legend_ncol, frameon=legend_frameon)\n\n# Set the background color inside the radar chart to white\nax.set_facecolor(\"white\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('radar_11.pdf', bbox_inches='tight')"}
{"idx": "area_2", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Time steps\ntime_step = np.linspace(0, 4, 40)\n# RSA data for Temperature, Pressure, and Humidity\nrsa_gt = np.log(time_step + 1) * 10\nrsa_drs = np.log(time_step + 1) * 8\nrsa_pr = np.log(time_step + 1) * 5\n# CR data for Temperature, Pressure, and Humidity\ncr_gt = 0.5 + 0.5 * np.cos(time_step)\ncr_drs = 0.5 + 0.4 * np.cos(0.7 * time_step)\ncr_pr = 0.5 + 0.3 * np.cos(0.5 * time_step)\n# Labels for RSA and CR data\nrsa_ylabel = \"RSA (Log Scale)\"\ncr_xlabel = \"Time Step (hours)\"\ncr_ylabel = \"CR (Cosine)\"\n# Extracted variables\nrsa_gt_label = \"Temperature\"\nrsa_drs_label = \"Pressure\"\nrsa_pr_label = \"Humidity\"\ncr_gt_label = \"Temperature\"\ncr_drs_label = \"Pressure\"\ncr_pr_label = \"Humidity\"\nlegend_labels = [\"Temperature\", \"Pressure\", \"Humidity\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.lines as mlines\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\n# Updated data\ntime_step = np.linspace(0, 4, 40)\nrsa_gt = np.log(time_step + 1) * 10  # Example transformation\nrsa_drs = np.log(time_step + 1) * 8  # Example transformation\nrsa_pr = np.log(time_step + 1) * 5  # Example transformation\ncr_gt = 0.5 + 0.5 * np.cos(time_step)  # Example transformation\ncr_drs = 0.5 + 0.4 * np.cos(0.7 * time_step)  # Example transformation\ncr_pr = 0.5 + 0.3 * np.cos(0.5 * time_step)  # Example transformation\n\n# Extracted variables\nrsa_gt_label = \"Temperature\"\nrsa_drs_label = \"Pressure\"\nrsa_pr_label = \"Humidity\"\ncr_gt_label = \"Temperature\"\ncr_drs_label = \"Pressure\"\ncr_pr_label = \"Humidity\"\nrsa_ylim = [0, 17]\nrsa_xlim = [0, 4]\nrsa_yticks = [0, 3, 6, 9, 12, 15]\nrsa_xticks = [0, 1, 2, 3, 4]\nrsa_ylabel = \"RSA (Log Scale)\"\ncr_ylim = [0, 1]\ncr_xlim = [0, 4]\ncr_yticks = [0, 0.2, 0.4, 0.6, 0.8, 1]\ncr_xticks = [0, 1, 2, 3, 4]\ncr_xlabel = \"Time Step (hours)\"\ncr_ylabel = \"CR (Cosine)\"\nlegend_labels = [\"Temperature\", \"Pressure\", \"Humidity\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10))\n\n# Plot RSA\nax1.plot(time_step, rsa_gt, \"o-\", color=\"#377e22\", label=rsa_gt_label)\nax1.fill_between(time_step, rsa_gt, color=\"#ebf2e8\")\nax1.plot(time_step, rsa_drs, \"s-\", color=\"#020ddc\", label=rsa_drs_label)\nax1.fill_between(time_step, rsa_drs, color=\"#d3dbe4\")\nax1.plot(time_step, rsa_pr, \"^-\", color=\"#bd2b25\", label=rsa_pr_label)\nax1.fill_between(time_step, rsa_pr, color=\"#cdc6cf\")\nax1.set_ylim(rsa_ylim)\nax1.set_xlim(rsa_xlim)\nax1.set_yticks(rsa_yticks)\nax1.set_xticks(rsa_xticks)\nax1.set_ylabel(rsa_ylabel)\nax1.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Plot CR\nax2.plot(time_step, cr_gt, \"o-\", color=\"#377e22\", label=cr_gt_label)\nax2.fill_between(time_step, cr_gt, color=\"#ebf2e8\")\nax2.plot(time_step, cr_drs, \"s-\", color=\"#020ddc\", label=cr_drs_label)\nax2.fill_between(time_step, cr_drs, color=\"#d3dbe4\")\nax2.plot(time_step, cr_pr, \"^-\", color=\"#bd2b25\", label=cr_pr_label)\nax2.fill_between(time_step, cr_pr, color=\"#cdc6cf\")\nax2.set_ylim(cr_ylim)\nax2.set_xlim(cr_xlim)\nax2.set_yticks(cr_yticks)\nax2.set_xticks(cr_xticks)\nax2.set_xlabel(cr_xlabel)\nax2.set_ylabel(cr_ylabel)\nax2.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Create custom legend\ngreen_line = mlines.Line2D([], [], color=\"green\", marker=\"o\", markersize=6, label=legend_labels[0])\nblue_line = mlines.Line2D([], [], color=\"blue\", marker=\"s\", markersize=6, label=legend_labels[1])\nred_line = mlines.Line2D([], [], color=\"red\", marker=\"^\", markersize=6, label=legend_labels[2])\nplt.legend(handles=[green_line, blue_line, red_line], loc=\"lower center\", bbox_to_anchor=(0.5, -0.2), ncol=6, frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('area_2.pdf', bbox_inches='tight')"}
{"idx": "bar_22", "instruction": "There is a reference image for you and I also have a set of data about climate change models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The climate change data is as follows:\n# CO2 levels in ppm\nco2_levels = [280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480]\n# Solar activity index\nsolar_activity = [0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25]\n# Volcanic activity index\nvolcanic_activity = [-150.0, -120.0, -90.0, -60.0, -30.0, 0.0, 30.0, 60.0, 90.0, 120.0, 150.0]\n# Rate of temperature change for Climate Model 1 and Model 2\ntemp_change_co2_model1 = [-0.12, -0.11, -0.09, -0.06, -0.03, 0.02, 0.04, 0.06, 0.09, 0.13, 0.17]  # \u00b0C per decade\ntemp_change_solar_model1 = [0.13, 0.17, 0.23, 0.27, 0.32, 0.35, 0.38, 0.42, 0.45, 0.48, 0.52]  # \u00b0C per decade\ntemp_change_volcanic_model1 = [-0.28, -0.23, -0.19, -0.14, -0.08, -0.03, 0.01, 0.06, 0.12, 0.17, 0.21]  # \u00b0C per decade\ntemp_change_co2_model2 = [-0.14, -0.13, -0.10, -0.08, -0.06, -0.03, 0.02, 0.05, 0.08, 0.11, 0.15]  # \u00b0C per decade\ntemp_change_solar_model2 = [0.10, 0.14, 0.19, 0.23, 0.27, 0.30, 0.33, 0.37, 0.40, 0.43, 0.46]  # \u00b0C per decade\ntemp_change_volcanic_model2 = [-0.22, -0.18, -0.14, -0.11, -0.07, -0.02, 0.03, 0.07, 0.11, 0.15, 0.19]  # \u00b0C per decade\n# Labels for x and y axis\nxlabel_co2 = \"CO2 Levels (ppm)\"\nylabel_temp_change = \"Rate of Temperature Change (\u00b0C/decade)\"\nxlabel_solar = \"Solar Activity Index\"\nxlabel_volcanic = \"Volcanic Activity Index\"\n# Labels\nlabel_model1 = \"Climate Model 1\"\nlabel_model2 = \"Climate Model 2\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nco2_levels = np.array([280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480])  # CO2 levels in ppm\nsolar_activity = np.array([0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25])  # Solar activity index\nvolcanic_activity = np.array([-150.0, -120.0, -90.0, -60.0, -30.0, 0.0, 30.0, 60.0, 90.0, 120.0, 150.0])  # Volcanic activity index\n\ntemp_change_co2_model1 = np.array([-0.12, -0.11, -0.09, -0.06, -0.03, 0.02, 0.04, 0.06, 0.09, 0.13, 0.17])  # \u00b0C per decade\ntemp_change_solar_model1 = np.array([0.13, 0.17, 0.23, 0.27, 0.32, 0.35, 0.38, 0.42, 0.45, 0.48, 0.52])  # \u00b0C per decade\ntemp_change_volcanic_model1 = np.array([-0.28, -0.23, -0.19, -0.14, -0.08, -0.03, 0.01, 0.06, 0.12, 0.17, 0.21])  # \u00b0C per decade\n\ntemp_change_co2_model2 = np.array([-0.14, -0.13, -0.10, -0.08, -0.06, -0.03, 0.02, 0.05, 0.08, 0.11, 0.15])  # \u00b0C per decade\ntemp_change_solar_model2 = np.array([0.10, 0.14, 0.19, 0.23, 0.27, 0.30, 0.33, 0.37, 0.40, 0.43, 0.46])  # \u00b0C per decade\ntemp_change_volcanic_model2 = np.array([-0.22, -0.18, -0.14, -0.11, -0.07, -0.02, 0.03, 0.07, 0.11, 0.15, 0.19])  # \u00b0C per decade\n\n# Extracted variables\nlabel_model1 = \"Climate Model 1\"\nlabel_model2 = \"Climate Model 2\"\nxlabel_co2 = \"CO2 Levels (ppm)\"\nylabel_temp_change = \"Rate of Temperature Change (\u00b0C/decade)\"\nxlabel_solar = \"Solar Activity Index\"\nxlabel_volcanic = \"Volcanic Activity Index\"\nylim_co2 = (-0.2, 0.2)\nxlim_co2 = (275, 485)\nyticks_co2 = [-0.2, -0.1, 0.0, 0.1, 0.2]\nxticks_co2 = [280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480]\nylim_solar = (0.1, 0.5)\nxlim_solar = (0.7, 1.3)\nyticks_solar = [0.1, 0.2, 0.3, 0.4, 0.5]\nxticks_solar = [0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25]\nylim_volcanic = (-0.35, 0.35)\nxlim_volcanic = (-165, 165)\nyticks_volcanic = [-0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3]\nxticks_volcanic = [-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots\nfig, axs = plt.subplots(3, 1, figsize=(6, 10))\n\n# Top chart - Brightness\naxs[0].bar(\n    co2_levels - 4,\n    temp_change_co2_model1,\n    width=8,\n    zorder=10,\n    color=\"#4c4cf6\",\n    label=label_model1,\n)\naxs[0].bar(\n    co2_levels + 4,\n    temp_change_co2_model2,\n    width=8,\n    zorder=10,\n    color=\"#b2b2fa\",\n    label=label_model2,\n)\naxs[0].set_xlabel(xlabel_co2)\naxs[0].set_ylabel(ylabel_temp_change)\naxs[0].set_ylim(ylim_co2)\naxs[0].set_xlim(xlim_co2)\naxs[0].set_yticks(yticks_co2)\naxs[0].xaxis.set_major_locator(ticker.FixedLocator(xticks_co2))\naxs[0].xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f\"{x}\"))\noffsetticks2 = [0.45] + [i + 10 for i in xticks_co2]\naxs[0].xaxis.set_minor_locator(ticker.FixedLocator(offsetticks2))\naxs[0].grid(True, which=\"minor\", axis=\"x\", color=\"gray\")\naxs[0].grid(True, which=\"major\", axis=\"y\", color=\"gray\")\naxs[0].tick_params(axis=\"x\", which=\"major\", length=0)\n\n# Middle chart - Scale\naxs[1].bar(\n    solar_activity - 0.01,\n    temp_change_solar_model1,\n    width=0.02,\n    zorder=10,\n    color=\"#4c4cf6\",\n)\naxs[1].bar(\n    solar_activity + 0.01,\n    temp_change_solar_model2,\n    width=0.02,\n    zorder=10,\n    color=\"#b2b2fa\",\n)\naxs[1].set_xlabel(xlabel_solar)\naxs[1].set_ylabel(ylabel_temp_change)\naxs[1].set_ylim(ylim_solar)\naxs[1].set_xlim(xlim_solar)\naxs[1].set_yticks(yticks_solar)\naxs[1].xaxis.set_major_locator(ticker.FixedLocator(xticks_solar))\naxs[1].xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f\"{x}\"))\noffsetticks1 = [0.725] + [i + 0.025 for i in xticks_solar]\naxs[1].xaxis.set_minor_locator(ticker.FixedLocator(offsetticks1))\naxs[1].grid(True, which=\"minor\", axis=\"x\", color=\"gray\")\naxs[1].grid(True, which=\"major\", axis=\"y\", color=\"gray\")\naxs[1].tick_params(axis=\"x\", which=\"major\", length=0)\n\n# Bottom chart - Rotation Angle\naxs[2].bar(\n    volcanic_activity - 5,\n    temp_change_volcanic_model1,\n    width=10,\n    zorder=10,\n    color=\"#4c4cf6\",\n)\naxs[2].bar(\n    volcanic_activity + 5,\n    temp_change_volcanic_model2,\n    width=10,\n    zorder=10,\n    color=\"#b2b2fa\",\n)\naxs[2].set_xlabel(xlabel_volcanic)\naxs[2].set_ylabel(ylabel_temp_change)\naxs[2].set_ylim(ylim_volcanic)\naxs[2].set_xlim(xlim_volcanic)\naxs[2].set_yticks(yticks_volcanic)\naxs[2].tick_params(axis=\"x\", which=\"major\", length=0)\n\naxs[2].xaxis.set_major_locator(ticker.FixedLocator(xticks_volcanic))\naxs[2].xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f\"{int(x)}\"))\noffsetticks = [-165, -135, -105, -75, -45, -15, 15, 45, 75, 105, 135, 165]\naxs[2].xaxis.set_minor_locator(ticker.FixedLocator(offsetticks))\naxs[2].grid(True, which=\"minor\", axis=\"x\", color=\"gray\")\naxs[2].grid(True, which=\"major\", axis=\"y\", color=\"gray\")\n\n# Add legend\nfig.legend(loc=\"upper center\", ncol=2, bbox_to_anchor=(0.5, 1.03), frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"bar_22.pdf\", bbox_inches=\"tight\")"}
{"idx": "line_10", "instruction": "There is a reference image for you and I also have a set of data about investment performance gains. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The investment performance data is as follows:\n# Investment Amount\ninvestment_amount = [\"0\", \"1000\", \"5000\", \"10000\", \"20000\", \"50000\", \"100000\", \"200000\"]\n# Performance Gain for different types of investments\nstock_investment = [1, 2.5, 4, 6, 5, 3.5, 2.5, 1]\nbond_investment = [4, 3.8, 3.5, 3, 2.5, 1.8, 1, 0.5]\nreal_estate_investment = [0, 1.5, 3, 2.5, 4, 5.5, 6, 5.8]\n# Label of x axis and y axis\nxlabel = \"Investment Amount ($)\"\nylabel = \"Performance Gain (%)\"\n# Labels\nstock_investment_label = \"Stock Investment\"\nbond_investment_label = \"Bond Investment\"\nreal_estate_investment_label = \"Real Estate Investment\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ninvestment_amount = [\"0\", \"1000\", \"5000\", \"10000\", \"20000\", \"50000\", \"100000\", \"200000\"]\nstock_investment = [1, 2.5, 4, 6, 5, 3.5, 2.5, 1]  \nbond_investment = [4, 3.8, 3.5, 3, 2.5, 1.8, 1, 0.5]  \nreal_estate_investment = [0, 1.5, 3, 2.5, 4, 5.5, 6, 5.8]  \n\n# Positions for the bars on the x-axis\nind = np.arange(len(investment_amount))\n\n# Labels and Legend\nxlabel = \"Investment Amount ($)\"\nylabel = \"Performance Gain (%)\"\nstock_investment_label = \"Stock Investment\"\nbond_investment_label = \"Bond Investment\"\nreal_estate_investment_label = \"Real Estate Investment\"\n\n# Limits\nxlim = (investment_amount[0], investment_amount[-1])\nylim = (0, 7)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(8, 6))  # Adjust the size to match the original image's dimensions\nax.plot(investment_amount, stock_investment, label=stock_investment_label, color=\"#0173b2\")\nax.plot(investment_amount, bond_investment, label=bond_investment_label, color=\"#de8f05\")\nax.plot(investment_amount, real_estate_investment, label=real_estate_investment_label, color=\"#20a983\")\n\n# Setting the x-axis and y-axis limits\nax.set_ylim(*ylim)  # Set y-axis to go from 0 to 7\nax.set_xlim(*xlim)  # Set x-axis limits to cover the range of n_aug without extra space\n\n# Labels and Title\nax.set_xlabel(xlabel, fontsize=14)\nax.set_ylabel(ylabel, fontsize=14)\n\n# Legend\nax.legend(loc=\"upper center\", fontsize=14, frameon=False, ncol=3, bbox_to_anchor=(0.5, 1.1))\n\n# Grid\nax.grid(True, ls=\"--\", alpha=0.5)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('line_10.pdf', bbox_inches='tight')"}
{"idx": "line_62", "instruction": "There is a reference image for you and I also have a set of data about business trends over several weeks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business trends data is as follows:\n# Weeks in a tracking period\nweeks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n# Sales revenue\nsales_revenue = [500, 530, 520, 550, 540, 570, 560, 590, 580, 610, 600, 630, 620, 650]\n# Customer satisfaction\ncustomer_satisfaction = [0.75, 0.78, 0.80, 0.82, 0.83, 0.82, 0.80, 0.77, 0.74, 0.70, 0.65, 0.60, 0.55, 0.50]\n# Profit margin\nprofit_margin = [750, 740, 720, 710, 690, 680, 660, 650, 630, 620, 600, 590, 570, 560]\n# Label of x axis\nxlabel = \"Weeks\"\n# Label of y axis for sales and profit\nylabel_sales_profit = \"Value (in thousands USD)\"\n# Label of y axis for customer satisfaction\nylabel_customer_satisfaction = \"Customer Satisfaction (Normalized)\"\n# Title\ntitle = \"Business Trends Over Weeks\"\n# Labels\nline_label_sales_revenue = \"Sales Revenue\"\nline_label_customer_satisfaction = \"Customer Satisfaction\"\nline_label_profit_margin = \"Profit Margin\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Weeks in an educational progress tracking period\n# Weeks in a business performance tracking period\nweeks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n# Data representing different business trends with varied patterns\nsales_revenue = [500, 530, 520, 550, 540, 570, 560, 590, 580, 610, 600, 630, 620, 650]  # rise with fluctuations\ncustomer_satisfaction = [0.75, 0.78, 0.80, 0.82, 0.83, 0.82, 0.80, 0.77, 0.74, 0.70, 0.65, 0.60, 0.55, 0.50]  # initial rise then gradual fall\nprofit_margin = [750, 740, 720, 710, 690, 680, 660, 650, 630, 620, 600, 590, 570, 560]  # fall with fluctuations\n\n# Extracted variables\nxlabel = \"Weeks\"\nylabel_sales_profit = \"Value (in thousands USD)\"\nylabel_customer_satisfaction = \"Customer Satisfaction (Normalized)\"\nxlim = (0, 15)\nylim_sales_profit = (480, 780)  # Shared y-limits for sales_revenue and profit_margin\nylim_customer_satisfaction = (0, 1)\ntitle = \"Business Trends Over Weeks\"\nline_label_sales_revenue = \"Sales Revenue\"\nline_label_customer_satisfaction = \"Customer Satisfaction\"\nline_label_profit_margin = \"Profit Margin\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10, 6))\n\n# Plot the performance data on the primary y-axis\ncolor = \"tab:blue\"\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabel_sales_profit, color=color)\n(line1,) = ax1.plot(\n    weeks,\n    sales_revenue,\n    color=color,\n    marker=\"o\",\n    linestyle=\"-\",\n    clip_on=False,\n    zorder=10,\n    linewidth=2,\n    label=line_label_sales_revenue,\n)\nax1.tick_params(axis=\"y\", labelcolor=color)\nax1.set_ylim(ylim_sales_profit)\n\n# Create a secondary y-axis for the efficiency data\nax2 = ax1.twinx()\ncolor = \"tab:red\"\nax2.set_ylabel(ylabel_customer_satisfaction, color=color)\n(line2,) = ax2.plot(\n    weeks,\n    customer_satisfaction,\n    color=color,\n    marker=\"x\",\n    linestyle=\"--\",\n    clip_on=False,\n    zorder=10,\n    linewidth=2,\n    label=line_label_customer_satisfaction,\n)\nax2.tick_params(axis=\"y\", labelcolor=color)\nax2.set_ylim(ylim_customer_satisfaction)\n\n# Add a legend to the plot\ncolor = \"tab:green\"\n(line3,) = ax1.plot(\n    weeks,\n    profit_margin,\n    color=color,\n    marker=\"^\",\n    linestyle=\":\",\n    linewidth=2,\n    clip_on=False,\n    zorder=10,\n    label=line_label_profit_margin,\n)\n# ax1.legend(loc='upper left')\n\n# Customize the plot with a title, grid, and background color\nfig.patch.set_facecolor(\"#f4f4f4\")\nax1.set_facecolor(\"#e5f5f9\")\nax2.set_facecolor(\"#f9e5e6\")\nax1.set_xlim(xlim)\nax1.tick_params(axis=\"both\", which=\"both\", length=0)\nax2.tick_params(axis=\"both\", which=\"both\", length=0)\nlines = [line1, line2, line3]\nlabels = [line.get_label() for line in lines]\nfig.legend(\n    lines, labels, loc=\"upper center\", bbox_to_anchor=(0.5, 0.95), ncol=3, frameon=False\n)\n# Set the title and display the plot\nplt.title(title, y=1.05)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\nplt.savefig('line_62.pdf', bbox_inches='tight')"}
{"idx": "radar_15", "instruction": "There is a reference image for you and I also have a set of data comparing two technologies, TechA and TechB, across various performance criteria. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The performance criteria and their corresponding values for each technology are as follows:\n# Performance criteria\ncategories = [\"Innovation\", \"Reliability\", \"User Experience\", \"Security\", \"Performance\", \"Scalability\", \"Support\", \"Cost Efficiency\", \"Compliance\",]\n# Values for TechA\nvalues1 = [35, 42, 28, 30, 40, 45, 43, 38, 44]\n# Values for TechB\nvalues2 = [29, 32, 36, 33, 27, 47, 46, 31, 34]\n# Title of the chart\ntitle_text = \"TechA vs TechB in Performance Criteria\"\nline_label1 = 'TechA'\nline_label2 = 'TechB'\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\n    \"Innovation\",\n    \"Reliability\",\n    \"User Experience\",\n    \"Security\",\n    \"Performance\",\n    \"Scalability\",\n    \"Support\",\n    \"Cost Efficiency\",\n    \"Compliance\",\n]\nvalues1 = [35, 42, 28, 30, 40, 45, 43, 38, 44]  # TechA\nvalues2 = [29, 32, 36, 33, 27, 47, 46, 31, 34]  # TechB\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each category\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nangles += angles[:1]\n\n# Extracted variables\nline_label1 = 'TechA'\nline_label2 = 'TechB'\nxticks_labels = categories\nyticks_values = [10, 20, 30, 40, 50]\nyticks_labels = []\nylim_values = (0, 50)\ntitle_text = \"TechA vs TechB in Performance Criteria\"\n\ntitle_size = 14\ntitle_color = \"black\"\ntitle_y = 1.1\nlegend_loc = \"lower center\"\nlegend_ncol = 2\nlegend_bbox_to_anchor = (0.5, -0.2)\nlegend_fontsize = \"small\"\nlegend_frameon = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Size of the figure\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels, aligned vertically\nplt.xticks(angles[:-1], xticks_labels, color=\"black\", size=10, ha=\"center\")\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks_values, yticks_labels, color=\"grey\", size=7)\nplt.ylim(ylim_values)\n\n# Plot data with markers and new colors\nax.plot(\n    angles,\n    values2,\n    linewidth=1,\n    linestyle=\"solid\",\n    marker=\"o\",\n    label=line_label2,\n    color=\"#ff6347\",\n)\nax.fill(angles, values2, \"#ff6347\", alpha=0.2)\n\nax.plot(\n    angles,\n    values1,\n    linewidth=1,\n    linestyle=\"solid\",\n    marker=\"s\",\n    label=line_label1,\n    color=\"#556b2f\",\n)\nax.fill(angles, values1, \"#556b2f\", alpha=0.2)\n\n# Add a title to the radar chart\nplt.title(title_text, size=title_size, color=title_color, y=title_y)\n\n# Add legend\nplt.legend(\n    loc=legend_loc,\n    ncol=legend_ncol,\n    bbox_to_anchor=legend_bbox_to_anchor,\n    fontsize=legend_fontsize,\n    frameon=legend_frameon,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('radar_15.pdf', bbox_inches='tight')"}
{"idx": "area_3", "instruction": "There is a reference image for you and I also have a set of data about the dynamic effect of vocabulary on zero-shot accuracy. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Decomposition IO Norm\ndecomposition_IO_norm = np.array([0, 20, 40, 60, 80])\n# Accuracy for different datasets\ncoco_10k = np.array([0.75, 0.70, 0.65, 0.60, 0.55]) + np.array([0.012, -0.003, 0.009, -0.002, 0.01])\nlaion_10k = np.array([0.73, 0.68, 0.63, 0.58, 0.53]) + np.array([0.007, -0.002, 0.008, 0.005, -0.003])\ncoco_5k = np.array([0.72, 0.67, 0.62, 0.57, 0.52])\nlaion_5k = np.array([0.70, 0.65, 0.60, 0.55, 0.50])\nclip = np.linspace(0.55, 0.55, len(decomposition_IO_norm))\n# Label of x axis\nxlabel_text = \"Decomposition IO Norm\"\n# Label of y axis\nylabel_text = \"Accuracy\"\n# Title\ntitle_text = \"Dynamic Effect of Vocab on Zero Shot Accuracy\"\n# Labels\nfill_label_coco_10k = \"natural_images (10k)\"\nfill_label_laion_10k = \"web_images (10k)\"\nfill_label_coco_5k = \"natural_images (5k)\"\nfill_label_laion_5k = \"web_images (5k)\"\nplot_label_clip = \"baseline\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plot with new trends\ndecomposition_IO_norm = np.array([0, 20, 40, 60, 80])\ncoco_10k = np.array([0.75, 0.70, 0.65, 0.60, 0.55]) + np.array([0.012, -0.003, 0.009, -0.002, 0.01])  # Different trend with small noise\nlaion_10k = np.array([0.73, 0.68, 0.63, 0.58, 0.53]) + np.array([0.007, -0.002, 0.008, 0.005, -0.003])\ncoco_5k = np.array([0.72, 0.67, 0.62, 0.57, 0.52])  # Changed last point to non-None\nlaion_5k = np.array([0.70, 0.65, 0.60, 0.55, 0.50])  # Continuation of the trend\nclip = np.linspace(0.55, 0.55, len(decomposition_IO_norm))  # Make clip a downward line\n\n# Extracted variables\nfill_label_coco_10k = \"natural_images (10k)\"\nfill_label_laion_10k = \"web_images (10k)\"\nfill_label_coco_5k = \"natural_images (5k)\"\nfill_label_laion_5k = \"web_images (5k)\"\nplot_label_clip = \"baseline\"\ntitle_text = \"Dynamic Effect of Vocab on Zero Shot Accuracy\"\nxlabel_text = \"Decomposition IO Norm\"\nylabel_text = \"Accuracy\"\nxlim_values = (min(decomposition_IO_norm), max(decomposition_IO_norm))\nylim_values = (0.45, 0.77)\nxticks_values = decomposition_IO_norm\nyticks_values = [0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75]\nlegend_title = \"Dataset\"\nlegend_loc = \"upper center\"\nlegend_bbox_to_anchor = (0.5, 1.12)\nlegend_ncol = 5\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plot with a different visualization style\nplt.figure(figsize=(10, 6))\nplt.fill_between(\n    decomposition_IO_norm, coco_10k, color=\"red\", alpha=0.3, label=fill_label_coco_10k\n)\nplt.fill_between(\n    decomposition_IO_norm,\n    laion_10k,\n    color=\"green\",\n    alpha=0.3,\n    label=fill_label_laion_10k,\n)\nplt.fill_between(\n    decomposition_IO_norm, coco_5k, color=\"blue\", alpha=0.3, label=fill_label_coco_5k\n)\nplt.fill_between(\n    decomposition_IO_norm,\n    laion_5k,\n    color=\"orange\",\n    alpha=0.3,\n    label=fill_label_laion_5k,\n)\nplt.plot(\n    decomposition_IO_norm,\n    clip,\n    color=\"black\",\n    linestyle=\"--\",\n    linewidth=2,\n    label=plot_label_clip,\n)\n\n# Add a title and labels with enhanced formatting\nplt.title(title_text, fontsize=14, y=1.1)\nplt.xlabel(xlabel_text, fontsize=12)\nplt.ylabel(ylabel_text, fontsize=12)\nplt.xticks(xticks_values)\nplt.yticks(yticks_values)\nplt.gca().tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Setting the limits explicitly to prevent cut-offs\nplt.xlim(*xlim_values)\nplt.ylim(*ylim_values)\n\n# Adding a legend with a title\nplt.legend(\n    title=legend_title,\n    frameon=False,\n    reverse=True,\n    framealpha=0.8,\n    loc=legend_loc,\n    bbox_to_anchor=legend_bbox_to_anchor,\n    ncol=legend_ncol,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to ensure no clipping\nplt.tight_layout()\nplt.savefig(\"area_3.pdf\", bbox_inches=\"tight\")"}
{"idx": "bar_29", "instruction": "There is a reference image for you and I also have a set of data about log L2 error in different fields of physics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Fields of physics\ncategories = [\"Electrodynamics\", \"Quantum Mechanics\", \"Thermodynamics\", \"Fluid Dynamics\", \"Acoustics\", \"Astrophysics\"]\n# log L2 Error for Finite Element\nrbf_int = [2e-2, 5e-3, 2e-2, 3e-2, 4e-3, 2e-2] \n# log L2 Error for Spectral Method\nrbf_pol = [3e-2, 6e-4, 2e-2, 3e-2, 5e-3, 3e-2] \n# log L2 Error for Finite Difference\nrbf_com = [4e-2, 7e-3, 2e-2, 4e-2, 3e-3, 4e-2]\n# Label of x axis\nxlabel = \"Fields\"\n# Label of y axis\nylabel = \"log L2 Error\"\n# Labels\nlabel_rbf_int = \"Finite Element\"\nlabel_rbf_pol = \"Spectral Method\"\nlabel_rbf_com = \"Finite Difference\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Electrodynamics\", \"Quantum Mechanics\", \"Thermodynamics\", \"Fluid Dynamics\", \"Acoustics\", \"Astrophysics\"]\nrbf_int = [2e-2, 5e-3, 2e-2, 3e-2, 4e-3, 2e-2] \nrbf_pol = [3e-2, 6e-4, 2e-2, 3e-2, 5e-3, 3e-2] \nrbf_com = [4e-2, 7e-3, 2e-2, 4e-2, 3e-3, 4e-2]\n\nx = np.arange(len(categories))  # the label locations\nwidth = 0.25  # the width of the bars\n\n# Labels for legend\nlabel_rbf_int = \"Finite Element\"\nlabel_rbf_pol = \"Spectral Method\"\nlabel_rbf_com = \"Finite Difference\"\n\n# Axis labels\nxlabel = \"Fields\"\nylabel = \"log L2 Error\"\n\n# Axis ticks\nxticks = x\nyticks = [1e-4, 1e-3, 1e-2, 1e-1]\n\n# Axis tick labels\nxticklabels = categories\nyticklabels = [\"1e-4\", \"1e-3\", \"1e-2\", \"1e-1\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(10, 6))\nrects1 = ax.bar(x - width, rbf_int, width, label=label_rbf_int, color=\"#3c0f64\")\nrects2 = ax.bar(x, rbf_pol, width, label=label_rbf_pol, color=\"#ae4256\")\nrects3 = ax.bar(x + width, rbf_com, width, label=label_rbf_com, color=\"#e47f37\")\n\nax.set_ylabel(ylabel)\nax.set_yscale(\"log\")\nax.set_xlabel(xlabel)\nax.set_xticks(xticks)\nax.set_xticklabels(xticklabels)\n\n# Set custom y-ticks on the log scale and their labels\nax.set_yticks(yticks)\nax.set_yticklabels(yticklabels)\n\nax.legend(ncol=3, loc=\"upper center\", bbox_to_anchor=(0.5, 1.1), frameon=False)\n\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_29.pdf', bbox_inches='tight')"}
{"idx": "line_12", "instruction": "There is a reference image for you and I also have a set of data about the standard deviation of side effects at different dosage levels for young, adult, and elderly patients. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Dosage levels\ndosage_levels = [0.2, 0.4, 0.6, 0.8, 1.00]\n# Standard deviation of side effects for young patients\nstd_side_effects_young = [0.7, 0.5, 0.3, 0.6, 0.8]\n# Standard deviation of side effects for adult patients\nstd_side_effects_adult = [0.6, 0.45, 0.4, 0.35, 0.5]\n# Standard deviation of side effects for elderly patients\nstd_side_effects_elderly = [0.2, 0.35, 0.25, 0.5, 0.37]\n# Label of x axis\nxlabel_value = \"Dosage Levels (mg)\"\n# Label of y axis\nylabel_value = \"Std of Side Effects\"\n# Labels\nline_label_young = \"Young Patients\"\nline_label_adult = \"Adult Patients\"\nline_label_elderly = \"Elderly Patients\"\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ndosage_levels = [0.2, 0.4,0.6, 0.8, 1.00]\nstd_side_effects_young = [0.7, 0.5, 0.3, 0.6, 0.8]\nstd_side_effects_adult = [0.6, 0.45, 0.4, 0.35,0.5]\nstd_side_effects_elderly = [0.2, 0.35, 0.25, 0.5,0.37]\n\n# Extracted variables\nline_label_young = \"Young Patients\"\nline_label_adult = \"Adult Patients\"\nline_label_elderly = \"Elderly Patients\"\nxlim_values = (0.25, 1.00)\nylim_values = (0.00, 0.8)\nxlabel_value = \"Dosage Levels (mg)\"\nylabel_value = \"Std of Side Effects\"\nxticks_values = dosage_levels\n\n\nxtickslabel_fontsize = 14\nytickslabel_fontsize = 14\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the lines with increased marker size and line width\nplt.figure(figsize=(8, 6))\nplt.plot(\n    dosage_levels,\n    std_side_effects_young,\n    marker=\"*\",\n    markersize=10,\n    linewidth=2,\n    color=\"#2ab34a\",\n    label=line_label_young,\n    clip_on=False,\n    zorder=10,\n)\nplt.plot(\n    dosage_levels,\n    std_side_effects_adult,\n    marker=\"^\",\n    markerfacecolor=\"white\",\n    markersize=10,\n    linewidth=2,\n    markeredgecolor=\"#ee756e\",\n    color=\"#ee756e\",\n    clip_on=False,\n    zorder=10,\n    label=line_label_adult,\n)\nplt.plot(\n    dosage_levels,\n    std_side_effects_elderly,\n    marker=\"o\",\n    markerfacecolor=\"white\",\n    markersize=10,\n    linewidth=2,\n    markeredgecolor=\"#4995c6\",\n    color=\"#4995c6\",\n    clip_on=False,\n    zorder=10,\n    label=line_label_elderly,\n)\n\n# Setting the x-axis and y-axis limits\nplt.ylim(*ylim_values)  # Set y-axis to go from 0 to 7\nplt.yticks(fontsize=ytickslabel_fontsize)\nplt.xlim(*xlim_values)  # Set y-axis to go from 0 to 7\n# Set x-axis to show only the values in the sample_ratio list\nplt.xticks(xticks_values, fontsize=xtickslabel_fontsize)\n\n# Adding labels and title\nplt.xlabel(xlabel_value, fontsize=18)\nplt.ylabel(ylabel_value, fontsize=18)\n\n# Adding legend with increased font size\nplt.legend(\n    fontsize=\"large\",\n    loc=\"upper center\",\n    ncol=3,\n    frameon=False,\n    bbox_to_anchor=(0.5, 1.1),\n)\n\n# Adding grid\nplt.grid(True, alpha=0.6)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('line_12.pdf', bbox_inches='tight')"}
{"idx": "line_64", "instruction": "There is a reference image for you and I also have a set of data about business performance trends. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business performance trends data is as follows:\n# Tasks in a business performance tracking period\ntasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Data representing different business trends with varied patterns\nsales_growth = [95.29, 90.87, 85.27, 80.72, 75.27, 70.4, 65.85, 61.21, 57.02, 53.23]  # steady decline\ncustomer_retention = [55.43, 58.59, 60.73, 62.03, 64.22, 66.11, 67.82, 69.94, 70.72, 72.44]  # steady rise\nmarket_share = [45.34, 47.74, 50.15, 49.11, 52.92, 51.53, 54.8, 53.88, 56.82, 55.41]  # fluctuating\nemployee_satisfaction = [60.15, 55.82, 50.00, 45.35, 40.43, 35.38, 30.9, 28.31, 25.17, 22.7]  # steady decline\n# Label of x axis\nxlabel_value = \"Task\"\n# Label of y axis\nylabel_value = \"Average Value (%)\"\n# Labels\nline_label_sales_growth = \"Sales Growth\"\nline_label_customer_retention = \"Customer Retention\"\nline_label_market_share = \"Market Share\"\nline_label_employee_satisfaction = \"Employee Satisfaction\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic the trends in the provided image\n# Tasks in a business performance tracking period\ntasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Data representing different business trends with varied patterns\nsales_growth = [95.29, 90.87, 85.27, 80.72, 75.27, 70.4, 65.85, 61.21, 57.02, 53.23]  # steady decline\ncustomer_retention = [55.43, 58.59, 60.73, 62.03, 64.22, 66.11, 67.82, 69.94, 70.72, 72.44]  # steady rise\nmarket_share = [45.34, 47.74, 50.15, 49.11, 52.92, 51.53, 54.8, 53.88, 56.82, 55.41]  # fluctuating\nemployee_satisfaction = [60.15, 55.82, 50.00, 45.35, 40.43, 35.38, 30.9, 28.31, 25.17, 22.7]  # steady decline\n\n# Labels and plot types\nline_label_sales_growth = \"Sales Growth\"\nline_label_customer_retention = \"Customer Retention\"\nline_label_market_share = \"Market Share\"\nline_label_employee_satisfaction = \"Employee Satisfaction\"\n\n# Plot configuration\nxlim_values = [1, 10]\nylim_values = [0, 100]\nxlabel_value = \"Task\"\nylabel_value = \"Average Value (%)\"\nxticks_values = np.arange(1, 11, 1)\nyticks_values = np.arange(0, 101, 10)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis\nplt.figure(figsize=(12, 6))\nplt.plot(\n    tasks,\n    sales_growth,\n    marker=\"s\",\n    markersize=10,\n    color=\"#2171b5\",\n    clip_on=False,\n    zorder=10,\n    mfc=\"w\",\n    mew=2,\n    label=line_label_sales_growth,\n    linewidth=2.5,\n    linestyle=\"--\",\n)\nplt.plot(\n    tasks,\n    customer_retention,\n    marker=\"v\",\n    markersize=10,\n    color=\"#6baed6\",\n    clip_on=False,\n    zorder=10,\n    mfc=\"w\",\n    mew=2,\n    label=line_label_customer_retention,\n    linewidth=2.5,\n    linestyle=\"-.\",\n)\nplt.plot(\n    tasks,\n    market_share,\n    marker=\"D\",\n    markersize=10,\n    color=\"#42cc46\",\n    clip_on=False,\n    zorder=10,\n    mfc=\"w\",\n    mew=2,\n    label=line_label_market_share,\n    linewidth=2.5,\n    linestyle=\":\",\n)\nplt.plot(\n    tasks,\n    employee_satisfaction,\n    marker=\"o\",\n    markersize=10,\n    color=\"#9dfa9f\",\n    clip_on=False,\n    zorder=10,\n    mfc=\"w\",\n    mew=2,\n    label=line_label_employee_satisfaction,\n    linewidth=2.5,\n)\n\n# Customize the plot with labels, title, and legend\nplt.yticks(yticks_values)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\n\n# Customize the x-axis ticks\nplt.xticks(xticks_values)  # Ticks from 1 to 20, interval of 1\nplt.xlim(xlim_values)  # Slightly beyond 1 and 20 for a margin\n\n# Add a grid to the plot\nplt.xlabel(xlabel_value, fontsize=16)\nplt.ylabel(ylabel_value, fontsize=16)\nplt.tick_params(axis=\"x\", which=\"both\", length=0)\n# Add a title to the plot\nplt.legend(\n    frameon=False,\n    fontsize=12,\n    loc=\"upper right\",\n    borderpad=1,\n    ncol=4,\n    bbox_to_anchor=(1, 1.1),\n)\n\n# Add a grid to the plot\nplt.grid(True, linestyle=\"-\", linewidth=0.5, axis=\"y\")\n\n# Set the background color of the plot\nax = plt.gca()\nax.set_facecolor(\n    mcolors.LinearSegmentedColormap.from_list(\"custom\", [\"#e6f7ff\", \"#ffffff\"])(0.8)\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('line_64.pdf', bbox_inches='tight')"}
{"idx": "radar_18", "instruction": "There is a reference image for you and I also have a set of data about transportation service quality for two cities, City A and City B. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation service quality data is as follows:\n# Data for City A\nvalues_city_a = [8, 7.5, 9, 8.5, 8, 7, 6.5, 6, 7, 8.5]\n# Data for City B\nvalues_city_b = [6.5, 6, 5.5, 5, 4.5, 4, 3.5, 3, 4, 5.5]\n# Labels for each category\nlabels = [\"Public Transport\", \"Road Infrastructure\", \"Traffic Management\", \"Safety\", \"Bike Lanes\", \"Pedestrian Walkways\", \"Affordability\", \"Punctuality\", \"Coverage\", \"Customer Service\"]\n# Label for City A\ncity_a_label = \"Beijing\"\n# Label for City B\ncity_b_label = \"Tokyo\"\n# Title of the chart\ntitle_text = \"Transportation Service Quality Comparison: Beijing vs Tokyo\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for City A and City B\nvalues_city_a = [8, 7.5, 9, 8.5, 8, 7, 6.5, 6, 7, 8.5]  # City A\nvalues_city_b = [6.5, 6, 5.5, 5, 4.5, 4, 3.5, 3, 4, 5.5]  # City B\nlabels = [\n    \"Public Transport\",\n    \"Road Infrastructure\",\n    \"Traffic Management\",\n    \"Safety\",\n    \"Bike Lanes\",\n    \"Pedestrian Walkways\",\n    \"Affordability\",\n    \"Punctuality\",\n    \"Coverage\",\n    \"Customer Service\",\n]\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nvalues_city_a += values_city_a[:1]\nvalues_city_b += values_city_b[:1]\nangles += angles[:1]\n\n# Extracted variables\ncity_a_label = \"Beijing\"\ncity_b_label = \"Tokyo\"\nxticks = angles[:-1]\nxticklabels = labels\nyticklabels = []\nrgrids = [2, 4, 6, 8, 10]\nrgrid_labels = [\"2\", \"4\", \"6\", \"8\", \"10\"]\ntitle_text = \"Transportation Service Quality Comparison: Beijing vs Tokyo\"\n\ntitle_size = 18\ntitle_color = \"navy\"\ntitle_y = 1.1\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\nax.fill(angles, values_city_a, color=\"darkorange\", alpha=0.7)\nax.plot(angles, values_city_a, color=\"darkorange\", linewidth=2, label=city_a_label)\nax.scatter(\n    angles[:-1], values_city_a[:-1], color=\"darkorange\", s=75, zorder=5, marker=\"^\"\n)\nax.fill(angles, values_city_b, color=\"purple\", alpha=0.7)\nax.plot(\n    angles, values_city_b, color=\"purple\", linewidth=2, label=city_b_label\n)\nax.scatter(\n    angles[:-1], values_city_b[:-1], color=\"purple\", s=75, zorder=5, marker=\"o\"\n)\n\n# Add labels to the plot\nax.set_xticks(xticks)\nax.set_xticklabels(xticklabels, size=13)\n\n# Add grid lines and labels for the concentric circles\nax.set_yticklabels(yticklabels)\nax.set_rgrids(\n    rgrids,\n    labels=rgrid_labels,\n    angle=225,\n    color=\"gray\",\n    size=12,\n)\n\n# Create legend handles manually\nlegend_elements = [\n    Line2D(\n        [0],\n        [0],\n        color=\"darkorange\",\n        linewidth=2,\n        marker=\"^\",\n        markersize=10,\n        label=city_a_label,\n    ),\n    Line2D(\n        [0],\n        [0],\n        color=\"purple\",\n        linewidth=2,\n        marker=\"o\",\n        markersize=10,\n        label=city_b_label,\n    ),\n]\n\n# Add legend and title\nax.set_title(\n    title_text,\n    size=title_size,\n    color=title_color,\n    y=title_y,\n)\nax.legend(\n    handles=legend_elements,\n    loc=\"lower center\",\n    bbox_to_anchor=(0.5, -0.2),\n    frameon=False,\n    ncol=2,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('radar_18.pdf', bbox_inches='tight')"}
{"idx": "area_4", "instruction": "There is a reference image for you and I also have a set of data about the impact of data augmentation on model performance. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data for the plot with new trends is as follows:\n# Augmentation Levels\nn_aug = [\"0\", \"0.125\", \"0.25\", \"0.5\", \"1\", \"2\", \"4\", \"8\"]\n# Performance Improvement for Data Quality\ncontent = [8, 6, 4, 3, 2, 1, 0.5, 0.2]\n# Performance Improvement for Algorithm Efficiency\norganization = [7, 5, 3, 2.5, 2, 1.5, 1, 0.5]\n# Performance Improvement for Model Robustness\nlanguage = [6, 4, 2, 1.5, 1, 0.8, 0.4, 0.2]\n# Label of x axis\nxlabel_text = \"Augmentation Levels (n)\"\n# Label of y axis\nylabel_text = \"Performance Improvement (%)\"\n# Title\ntitle_text = \"Impact of Data Augmentation on Model Performance\"\n# Labels\ncontent_label = \"Data Quality\"\norganization_label = \"Algorithm Efficiency\"\nlanguage_label = \"Model Robustness\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\n# Data for the plot with new trends\nn_aug = [\"0\", \"0.125\", \"0.25\", \"0.5\", \"1\", \"2\", \"4\", \"8\"]\ncontent = np.array([8, 6, 4, 3, 2, 1, 0.5, 0.2])\norganization = np.array([7, 5, 3, 2.5, 2, 1.5, 1, 0.5])\nlanguage = np.array([6, 4, 2, 1.5, 1, 0.8, 0.4, 0.2])\n\n\n# Calculate cumulative values for stacked area chart\ncumulative_content = content\ncumulative_organization = cumulative_content + organization\ncumulative_language = cumulative_organization + language\n\n# Positions for the bars on the x-axis\nind = np.arange(len(n_aug))\n\n# Variables for plot configuration\ncontent_label = \"Data Quality\"\norganization_label = \"Algorithm Efficiency\"\nlanguage_label = \"Model Robustness\"\nxlim_values = (0, 7)\nylim_values = (0, 22)\nxlabel_text = \"Augmentation Levels (n)\"\nylabel_text = \"Performance Improvement (%)\"\ntitle_text = \"Impact of Data Augmentation on Model Performance\"\nyticks_values = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,22]\nlegend_location = \"upper center\"\nlegend_fontsize = 12\nlegend_frameon = False\nlegend_shadow = True\nlegend_facecolor = \"#ffffff\"\nlegend_ncol = 3\nlegend_bbox_to_anchor = (0.5, 1.2)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(8, 4))  # Adjusted for better aspect ratio\nax.fill_between(\n    n_aug, 0, cumulative_content, label=content_label, color=\"#0173b2\", alpha=0.7\n)\nax.fill_between(\n    n_aug,\n    cumulative_content,\n    cumulative_organization,\n    label=organization_label,\n    color=\"#de8f05\",\n    alpha=0.7,\n)\nax.fill_between(\n    n_aug,\n    cumulative_organization,\n    cumulative_language,\n    label=language_label,\n    color=\"#20a983\",\n    alpha=0.7,\n)\n\n# Enhancing the plot with additional visuals\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\nax.set_yticks(yticks_values)\n# Setting the x-axis and y-axis limits dynamically\nax.set_ylim(*ylim_values)  # Ensure all data fits well\nax.set_xlim(*xlim_values)\n# Labels, Title and Grid\nax.set_xlabel(xlabel_text, fontsize=14)\nax.set_ylabel(ylabel_text, fontsize=14)\nax.set_title(title_text, fontsize=16, y=1.2)\nax.tick_params(axis=\"both\", which=\"both\", color=\"gray\")\n# Custom legend\nax.legend(\n    loc=legend_location,\n    fontsize=legend_fontsize,\n    frameon=legend_frameon,\n    shadow=legend_shadow,\n    facecolor=legend_facecolor,\n    ncol=legend_ncol,\n    bbox_to_anchor=legend_bbox_to_anchor,\n)\n\n# Grid\nax.grid(True, linestyle=\"--\", alpha=0.5, which=\"both\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to reduce white space\nplt.tight_layout()\nplt.savefig('area_4.pdf', bbox_inches='tight')"}
{"idx": "bar_32", "instruction": "There is a reference image for you and I also have data about the frequency of success in agricultural tasks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data for the agricultural tasks is as follows:\n# Categories of tasks\ncategories = [\"Harvest Wheat\", \"Milk Cow\", \"Herd Goats\"]\n# Frequency of success\nvalues = [41, 30, 27]\n# Label of x axis\nxlabel = \"Frequency of Success\"\n# Title\ntitle = \"Frequency of Success in Agricultural Tasks\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 2.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Harvest Wheat\", \"Milk Cow\", \"Herd Goats\"]\nvalues = [41, 30, 27]  # Adjust the values to ensure realistic distribution\n\n# Axes limits, labels, and ticks\nxlabel = \"Frequency of Success\"\nxticks = [0,5,10,15,20,25,30,35,40,45,50]\nxtickslabel = [\"0\", \"\", \"10\", \"\", \"20\", \"\", \"30\", \"\", \"40\", \"\", \"50\"]\ntitle = \"Frequency of Success in Agricultural Tasks\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nplt.figure(figsize=(6, 2))  # Adjusting figure size to match original image dimensions\nplt.barh(categories, values, color=\"#3b76af\")\n\n# Adding data labels\nfor index, value in enumerate(values):\n    plt.text(value, index, f\" {value}\", va=\"center\", color=\"black\")\n\n# Adding title and labels\nplt.title(title)\nplt.xlabel(xlabel)\n# Apply the xticks and labels\nplt.xticks(xticks, xtickslabel)\n\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('bar_32.pdf', bbox_inches='tight')"}
{"idx": "line_13", "instruction": "There is a reference image for you and I also have a set of data about system performance metrics over testing iterations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The system performance metrics data is as follows:\n# Testing Iterations\niterations = [0., 10., 20., 30., 40., 50., 60., 70., 80., 90., 100., 110., 120., 130., 140., 150., 160., 170., 180., 190., 200.]\n# Energy Efficiency Index (EEI) for System Base and System Ours\nbase_data_eei = [0.95, 0.93, 0.92, 0.90, 0.88, 0.87, 0.85, 0.83, 0.82, 0.80, 0.78, 0.77, 0.75, 0.73, 0.71, 0.70, 0.68, 0.66, 0.65, 0.63, 0.61]\nours_data_eei = [0.55, 0.57, 0.58, 0.60, 0.62, 0.63, 0.65, 0.67, 0.68, 0.70, 0.72, 0.73, 0.75, 0.77, 0.78, 0.80, 0.82, 0.83, 0.85, 0.87, 0.88]\n# Renewable Integration Score (RIS)\nbase_data_ris = [0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.47, 0.44, 0.41, 0.38, 0.35, 0.32, 0.29,0.26, 0.23, 0.20, 0.25, 0.30, 0.35, 0.40]\nours_data_ris = [0.40, 0.35, 0.30, 0.25, 0.20, 0.15, 0.10, 0.13, 0.16, 0.19, 0.22, 0.25, 0.28, 0.31,0.34, 0.37, 0.40, 0.35, 0.30, 0.25, 0.20]\n# Grid Stability Factor (GSF)\nbase_data_gsf = [0.45, 0.43, 0.42, 0.40, 0.38, 0.36, 0.35, 0.33, 0.31, 0.29, 0.28, 0.26, 0.24, 0.22,0.21, 0.19, 0.17, 0.15, 0.14, 0.12, 0.10]\nours_data_gsf = [0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31,0.33, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45]\n# Environmental Impact Score (EIS)\nbase_data_eis = [0.65, 0.60, 0.55, 0.50, 0.45, 0.40, 0.35, 0.38, 0.41, 0.44, 0.47, 0.50, 0.53, 0.50,0.47, 0.44, 0.41, 0.38, 0.35, 0.40, 0.45]\nours_data_eis = [0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.63, 0.61, 0.59, 0.57, 0.55, 0.53, 0.51,0.49, 0.47, 0.45, 0.43, 0.41, 0.39, 0.37]\n# Label of x axis\nxlabel_value = \"Testing Iterations\"\n# Label of y axis\nylabel_value_eei = \"Energy Efficiency Index (\u2191)\"\nylabel_value_ris = \"Renewable Integration Score (\u2191)\"\nylabel_value_gsf = \"Grid Stability Factor (\u2191)\"\nylabel_value_eis = \"Environmental Impact Score (\u2193)\"\n# Labels\nline_label_base = \"System Base\"\nline_label_ours = \"System Ours\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nimport numpy as np; np.random.seed(0)\n\nline_label_base = \"System Base\"\nline_label_ours = \"System Ours\"\nxlim_values = (0, 200)\nylim_values_eei = (0.5, 1.0)\nylim_values_ris = (0.1, 0.6)\nylim_values_gsf = (0.0, 0.5)\nylim_values_eis = (0.2, 0.7)\nxlabel_value = \"Testing Iterations\"\nylabel_value_eei = \"Energy Efficiency Index (\u2191)\"\nylabel_value_ris = \"Renewable Integration Score (\u2191)\"\nylabel_value_gsf = \"Grid Stability Factor (\u2191)\"\nylabel_value_eis = \"Environmental Impact Score (\u2193)\"\nyticks_values_eei = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nyticks_values_ris = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\nyticks_values_gsf = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nyticks_values_eis = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n\n# Simulated data\niterations = np.linspace(0, 200, 21)\niterations = [0., 10., 20., 30., 40., 50., 60., 70., 80., 90., 100., 110., 120., 130.,\n 140., 150., 160., 170., 180., 190., 200.]\n\n# Energy Efficiency Index (EEI)\n\nbase_data_eei = [0.95, 0.93, 0.92, 0.90, 0.88, 0.87, 0.85, 0.83, 0.82, 0.80, 0.78, 0.77, 0.75, 0.73,\n                 0.71, 0.70, 0.68, 0.66, 0.65, 0.63, 0.61]\nours_data_eei = [0.55, 0.57, 0.58, 0.60, 0.62, 0.63, 0.65, 0.67, 0.68, 0.70, 0.72, 0.73, 0.75, 0.77,\n                 0.78, 0.80, 0.82, 0.83, 0.85, 0.87, 0.88]\n\n# Renewable Integration Score (RIS)\nbase_data_ris = [0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.47, 0.44, 0.41, 0.38, 0.35, 0.32, 0.29,\n                 0.26, 0.23, 0.20, 0.25, 0.30, 0.35, 0.40]\nours_data_ris = [0.40, 0.35, 0.30, 0.25, 0.20, 0.15, 0.10, 0.13, 0.16, 0.19, 0.22, 0.25, 0.28, 0.31,\n                 0.34, 0.37, 0.40, 0.35, 0.30, 0.25, 0.20]\n\n\n# Grid Stability Factor (GSF)\nbase_data_gsf = [0.45, 0.43, 0.42, 0.40, 0.38, 0.36, 0.35, 0.33, 0.31, 0.29, 0.28, 0.26, 0.24, 0.22,\n                 0.21, 0.19, 0.17, 0.15, 0.14, 0.12, 0.10]\nours_data_gsf = [0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31,\n                 0.33, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45]\n\n# Environmental Impact Score (EIS)\nbase_data_eis = [0.65, 0.60, 0.55, 0.50, 0.45, 0.40, 0.35, 0.38, 0.41, 0.44, 0.47, 0.50, 0.53, 0.50,\n                 0.47, 0.44, 0.41, 0.38, 0.35, 0.40, 0.45]\nours_data_eis = [0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.63, 0.61, 0.59, 0.57, 0.55, 0.53, 0.51,\n                 0.49, 0.47, 0.45, 0.43, 0.41, 0.39, 0.37]\n\n\nlegend_location = \"upper center\"\nlegend_bbox_to_anchor = (0.5, 1.2)\nlegend_frameon = False\nlegend_ncol = 2\ngrid_value = True\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting FID\n# Create subplots\nfig, axs = plt.subplots(4, 1, figsize=(8, 10))\n\naxs[0].plot(iterations, base_data_eei, label=line_label_base, color=\"blue\")\naxs[0].plot(iterations, ours_data_eei, label=line_label_ours, color=\"orange\")\naxs[0].set_xlabel(xlabel_value)\naxs[0].set_ylabel(ylabel_value_eei)\naxs[0].set_xlim(*xlim_values)\naxs[0].set_yticks(yticks_values_eei)\naxs[0].tick_params(axis=\"both\", which=\"both\", color=\"gray\")\n\naxs[1].plot(iterations, base_data_ris, label=line_label_base, color=\"blue\")\naxs[1].plot(iterations, ours_data_ris, label=line_label_ours, color=\"orange\")\naxs[1].set_xlabel(xlabel_value)\naxs[1].set_ylabel(ylabel_value_ris)\naxs[1].set_xlim(*xlim_values)\naxs[1].set_yticks(yticks_values_ris)\naxs[1].tick_params(axis=\"both\", which=\"both\", color=\"gray\")\n\n# Plotting CW-FID\naxs[2].plot(iterations, base_data_gsf, label=line_label_base, color=\"blue\")\naxs[2].plot(iterations, ours_data_gsf, label=line_label_ours, color=\"orange\")\naxs[2].set_xlabel(xlabel_value)\naxs[2].set_ylabel(ylabel_value_gsf)\naxs[2].set_xlim(*xlim_values)\naxs[2].set_yticks(yticks_values_gsf)\naxs[2].tick_params(axis=\"both\", which=\"both\", color=\"gray\")\n\n# Plotting CAS\naxs[3].plot(iterations, base_data_eis, label=line_label_base, color=\"blue\")\naxs[3].plot(iterations, ours_data_eis, label=line_label_ours, color=\"orange\")\naxs[3].set_xlabel(xlabel_value)\naxs[3].set_ylabel(ylabel_value_eis)\naxs[3].set_xlim(*xlim_values)\naxs[3].set_yticks(yticks_values_eis)\naxs[3].tick_params(axis=\"both\", which=\"both\", color=\"gray\")\n\n# Add legends and gridlines to each subplot\nfor ax in axs.flat:\n    ax.legend(loc=legend_location, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon, ncol=legend_ncol)\n    ax.grid(grid_value)  # Enable the grid\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('line_13.pdf', bbox_inches='tight')"}
{"idx": "line_72", "instruction": "There is a reference image for you and I also have a set of data about the business performance trends over different ratios. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Generating non-linear data with complex trends\nratios = [0.1, 0.19, 0.28, 0.37, 0.46, 0.55, 0.64, 0.73, 0.82, 0.91, 1.0]\n# Data representing different business trends with varied patterns\nmarket_expansion = [1.5, 1.72, 2.31, 3.53, 4.8, 5.2, 4.0, 3.0, 2.2, 1.8, 1.5]\nprofit_margin = [0.04, 0.08, 0.18, 0.17, 0.24, 0.19, 0.29, 0.15, 0.2, 0.25, 0.15]\ncustomer_acquisition_cost = [3.0, 2.8, 2.6, 2.4, 2.2, 4.0, 3.8, 2.6, 2.4, 3.2, 4.0]\nemployee_satisfaction = [0.15, 0.1, 0.25, 0.30, 0.15, 0.2, 0.25, 0.15, 0.25, 0.3, 0.25]\n# Axes labels\nxlabel_value = \"Ratio r\"\nylabel_value = \"Performance\"\n# Title\ntitle_value = \"Business Performance Trends\"\n# Labels\nline_label1 = \"Market Expansion\"\nline_label2 = \"Profit Margin\"\nline_label3 = \"Customer Acquisition Cost\"\nline_label4 = \"Employee Satisfaction\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generating non-linear data with complex trends\nratios = [0.1, 0.19, 0.28, 0.37, 0.46, 0.55, 0.64, 0.73, 0.82, 0.91, 1.0]\n\n# Data representing different business trends with varied patterns\nmarket_expansion = np.array([1.5, 1.72, 2.31, 3.53, 4.8, 5.2, 4.0, 3.0, 2.2, 1.8, 1.5])  # rise then fall\nprofit_margin = np.array([0.04, 0.08, 0.18, 0.17, 0.24, 0.19, 0.29, 0.15, 0.2, 0.25, 0.15])  # steady rise\ncustomer_acquisition_cost = np.array([3.0, 2.8, 2.6, 2.4, 2.2, 4.0, 3.8, 2.6, 2.4, 3.2, 4.0])  # steady decline\nemployee_satisfaction = np.array([0.15, 0.1, 0.25, 0.30, 0.15, 0.2, 0.25, 0.15, 0.25, 0.3, 0.25])  # steady rise\n\n# Extracted variables\nline_label1 = \"Market Expansion\"\nline_label2 = \"Profit Margin\"\nline_label3 = \"Customer Acquisition Cost\"\nline_label4 = \"Employee Satisfaction\"\nxlim_values = (0.1, 1.0)\nylim_values = (0, 6)\nxlabel_value = \"Ratio r\"\nylabel_value = \"Performance\"\nxticks_values = np.arange(0.1, 1.1, 0.1)\nyticks_values = np.arange(0, 6.5, 0.5)\ntitle_value = \"Business Performance Trends\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a gradient background\ncmap = LinearSegmentedColormap.from_list(\"mycmap\", [\"lightblue\", \"lightgreen\"])\n\n# Plot settings\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Using the complex and colorful styles\nax.set_facecolor(cmap(0.5))  # Use the middle of the colormap for background\nax.plot(\n    ratios,\n    market_expansion,\n    label=line_label1,\n    clip_on=False,\n    zorder=1,\n    color=\"magenta\",\n    marker=\"o\",\n    linestyle=\"-\",\n    markersize=5,\n)\nax.fill_between(\n    ratios,\n    market_expansion - profit_margin,\n    market_expansion + profit_margin,\n    color=\"magenta\",\n    alpha=0.3,\n)\nax.plot(\n    ratios,\n    customer_acquisition_cost,\n    label=line_label2,\n    clip_on=False,\n    zorder=1,\n    color=\"gold\",\n    marker=\"^\",\n    linestyle=\"-\",\n    markersize=5,\n)\nax.fill_between(\n    ratios,\n    customer_acquisition_cost - employee_satisfaction,\n    customer_acquisition_cost + employee_satisfaction,\n    color=\"gold\",\n    alpha=0.3,\n)\n\n# Enhancing plot details\nax.set_xticks(xticks_values)\nax.set_xlim(*xlim_values)\nax.set_ylim(*ylim_values)\nax.set_yticks(yticks_values)\nax.set_xlabel(xlabel_value, fontsize=14)\nax.set_ylabel(ylabel_value, fontsize=14)\nax.legend(loc=\"upper right\", bbox_to_anchor=(1, 1.1), ncol=3, frameon=False)\nax.grid(True, linestyle=\":\", color=\"grey\")\nax.tick_params(axis=\"both\", which=\"both\", length=2, color=\"grey\")\n\n# Adding visual improvements\nfor spine in ax.spines.values():\n    spine.set_visible(False)\n\nplt.title(title_value, fontsize=16, y=1.1)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"line_72.pdf\", bbox_inches=\"tight\")"}
{"idx": "radar_19", "instruction": "There is a reference image for you and I also have a set of data about the performance of Amazon, Meta, and Tesla across various business metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data for each company is as follows:\n# Business metrics\ncategories = [\"Revenue Growth\", \"Market Share\", \"Customer Satisfaction\", \"Innovation\", \"Operational Efficiency\", \"Brand Strength\", \"Employee Satisfaction\", \"Sustainability\",]\n# Amazon's performance values\nvalues1 = [85, 78, 90, 95, 82, 88, 70, 76]\n# Meta's performance values\nvalues2 = [78, 65, 85, 80, 75, 80, 68, 70]\n# Tesla's performance values\nvalues3 = [92, 88, 72, 85, 90, 94, 80, 84]\n# Labels for the lines representing each company\nline_label1 = \"Amazon\"\nline_label2 = \"Meta\"\nline_label3 = \"Tesla\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0); np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories = [\n    \"Revenue Growth\",\n    \"Market Share\",\n    \"Customer Satisfaction\",\n    \"Innovation\",\n    \"Operational Efficiency\",\n    \"Brand Strength\",\n    \"Employee Satisfaction\",\n    \"Sustainability\",\n]\nvalues1 = [85, 78, 90, 95, 82, 88, 70, 76]  # Values for Amazon\nvalues2 = [78, 65, 85, 80, 75, 80, 68, 70]  # Values for Meta\nvalues3 = [92, 88, 72, 85, 90, 94, 80, 84]  # Values for Tesla\n\n# Number of variables\nN = len(categories)\n\n# Compute angle for each category\nangles = [n / float(N) * 2 * np.pi for n in range(N)]\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\nangles += angles[:1]\n\n# Extracted variables\nxticks = angles[:-1]\nxtickslabel = categories\nyticks = [20, 40, 60, 80, 100]\nytickslabel = [\"20\", \"40\", \"60\", \"80\", \"100\"]\nylim = (0, 100)\nline_label1 = \"Amazon\"\nline_label2 = \"Meta\"\nline_label3 = \"Tesla\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialize the spider plot\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(xticks, xtickslabel, color=\"navy\", size=8)\nax.tick_params(pad=15)  # Adjust the distance of the label from the axis\n\n# Draw ylabels\nax.set_rlabel_position(30)\nplt.yticks(yticks, ytickslabel, color=\"darkblue\", size=7)\nplt.ylim(ylim)\n\n# Plot data\nax.plot(angles, values1, linewidth=2, linestyle=\"dashed\", label=line_label1, color=\"gold\")\nax.fill(angles, values1, color=\"yellow\", alpha=0.25)\n\nax.plot(angles, values2, linewidth=2, linestyle=\"dashed\", label=line_label2, color=\"silver\")\nax.fill(angles, values2, color=\"lightgrey\", alpha=0.25)\n\nax.plot(angles, values3, linewidth=2, linestyle=\"solid\", label=line_label3, color=\"green\")\nax.fill(angles, values3, color=\"lightgreen\", alpha=0.25)\n\n# Add legend\nplt.legend(loc=\"upper right\", bbox_to_anchor=(1.2, 1.2), ncol=3, frameon=False)\n\n# Set the background color inside the radar chart to white\nax.set_facecolor(\"white\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit\nplt.tight_layout()\n\nplt.savefig('radar_19.pdf', bbox_inches='tight')"}
{"idx": "area_5", "instruction": "There is a reference image for you and I also have a set of data about global forest cover decline by region over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The forest cover data is as follows:\n# Year\nyear = [1950, 1960, 1970, 1980, 1990, 2000, 2010, 2018]\n# Forest cover by continent\npopulation_by_continent = {\n    \"africa\": [75, 74, 72, 60, 45, 40, 37, 34],\n    \"americas\": [85, 80, 75, 70, 65, 60, 55, 50],\n    \"asia\": [66, 63, 56, 50, 46, 40, 38, 37],\n    \"europe\": [40, 38, 36, 34, 32, 30, 28, 26],\n    \"oceania\": [20, 28, 30, 24, 15, 20, 18, 16],\n}\n# Label of x axis\nxlabel_value = \"Year\"\n# Label of y axis\nylabel_value = \"Forest Cover (millions of hectares)\"\n# Title\ntitle_value = \"Global Forest Cover Decline by Region\"\n# Legend Labels\nlegend_labels = [\"AF rate\", \"AM rate\", \"AS rate\", \"EU rate\", \"OC rate\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nyear = [1950, 1960, 1970, 1980, 1990, 2000, 2010, 2018]\npopulation_by_continent = {\n    \"africa\": [75, 74, 72, 60, 45, 40, 37, 34],      # Forest cover decreasing\n    \"americas\": [85, 80, 75, 70, 65, 60, 55, 50],    # Forest cover decreasing\n    \"asia\": [66, 63, 56, 50, 46, 40, 38, 37],        # Forest cover decreasing\n    \"europe\": [40, 38, 36, 34, 32, 30, 28, 26],      # Forest cover decreasing\n    \"oceania\": [20, 28, 30, 24, 15, 20, 18, 16],     # Forest cover decreasing\n}\n\n# Extracted variables\nlegend_labels = [\"AF rate\", \"AM rate\", \"AS rate\", \"EU rate\", \"OC rate\"]\nxlim_values = (1950, 2018)\nylim_values = (0, 300)\nxlabel_value = \"Year\"\nylabel_value = \"Forest Cover (millions of hectares)\"\ntitle_value = \"Global Forest Cover Decline by Region\"\nlegend_loc = \"upper center\"\nlegend_reverse = False\nlegend_frameon = False\nlegend_ncol = 5\nlegend_bbox_to_anchor = (0.5, 1.08)\ntitle_y_position = 1.08\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(8, 6))\nax.stackplot(\n    year,\n    population_by_continent.values(),\n    labels=legend_labels,\n    alpha=0.8,\n)\nax.legend(\n    loc=legend_loc, reverse=legend_reverse, frameon=legend_frameon, ncol=legend_ncol, bbox_to_anchor=legend_bbox_to_anchor\n)\nax.set_xlim(*xlim_values)\nax.set_ylim(*ylim_values)\nax.set_title(title_value, y=title_y_position)\nax.set_xlabel(xlabel_value)\nax.set_ylabel(ylabel_value)\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('area_5.pdf', bbox_inches='tight')"}
{"idx": "bar_35", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency for two types of vehicles, sedan and SUV, across different testing methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The fuel efficiency data is as follows:\n# Testing methods\nmethods = [\"Random\", \"City Cycle\", \"Highway Cycle\", \"Combined Cycle\", \"EPA Test\"]\n# Fuel efficiency for sedan\nfuel_efficiency_sedan = [25.4, 24.8, 33.1, 29.5, 28.7]\n# Fuel efficiency for SUV\nfuel_efficiency_suv = [19.2, 18.7, 24.3, 21.0, 20.5]\n# Label of y axis\nylabel_value = \"Average Fuel Efficiency (MPG)\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmethods = [\"Random\", \"City Cycle\", \"Highway Cycle\", \"Combined Cycle\", \"EPA Test\"]\nfuel_efficiency_sedan = [25.4, 24.8, 33.1, 29.5, 28.7]\nfuel_efficiency_suv = [19.2, 18.7, 24.3, 21.0, 20.5]\nindex = [6, 12]\n# Limits, labels, and title for the plot\nylim_values = (15.0, 35.0)\nylabel_value = \"Average Fuel Efficiency (MPG)\"\nxtickslabel_values = [\"Sedan\", \"SUV\"]\n\n# no change\n# Colors (approximated from the image)\ncolors = [\"#837ba8\", \"#aa6262\", \"#6e9d72\", \"#c38c6a\", \"#5e74a0\"]\n# Labels for legend and plot type\nlabels = methods\nxticks_values = index\n# X-axis positions\n# Bar width\nbar_width = 1\nr1 = np.arange(len(methods))\nr2 = [x + bar_width + len(r1) for x in r1]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(8, 5))\n# Create bars\nfor i in range(len(r1)):\n    plt.bar(\n        index[0] + (i - 2) * bar_width,\n        fuel_efficiency_sedan[i],\n        color=colors[i],\n        width=bar_width,\n        edgecolor=\"white\",\n        label=labels[i],\n    )\n\nfor i in range(len(r2)):\n    plt.bar(\n        index[1] + (i - 2) * bar_width,\n        fuel_efficiency_suv[i],\n        color=colors[i],\n        width=bar_width,\n        edgecolor=\"white\",\n    )\n\n# Add text on top of the bars\nfor i in range(len(r1)):\n    plt.text(\n        index[0] + (i - 2) * bar_width,\n        fuel_efficiency_sedan[i] + 0.05,\n        str(fuel_efficiency_sedan[i]),\n        ha=\"center\",\n    )\n    plt.text(\n        index[1] + (i - 2) * bar_width,\n        fuel_efficiency_suv[i] + 0.05,\n        str(fuel_efficiency_suv[i]),\n        ha=\"center\",\n    )\n\n# General layout\nplt.xticks(xticks_values, xtickslabel_values)\nplt.ylabel(ylabel_value)\nplt.ylim(*ylim_values)\nplt.legend(loc=\"upper center\", ncol=5, bbox_to_anchor=(0.5, 1.1), frameon=False)\n\nplt.tick_params(axis=\"x\", which=\"both\", length=0)\nplt.gca().yaxis.grid(True)\nplt.gca().set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_35.pdf', bbox_inches='tight')"}
{"idx": "line_16", "instruction": "There is a reference image for you and I also have a set of data about the treatment effectiveness of three patient groups (Diabetes Patients, Hypertension Patients, and Heart Disease Patients) at different dosage levels. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:n# Dosage levels\ndosage_levels = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n# Effectiveness for each patient group\ndiabetes_patients = [0.85, 0.88, 0.92, 0.90, 0.93, 0.91]\nhypertension_patients = [0.87, 0.89, 0.91, 0.93, 0.92, 0.94]\nheart_disease_patients = [0.90, 0.88, 0.87, 0.89, 0.91, 0.90]\n# Labels for the y-axis\nylabel_value = \"Treatment Effectiveness\"\n# Labels for the x-axis\nxlabel_value = \"Dosage Levels (mg)\"\n# Labels\ndiabetes_label = \"Diabetes Patients\"\nhypertension_label = \"Hypertension Patients\"\nheart_disease_label = \"Heart Disease Patients\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ndosage_levels = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ndiabetes_patients = [0.85, 0.88, 0.92, 0.90, 0.93, 0.91]\nhypertension_patients = [0.87, 0.89, 0.91, 0.93, 0.92, 0.94]\nheart_disease_patients = [0.90, 0.88, 0.87, 0.89, 0.91, 0.90]\n# Extracted variables\ndiabetes_label = \"Diabetes Patients\"\nhypertension_label = \"Hypertension Patients\"\nheart_disease_label = \"Heart Disease Patients\"\n\nylim_values = [0.84, 0.94]\nyticks_values = [0.84, 0.86, 0.88, 0.90, 0.92, 0.94]\nyticks_labels = [\"$0.84$\", \"$0.86$\", \"$0.88$\", \"$0.90$\", \"$0.92$\", \"$0.94$\"]\nxlabel_value = \"Dosage Levels (mg)\"\nylabel_value = \"Treatment Effectiveness\"\nxlim_values = [0, 1]\n\nxticks_fontsize = \"16\"\nyticks_fontsize = \"16\"\nxlabel_fontsize = \"14\"\nylabel_fontsize = \"14\"\nlegend_location = \"lower left\"\nlegend_ncol = 3\nlegend_bbox_to_anchor = (0, -0.2)\nlegend_frameon = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plot the data\nax.plot(dosage_levels, diabetes_patients, \"o-\", label=diabetes_label, clip_on=False, zorder=10, color=\"blue\", linewidth=1.6, markersize=12)\nax.plot(dosage_levels, hypertension_patients, \"d-\", label=hypertension_label, clip_on=False, zorder=10, color=\"red\", linewidth=1.6, markersize=12)\nax.plot(dosage_levels, heart_disease_patients, \"^-\", label=heart_disease_label, clip_on=False, zorder=10, color=\"green\", linewidth=1.6, markersize=12)\n\nplt.ylim(ylim_values)\nplt.yticks(yticks_values, yticks_labels, fontsize=yticks_fontsize)\n\n# Set x-axis to only display specific ticks and extend x-axis to leave space at right\nplt.xticks(fontsize=xticks_fontsize)\nplt.xlim(xlim_values)\nplt.tick_params(axis=\"both\", which=\"both\", color=\"gray\")\n\n# Add legend, labels, and grid\nax.legend(loc=legend_location, ncol=legend_ncol, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon)\nax.set_xlabel(xlabel_value, fontsize=xlabel_fontsize)\nax.set_ylabel(ylabel_value, fontsize=ylabel_fontsize)\nax.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\nplt.savefig('line_16.pdf', bbox_inches='tight')"}
{"idx": "line_76", "instruction": "There is a reference image for you and I also have a set of data about the performance scores of different machine learning models across various configurations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The performance score data is as follows:\n# Models\nmodels = [\"ResNet50\", \"DenseNet121\", \"EfficientNetB0\"]\n# Configurations\nconfigurations = [\"High Performance\", \"Cost Effective\", \"Energy Efficient\"]\n# Data\ndata = {\n    \"ResNet50\": {\n        \"High Performance\": [83.19, 85.67, 84.32, 86.16, 85.89, 86.83, 87.87, 88.2, 89.29, 90.05],\n        \"Cost Effective\": [81.78, 80.7, 79.35, 78.62, 77.49, 76.76, 75.92, 75.72, 74.23, 74.53],\n        \"Energy Efficient\": [89.47, 90.46, 91.99, 90.97, 91.14, 92.97, 93.81, 94.81, 95.82, 96.93],\n    },\n    \"DenseNet121\": {\n        \"High Performance\": [67.25, 65.01, 69.56, 66.44, 70.24, 68.06, 72.19, 70.02, 74.60, 72.90],\n        \"Cost Effective\": [71.18, 69.29, 66.35, 64.98, 62.70, 60.91, 58.74, 56.53, 54.52, 52.31],\n        \"Energy Efficient\": [63.97, 65.68, 67.36, 66.92, 67.06, 68.04, 69.00, 70.19, 71.14, 72.99],\n    },\n    \"EfficientNetB0\": {\n        \"High Performance\": [71.49, 72.68, 73.62, 74.16, 75.24, 76.48, 77.07, 78.69, 79.07, 80.69],\n        \"Cost Effective\": [81.97, 79.54, 80.22, 78.66, 79.76, 78.56, 76.12, 75.60, 74.30, 72.72],\n        \"Energy Efficient\": [70.21, 71.54, 72.00, 71.19, 72.94, 73.24, 74.45, 75.28, 76.04, 77.32],\n    },\n}\n# Label of x axis\nxlabel = \"Iteration\"\n# Label of y axis\nylabel = \"Score\"\n# Title\ntitles = [f\"Performance of {model}\" for model in models]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 12.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nmodels = [\"ResNet50\", \"DenseNet121\", \"EfficientNetB0\"]\nconfigurations = [\"High Performance\", \"Cost Effective\", \"Energy Efficient\"]\ndata = {\n    \"ResNet50\": {\n        \"High Performance\": [83.19, 85.67, 84.32, 86.16, 85.89, 86.83, 87.87, 88.2, 89.29, 90.05],  # steady rise\n        \"Cost Effective\": [81.78, 80.7, 79.35, 78.62, 77.49, 76.76, 75.92, 75.72, 74.23, 74.53],  # steady decline\n        \"Energy Efficient\": [89.47, 90.46, 91.99, 90.97, 91.14, 92.97, 93.81, 94.81, 95.82, 96.93],  # fluctuating rise\n    },\n    \"DenseNet121\": {\n        \"High Performance\": [67.25, 65.01, 69.56, 66.44, 70.24, 68.06, 72.19, 70.02, 74.60, 72.90],  # fluctuating rise\n        \"Cost Effective\": [71.18, 69.29, 66.35, 64.98, 62.70, 60.91, 58.74, 56.53, 54.52, 52.31],  # steady decline\n        \"Energy Efficient\": [63.97, 65.68, 67.36, 66.92, 67.06, 68.04, 69.00, 70.19, 71.14, 72.99],  # steady rise\n    },\n    \"EfficientNetB0\": {\n        \"High Performance\": [71.49, 72.68, 73.62, 74.16, 75.24, 76.48, 77.07, 78.69, 79.07, 80.69],  # steady rise\n        \"Cost Effective\": [81.97, 79.54, 80.22, 78.66, 79.76, 78.56, 76.12, 75.60, 74.30, 72.72],  # fluctuating decline\n        \"Energy Efficient\": [70.21, 71.54, 72.00, 71.19, 72.94, 73.24, 74.45, 75.28, 76.04, 77.32],  # steady rise\n    },\n}\n\n# Extracted variables\nline_labels = [f\"{config} - {model}\" for model in models for config in configurations]\nylims = [(70, 100), (50, 75), (65, 85)]\nyticks = [np.arange(70, 101, 2.5), np.arange(50, 76, 2.5), np.arange(65, 86, 2.5)]\ntitles = [f\"Performance of {model}\" for model in models]\nxlabel = \"Iteration\"\nylabel = \"Score\"\nxlim = (0, 9)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Prepare figure and axes\nfig, axs = plt.subplots(3, 1, figsize=(8, 12), sharex=True)\n\n# Color and marker setup\ncolors = [\"red\", \"green\", \"blue\"]\nmarkers = [\"o\", \"s\", \"^\"]\n\n# Plotting\nfor idx, (model, ylim, ytick, title) in enumerate(zip(models, ylims, yticks, titles)):\n    ax = axs[idx]\n    ax.set_ylim(ylim)\n    ax.set_yticks(ytick)\n    ax.set_title(title, y=1.1)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_xlim(xlim)\n    ax.tick_params(axis=\"both\", which=\"both\", color=\"gray\")\n    for config, color, marker, line_label in zip(configurations, colors, markers, line_labels):\n        scores = data[model][config]\n        ax.plot(\n            scores,\n            marker=marker,\n            color=color,\n            clip_on=False,\n            zorder=10,\n            label=line_label,\n            linestyle=\"-\",\n            markersize=8,\n        )\n    ax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.1), ncol=3, frameon=False)\n    ax.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('line_76.pdf', bbox_inches='tight')"}
{"idx": "radar_8", "instruction": "There is a reference image for you and I also have a set of data comparing three different methods across five medical assessment categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The medical assessment data is as follows:\n# Categories of medical assessment\nlabels = np.array(\n    [\n        \"Cancer\\nScreening\",\n        \"Cardiovascular\\nDiagnosis\",\n        \"Infectious\\nDisease Detection\",\n        \"Neurological\\nAssessment\",\n        \"Chronic Disease\\nManagement\",\n    ]\n)\n# Statistics for each method\nstats_method1 = np.array([55, 75, 60, 80, 73])\nstats_method2 = np.array([68, 70, 86, 90, 55])\nstats_method3 = np.array([73, 85, 75, 50, 85])\n# Labels for each method\nlabel_method1 = \"Method 1\"\nlabel_method2 = \"Method 2\"\nlabel_method3 = \"Method 3\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for each method\nlabels = np.array(\n    [\n        \"Cancer\\nScreening\",\n        \"Cardiovascular\\nDiagnosis\",\n        \"Infectious\\nDisease Detection\",\n        \"Neurological\\nAssessment\",\n        \"Chronic Disease\\nManagement\",\n    ]\n)\nstats_method1 = np.array([55, 75, 60, 80, 73])\nstats_method2 = np.array([68, 70, 86, 90, 55])\nstats_method3 = np.array([73, 85, 75, 50, 85])\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n# The plot is made circular, so we need to \"complete the loop\" and append the start to the end.\nstats_method1 = np.concatenate((stats_method1, [stats_method1[0]]))\nstats_method2 = np.concatenate((stats_method2, [stats_method2[0]]))\nstats_method3 = np.concatenate((stats_method3, [stats_method3[0]]))\nangles += angles[:1]\n\n# Extracted variables\nlabel_method1 = \"Method 1\"\nlabel_method2 = \"Method 2\"\nlabel_method3 = \"Method 3\"\nylim_values = (0, 90)\nxticks_values = angles[:-1]\nyticks_values = [20, 40, 60, 80]\nxtickslabel_values = labels\nytickslabel_values =[]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Size of the figure\nfig, ax = plt.subplots(figsize=(5, 5), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels with increased padding\nplt.xticks(xticks_values, xtickslabel_values)\nax.tick_params(pad=23)  # Increase the distance of the label from the axis\n\n# Draw ylabels and set them to be dashed\nax.set_rlabel_position(0)\nplt.yticks(yticks_values, ytickslabel_values, color=\"grey\", size=7)\nplt.ylim(ylim_values)\n\n# Customizing the grid (set grid to be dashed)\nax.yaxis.grid(True, linestyle=\"--\", color=\"grey\", linewidth=0.5)\n\n# Plot data\nax.plot(\n    angles, stats_method1, color=\"red\", linewidth=1, linestyle=\"solid\", label=label_method1\n)\nax.fill(angles, stats_method1, color=\"red\", alpha=0.25)\n\nax.plot(\n    angles, stats_method2, color=\"blue\", linewidth=1, linestyle=\"dashed\", label=label_method2\n)\nax.fill(angles, stats_method2, color=\"blue\", alpha=0.25)\n\nax.plot(\n    angles,\n    stats_method3,\n    color=\"green\",\n    linewidth=1,\n    linestyle=\"dotted\",\n    label=label_method3,\n)\nax.fill(angles, stats_method3, color=\"green\", alpha=0.25)\n\n# Add legend\nplt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, -0.3), ncol=3, frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('radar_8.pdf', bbox_inches='tight')"}
{"idx": "bar_10", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Category of product\ncategories = ['Electronics', 'Clothing', 'Home', 'Beauty', 'Books', 'Sports', 'Toys', 'Furniture', 'Groceries', 'Automotive',]\n# Sales\nvalues = [500, 600, 550, 650, 700, 600, 700, 750, 800, 650]\n# Label of y axis\nylabel = 'Sales (thousands)'\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\n    \"Electronics\",\n    \"Clothing\",\n    \"Home\",\n    \"Beauty\",\n    \"Books\",\n    \"Sports\",\n    \"Toys\",\n    \"Furniture\",\n    \"Groceries\",\n    \"Automotive\",\n]\nvalues = [500, 600, 550, 650, 700, 600, 700, 750, 800, 650]  # Different distribution\n\n# Plot labels and titles\nylabel = \"Sales (thousands)\"\nylim = (400, 850)\nyticks = [400, 500, 600, 700, 800, 900]\nxticks = categories  # Assuming xticks are the same as categories\nxtickslabel_rotation = 45  # Assuming no rotation is needed\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))  # Width, Height in inches\n\n# Bar chart\nax.bar(categories, values, color=\"#7badd2\")\n\n# Set labels and title\nax.set_ylabel(ylabel)\nax.set_ylim(ylim)  # Set y-axis limit to match the picture\nax.set_yticks(yticks)\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n# Rotate x-axis labels\nplt.xticks(ticks=xticks, rotation=xtickslabel_rotation)\n\n# Hide the border\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_10.pdf', bbox_inches='tight')"}
{"idx": "bar_37", "instruction": "There is a reference image for you and I also have a set of data about blood sugar change after consuming different foods over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The blood sugar change data is as follows:\n# Foods\nfoods = [\"Apple\", \"Banana\", \"Orange\"]\n# Blood Sugar Change (%)\nblood_sugar_change = {\n    \"0 min\": [0.0, 0.0, 0.0],\n    \"15 min\": [5.0, 12.0, 7.0],\n    \"30 min\": [8.0, 20.0, 12.0],\n    \"45 min\": [7.5, 15.0, 10.0],\n    \"60 min\": [5.0, 10.0, 8.0],\n    \"75 min\": [3.0, 8.0, 5.0],\n    \"90 min\": [1.0, 5.0, 2.0],\n}\n# Label of y axis\nylabel_text = \"Blood Sugar Change (%)\"\n# Label of x axis\nxlabel_text = \"Foods\"\n# Titles\ntitle_text = \"Blood Sugar Change Over Time by Food Type\"\nlegend_title = \"Time Interval\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\n# Data\n# Data\nfoods = [\"Apple\", \"Banana\", \"Orange\"]\nblood_sugar_change = {\n    \"0 min\": [0.0, 0.0, 0.0],\n    \"15 min\": [5.0, 12.0, 7.0],\n    \"30 min\": [8.0, 20.0, 12.0],\n    \"45 min\": [7.5, 15.0, 10.0],\n    \"60 min\": [5.0, 10.0, 8.0],\n    \"75 min\": [3.0, 8.0, 5.0],\n    \"90 min\": [1.0, 5.0, 2.0],\n}\n\n# Plot labels and types\nylabel_text = \"Blood Sugar Change (%)\"\nxlabel_text = \"Foods\"\ntitle_text = \"Blood Sugar Change Over Time by Food Type\"\nlegend_title = \"Time Interval\"\nbar_label_fontsize = 10\nylabel_fontsize = 12\n\n# Plot limits and ticks\nylim_values = (0, 25)\nyticks_values = [0, 5, 10, 15, 20, 25]\n\n\n# Colors for the bars\ncolors = [\"#de9aa4\", \"#bc9c58\", \"#8ea654\", \"#65ab91\", \"#67a9b6\", \"#a3ade5\", \"#da8fdc\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Setup the figure and axes\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Bar width\nbar_width = 0.1\n\n# Positions of the bars on the x-axis\nr = np.arange(len(foods))\n\n# Create bars for each perturbation\nfor i, (perturbation, values) in enumerate(blood_sugar_change.items()):\n    ax.bar(\n        r + i * bar_width,\n        values,\n        color=colors[i],\n        width=bar_width,\n        edgecolor=\"white\",\n        label=perturbation,\n    )\n\n# Add labels on top of the bars\nfor i, (perturbation, values) in enumerate(blood_sugar_change.items()):\n    for j, value in enumerate(values):\n        ax.text(\n            j + i * bar_width,\n            value + 0.1,\n            str(value),\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=bar_label_fontsize,\n        )\n\n# General layout\nax.set_ylabel(ylabel_text, fontsize=ylabel_fontsize)\nax.set_xticks(r + bar_width * (len(blood_sugar_change) - 1) / 2)\nax.set_xticklabels(foods)\nax.set_ylim(*ylim_values)\nax.set_yticks(yticks_values)\nax.legend(\n    title=legend_title,\n    loc=\"upper center\",\n    bbox_to_anchor=(0.5, 1.2),\n    frameon=False,\n    ncol=7,\n)\nax.set_facecolor(\"#eaeaf2\")\nax.yaxis.grid(True, color=\"white\")\nax.set_axisbelow(True)\n\n# Remove spines\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nfig.set_size_inches(12, 4)\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\nplt.tight_layout()\nplt.savefig('bar_37.pdf', bbox_inches='tight')"}
{"idx": "line_21", "instruction": "There is a reference image for you and I also have a set of data about accident rates in urban and suburban areas at different speed limits. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The accident rate data is as follows:\n# Speed limits\nspeed_limits = [\"30 km/h\", \"40 km/h\", \"50 km/h\", \"60 km/h\", \"70 km/h\", \"80 km/h\", \"90 km/h\", \"100 km/h\", \"110 km/h\"]\n# Accident rates in urban areas\nurban_accidents = [10, 12, 15, 18, 22, 25, 28, 30, 32]\n# Accident rates in suburban areas\nsuburban_accidents = [8, 10, 13, 16, 20, 23, 25, 27, 29]\n# Label of x axis\nxlabel_text = \"Speed Limit (km/h)\"\n# Label of y axis\nylabel_text = \"Accident Rate (%)\"\n# Labels\nurban_label = \"Urban Area\"\nsuburban_label = \"Suburban Area\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nspeed_limits = [\"30 km/h\", \"40 km/h\", \"50 km/h\", \"60 km/h\", \"70 km/h\", \"80 km/h\", \"90 km/h\", \"100 km/h\", \"110 km/h\"]\nurban_accidents = [10, 12, 15, 18, 22, 25, 28, 30, 32]\nsuburban_accidents = [8, 10, 13, 16, 20, 23, 25, 27, 29]\n\n# Variables for plot configuration\nurban_label = \"Urban Area\"\nsuburban_label = \"Suburban Area\"\nxlim_values = (0, len(speed_limits) - 1)\nylim_values = (5, 35)\nxlabel_text = \"Speed Limit (km/h)\"\nylabel_text = \"Accident Rate (%)\"\nxticks_values = np.arange(len(speed_limits))\nyticks_values = [5, 10, 15, 20, 25, 30, 35]\nxtickslabel_fontsize = 16\nytickslabel_fontsize = 16\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the lines\nplt.figure(figsize=(9, 6))  # Adjusting figure size\nplt.plot(\n    speed_limits,\n    urban_accidents,\n    marker=\"o\",\n    linestyle=\"--\",\n    linewidth=4,\n    clip_on=False,\n    zorder=10,\n    color=\"#1f77b4\",\n    markersize=12,\n    label=urban_label,\n    mec=\"#4682b4\",\n    mfc=\"white\",\n    mew=4,\n)  # Adjusted color and marker size\nplt.plot(\n    speed_limits,\n    suburban_accidents,\n    marker=\"s\",\n    linestyle=\"-.\",\n    linewidth=4,\n    clip_on=False,\n    zorder=10,\n    color=\"#2ca02c\",\n    markersize=12,\n    label=suburban_label,\n    mec=\"#008b74\",\n    mfc=\"white\",\n    mew=4,\n)  # Adjusted color, line style, and marker size\n\n# Adding titles and labels with increased font size\nplt.yticks(yticks_values, fontsize=ytickslabel_fontsize)\nplt.xticks(xticks_values, fontsize=xtickslabel_fontsize)\nplt.ylim(*ylim_values)\nplt.xlim(*xlim_values)\nplt.xlabel(xlabel_text, fontsize=xtickslabel_fontsize)\nplt.ylabel(ylabel_text, fontsize=ytickslabel_fontsize)\n\n# Adding legend with square markers\nplt.legend(\n    markerscale=1,\n    fontsize=16,\n    loc=\"lower center\",\n    bbox_to_anchor=(0.5, -0.25),\n    ncol=2,\n    frameon=False,\n)\n\n# Changing the background color to #f5f5f5\nplt.gca().set_facecolor(\"#f5f5f5\")\n\n# Change the axis colors\nax = plt.gca()\nax.spines[\"bottom\"].set_color(\"#f5f5f5\")\nax.spines[\"top\"].set_color(\"#f5f5f5\")  # Optional: hide or set color\nax.spines[\"left\"].set_color(\"#f5f5f5\")\nax.spines[\"right\"].set_color(\"#f5f5f5\")  # Optional: hide or set color\n\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n# Adding grid\nplt.grid(True, color=\"white\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\nplt.savefig('line_21.pdf', bbox_inches='tight')"}
{"idx": "pie_13", "instruction": "There is a reference image for you and I also have two sets of data about urban transport usage for the years 2020 and 2024. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Categories of transport\ncategories = [\"Cars\", \"Bicycles\", \"Public Transport\", \"Walking\"]\n# Data for 2020\nurban_transport_data_2020 = [40.5, 12.3, 30.8, 16.4]\n# Data for 2024\nurban_transport_data_2024 = [33.2, 17.1, 36.6, 13.1]\n# Titles for the charts\ntitle_urban_transport_2020 = \"Urban Transport in 2020\"\ntitle_urban_transport_2024 = \"Urban Transport in 2024\"\n# Labels\nurban_transport_2020_label = \"Urban Transport 2020\"\nurban_transport_2024_label = \"Urban Transport 2024\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the charts\ncategories = [\"Cars\", \"Bicycles\", \"Public Transport\", \"Walking\"]\nurban_transport_data_2020 = [40.5, 12.3, 30.8, 16.4]\nurban_transport_data_2024 = [33.2, 17.1, 36.6, 13.1]\n\nurban_transport_2020_label = 'Urban Transport 2020'\nurban_transport_2024_label = 'Urban Transport 2024'\ntitle_urban_transport_2020 = \"Urban Transport in 2020\"\ntitle_urban_transport_2024 = \"Urban Transport in 2024\"\n\nlegend_labels = categories\n\n\ncolors = [\"#FFD580\", \"#C0C0C0\", \"#8FBC8F\", \"#ebf5a4\"]\n# Variables for plot configuration\nlegend_loc = \"lower center\"\nlegend_ncol = 4\nlegend_frameon = False\nwedgeprops_dict = dict(width=0.3)\nstartangle = 90\ncounterclock = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure with specific dimensions\nfig, ax = plt.subplots(2, 1, figsize=(5, 8))\n\n# Full Finetuning Donut Chart\nax[0].pie(\n    urban_transport_data_2020,\n    labels=categories,\n    colors=colors,\n    startangle=startangle,\n    counterclock=counterclock,\n    wedgeprops=wedgeprops_dict,\n)\nax[0].set_title(title_urban_transport_2020)\n\n# QLoRA Donut Chart\nax[1].pie(\n    urban_transport_data_2024,\n    labels=categories,\n    colors=colors,\n    startangle=startangle,\n    counterclock=counterclock,\n    wedgeprops=wedgeprops_dict,\n)\nax[1].set_title(title_urban_transport_2024)\n\n# Add legend\nfig.legend(legend_labels, loc=legend_loc, ncol=legend_ncol, frameon=legend_frameon)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap and Show plot\nplt.tight_layout()\nplt.savefig('pie_13.pdf', bbox_inches='tight')"}
{"idx": "scatter_11", "instruction": "There is a reference image for you and I also have a set of data about average scores and study hours in different subjects. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Subjects\nnames = [\"Math\", \"Science\", \"Literature\", \"History\", \"Art\", \"Music\"]\n# Average scores\nx = [85, 90, 75, 80, 70, 95]\n# Average study hours per week\ny = [4.5, 4.0, 3.5, 3.0, 2.5, 5.0]\n# Number of students (represented by bubble size)\nsizes = [300, 600, 900, 1200, 1500, 1800]\n# Colors for each subject\ncolors = [\"purple\", \"blue\", \"green\", \"yellow\", \"orange\", \"red\"]\n# Label of x axis\nxlabel_value = \"Average Scores\"\n# Label of y axis\nylabel_value = \"Average Study Hours per Week\"\n# Scatter Label\nscatter_label = \"Bubble Size: Number of Students\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting (education domain)\nnames = [\"Math\", \"Science\", \"Literature\", \"History\", \"Art\", \"Music\"]\nx = [85, 90, 75, 80, 70, 95]  # Example average scores\ny = [4.5, 4.0, 3.5, 3.0, 2.5, 5.0]  # Example average study hours per week\nsizes = [300, 600, 900, 1200, 1500, 1800]  # Example number of students\ncolors = [\"purple\", \"blue\", \"green\", \"yellow\", \"orange\", \"red\"]\n\n# Plot and legend labels\nscatter_label = \"Bubble Size: Number of Students\"\n\n# Axis limits\nylim_values = (2.0, 5.5)\n\n# Axis labels\nxlabel_value = \"Average Scores\"\nylabel_value = \"Average Study Hours per Week\"\n\n# Axis ticks\nxticks_values = x  # Set by FixedLocator\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(8, 6))\nscatter = ax.scatter(x, y, s=sizes, c=colors, alpha=0.5, edgecolors=\"black\", label=scatter_label)\n\n# Add labels for each bubble\nfor i, txt in enumerate(names):\n    ax.annotate(txt, (x[i], y[i]), ha=\"center\", va=\"center\", fontsize=8)\n\n# Set the x-axis to a logarithmic scale\nax.set_xscale(\"log\")\nax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f\"{int(x):d}\"))\nax.xaxis.set_major_locator(ticker.FixedLocator(x))\n\n# Set axis labels\nax.set_xlabel(xlabel_value, fontsize=10)\nax.set_ylabel(ylabel_value, fontsize=10)\nax.set_ylim(ylim_values)\n\n# Add grid\nax.grid(True, which=\"both\", linestyle=\"--\", linewidth=0.5)\n\n# Set background color to white\nfig.patch.set_facecolor(\"white\")\nax.set_facecolor(\"white\")\n\n# Add legend\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('scatters_11.pdf', bbox_inches='tight')"}
{"idx": "bar_11", "instruction": "There is a reference image for you and I also have a set of data about customer satisfaction across different age groups. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The customer satisfaction data is as follows:\n# Age Group\ncategories = [\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\"]\n# Customer Satisfaction\nvalues = [-0.20, -0.35, 0.60, 0.55, 0.50]\n# Label of y axis\nylabel = \"Customer Satisfaction\"\n# Label of x axis\nxlabel = \"Age Group\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\n# Data for plotting\ncategories = [\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\"]\nvalues = [-0.20, -0.35, 0.60, 0.55, 0.50]  # Different distribution\n\n# Plot configuration variables\nylabel = \"Customer Satisfaction\"\nxlabel = \"Age Group\"\nxlim = (-0.5, 4.5)\nylim = (-0.4, 0.75)\nyticks = [-0.4, -0.2, 0, 0.2, 0.40, 0.6, 0.8]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure and the bar chart\nfig, ax = plt.subplots(figsize=(6, 6))\nbars = ax.bar(categories, values, color=\"#44739d\", edgecolor=\"white\", width=1, zorder=3)\n\n# Set labels and title\nax.set_ylabel(ylabel)\nax.set_xlabel(xlabel)\nax.set_xlim(xlim)\nax.set_ylim(ylim)\nax.tick_params(axis=\"y\", which=\"both\", length=0)\nax.tick_params(axis=\"x\", which=\"both\", length=0)\nax.set_yticks(yticks)\nax.set_facecolor(\"#eaeaf2\")  # Set the axes background color\nax.yaxis.grid(True, color=\"white\", zorder=2)  # Add grid lines\n\n# Remove the border around the chart area\nfor spine in ax.spines.values():\n    spine.set_visible(False)\n\n# Ensure that the bars for negative values start from zero\nfor bar in bars:\n    if bar.get_height() < 0:\n        bar.set_y(0)\n\n# Add padding around the chart\nplt.subplots_adjust(left=0.15, right=0.95, top=0.95, bottom=0.15)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot\nplt.tight_layout()\nplt.savefig('bar_11.pdf', bbox_inches='tight')"}
{"idx": "bar_42", "instruction": "There is a reference image for you and I also have a set of data about carbon emission changes by energy source. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The carbon emission changes data is as follows:\n# Energy sources\nenergy_sources = [\"Anthracite\", \"Charcoal\", \"Wood\", \"Syngas\", \"Butane\", \"Propane\", \"Liquefied Natural Gas\", \"Compressed Natural Gas\", \"Fuel Cells\", \"Electricity\", \"Biodiesel\", \"Ethanol\", \"Methane\", \"Peat\", \"Waste\", \"Biofuel\", \"Hydrogen\", \"Wave\", \"Tidal\", \"Nuclear\", \"Geothermal\", \"Hydropower\", \"Wind\", \"Solar\", \"Biomass\", \"Natural Gas\", \"Oil\", \"Coal\",]\n# Emission change percentage\nemission_change = [15, 10, 7, 5, 4, 3, 2.5, 2, 1, 0.5, -1, -1.5, -2, -2.5, -3, -3, -3.5, -4, -5, -5, -7, -8, -10, -15, -18, -20, -22.5, -25,]\n# Label of y axis\nylabel_text = \"Emission Change (%)\"\n# Title\ntitle_text = \"Carbon Emission Changes by Energy Source\"\n# Labels\nlegend_labels = [\"Reduction > 5%\", \"5% <= Reduction <= 0%\", \"Increase\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nenergy_sources = [\n    \"Anthracite\",\n    \"Charcoal\",\n    \"Wood\",\n    \"Syngas\",\n    \"Butane\",\n    \"Propane\",\n    \"Liquefied Natural Gas\",\n    \"Compressed Natural Gas\",\n    \"Fuel Cells\",\n    \"Electricity\",\n    \"Biodiesel\",\n    \"Ethanol\",\n    \"Methane\",\n    \"Peat\",\n    \"Waste\",\n    \"Biofuel\",\n    \"Hydrogen\",\n    \"Wave\",\n    \"Tidal\",\n    \"Nuclear\",\n    \"Geothermal\",\n    \"Hydropower\",\n    \"Wind\",\n    \"Solar\",\n    \"Biomass\",\n    \"Natural Gas\",\n    \"Oil\",\n    \"Coal\",\n]\nemission_change = [\n    15,\n    10,\n    7,\n    5,\n    4,\n    3,\n    2.5,\n    2,\n    1,\n    0.5,\n    -1,\n    -1.5,\n    -2,\n    -2.5,\n    -3,\n    -3,\n    -3.5,\n    -4,\n    -5,\n    -5,\n    -7,\n    -8,\n    -10,\n    -15,\n    -18,\n    -20,\n    -22.5,\n    -25,\n]\n\n# Extracted variables\nxlim_values = (-1, len(energy_sources))\nylim_values = (-30, 20)\nylabel_text = \"Emission Change (%)\"\ntitle_text = \"Carbon Emission Changes by Energy Source\"\nlegend_labels = [\"Reduction > 5%\", \"5% <= Reduction <= 0%\", \"Increase\"]\nyticks_values = [-30, -20, -10, 0, 10, 20]\n\n# Colors based on delta accuracy\ncolors = [\n    \"#346c98\" if x < 0 else \"#bb8b39\" if 0 <= x <= 1 else \"#41886c\"\n    for x in emission_change\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(8, 5))  # Convert mm to inches for figsize\nbars = ax.bar(energy_sources, emission_change, color=colors)\n\n# Labels and Title\nax.set_xlim(*xlim_values)\nax.set_xticks([])\nax.set_ylim(*ylim_values)\nax.set_yticks(yticks_values)\nax.set_ylabel(ylabel_text)\nax.set_title(title_text)\n\n# Add text labels\nfor bar, task in zip(bars, energy_sources):\n    y = bar.get_height()\n    if y < 0:\n        ax.text(\n            bar.get_x() + bar.get_width() / 2,\n            0.2,\n            task,\n            rotation=90,\n            ha=\"center\",\n            va=\"bottom\",\n        )\n    else:\n        ax.text(\n            bar.get_x() + bar.get_width() / 2,\n            -0.2,\n            task,\n            rotation=90,\n            ha=\"center\",\n            va=\"top\",\n        )\n\n# Legend\nblue_patch = plt.Rectangle((0, 0), 1, 1, fc=\"blue\", edgecolor=\"none\")\norange_patch = plt.Rectangle((0, 0), 1, 1, fc=\"orange\", edgecolor=\"none\")\ngreen_patch = plt.Rectangle((0, 0), 1, 1, fc=\"green\", edgecolor=\"none\")\nax.legend(\n    [blue_patch, orange_patch, green_patch],\n    legend_labels,\n    loc=\"lower center\",\n    bbox_to_anchor=(0.5, -0.1),\n    ncol=3,\n    frameon=False,\n)\n\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('bar_42.pdf', bbox_inches='tight')"}
{"idx": "line_26", "instruction": "There is a reference image for you and I also have a set of data about the efficiency of different energy storage technologies at various battery capacities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The energy storage efficiency data is as follows:\n# Battery Capacities\nbattery_capacities = [\"256Wh\", \"512Wh\", \"1024Wh\", \"2048Wh\", \"4096Wh\", \"8192Wh\", \"16384Wh\"]\n# Efficiency Values\nlithium_ion_values = [0.85, 0.87, 0.90, 0.92, 0.92, 0.92, 0.92]\nlead_acid_values = [0.75, 0.78, 0.82, 0.85, 0.88, 0.88, 0.88]\nflow_battery_values = [0.65, 0.70, 0.75, 0.80, 0.78, 0.76, 0.74]\n# Label of x axis\nxlabel_value = \"Battery Capacity\"\n# Title\ntitle_value = \"Efficiency of Energy Storage Technologies\"\n# Labels\nline_labels = [\"Lithium-ion\", \"Lead-acid\", \"Flow Battery\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\nfrom matplotlib.ticker import MultipleLocator\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nbattery_capacities = [\"256Wh\", \"512Wh\", \"1024Wh\", \"2048Wh\", \"4096Wh\", \"8192Wh\", \"16384Wh\"]\nlithium_ion_values = [0.85, 0.87, 0.90, 0.92, 0.92, 0.92, 0.92]\nlead_acid_values = [0.75, 0.78, 0.82, 0.85, 0.88, 0.88, 0.88]\nflow_battery_values = [0.65, 0.70, 0.75, 0.80, 0.78, 0.76, 0.74]\n\n# Variables for plot configuration\nline_labels = [\"Lithium-ion\", \"Lead-acid\", \"Flow Battery\"]\nxlim_values = (0, len(battery_capacities) - 1)\nylim_values = (0.6, 1.0)\nxlabel_value = \"Battery Capacity\"\nxticks_values = range(len(battery_capacities))\nyticks_values = np.arange(0.6, 1.1, 0.1)\nxtickslabel_values = battery_capacities\ntitle_value = \"Efficiency of Energy Storage Technologies\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the lines\nplt.figure(figsize=(8, 6))\nplt.plot(\n    battery_capacities,\n    lithium_ion_values,\n    \"o--\",\n    clip_on=False,\n    zorder=10,\n    color=\"#0c5da5\",\n    label=line_labels[0],\n)\nplt.plot(\n    battery_capacities,\n    lead_acid_values,\n    \"o--\",\n    clip_on=False,\n    zorder=10,\n    color=\"#ff9500\",\n    label=line_labels[1],\n)\nplt.plot(\n    battery_capacities,\n    flow_battery_values,\n    \"o--\",\n    clip_on=False,\n    zorder=10,\n    color=\"#00b945\",\n    label=line_labels[2],\n)\n\n# Setting x and y ticks\nplt.xticks(xticks_values, xtickslabel_values, fontsize=14)\nplt.xlim(xlim_values)\nplt.yticks(yticks_values, fontsize=14)\n\n# Adding minor y-axis ticks with a step of 0.05\nax = plt.gca()\n# ax.yaxis.set_minor_locator(MultipleLocator(0.05))\n\n# Adjust tick parameters\nax.tick_params(axis=\"both\", which=\"both\", length=5, color=\"gray\")  # Move ticks inside\nax.tick_params(\n    axis=\"y\", which=\"minor\", length=2\n)  # Ensure minor ticks are visible but smaller\n\n# Title and labels\nplt.title(title_value, fontsize=14)\nplt.xlabel(xlabel_value, fontsize=14)\n\n# Enable gridlines for minor ticks\nplt.grid(True, color=\"#b0b0b0\", which=\"major\", linestyle=\"-\", linewidth=0.5)\n\n# Legend with serif font family\nplt.legend(\n    frameon=False, fontsize=12, loc=\"lower center\", bbox_to_anchor=(0.5, -0.2), ncol=3\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to add more space on the right\nplt.tight_layout()\n\nplt.savefig('line_26.pdf', bbox_inches='tight')"}
{"idx": "pie_14", "instruction": "There is a reference image for you and I also have a set of data about the distribution of technology usage in our company. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Categories of technology\ncategories = [\"Software Development\", \"Data Analysis\", \"Network Security\", \"Cloud Services\", \"Hardware Maintenance\"]\n# Usage distribution percentages\nsizes = [30, 25, 15, 20, 10]\n# Colors for each category\ncolors = [\"#ff9999\", \"#66b3ff\", \"#99ff99\", \"#ffcc99\", \"#c2c2f0\"]\n# Title for the chart\ntitle_text = \"Technology Usage Distribution\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Example data\ncategories = [\"Software Development\", \"Data Analysis\", \"Network Security\", \"Cloud Services\", \"Hardware Maintenance\"]\nsizes = [30, 25, 15, 20, 10]  # These values are illustrative and reflect the usage distribution\ncolors = [\"#ff9999\", \"#66b3ff\", \"#99ff99\", \"#ffcc99\", \"#c2c2f0\"]\n# Variables for plot configuration\ntitle_text = \"Technology Usage Distribution\"  # Title for the donut chart\n\nexplode = (0.0, 0, 0, 0, 0)  # Only \"explode\" the 1st slice (Software Development)\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# The pie function also handles donuts with the 'wedgeprops' argument\nwedges, texts, autotexts = ax.pie(\n    sizes,\n    labels=categories,\n    colors=colors,\n    autopct=\"%1.1f%%\",\n    startangle=90,\n    explode=explode,\n    wedgeprops=dict(width=0.3, edgecolor=\"w\"),\n)\n\n# Draw a circle at the center of pie to make it a donut\ncentre_circle = plt.Circle((0, 0), 0.70, fc=\"white\")\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis(\"equal\")\n\n# Set title for the donut chart\nax.set_title(title_text)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('pie_14.pdf', bbox_inches='tight')"}
{"idx": "scatter_13", "instruction": "There is a reference image for you and I also have a set of data about average yield errors for different crops in an agriculture domain. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The average yield error data is as follows:\n# Test case index\ntest_case_index = [1, 2, 3, 4, 5]\n# Average yield error for wheat\nwheat_yield_error = [2, 3, 2.5, 4, 3.5]\n# Average yield error for corn\ncorn_yield_error = [4, 3.6, 4, 3, 4]\n# Average yield error for soybean\nsoybean_yield_error = [1.5, 2.2, 1, 3.2, 5]\n# Label of x axis\nxlabel = \"Test Case Index\"\n# Label of y axis\nylabel = \"Average Yield Error\"\n# Title of the chart\ntitle = \"Average Yield Error for Different Crops\"\n# Labels\nwheat_label = \"Wheat Yield Error\"\ncorn_label = \"Corn Yield Error\"\nsoybean_label = \"Soybean Yield Error\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting (agriculture domain)\ntest_case_index = [1, 2, 3, 4, 5]\nwheat_yield_error = [2, 3, 2.5, 4, 3.5]\ncorn_yield_error = [4, 3.6, 4, 3, 4]\nsoybean_yield_error = [1.5, 2.2, 1, 3.2, 5]\n\n# Labels and Titles\nxlabel = \"Test Case Index\"\nylabel = \"Average Yield Error\"\ntitle = \"Average Yield Error for Different Crops\"\n\n# Legend labels\nwheat_label = \"Wheat Yield Error\"\ncorn_label = \"Corn Yield Error\"\nsoybean_label = \"Soybean Yield Error\"\n\n# Plot limits\nxlim_values = (1.0, 5.0)\nylim_values = (1, 5)\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size in inches to match the original image's dimensions\nplt.figure(figsize=(8, 6))\n\n# Plotting the data with adjusted marker sizes\nplt.scatter(\n    test_case_index,\n    wheat_yield_error,\n    label=wheat_label,\n    color=\"blue\",\n    clip_on=False,\n    zorder=10,\n    marker=\"^\",\n    s=150,\n)  # Adjusted marker size\nplt.scatter(\n    test_case_index,\n    corn_yield_error,\n    label=corn_label,\n    clip_on=False,\n    zorder=10,\n    color=\"green\",\n    marker=\"s\",\n    s=150,\n)  # Adjusted marker size\nplt.scatter(\n    test_case_index,\n    soybean_yield_error,\n    label=soybean_label,\n    clip_on=False,\n    zorder=10,\n    color=\"black\",\n    marker=\"o\",\n    s=100,\n)  # Adjusted marker size\n\n# Adding labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title, y=1.1)\n\n# Adding a legend with adjusted order\nhandles, labels = plt.gca().get_legend_handles_labels()\norder = [2, 1, 0]  # Adjusted order to match the reference picture\nplt.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\n\nplt.legend(loc=\"upper right\", ncol=3, bbox_to_anchor=(1, 1.08), frameon=False)\nplt.xlim(*xlim_values)\nplt.ylim(*ylim_values)\n# Show grid\nplt.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('scatters_13.pdf', bbox_inches='tight')"}
{"idx": "bar_14", "instruction": "There is a reference image for you and I also have two sets of data about success rates for different algorithms. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Algorithms\nlabels = [\"NN\", \"DT\", \"RF\", \"SVM\", \"KNN\", \"LR\"]\n# Success rates for image classification\ndemocratic = [0.70, 0.65, 0.75, 0.72, 0.68, 0.66]\nmixed = [0.68, 0.72, 0.70, 0.71, 0.69, 0.68]\nrepublican = [0.65, 0.66, 0.67, 0.68, 0.69, 0.70]\n# Success rates for text classification\ndemocratic1 = [0.70, 0.65, 0.75, 0.66, 0.72, 0.70]\nmixed1 = [0.68, 0.70, 0.73, 0.71, 0.68, 0.63]\nrepublican1 = [0.70, 0.66, 0.67, 0.72, 0.73, 0.69]\n# Label of y axis\nylabel = \"Success Rate\"\n# Label of x axis for image classification chart\nxlabel_pheme = \"Performance on Image Classification\"\n# Label of x axis for text classification chart\nxlabel_llm_mis = \"Performance on Text Classification\"\n# Labels\nlegend_label_democratic = \"NN\"\nlegend_label_mixed = \"DT\"\nlegend_label_republican = \"RF\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nlabels = [\"NN\", \"DT\", \"RF\", \"SVM\", \"KNN\", \"LR\"]\ndemocratic = [0.70, 0.65, 0.75, 0.72, 0.68, 0.66]  # Different distribution\nmixed = [0.68, 0.72, 0.70, 0.71, 0.69, 0.68]       # Different distribution\nrepublican = [0.65, 0.66, 0.67, 0.68, 0.69, 0.70]  # Different distribution\n\ndemocratic1 = [0.70, 0.65, 0.75, 0.66, 0.72, 0.70]  # Different distribution\nmixed1 = [0.68, 0.70, 0.73, 0.71, 0.68, 0.63]       # Different distribution\nrepublican1 = [0.70, 0.66, 0.67, 0.72, 0.73, 0.69]  # Different distribution\nx = np.arange(len(labels))  # the label locations\nwidth = 0.25  # the width of the bars\n\n# Variables for plot configuration\nylabel = \"Success Rate\"\nxlabel_pheme = \"Performance on Image Classification\"\nxlabel_llm_mis = \"Performance on Text Classification\"\nxticks = x\nxticklabels = labels\nlegend_label_democratic = \"NN\"\nlegend_label_mixed = \"DT\"\nlegend_label_republican = \"RF\"\nylim_ax1 = (0.60, 0.80)\nylim_ax2 = (0.65, 0.85)\nyticks_ax1 = [0.60, 0.65, 0.70, 0.75, 0.80]\nyticks_ax2 = [0.65, 0.70, 0.75, 0.80,0.85]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Setting up the figure and axes for a 2 x 1 layout\nfig, (ax1, ax2) = plt.subplots(\n    2, 1, figsize=(7, 5), gridspec_kw={\"height_ratios\": [1, 1], \"hspace\": 0.3}\n)\n\n# Upper plot\nrects1 = ax1.bar(\n    x - width - 0.04,\n    democratic,\n    width,\n    label=legend_label_democratic,\n    color=\"#84a9e7\",\n    edgecolor=\"black\",\n)\nrects2 = ax1.bar(x, mixed, width, label=legend_label_mixed, color=\"#8895a3\", edgecolor=\"black\")\nrects3 = ax1.bar(\n    x + width + 0.04,\n    republican,\n    width,\n    label=legend_label_republican,\n    color=\"#e15241\",\n    edgecolor=\"black\",\n)\n# Lower plot\nrects4 = ax2.bar(\n    x - width - 0.04, democratic1, width, color=\"#84a9e7\", edgecolor=\"black\"\n)\nrects5 = ax2.bar(x, mixed1, width, color=\"#8895a3\", edgecolor=\"black\")\nrects6 = ax2.bar(\n    x + width + 0.04, republican1, width, color=\"#e15241\", edgecolor=\"black\"\n)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax1.set_ylabel(ylabel)\nax2.set_ylabel(ylabel)\nax1.set_xlabel(xlabel_pheme)\nax2.set_xlabel(xlabel_llm_mis)\nax1.set_xticks(xticks)\nax1.set_xticklabels(xticklabels)\nax2.set_xticks(xticks)\nax2.set_xticklabels(xticklabels)\nax1.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.25), ncol=3, frameon=False)\n\n# Set y-axis limit to match the reference picture\nax1.set_ylim(ylim_ax1)\nax2.set_ylim(ylim_ax2)\nax1.tick_params(axis=\"x\", which=\"both\", length=0)\nax2.tick_params(axis=\"x\", which=\"both\", length=0)\nax1.set_yticks(yticks_ax1)\nax2.set_yticks(yticks_ax2)\n\n# Set grid color and style\nax1.grid(axis=\"y\", color=\"gray\", linestyle=\"--\", linewidth=0.5)\nax2.grid(axis=\"y\", color=\"gray\", linestyle=\"--\", linewidth=0.5)\nax1.tick_params(axis=\"y\", which=\"major\", color=\"gray\")\nax2.tick_params(axis=\"y\", which=\"major\", color=\"gray\")\nax1.set_axisbelow(True)\nax2.set_axisbelow(True)\n\n# Remove top and right borders\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"bottom\"].set_visible(False)\nax1.spines[\"left\"].set_color(\"gray\")\nax2.spines[\"top\"].set_visible(False)\nax2.spines[\"right\"].set_visible(False)\nax2.spines[\"bottom\"].set_visible(False)\nax2.spines[\"left\"].set_color(\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_14.pdf', bbox_inches='tight')"}
{"idx": "bar_45", "instruction": "There is a reference image for you and I also have a set of data about the impact of speed limits on accident rates in different areas. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The accident rate change data is as follows:\n# Speed limits\nspeed_limits = [30, 40, 50, 60, 70]\n# Accident rate change for different areas\nUrban_Area = [-5, -7, -6, -8, -9]\nSuburban_Area = [-4, -6, -5, -7, -8]\nHighway_Area = [-6, -8, -7, -9, -10]\nRural_Area = [-3, -5, -4, -6, -7]\n# Label of y axis\nylabel = \"Accident Rate Change (%)\"\n# Label of x axis\nxlabel = \"Speed Limit (mph)\"\n# Title\ntitle = \"Impact of Speed Limits on Accident Rates\"\n# Labels\nlegend_labels = [\"Urban Area\", \"Suburban Area\", \"Highway Area\", \"Rural Area\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nspeed_limits = [30, 40, 50, 60, 70]\nUrban_Area = [-5, -7, -6, -8, -9]\nSuburban_Area = [-4, -6, -5, -7, -8]\nHighway_Area = [-6, -8, -7, -9, -10]\nRural_Area = [-3, -5, -4, -6, -7]\n\n# X-axis positions for each group\nx = np.arange(len(speed_limits))\n\n# Labels and Titles\nylabel = \"Accident Rate Change (%)\"\nxlabel = \"Speed Limit (mph)\"\ntitle = \"Impact of Speed Limits on Accident Rates\"\n\n# Legend labels\nlegend_labels = [\"Urban Area\", \"Suburban Area\", \"Highway Area\", \"Rural Area\"]\n\n# Axis limits\nylim = (-11, 0)\n# Axis tick labels\nxticks = x\nxticklabels = speed_limits\n\n# Bar width\nbar_width = 0.2\n\n# Colors\ncolors = [\"#f1c5c1\", \"#dc7870\", \"#b9d0e5\", \"#8ab1d2\"]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plotting bars\nax.bar(\n    x - bar_width * 1.5,\n    Urban_Area,\n    width=bar_width,\n    label=legend_labels[0],\n    color=colors[0],\n)\nax.bar(\n    x - bar_width / 2, Suburban_Area, width=bar_width, label=legend_labels[1], color=colors[1]\n)\nax.bar(\n    x + bar_width / 2,\n    Highway_Area,\n    width=bar_width,\n    label=legend_labels[2],\n    color=colors[2],\n)\nax.bar(\n    x + bar_width * 1.5,\n    Rural_Area,\n    width=bar_width,\n    label=legend_labels[3],\n    color=colors[3],\n)\n\n# Adding labels and title\nax.set_ylim(ylim)\nax.set_ylabel(ylabel)\nax.set_xlabel(xlabel)\nax.set_title(title)\n\n# Adding x-axis tick labels\nax.set_xticks(xticks)\nax.set_xticklabels(xticklabels)\n\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Adding legend\nax.legend(loc=\"lower center\", bbox_to_anchor=(0.5, -0.15), frameon=False, ncol=4)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_45.pdf', bbox_inches='tight')"}
{"idx": "line_30", "instruction": "There is a reference image for you and I also have a set of data about weight change under different diet plans for various age groups. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The weight change data is as follows:\n# Age groups\nage_groups = [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n# Weight change for Diet Plan A\ndiet_plan_a = [0.0040, 0.0042, 0.0041, 0.0043, 0.0042, 0.0043, 0.0044, 0.0043, 0.0044, 0.0045, 0.0044]\n# Weight change for Diet Plan B\ndiet_plan_b = [0.0032, 0.0038, 0.0035, 0.0036, 0.0037, 0.0040, 0.0037, 0.0038, 0.0036, 0.0032, 0.0036]\n# Label of x axis\nxlabel_value = \"Age Group\"\n# Label of y axis\nylabel_value = \"Weight Change (kg)\"\n# Title\ntitle_value = \"Weight Change Under Different Diet Plans\"\n# Labels\ndiet_plan_a_label = \"Diet Plan A\"\ndiet_plan_b_label = \"Diet Plan B\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nage_groups = [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\ndiet_plan_a = [\n    0.0040,\n    0.0042,\n    0.0041,\n    0.0043,\n    0.0042,\n    0.0043,\n    0.0044,\n    0.0043,\n    0.0044,\n    0.0045,\n    0.0044,\n]\ndiet_plan_b = [\n    0.0032,\n    0.0038,\n    0.0035,\n    0.0036,\n    0.0037,\n    0.0040,\n    0.0037,\n    0.0038,\n    0.0036,\n    0.0032,\n    0.0036,\n]\n\n# Extracted variables\ndiet_plan_a_label = \"Diet Plan A\"\ndiet_plan_b_label = \"Diet Plan B\"\nxlim_values = [22, 32]\nylim_values = [0.0030, 0.0050]\nxlabel_value = \"Age Group\"\nylabel_value = \"Weight Change (kg)\"\nxticks_values = age_groups\nyticks_values = np.arange(0.0030, 0.0051, 0.0005)\nxtickslabel_values = [str(age) for age in age_groups]\nytickslabel_values = [str(i) for i in yticks_values]\ntitle_value = \"Weight Change Under Different Diet Plans\"\n\n\n\nlegend_location = \"lower center\"\nlegend_bbox_to_anchor = (0.5, -0.3)\nlegend_ncol = 2\nlegend_frameon = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(\n    figsize=(6, 4)\n)  # Adjusted to match the original image's dimensions\n\n# Plot lines\nax.plot(\n    age_groups,\n    diet_plan_a,\n    marker=\"o\",\n    clip_on=False,\n    zorder=10,\n    color=\"#1f77b4\",\n    label=diet_plan_a_label,\n    markersize=6,\n    mec=\"white\",\n)\nax.plot(\n    age_groups,\n    diet_plan_b,\n    marker=\"o\",\n    clip_on=False,\n    zorder=10,\n    color=\"#ff7f0e\",\n    label=diet_plan_b_label,\n    markersize=6,\n    mec=\"white\",\n)\n\n# Set x,y-axis to only display specific ticks and extend y-axis to leave space at top\nplt.yticks(yticks_values, fontsize=10)\nplt.ylim(ylim_values)  # Adjusted y-axis limit\nplt.xlim(xlim_values)\n\n# Title and labels\nax.set_title(title_value)\nax.set_xlabel(xlabel_value)\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Legend\nax.legend(loc=legend_location, bbox_to_anchor=legend_bbox_to_anchor, ncol=legend_ncol, frameon=legend_frameon)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('line_30.pdf', bbox_inches='tight')"}
{"idx": "pie_15", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# External consumption data\nvals1 = [20, 160, 200, 250]\n# Internal consumption data\nvals2 = [400, 40, 340, 170]\nvals3 = [800]\n# Labels for the sectors\nlabels = [\"Residential\", \"Commercial\", \"Industrial\", \"Transportation\"]\n# Title of the chart\ntitle_text = \"Energy Consumption by Sector - External vs. Internal\"\n# Colors for the external and internal layers\ncolors1 = [\"#FFD700\", \"#FF8C00\", \"#1E90FF\", \"#32CD32\"]\ncolors2 = [\"#F0E68C\", \"#FFA07A\", \"#87CEFA\", \"#98FB98\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# New example data for the double layer donut chart\nvals1 = [20, 160, 200, 250]  # External consumption\nvals2 = [400, 40, 340, 170]  # Internal consumption\nvals3 = [800]  # This will be the white center\n\n# Define labels and colors\nlabels = [\"Residential\", \"Commercial\", \"Industrial\", \"Transportation\"]\n# Variables for plot configuration\ntitle_text = \"Energy Consumption by Sector - External vs. Internal\"\nlegend_labels = labels\n\ncolors1 = [\"#FFD700\", \"#FF8C00\", \"#1E90FF\", \"#32CD32\"]\ncolors2 = [\"#F0E68C\", \"#FFA07A\", \"#87CEFA\", \"#98FB98\"]\nlegend_bbox_to_anchor = (1, 1)\nlegend_frameon = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Outer donut chart\nwedges1, texts1, autotexts1 = ax.pie(\n    vals1,\n    labels=labels,\n    radius=1.2,\n    colors=colors1,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.9,\n    wedgeprops=dict(width=0.3, edgecolor=\"w\"),\n)\n\n# Inner donut chart\nwedges2, texts2, autotexts2 = ax.pie(\n    vals2,\n    radius=0.9,\n    colors=colors2,\n    autopct=\"%1.1f%%\",\n    pctdistance=0.75,\n    wedgeprops=dict(width=0.3, edgecolor=\"w\"),\n)\n\n# White center circle for the 'hole'\nax.pie(vals3, radius=0.6, colors=\"w\", wedgeprops=dict(width=0.3, edgecolor=\"w\"))\n\n# Equal aspect ratio ensures that pie chart is drawn as a circle\nax.axis(\"equal\")\n\n# Title for the donut chart\nax.set_title(title_text)\n\n# Show the plot with a legend\nplt.legend(legend_labels, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('pie_15.pdf', bbox_inches='tight')"}
{"idx": "scatter_4", "instruction": "There is a reference image for you and I also have a set of data about different clusters of data points. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Cluster names and their corresponding data points\nclusters = {\n    \"downtown\": [[0.8, 2.7], [1.4, 1.7], [2.2, 0.7], [2.7, 1.8], [3.6, 2.4], [1.3, 0.6], [2.1, 1.6], [1.6, 2.8], [1.0, 1.4], [1.8, 1.0]],\n    \"suburbs\": [[6.1, 5.2], [5.9, 4.5], [4.6, 4.9], [5.8, 5.4], [6.6, 4.6], [4.4, 4.5], [4.8, 5.1], [3.8, 5.0], [5.6, 5.2], [4.9, 4.6], [3.8, 4.3], [4.6, 5.2], [4.4, 5.7], [6.1, 3.4], [5.3, 5.6]],\n    \"industrial_area\": [[-1.6, 4.6], [-1.1, 4.7], [-1.3, 3.3], [-0.9, 6.1], [-1.8, 3.5], [-0.4, 4.4], [-0.9, 4.7], [-0.3, 5.7], [-1.7, 3.6], [-2.6, 5.6], [-2.1, 4.5], [-1.6, 4.9], [-2.9, 5.1], [-0.4, 5.1], [-1.3, 5.1], [-0.6, 2.2], [-0.1, 5.4], [-1.6, 4.6], [-0.5, 4.9], [-3.0, 7.1]],\n    \"business_district\": [[2.9, -1.9], [2.3, -1.5], [3.3, -2.3], [2.0, -1.9], [3.6, -1.7], [2.4, -2.5], [4.3, -3.1], [2.8, -1.8], [3.1, -2.4], [2.6, -2.4], [1.7, -1.3], [2.9, -2.8], [3.6, -2.7], [1.7, -3.2], [3.6, -2.6]],\n    \"residential_area\": [[-2.1, -2.0], [-3.1, -3.7], [-2.3, -2.9], [-2.0, -3.1], [-2.0, -2.9], [-2.7, -3.1], [-1.7, -3.2], [-3.2, -3.1], [-2.1, -1.2], [-2.7, -2.1]],\n    \"outskirts\": [[0.8, 4.1], [0.7, 4.1], [-1.6, 5.6], [-0.8, 5.5], [0.3, 5.6], [1.1, 4.8], [0.3, 4.1], [0.6, 4.7], [0.4, 5.1], [1.2, 5.2], [0.2, 4.0], [1.4, 4.7], [0.4, 4.9], [-0.8, 5.0], [0.5, 5.6], [0.9, 5.0], [1.0, 5.2], [0.0, 5.1], [0.1, 4.6], [0.3, 4.1], [0.6, 4.2], [1.2, 4.8], [0.0, 5.4], [0.7, 4.0], [0.1, 5.6]],\n}\n# Colors for each cluster\ncolors = {\n    \"downtown\": \"red\",\n    \"suburbs\": \"blue\",\n    \"industrial_area\": \"green\",\n    \"business_district\": \"purple\",\n    \"residential_area\": \"orange\",\n    \"outskirts\": \"yellow\",\n}\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nclusters = {\n    \"downtown\": np.array([[0.8, 2.7], [1.4, 1.7], [2.2, 0.7], [2.7, 1.8], [3.6, 2.4], [1.3, 0.6], [2.1, 1.6], [1.6, 2.8], [1.0, 1.4], [1.8, 1.0]]),\n    \"suburbs\": np.array([[6.1, 5.2], [5.9, 4.5], [4.6, 4.9], [5.8, 5.4], [6.6, 4.6], [4.4, 4.5], [4.8, 5.1], [3.8, 5.0], [5.6, 5.2], [4.9, 4.6], [3.8, 4.3], [4.6, 5.2], [4.4, 5.7], [6.1, 3.4], [5.3, 5.6]]),\n    \"industrial_area\": np.array([[-1.6, 4.6], [-1.1, 4.7], [-1.3, 3.3], [-0.9, 6.1], [-1.8, 3.5], [-0.4, 4.4], [-0.9, 4.7], [-0.3, 5.7], [-1.7, 3.6], [-2.6, 5.6], [-2.1, 4.5], [-1.6, 4.9], [-2.9, 5.1], [-0.4, 5.1], [-1.3, 5.1], [-0.6, 2.2], [-0.1, 5.4], [-1.6, 4.6], [-0.5, 4.9], [-3.0, 7.1]]),\n    \"business_district\": np.array([[2.9, -1.9], [2.3, -1.5], [3.3, -2.3], [2.0, -1.9], [3.6, -1.7], [2.4, -2.5], [4.3, -3.1], [2.8, -1.8], [3.1, -2.4], [2.6, -2.4], [1.7, -1.3], [2.9, -2.8], [3.6, -2.7], [1.7, -3.2], [3.6, -2.6]]),\n    \"residential_area\": np.array([[-2.1, -2.0], [-3.1, -3.7], [-2.3, -2.9], [-2.0, -3.1], [-2.0, -2.9], [-2.7, -3.1], [-1.7, -3.2], [-3.2, -3.1], [-2.1, -1.2], [-2.7, -2.1]]),\n    \"outskirts\": np.array([[0.8, 4.1], [0.7, 4.1], [-1.6, 5.6], [-0.8, 5.5], [0.3, 5.6], [1.1, 4.8], [0.3, 4.1], [0.6, 4.7], [0.4, 5.1], [1.2, 5.2], [0.2, 4.0], [1.4, 4.7], [0.4, 4.9], [-0.8, 5.0], [0.5, 5.6], [0.9, 5.0], [1.0, 5.2], [0.0, 5.1], [0.1, 4.6], [0.3, 4.1], [0.6, 4.2], [1.2, 4.8], [0.0, 5.4], [0.7, 4.0], [0.1, 5.6]]),\n}\n\n\n# Colors for each cluster (replace with actual colors)\ncolors = {\n    \"downtown\": \"red\",\n    \"suburbs\": \"blue\",\n    \"industrial_area\": \"green\",\n    \"business_district\": \"purple\",\n    \"residential_area\": \"orange\",\n    \"outskirts\": \"yellow\",\n}\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the scatter plot\nplt.figure(figsize=(5, 5))\nfor cluster, data in clusters.items():\n    plt.scatter(data[:, 0], data[:, 1], c=colors[cluster], alpha=0.5)\n\n# Remove axes and grid\nplt.axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('scatters_4.pdf', bbox_inches='tight')"}
{"idx": "bar_15", "instruction": "There is a reference image for you and I also have a set of data about department performance scores over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The department performance data is as follows:\n# Departments\nannotators = [\"Physics\", \"Chemistry\", \"Biology\", \"Mathematics\", \"Computer\", \"Engineering\"]\n# Performance Scores\nscores = {\n    \"Physics\": [20, 25, 30, 35, 40],          \n    \"Chemistry\": [30, 25, 35, 40, 20],        \n    \"Biology\": [40, 35, 20, 25, 30],           \n    \"Mathematics\": [25, 30, 40, 20, 35],      \n    \"Computer\": [35, 40, 25, 30, 20],  \n    \"Engineering\": [25, 30, 35, 20, 40],     \n}\n# Label of x axis\nxlabel = \"Departments\"\n# Label of y axis\nylabel = \"Performance Scores\"\n# Title\ntitle = \"Department Performance Over Quarters\"\n# Labels\nlegend_labels = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\n# Data\nannotators = [\"Physics\", \"Chemistry\", \"Biology\", \"Mathematics\", \"Computer\", \"Engineering\"]\nscores = {\n    \"Physics\": [20, 25, 30, 35, 40],          \n    \"Chemistry\": [30, 25, 35, 40, 20],        \n    \"Biology\": [40, 35, 20, 25, 30],           \n    \"Mathematics\": [25, 30, 40, 20, 35],      \n    \"Computer\": [35, 40, 25, 30, 20],  \n    \"Engineering\": [25, 30, 35, 20, 40],     \n}\n\n# Colors for each score\ncolors = [\"#cd4231\", \"#ed9264\", \"#f8df9a\", \"#d6e8e5\", \"#9bbdde\"]\n\n# Variables for plot configuration\ntitle = \"Department Performance Over Quarters\"\nxlabel = \"Departments\"\nylabel = \"Performance Scores\"\nylim = (0, 140)\nyticks = [0, 30, 60, 90, 120, 150]\nlegend_title = \"Years\"\nlegend_labels = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\nlegend_loc = \"upper left\"\nlegend_bbox_to_anchor = (1.05, 1.1)\nlegend_reverse = True\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the stacked bar chart\nfig, ax = plt.subplots(\n    figsize=(8, 5)\n)  # Adjusting figure size to match original image dimensions\n\nfor i, annotator in enumerate(annotators):\n    bottom = 0\n    for j, score in enumerate(scores[annotator]):\n        ax.bar(annotator, score, bottom=bottom, color=colors[j])\n        bottom += score\n\n# Adding title and labels\nax.set_title(title)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_ylim(ylim)\nax.set_yticks(yticks)\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Adding legend\nax.legend(\n    legend_labels,\n    title=legend_title,\n    frameon=False,\n    bbox_to_anchor=legend_bbox_to_anchor,\n    loc=legend_loc,\n    reverse=legend_reverse,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('bar_15.pdf', bbox_inches='tight')"}
{"idx": "bar_48", "instruction": "There is a reference image for you and I also have a set of data about road conditions, accident rates, and average speeds at different speed limits. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The road condition data is as follows:\n# Road conditions\nroad_conditions = [\"Urban\", \"Suburban\", \"Highway\", \"Rural\"]\n# Accident rate and average speed for speed limit 30 mph\naccident_rate_speed30 = [15, 10, 5, 8]\navg_speed_speed30 = [30, 28, 35, 33]\n# Accident rate and average speed for speed limit 50 mph\naccident_rate_speed50 = [20, 15, 10, 12]\navg_speed_speed50 = [50, 48, 55, 53]\n# Label of y axis for speed limit 30 mph\nylabel_speed30 = \"Average Speed (mph)\"\n# Label of y axis for speed limit 50 mph\nylabel_speed50 = \"Accident Rate (%)\"\n# Titles\nspeed30_title = \"(a) Speed Limit 30 mph\"\nspeed50_title = \"(b) Speed Limit 50 mph\"\n# Labels\nlabels = [\"Accident Rate\", \"Average Speed\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nroad_conditions = [\"Urban\", \"Suburban\", \"Highway\", \"Rural\"]\naccident_rate_speed30 = [15, 10, 5, 8]\navg_speed_speed30 = [30, 28, 35, 33]\naccident_rate_speed50 = [20, 15, 10, 12]\navg_speed_speed50 = [50, 48, 55, 53]\ncolors = [\"#736aa6\", \"#983530\", \"#f2bf42\", \"#5384ed\"]\nlabels = [\"Accident Rate\", \"Average Speed\"]\n\n# X-axis positions\nx = np.arange(len(road_conditions))\nindexs = [2, 4]\n\n# Plot labels\nspeed30_title = \"(a) Speed Limit 30 mph\"\nspeed50_title = \"(b) Speed Limit 50 mph\"\nylabel_speed30 = \"Average Speed (mph)\"\nylabel_speed50 = \"Accident Rate (%)\"\nyticks_speed30 = [0, 10, 20, 30, 40]\nyticks_speed50 = [10, 25, 40, 55, 70]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(5, 6))\n\nbarwidth = 0.3\n# Movielens subplot\nfor i in range(len(x)):\n    ax1.bar(\n        (i - 2) * 0.3 + indexs[0],\n        accident_rate_speed30[i],\n        width=0.3,\n        label=\"Accuracy\",\n        color=colors[i],\n    )\n    ax1.bar(\n        (i - 2) * 0.3 + indexs[1],\n        avg_speed_speed30[i],\n        width=0.3,\n        label=\"Unfairness\",\n        color=colors[i],\n    )\nax1.set_title(speed30_title)\nax1.set_xticks([index - 0.15 for index in indexs])\nax1.set_xticklabels(labels)\nax1.set_ylabel(ylabel_speed30)\nax1.set_yticks(yticks_speed30)\nax1.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Tenrec subplot\nfor i in range(len(x)):\n    ax2.bar(\n        (i - 2) * 0.3 + indexs[0],\n        accident_rate_speed50[i],\n        width=0.3,\n        label=\"Accuracy\",\n        color=colors[i],\n    )\n    ax2.bar(\n        (i - 2) * 0.3 + indexs[1],\n        avg_speed_speed50[i],\n        width=0.3,\n        label=\"Unfairness\",\n        color=colors[i],\n    )\nax2.set_title(speed50_title)\nax2.set_xticks([index - 0.15 for index in indexs])\nax2.set_xticklabels(labels)\nax2.set_ylabel(ylabel_speed50)\nax2.set_yticks(yticks_speed50)\n\nax2.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('bar_48.pdf', bbox_inches='tight')"}
{"idx": "line_46", "instruction": "There is a reference image for you and I also have a set of data about transportation usage over a 24-hour period. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation usage data is as follows:\n# Time in hours\ntimes = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0]\n# Car usage percentage\ncar_usage = [0, 10, 30, 20, 40, 60, 50, 70, 90, 80, 100, 70, 60, 50, 70, 80, 90, 100, 80, 70, 60, 50, 30, 20, 10]\n# Bike usage percentage\nbike_usage = [20, 30, 40, 50, 60, 70, 60, 50, 40, 30, 20, 10, 30, 40, 50, 60, 70, 80, 60, 50, 40, 30, 20, 10, 30]\n# Label of x axis\nxlabel_value = \"Time (Hours)\"\n# Label of y axis\nylabel_value = \"Usage Level (%)\"\n# Titles\ntitle1 = \"Daytime Transportation Monitoring\"\ntitle2 = \"Nighttime Transportation Monitoring\"\n# Labels\nline_label1 = \"Car Usage\"\nline_label2 = \"Bike Usage\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# New data for plotting, representing some scientific or business metrics\n\n# Data\ntimes = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0]\ncar_usage = [0, 10, 30, 20, 40, 60, 50, 70, 90, 80, 100, 70, 60, 50, 70, 80, 90, 100, 80, 70, 60, 50, 30, 20, 10]\nbike_usage = [20, 30, 40, 50, 60, 70, 60, 50, 40, 30, 20, 10, 30, 40, 50, 60, 70, 80, 60, 50, 40, 30, 20, 10, 30]\n\n# Extracted variables\nline_label1 = \"Car Usage\"\nline_label2 = \"Bike Usage\"\nxlim_values = (0, 24)\nylim_values = (0, 100)\nxlabel_value = \"Time (Hours)\"\nylabel_value = \"Usage Level (%)\"\nyticks_values = [0, 20, 40, 60, 80, 100]\ntitle1 = \"Daytime Transportation Monitoring\"\ntitle2 = \"Nighttime Transportation Monitoring\"\n\n\nlegend_location = \"lower center\"\nlegend_bbox_to_anchor = (0.5, -0.2)\nlegend_frameon = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nfig, axs = plt.subplots(\n    2, 1, figsize=(6, 10)\n)  # Use a 1x2 subplot grid for horizontal layout\n\n# Define new colors and markers for a fresh look\ncolors = [\"dodgerblue\", \"crimson\"]\nlinestyles = [\"-\", \"--\"]\nlabels = [line_label1, line_label2]\n\n# First subplot with area fill\naxs[0].plot(\n    times, car_usage, color=colors[0], linestyle=linestyles[0], label=labels[0]\n)\naxs[0].set_title(title1)\naxs[0].set_xlabel(xlabel_value)\naxs[0].set_ylabel(ylabel_value)\naxs[0].set_xlim(xlim_values)\naxs[0].set_ylim(ylim_values)\naxs[0].set_yticks(yticks_values)\naxs[0].legend(loc=legend_location, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon)\naxs[0].tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Second subplot with gradient fill emulation\naxs[1].plot(\n    times,\n    bike_usage,\n    color=colors[1],\n    linestyle=linestyles[1],\n    label=labels[1],\n)\naxs[1].set_title(title2)\naxs[1].set_xlabel(xlabel_value)\naxs[1].set_ylabel(ylabel_value)\naxs[1].set_ylim(ylim_values)\naxs[1].set_xlim(xlim_values)\naxs[1].set_yticks(yticks_values)\naxs[1].legend(loc=legend_location, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon)\naxs[1].tick_params(axis=\"both\", which=\"both\", length=0)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Enhance overall layout and visuals\nplt.tight_layout()\nplt.savefig('line_46.pdf', bbox_inches='tight')"}
{"idx": "pie_3", "instruction": "There is a reference image for you and I also have a set of data about market share percentages for different tech companies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The market share data is as follows:\n# Labels for the segments\nlabels = [\"Apple\", \"Samsung\", \"Google\", \"Microsoft\"]\n# Market share percentages\nsizes = [22, 30, 18, 30]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nlabels = [\"Apple\", \"Samsung\", \"Google\", \"Microsoft\"]\nsizes = [22, 30, 18, 30]\nlegend_labels = labels\n\n\nlegend_loc = \"upper center\"\nlegend_ncol = 4\nlegend_frameon = False\nlegend_bbox_to_anchor = (0.5, 1.05)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(5, 5))\nax.pie(sizes, autopct=\"%1.1f%%\", startangle=90)\nplt.legend(\n    legend_labels, loc=legend_loc, ncol=legend_ncol, frameon=legend_frameon, bbox_to_anchor=legend_bbox_to_anchor\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('pie_3.pdf', bbox_inches='tight')"}
{"idx": "scatter_8", "instruction": "There is a reference image for you and I also have a set of data about vehicle speed and fuel efficiency for different transportation domains. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The vehicle speed and fuel efficiency data is as follows:\n# Speed (km/h)\nar_speed = [55, 60, 58, 62, 59, 45, 57, 50, 52, 61, 63, 64, 58, 60, 62, 61, 66, 54, 60, 48, 40, 59, 61, 49, 65]\nde_speed = [50, 52, 51, 53, 54, 48, 55, 52, 51, 53, 54, 52, 50, 49, 48, 51, 56, 48, 53, 52, 50, 48, 47, 54, 52]\nfr_speed = [48, 45, 47, 50, 46, 49, 52, 44, 50, 48, 46, 50, 44, 49, 51, 50, 49, 51, 50, 52, 49, 45, 50, 48, 44]\nhe_speed = [60, 65, 58, 55, 60, 59, 67, 53, 52, 60, 59, 70, 65, 61, 52, 66, 55, 50, 68, 64, 67, 63, 66, 58, 55]\n# Fuel Efficiency (km/l)\nar_fuel_efficiency = [22, 25, 24, 28, 26, 21, 23, 19, 18, 24, 25, 29, 27, 23, 22, 21, 20, 19, 30, 25, 24, 23, 27, 20, 26]\nde_fuel_efficiency = [20, 19, 20, 21, 22, 18, 25, 24, 16, 27, 28, 26, 23, 19, 25, 22, 28, 24, 25, 23, 26, 22, 27, 24, 24]\nfr_fuel_efficiency = [21, 20, 23, 22, 24, 18, 22, 19, 20, 19, 23, 21, 22, 20, 18, 17, 22, 21, 19, 25, 22, 17, 23, 16, 20]\nhe_fuel_efficiency = [30, 27, 28, 29, 31, 29, 24, 28, 23, 31, 25, 27, 32, 28, 35, 27, 30, 29, 27, 32, 29, 33, 33, 37, 34]\n# Label of x axis\nxlabel = \"Speed (km/h)\"\n# Label of y axis\nylabel = \"Fuel Efficiency (km/l)\"\n# Labels\nscatter_label_ar = \"AR\"\nscatter_label_de = \"DE\"\nscatter_label_fr = \"FR\"\nscatter_label_he = \"HE\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n\nar_speed = np.array([55, 60, 58, 62, 59, 45, 57, 50, 52, 61, 63, 64, 58, 60,\n                     62, 61, 66, 54, 60, 48, 40, 59, 61, 49, 65])\nar_fuel_efficiency = np.array([22, 25, 24, 28, 26, 21, 23, 19, 18, 24, 25, 29, 27, 23,\n                               22, 21, 20, 19, 30, 25, 24, 23, 27, 20, 26])\nde_speed = np.array([50, 52, 51, 53, 54, 48, 55, 52, 51, 53, 54, 52,\n                     50, 49, 48, 51, 56, 48, 53, 52, 50, 48, 47, 54,\n                     52])\nde_fuel_efficiency = np.array([20, 19, 20, 21, 22, 18, 25, 24, 16, 27, 28, 26, 23, 19,\n                               25, 22, 28, 24, 25, 23, 26, 22, 27, 24, 24])\nfr_speed = np.array([48, 45, 47, 50, 46, 49, 52, 44, 50, 48, 46, 50,\n                     44, 49, 51, 50, 49, 51, 50, 52, 49, 45, 50, 48,\n                     44])\nfr_fuel_efficiency = np.array([21, 20, 23, 22, 24, 18, 22, 19, 20, 19, 23, 21,\n                               22, 20, 18, 17, 22, 21, 19, 25, 22, 17, 23, 16,\n                               20])\nhe_speed = np.array([60, 65, 58, 55, 60, 59, 67, 53, 52, 60, 59, 70, 65, 61,\n                     52, 66, 55, 50, 68, 64, 67, 63, 66, 58, 55])\nhe_fuel_efficiency = np.array([30, 27, 28, 29, 31, 29, 24, 28, 23, 31, 25, 27, 32, 28,\n                               35, 27, 30, 29, 27, 32, 29, 33, 33, 37, 34])\n\n# Extracted variables for the transportation domain\nscatter_label_ar = \"AR\"\nscatter_label_de = \"DE\"\nscatter_label_fr = \"FR\"\nscatter_label_he = \"HE\"\nxlabel = \"Speed (km/h)\"\nylabel = \"Fuel Efficiency (km/l)\"\n\nlegend_title = \"Legend\"\nncol_legend = 4\nbbox_anchor_legend = (0.5, 1.1)\nloc_legend = \"upper center\"\nframeon_legend = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the scatter plot\nplt.figure(figsize=(8, 8))\nplt.scatter(ar_speed, ar_fuel_efficiency, color=\"blue\", alpha=0.5, label=scatter_label_ar)\nplt.scatter(de_speed, de_fuel_efficiency, color=\"magenta\", alpha=0.5, label=scatter_label_de)\nplt.scatter(fr_speed, fr_fuel_efficiency, color=\"yellow\", alpha=0.5, label=scatter_label_fr)\nplt.scatter(he_speed, he_fuel_efficiency, color=\"green\", alpha=0.5, label=scatter_label_he)\nplt.tick_params(axis=\"both\", length=0)\n# Add labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.legend(\n    title=legend_title, ncol=ncol_legend, bbox_to_anchor=bbox_anchor_legend, loc=loc_legend, frameon=frameon_legend\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout\nplt.tight_layout()\nplt.savefig('scatters_8.pdf', bbox_inches='tight')"}
{"idx": "bar_16", "instruction": "There is a reference image for you and I also have two sets of data about task distribution for different roles. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The task distribution data is as follows:\n# Roles\nroles = [\"Researcher\", \"Analyst\", \"Engineer\"]\n# Task counts for Scenario 1\ncounts_s1 = np.array([[200, 400, 100], [350, 150, 200], [300, 100, 300]])  # Each row sums to 700\n# Task counts for Scenario 2\ncounts_s2 = np.array([[180, 320, 200], [240, 260, 200], [290, 230, 180]])  # Each row sums to 700\n# Label of x axis\nxlabel_value = \"Task Count\"\n# Label of y axis\nylabel_value = \"Role\"\n# Titles\ntitle_s1 = \"Task Distribution in Scenario 1\"\ntitle_s2 = \"Task Distribution in Scenario 2\"\nfig_title = \"Task Distribution Comparison for Different Roles\"\n# Labels\nlegend_labels = [\"Data Collection\", \"Analysis\", \"Reporting\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plots\nroles = [\"Researcher\", \"Analyst\", \"Engineer\"]\ncounts_s1 = np.array([[200, 400, 100], [350, 150, 200], [300, 100, 300]])  # Each row sums to 700\ncounts_s2 = np.array([[180, 320, 200], [240, 260, 200], [290, 230, 180]])  # Each row sums to 700\n\n# Colors for the bars\ncolors = [\"skyblue\", \"gold\", \"lightcoral\"]\nwidth = 0.3\n\n# Variables for plot configuration\nxlim_value = (0, 700)\nxlabel_value = \"Task Count\"\nylabel_value = \"Role\"\nxticks_value = [0, 100, 200, 300, 400, 500, 600, 700]\nyticks_value = roles\ntitle_s1 = \"Task Distribution in Scenario 1\"\ntitle_s2 = \"Task Distribution in Scenario 2\"\nlegend_labels = [\"Data Collection\", \"Analysis\", \"Reporting\"]\nfig_title = \"Task Distribution Comparison for Different Roles\"\nfontsize_title = 16\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots with shared x-axis\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6), sharex=True)\n\n# Function to plot stacked bars\ndef plot_stacked_bars(ax, counts, roles, colors):\n    bottom = np.zeros(len(roles))\n    for i in range(counts.shape[1]):\n        ax.barh(\n            roles, counts[:, i], height=width, zorder=5, left=bottom, color=colors[i]\n        )\n        bottom += counts[:, i]\n\n# Plot for s1\nplot_stacked_bars(ax1, counts_s1, roles, colors)\nax1.set_title(title_s1, y=1.2)\nax1.set_xlabel(xlabel_value)\nax1.set_ylabel(ylabel_value)\nax1.invert_yaxis()  # Invert y-axis to match the picture\nax1.grid(True, alpha=0.7)  # Add grid lines\nax1.set_xlim(*xlim_value)\nax1.tick_params(axis=\"y\", which=\"both\", length=0)\nax1.tick_params(axis=\"x\", which=\"both\", color=\"gray\")\n\n# Plot for s2\nplot_stacked_bars(ax2, counts_s2, roles, colors)\nax2.set_title(title_s2)\nax2.set_xlabel(xlabel_value)\nax2.set_ylabel(ylabel_value)\nax2.set_xlim(*xlim_value)\nax2.invert_yaxis()  # Invert y-axis to match the picture\nax2.grid(True, alpha=0.7)  # Add grid lines\nax2.tick_params(axis=\"y\", which=\"both\", length=0)\nax2.tick_params(axis=\"x\", which=\"both\", color=\"gray\")\n\n# Legend\nax1.legend(\n    legend_labels,\n    bbox_to_anchor=(0.5, 1.2),\n    loc=\"upper center\",\n    ncol=3,\n    frameon=False,\n)\n\n# Set x-axis ticks after all plots\nax1.set_xticks(xticks_value)\nax2.set_xticks(xticks_value)\nax1.tick_params(axis=\"x\", which=\"both\", bottom=True, top=False, labelbottom=True)\n\n# Title for the whole figure\nfig.suptitle(fig_title, fontsize=fontsize_title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('bar_16.pdf', bbox_inches='tight')"}
{"idx": "bar_56", "instruction": "There is a reference image for you and I also have a set of data about the number of passengers by transport mode. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transport mode and number of passengers data is as follows:\n# Transport Modes\ntransport_modes = [\"Scooter\", \"Walking\", \"Bicycle\", \"Train\", \"Bus\", \"Car\",]\n# Number of Passengers\nnumber_of_passengers = [3000, 7000, 8000, 12000, 15000, 20000]\n# Label of x axis\nxlabel = \"Number of Passengers\"\n# Title\ntitle_text = \"Number of Passengers by Transport Mode\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport matplotlib.ticker as ticker\nimport numpy as np; np.random.seed(0); np.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ntransport_modes = [\n    \"Scooter\",\n    \"Walking\",\n    \"Bicycle\",\n    \"Train\",\n    \"Bus\",\n    \"Car\",\n]\nnumber_of_passengers = [3000, 7000, 8000, 12000, 15000, 20000]\n# Plot Configuration\nxlabel = \"Number of Passengers\"\nxlim_values = (0, 20000)\nylim_values = (-0.5, 5.5)\ntitle_text = \"Number of Passengers by Transport Mode\"\n\nbasetick = [0, 1, 2, 3, 4, 5]\noffsetticks = [-0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5]\n\ncolors = [\n    \"lightskyblue\",\n    \"turquoise\",\n    \"lightgreen\",\n    \"navajowhite\",\n    \"lightsalmon\",\n    \"lightcoral\",\n]\nyticks_rotation = 45\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nplt.figure(figsize=(12, 8))  # Adjust figure size to match original image's dimensions\nplt.barh(\n    transport_modes, number_of_passengers, color=colors, edgecolor=\"white\"\n)  # Change bar color to purple\nplt.xlabel(xlabel)\nplt.xlim(*xlim_values)\nplt.ylim(*ylim_values)\nplt.title(title_text)\n\nplt.gca().yaxis.set_major_locator(ticker.FixedLocator(basetick))\nplt.gca().yaxis.set_major_formatter(\n    ticker.FuncFormatter(lambda x, _: f\"{transport_modes[x-1]}\")\n)\nplt.gca().yaxis.set_minor_locator(ticker.FixedLocator(offsetticks))\nplt.gca().grid(True, which=\"minor\", axis=\"y\", color=\"gray\", linestyle=\"--\")\nplt.gca().grid(True, which=\"major\", axis=\"x\", color=\"gray\", linestyle=\"--\")\nplt.gca().set_axisbelow(True)\nplt.tick_params(axis=\"both\", which=\"major\", length=0)\nplt.tick_params(axis=\"y\", which=\"minor\", color=\"gray\", length=3)\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"bottom\"].set_visible(False)\nplt.gca().spines[\"left\"].set_visible(False)\nplt.yticks(rotation=yticks_rotation)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('bar_56.pdf', bbox_inches='tight')"}
{"idx": "line_49", "instruction": "There is a reference image for you and I also have a set of data. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The data is as follows:\n# Time in years\ntimes = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n# GDP Growth data\ngdp_growth = [10, 25, 40, 55, 20, 60, 45, 35, 25, 15, 10]\n# Market Decay data\nmarket_decay = [50, 40, 30, 20, 15, 10, 25, 35, 20, 10, 15]\n# Stock Oscillation data\nstock_oscillation = [0, 20, 40, 0, -20, -40, -10, 30, 50, 20, -30]\n# Labels for each data set\ngdp_growth_label = \"GDP Growth\"\nmarket_decay_label = \"Market Decay\"\nstock_oscillation_label = \"Stock Oscillation\"\n# Label for x axis\nxlabel_value = \"Time (years)\"\n# Labels for y axis for each data set\nylabel_value_growth = \"GDP Growth (%)\"\nylabel_value_decay = \"Market Value\"\nylabel_value_oscillation = \"Stock Value Change\"\n# Titles\ntitle_growth = \"GDP Growth Over Time\"\ntitle_decay = \"Market Decay Over Time\"\ntitle_oscillation = \"Stock Market Oscillation Over Time\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 9.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nnp.random.seed(0)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data preparation\n# Data\ntimes = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\ngdp_growth = [10, 25, 40, 55, 20, 60, 45, 35, 25, 15, 10]\nmarket_decay = [50, 40, 30, 20, 15, 10, 25, 35, 20, 10, 15]\nstock_oscillation = [0, 20, 40, 0, -20, -40, -10, 30, 50, 20, -30]\n\n# Extracted variables\ngdp_growth_label = \"GDP Growth\"\nmarket_decay_label = \"Market Decay\"\nstock_oscillation_label = \"Stock Oscillation\"\n\nxlim_values = (0, 10)\nylim_values_growth = (0, 80)\nylim_values_decay = (0, 60)\nylim_values_oscillation = (-50, 60)\n\nyticks_growth = [0, 20, 40, 60, 80]\nyticks_decay = [0, 10, 20, 30, 40, 50]\nyticks_oscillation = [-50, -25, 0, 25, 50]\n\nxlabel_value = \"Time (years)\"\nylabel_value_growth = \"GDP Growth (%)\"\nylabel_value_decay = \"Market Value\"\nylabel_value_oscillation = \"Stock Value Change\"\n\ntitle_growth = \"GDP Growth Over Time\"\ntitle_decay = \"Market Decay Over Time\"\ntitle_oscillation = \"Stock Market Oscillation Over Time\"\n\n\nlegend_location = \"upper center\"\nlegend_bbox_to_anchor = (0.5, 1.15)\nlegend_frameon = False\n\ngrid_linestyle = \"--\"\ngrid_alpha = 0.5\n\ntick_params_color = \"gray\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a 3-subplot layout\nfig, axs = plt.subplots(3, 1, figsize=(6, 9))\n\n# First subplot: Growth\naxs[0].plot(\n    times,\n    gdp_growth,\n    label=market_decay_label,\n    color=\"green\",\n    clip_on=False,\n    zorder=10,\n    linestyle=\"-\",\n    marker=\"o\",\n)\naxs[0].set_title(title_growth, y=1.1)\naxs[0].set_xlim(*xlim_values)\naxs[0].set_ylim(*ylim_values_growth)\naxs[0].set_yticks(yticks_growth)\naxs[0].set_ylabel(ylabel_value_growth)\naxs[0].legend(\n    loc=legend_location, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon\n)\naxs[0].grid(True, linestyle=grid_linestyle, alpha=grid_alpha)\naxs[0].tick_params(axis=\"both\", which=\"both\", color=tick_params_color)\n\n# Second subplot: Decay\naxs[1].plot(\n    times,\n    market_decay,\n    label=market_decay_label,\n    color=\"red\",\n    clip_on=False,\n    zorder=10,\n    linestyle=\"-\",\n    marker=\"x\",\n)\naxs[1].set_xlim(*xlim_values)\naxs[1].set_ylim(*ylim_values_decay)\naxs[1].set_yticks(yticks_decay)\naxs[1].set_title(title_decay, y=1.1)\naxs[1].set_ylabel(ylabel_value_decay)\naxs[1].legend(\n    loc=legend_location, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon\n)\naxs[1].grid(True, linestyle=grid_linestyle, alpha=grid_alpha)\naxs[1].tick_params(axis=\"both\", which=\"both\", color=tick_params_color)\n\n# Third subplot: Oscillation\naxs[2].plot(\n    times,\n    stock_oscillation,\n    label=stock_oscillation_label,\n    clip_on=False,\n    zorder=10,\n    color=\"blue\",\n    linestyle=\"-\",\n    marker=\"s\",\n)\naxs[2].set_title(title_oscillation, y=1.1)\naxs[2].set_xlim(*xlim_values)\naxs[2].set_ylim(*ylim_values_oscillation)\naxs[2].set_yticks(yticks_oscillation)\naxs[2].set_xlabel(xlabel_value)\naxs[2].set_ylabel(ylabel_value_oscillation)\naxs[2].legend(\n    loc=legend_location, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon\n)\naxs[2].grid(True, linestyle=grid_linestyle, alpha=grid_alpha)\naxs[2].tick_params(\n    axis=\"both\",\n    which=\"both\",\n    color=tick_params_color,\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better spacing and display\nplt.tight_layout()\n\n# Show the plot\nplt.savefig(\"line_49.pdf\", bbox_inches=\"tight\")"}
{"idx": "pie_6", "instruction": "There is a reference image for you and I also have a set of data about different aspects of a business. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The business aspects data is as follows:\n# Aspects of business\nlabels = [\"Product Quality\", \"Customer Service\", \"Pricing\", \"User Experience\", \"Brand Reputation\"]\n# Percentage of each aspect\nsizes = [35.4, 10.3, 24.7, 17.2, 12.4]\n# Colors for each aspect\ncolors = [\"#1a78b1\", \"#379f39\", \"#aec8e6\", \"#fe7e28\", \"#ffba7e\"]\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data to plot\nlabels = [\"Product Quality\", \"Customer Service\", \"Pricing\", \"User Experience\", \"Brand Reputation\"]\nsizes = [35.4, 10.3, 24.7, 17.2, 12.4]\n\ncolors = [\"#1a78b1\", \"#379f39\", \"#aec8e6\", \"#fe7e28\", \"#ffba7e\"]\n# Plot configuration\nlegend_labels = labels\nlegend_loc = \"upper center\"\nlegend_bbox_to_anchor = (0.5, 1.05)\nlegend_ncol = 5\nlegend_frameon = False\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nplt.figure(\n    figsize=(8, 6)\n)  # Adjust the figure size to match the original image's dimensions\nplt.pie(sizes, colors=colors, autopct=\"%1.1f%%\", shadow=False, startangle=140)\nplt.axis(\"equal\")  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add legend\nplt.legend(\n    legend_labels, loc=legend_loc, bbox_to_anchor=legend_bbox_to_anchor, frameon=legend_frameon, ncol=legend_ncol\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('pie_6.pdf', bbox_inches='tight')"}
{"idx": "scatter_9", "instruction": "There is a reference image for you and I also have two sets of data about transportation metrics for DE and PJM. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data. The transportation metrics data for DE is as follows:\n# Speed\nde_speed = [55, 60, 50, 45, 65]\n# Fuel Efficiency\nde_fuel_efficiency = [25, 24, 28, 30, 26]\n# Labels\nde_labels = [\"Bus\", \"Car\", \"Bike\", \"Train\", \"Plane\"]\n# Label of x axis\nde_xlabel = \"Speed (km/h)\"\n# Label of y axis\nde_ylabel = \"Fuel Efficiency (km/l)\"\n\n# Speed\npjm_speed = [60, 55, 58, 62, 65]\n# Fuel Efficiency\npjm_fuel_efficiency = [23, 25, 22, 28, 21]\n# Labels\npjm_labels = [\"Bus\", \"Car\", \"Bike\", \"Train\", \"Plane\"]\n# Label of x axis\npjm_xlabel = \"Speed (km/h)\"\n# Label of y axis\npjm_ylabel = \"Fuel Efficiency (km/l)\"\n# Titles\nde_title = \"DE - Transportation Metrics\"\npjm_title = \"PJM - Transportation Metrics\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for DE plot (transportation domain)\nde_speed = [55, 60, 50, 45, 65]\nde_fuel_efficiency = [25, 24, 28, 30, 26]\nde_labels = [\"Bus\", \"Car\", \"Bike\", \"Train\", \"Plane\"]\n\n# Data for PJM plot (transportation domain)\npjm_speed = [60, 55, 58, 62, 65]\npjm_fuel_efficiency = [23, 25, 22, 28, 21]\npjm_labels = [\"Bus\", \"Car\", \"Bike\", \"Train\", \"Plane\"]\n\n# Extracted variables for plot configuration (transportation domain)\nde_title = \"DE - Transportation Metrics\"\nde_xlabel = \"Speed (km/h)\"\nde_ylabel = \"Fuel Efficiency (km/l)\"\nde_xlim = (40, 70)\nde_xticks = [40, 45, 50, 55, 60, 65, 70]\nde_ylim = (20, 32)\nde_yticks = [20, 22, 24, 26, 28, 30, 32]\n\npjm_title = \"PJM - Transportation Metrics\"\npjm_xlabel = \"Speed (km/h)\"\npjm_ylabel = \"Fuel Efficiency (km/l)\"\npjm_xlim = (50, 70)\npjm_xticks = [50, 55, 60, 65, 70]\npjm_ylim = (20, 30)\npjm_yticks = [20, 22, 24, 26, 28, 30]\n\n\nde_colors = [\"#a0cf63\", \"#a0cf63\", \"#56bcba\", \"#e69c55\", \"#c43932\"]\npjm_colors = [\"#a0cf63\", \"#a0cf63\", \"#56bcba\", \"#e69c55\", \"#c43932\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(7, 10))\n\n# DE plot\nfor x, y, color, label in zip(de_speed, de_fuel_efficiency, de_colors, de_labels):\n    if label == \"Bus\":\n        ax1.scatter(\n            x, y, label=label, facecolors=\"none\", edgecolors=color, s=200, linewidths=4\n        )\n    else:\n        ax1.scatter(x, y, label=label, color=color, s=200)  # Increase marker size\nax1.set_title(de_title)\nax1.set_xlabel(de_xlabel)\nax1.set_ylabel(de_ylabel)\nax1.set_xlim(de_xlim)  # Adjust x-axis range\nax1.set_xticks(de_xticks)\nax1.set_ylim(de_ylim)  # Adjust y-axis range\nax1.set_yticks(de_yticks)\nax1.grid(True, linestyle=\"--\", linewidth=0.5, color=\"black\")  # Add grid\n\n# PJM plot\nfor x, y, color, label in zip(pjm_speed, pjm_fuel_efficiency, pjm_colors, pjm_labels):\n    if label == \"Bus\":\n        ax2.scatter(\n            x, y, label=label, facecolors=\"none\", edgecolors=color, s=200, linewidths=4\n        )\n    else:\n        ax2.scatter(x, y, label=label, color=color, s=200)  # Increase marker size\nax2.set_title(pjm_title)\nax2.set_xlabel(pjm_xlabel)\nax2.set_ylabel(pjm_ylabel)\nax2.set_xlim(pjm_xlim)  # Adjust x-axis range\nax2.set_xticks(pjm_xticks)\nax2.set_ylim(pjm_ylim)  # Adjust y-axis range\nax2.set_yticks(pjm_yticks)\nax2.grid(True, linestyle=\"--\", linewidth=0.5, color=\"black\")  # Add grid\n\nlegend_elements = [\n    Line2D(\n        [0],\n        [0],\n        marker=\"o\",\n        color=\"w\",\n        label=\"Bus\",\n        markersize=10,\n        markerfacecolor=\"none\",\n        markeredgewidth=4,\n        markeredgecolor=\"#a0cf63\",\n    ),\n    Line2D(\n        [0],\n        [0],\n        marker=\"o\",\n        color=\"w\",\n        label=\"Car\",\n        markersize=10,\n        markerfacecolor=\"#a0cf63\",\n    ),\n    Line2D(\n        [0],\n        [0],\n        marker=\"o\",\n        color=\"w\",\n        label=\"Bike\",\n        markersize=10,\n        markerfacecolor=\"#56bcba\",\n    ),\n    Line2D(\n        [0],\n        [0],\n        marker=\"o\",\n        color=\"w\",\n        label=\"Train\",\n        markersize=10,\n        markerfacecolor=\"#e69c55\",\n    ),\n    Line2D(\n        [0],\n        [0],\n        marker=\"o\",\n        color=\"w\",\n        label=\"Plane\",\n        markersize=10,\n        markerfacecolor=\"#c43932\",\n    ),\n]\n\n# Create the legend using the custom handles\nfig.legend(\n    handles=legend_elements,\n    loc=\"lower center\",\n    ncol=5,\n    borderaxespad=0.05,\n    frameon=False,\n)\n\n# Adjust the layout to make room for the legend\nplt.subplots_adjust(bottom=0.1)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('scatters_9.pdf', bbox_inches='tight')"}
{"idx": "HR_1", "instruction": "There is a reference image for you and I also have a set of data about performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n\n\n\n# Define the bubble sizes and colors for each task\nbubble_sizes = {280: 500, 208: 450, 176: 400, 136: 300, 64: 150, 0: 20}\nlabel2idx = {\"Efficiency\": 0, \"Accuracy\": 1, \"Latency\": 2, \"Throughput\": 3}\nidx2label = {v: k for k, v in label2idx.items()}\n\nbubble_sizes = {280: 500, 208: 450, 176: 400, 136: 300, 64: 150, 0: 20}\nlabel2idx = {\"Efficiency\": 0, \"Accuracy\": 1, \"Latency\": 2, \"Throughput\": 3}\nidx2label = {v: k for k, v in label2idx.items()}\n\ndata = {\n\"Config-1\": {\n\"Efficiency\": [176, 136, 64, 208],\n\"Accuracy\": [208, 64, 136, 176],\n\"Latency\": [64, 208, 176, 136],\n\"Throughput\": [136, 176, 208, 64],\n},\n\"Config-2\": {\n\"Efficiency\": [280, 208, 176, 136],\n\"Accuracy\": [176, 136, 64, 208],\n\"Latency\": [208, 64, 136, 176],\n\"Throughput\": [64, 280, 136, 176],\n},\n\"Config-3\": {\n\"Efficiency\": [136, 176, 208, 64],\n\"Accuracy\": [208, 280, 136, 176],\n\"Latency\": [64, 176, 280, 208],\n\"Throughput\": [176, 208, 64, 136],\n},\n\"Config-4\": {\n\"Efficiency\": [64, 136, 176, 208],\n\"Accuracy\": [136, 176, 208, 280],\n\"Latency\": [176, 64, 136, 208],\n\"Throughput\": [208, 176, 64, 136],\n},\n}\ntitle = \"Performance Metrics\"\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the bubble sizes and colors for each task\nbubble_sizes = {280: 500, 208: 450, 176: 400, 136: 300, 64: 150, 0: 20}\nlabel2idx = {\"Efficiency\": 0, \"Accuracy\": 1, \"Latency\": 2, \"Throughput\": 3}\nidx2label = {v: k for k, v in label2idx.items()}\n\nbubble_sizes = {280: 500, 208: 450, 176: 400, 136: 300, 64: 150, 0: 20}\ncolors = {0: \"#6a95c4\", 1: \"#88acc7\", 2: \"#adbca9\", 3: \"#e2b2a0\"}\nlabel2idx = {\"Efficiency\": 0, \"Accuracy\": 1, \"Latency\": 2, \"Throughput\": 3}\nidx2label = {v: k for k, v in label2idx.items()}\n\ndata = {\n    \"Config-1\": {\n        \"Efficiency\": [176, 136, 64, 208],\n        \"Accuracy\": [208, 64, 136, 176],\n        \"Latency\": [64, 208, 176, 136],\n        \"Throughput\": [136, 176, 208, 64],\n    },\n    \"Config-2\": {\n        \"Efficiency\": [280, 208, 176, 136],\n        \"Accuracy\": [176, 136, 64, 208],\n        \"Latency\": [208, 64, 136, 176],\n        \"Throughput\": [64, 280, 136, 176],\n    },\n    \"Config-3\": {\n        \"Efficiency\": [136, 176, 208, 64],\n        \"Accuracy\": [208, 280, 136, 176],\n        \"Latency\": [64, 176, 280, 208],\n        \"Throughput\": [176, 208, 64, 136],\n    },\n    \"Config-4\": {\n        \"Efficiency\": [64, 136, 176, 208],\n        \"Accuracy\": [136, 176, 208, 280],\n        \"Latency\": [176, 64, 136, 208],\n        \"Throughput\": [208, 176, 64, 136],\n    },\n}\ntitle = \"Performance Metrics\"\n\ncolors = {0: \"#6a95c4\", 1: \"#88acc7\", 2: \"#adbca9\", 3: \"#e2b2a0\"}\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the subplots\nfig, axs = plt.subplots(1, 4, figsize=(10, 3), sharey=True)\n\n# Loop through each subplot and plot the data\nfor i, (title, tasks) in enumerate(data.items()):\n    ax = axs[i % 4]\n    ax.set_title(title)\n\n    for task, values in tasks.items():\n        ax.scatter(\n            x=range(len(values)),\n            y=[label2idx[task]] * len(values),\n            s=[bubble_sizes[_] for _ in values],\n            c=colors[label2idx[task]],\n            label=task,\n        )\n        for j, v in enumerate(values):\n            ax.text(j, label2idx[task], str(v), ha=\"center\", va=\"center\")\n    ax.set_xticks(range(len(values)))\n    ax.set_xticklabels([i for i in range(len(values))])\n    ax.set_xlim(-0.5, len(values) - 0.5)\n    ax.set_ylim(-0.5, len(label2idx) - 0.5)\n    ax.set_yticks([])\n    ax.set_xlabel(\"Client\")\n\n# Add the legend\nhandles, labels = axs[0].get_legend_handles_labels()\n\n# set the title 'task' of legend to the left of the legend\nfig.legend(\n    handles,\n    labels,\n    loc=\"lower center\",\n    ncol=4,\n    markerscale=0.5,\n    fontsize=\"small\",\n    bbox_to_anchor=(0.5, -0.1),\n    title=title,\n    title_fontsize=\"small\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and save the plot\nplt.tight_layout()\nplt.savefig('HR_1.pdf', bbox_inches='tight')"}
{"idx": "HR_2", "instruction": "There is a reference image for you and I also have a set of data about the progression of certain measurements over time. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Function to draw ellipses with varying radii and colors\nxlabel=\"Variable 1\"\nylabel=\"Variable 2\"\nnum_ellipses=15\na_start=4\nb_start=6\na_end=20\nb_end=14\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Function to draw ellipses with varying radii and colors\nxlim=[-20, 20]\nylim=[-20, 20]\nxlabel=\"Variable 1\"\nylabel=\"Variable 2\"\nnum_ellipses=15\na_start=4\nb_start=6\na_end=20\nb_end=14\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n\ndef draw_colored_ellipses(num_ellipses, a_start, b_start, a_end, b_end):\n    t = np.linspace(0, 2 * np.pi, 100)\n    fig, ax = plt.subplots(figsize=(6, 6))\n\n    # Create a colormap\n    cmap = cm.get_cmap(\"jet\", num_ellipses)\n    norm = colors.BoundaryNorm(np.arange(num_ellipses + 1), cmap.N)\n\n    for i in range(num_ellipses):\n        # Interpolate the semi-major and semi-minor axes\n        a = np.linspace(a_start, a_end, num_ellipses)[i]\n        b = np.linspace(b_start, b_end, num_ellipses)[i]\n\n        # Parametric equations for the ellipse\n        x = a * np.cos(t)\n        y = b * np.sin(t)\n\n        # Use a colormap to determine the color\n        color = cmap(i)\n        ax.set_xlim(xlim)\n        ax.set_ylim(ylim)\n        ax.plot(x, y, color=color)\n        ax.set_xlabel(xlabel)\n        ax.set_ylabel(ylabel)\n\n    x_center = 0.6 * np.cos(t)\n    y_center = 2.5 * np.sin(t)\n    ax.plot(x_center, y_center, color=\"black\")\n\n    # Set the same scaling for both axes\n    ax.set_aspect(\"equal\")\n    # Create a mappable object for the colorbar\n    sm = cm.ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])\n\n    # Add the colorbar\n    cbar = plt.colorbar(sm, ticks=np.arange(0.5, num_ellipses, 1), label=\"Time\",ax=ax)\n    cbar.set_ticklabels(np.arange(num_ellipses))  # set tick labels to 0 to 9\n    cbar.ax.tick_params(length=0)\n\n# Show the plot\ndraw_colored_ellipses(num_ellipses=num_ellipses, a_start=a_start, b_start=b_start, a_end=a_end, b_end=b_end)\nplt.tight_layout()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.savefig('HR_2.pdf', bbox_inches='tight')"}
{"idx": "HR_3", "instruction": "There is a reference image for you and I also have a set of data about signal strength measurements for public transport and technology devices. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for reproduction\nbits = np.arange(16)\nrecall_sum_transport = np.array(\n[300, 280, 270, 450] + sorted(list(np.random.randint(250, 450, 12)))\n)\nrecall_sum_technology = np.array(\n[310, 290, 265, 450] + sorted(list(np.random.randint(250, 450, 12)))\n)\not_recall = [sorted(np.random.randint(50, 250, 12), reverse=True) for i in range(2)]\n\n# Creating an array of bits to adjust spacing for the bars\nadjusted_bits = np.array(bits, dtype=float)\n# Adjust spacing for purple and the three bars before it\nadjusted_bits[3] += 0.5\n# Adjust spacing between the red/blue bars and the others\nadjusted_bits[4:] += 4\n\ntitle = \"Public Transport\"\nxlabel = \"Number of Sensors\"\nylabel = \"Signal Strength\"\naxhline = 450\n\ntitle2 = \"Technology Devices\"\nxlabel2 = \"Number of Sensors\"\nylabel2 = \"Signal Strength\"\naxhline2 = 450\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for reproduction\nbits = np.arange(16)\nrecall_sum_transport = np.array(\n    [300, 280, 270, 450] + sorted(list(np.random.randint(250, 450, 12)))\n)\nrecall_sum_technology = np.array(\n    [310, 290, 265, 450] + sorted(list(np.random.randint(250, 450, 12)))\n)\not_recall = [sorted(np.random.randint(50, 250, 12), reverse=True) for i in range(2)]\n\n# Creating an array of bits to adjust spacing for the bars\nadjusted_bits = np.array(bits, dtype=float)\n# Adjust spacing for purple and the three bars before it\nadjusted_bits[3] += 0.5\n# Adjust spacing between the red/blue bars and the others\nadjusted_bits[4:] += 4\n\ntitle = \"Public Transport\"\nxlabel = \"Number of Sensors\"\nylabel = \"Signal Strength\"\nylim = [0, 480]\naxhline = 450\n\ntitle2 = \"Technology Devices\"\nxlabel2 = \"Number of Sensors\"\nylabel2 = \"Signal Strength\"\nylim2 = [0, 480]\naxhline2 = 450\nxticks = adjusted_bits[4:]\nxtickslabel = np.arange(0, 12)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match original image dimensions\n\nblue_colors = [plt.cm.Blues(i) for i in np.linspace(0.8, 0.5, 10)]\nred_colors = [plt.cm.Reds(i) for i in np.linspace(0.3, 0.7, 10)]\nplt.figure(figsize=(10, 4))\n\n# Subplot 1: Flickr30k\nplt.subplot(1, 2, 1)\nplt.bar(\n    adjusted_bits[:4],\n    recall_sum_transport[:4],\n    color=[\"#4a895c\", \"#c3884c\", \"#75140c\", \"purple\"],\n)\nplt.bar(adjusted_bits[4:], recall_sum_transport[4:], color=blue_colors)\nplt.bar(adjusted_bits[4:], ot_recall[0], width=0.5, color=red_colors)\nplt.title(title, y=-0.3)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.ylim(ylim)\nplt.xticks(xticks,xtickslabel)\nplt.axhline(axhline, linestyle=\"dotted\", color=\"black\")\n\n# Subplot 2: MS-COCO\nplt.subplot(1, 2, 2)\nplt.bar(\n    adjusted_bits[:4],\n    recall_sum_technology[:4],\n    color=[\"#4a895c\", \"#c3884c\", \"#75140c\", \"purple\"],\n)\nplt.bar(adjusted_bits[4:], recall_sum_technology[4:], color=blue_colors)\nplt.bar(adjusted_bits[4:], ot_recall[1], width=0.5, color=red_colors)\nplt.title(title2, y=-0.3)\nplt.xlabel(xlabel2)\nplt.ylabel(ylabel2)\nplt.ylim(ylim2)\nplt.xticks(xticks,xtickslabel)\nplt.axhline(axhline2, linestyle=\"dotted\", color=\"black\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.savefig('HR_3.pdf', bbox_inches='tight')"}
{"idx": "HR_5", "instruction": "There is a reference image for you and I also have a set of data about distances from a central point. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate theta values\ntheta = np.linspace(0, 2 * np.pi, 100)\n\n# Calculate the x and y coordinates\nx = np.cos(theta)\ny = np.sin(theta)\n\ndistances_from_zero = np.sqrt((x - 0.5) ** 2 + (y - 0.5) ** 2)\n\n# Normalize these new distances for color mapping\nnormalized_distances_from_zero = (\ndistances_from_zero - np.min(distances_from_zero)\n) / (np.max(distances_from_zero) - np.min(distances_from_zero))\n# Creating a custom linear color map from light blue to dark blue based on these new normalized distances\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate theta values\ntheta = np.linspace(0, 2 * np.pi, 100)\n\n# Calculate the x and y coordinates\nx = np.cos(theta)\ny = np.sin(theta)\n\ndistances_from_zero = np.sqrt((x - 0.5) ** 2 + (y - 0.5) ** 2)\n\n# Normalize these new distances for color mapping\nnormalized_distances_from_zero = (\n    distances_from_zero - np.min(distances_from_zero)\n) / (np.max(distances_from_zero) - np.min(distances_from_zero))\n# Creating a custom linear color map from light blue to dark blue based on these new normalized distances\ncolors = [plt.cm.Blues(distance) for distance in normalized_distances_from_zero]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(6, 6))\n\n# Plot the points\nplt.scatter(x, y, c=colors, s=100, edgecolor=\"none\")\n\n# Set the aspect of the plot to be equal\nplt.axis(\"equal\")\n\n# Add axis lines\nplt.axhline(0, color=\"gray\", linewidth=0.5)\nplt.axvline(0, color=\"gray\", linewidth=0.5)\n\n# Add tick labels\nplt.xticks([])\nplt.yticks([])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_5.pdf', bbox_inches='tight')"}
{"idx": "HR_6", "instruction": "There is a reference image for you and I also have a set of data about **the relationship between two variables alpha and beta and their effect on a third variable represented by a color gradient**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate sample data\nalpha = np.linspace(0, 12, 15)\nbeta = np.linspace(0, 10, 15)\nAlpha, Beta = np.meshgrid(alpha, beta)\ngradient = (Alpha.max() - Alpha) / Alpha.max() + (Beta.max() - Beta) / Beta.max()\nZ = 0.002 - gradient * (0.002 + 0.002) / 2\nnew_Z = []\nfor line in Z:\nnew_Z.append(line[::-1])\ndashed_line = alpha * 0.35 # Adjusted function for dashed line\nxlabel = r\"$\\alpha$\"\nylabel = r\"$\\beta$\"\nextent=[0, 12, 0, 15]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate sample data\nalpha = np.linspace(0, 12, 15)\nbeta = np.linspace(0, 10, 15)\nAlpha, Beta = np.meshgrid(alpha, beta)\ngradient = (Alpha.max() - Alpha) / Alpha.max() + (Beta.max() - Beta) / Beta.max()\nZ = 0.002 - gradient * (0.002 + 0.002) / 2\nnew_Z = []\nfor line in Z:\n    new_Z.append(line[::-1])\ndashed_line = alpha * 0.35  # Adjusted function for dashed line\nxlabel = r\"$\\alpha$\"\nylabel = r\"$\\beta$\"\nextent=[0, 12, 0, 15]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with specific dimensions\nfig, ax = plt.subplots(figsize=(8, 7))\n\n# Create a heatmap\nnorm = Normalize(vmin=np.min(Z)*2, vmax=np.max(Z))\ncmap = plt.get_cmap(\"bwr\")\nheatmap = ax.imshow(\n    new_Z, aspect=\"auto\", cmap=cmap, norm=norm, extent=extent, origin=\"lower\"\n)\n\n# Add a colorbar\ncbar = plt.colorbar(heatmap, ax=ax, label=\"$\\Delta t$\")\ncbar.ax.tick_params(labelsize=8)\n\n# Add a dashed line (approximation)\nax.plot(alpha, dashed_line, \"g--\")\n\n# Set labels and title\nax.set_xlabel(xlabel, fontsize=12)\nax.set_ylabel(ylabel, fontsize=12)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and display the plot\nplt.tight_layout()\nplt.savefig('HR_6.pdf', bbox_inches='tight')"}
{"idx": "HR_7", "instruction": "There is a reference image for you and I also have a set of data about user utility and preferences. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nimport numpy as np\n\n# Generate user data\nusers = np.linspace(0, 100, 100)\nutility_high = 0.25 - 0.001 * (users - 45) ** 2\nutility_medium_high = 0.5 - 0.002 * (users - 45) ** 2\nutility_medium = 0.15 - 0.0003 * (users -45) ** 2\nutility_medium_low = 0.13 - 0.0004 * (users - 50) ** 2\nutility_low = 0.07 - 0.003 * (users - 50) ** 2\n\n# Generate random data for user preference matrices\nA = np.random.rand(3, 20) * 20\nB = np.random.rand(4, 20) * 20\nC = np.random.rand(5, 20) * 20\nD = np.random.rand(4, 20) * 20\nE = np.random.rand(7, 20) * 20\n\n# Sort and adjust the data for visualization\nA = [sorted(a1, reverse=True) for a1 in A]\nB = [sorted(b1, reverse=True) for b1 in B]\nD = [sorted(d1) for d1 in D]\nE = [sorted(e1) for e1 in E]\ndatalist=[A, B, C, D, E]\n\n# Labels and titles for the plots\nxlabel = \"Users (U)\"\nylabel = \"Utility (f)\"\ntitle = \"Utility Distribution per User Group\"\nbaseline = 0\nlabels = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ntextheight=20\n\nxlabel2 = \"Items (I)\"\nylabel2 = \"Users (U)\"\ntitle2 = \"User Preference Matrix (P)\"\nplotlabels = [\"Group A\", \"Group B\", \"Group C\", \"Group D\", \"Group E\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nimport numpy as np\n\n# Generate user data\nusers = np.linspace(0, 100, 100)\nutility_high = 0.25 - 0.001 * (users - 45) ** 2\nutility_medium_high = 0.5 - 0.002 * (users - 45) ** 2\nutility_medium = 0.15 - 0.0003 * (users -45) ** 2\nutility_medium_low = 0.13 - 0.0004 * (users - 50) ** 2\nutility_low = 0.07 - 0.003 * (users - 50) ** 2\n\ncolors = [\"blue\", \"steelblue\", \"green\", \"maroon\", \"red\"]\n# Generate random data for user preference matrices\nA = np.random.rand(3, 20) * 20\nB = np.random.rand(4, 20) * 20\nC = np.random.rand(5, 20) * 20\nD = np.random.rand(4, 20) * 20\nE = np.random.rand(7, 20) * 20\n\n# Sort and adjust the data for visualization\nA = [sorted(a1, reverse=True) for a1 in A]\nB = [sorted(b1, reverse=True) for b1 in B]\nD = [sorted(d1) for d1 in D]\nE = [sorted(e1) for e1 in E]\ndatalist=[A, B, C, D, E]\n\n# Labels and titles for the plots\nxlabel = \"Users (U)\"\nylabel = \"Utility (f)\"\ntitle = \"Utility Distribution per User Group\"\nbaseline = 0\nlabels = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ntextheight=20\n\nxlabel2 = \"Items (I)\"\nylabel2 = \"Users (U)\"\ntitle2 = \"User Preference Matrix (P)\"\nplotlabels = [\"Group A\", \"Group B\", \"Group C\", \"Group D\", \"Group E\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(8, 4))\n\n# Create the left plot (Utility distribution per topic)\nplt.subplot(1, 2, 1)\nplt.plot(users, utility_high, label=plotlabels[0], color=colors[0])\nplt.plot(users, utility_medium_high, label=plotlabels[1], color=colors[1])\nplt.plot(users, utility_medium, label=plotlabels[2], color=colors[2])\nplt.plot(users, utility_medium_low, label=plotlabels[3], color=colors[3])\nplt.plot(users, utility_low, label=plotlabels[4], color=colors[4])\n\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"top\"].set_visible(False)\n\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\nplt.legend()\n\n# Create the right plot (User preference matrix (M))\nplt.subplot(1, 2, 2)\n\nfor index, values in enumerate(datalist):\n    for i in range(len(values)):\n        plt.scatter(\n            [baseline + i] * len(values[i]),\n            range(len(values[i])),\n            s=values[i],\n            c=colors[index],\n        )\n    plt.text(baseline + len(values) / 2, textheight, labels[index])\n    baseline = baseline + len(values)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\nplt.xticks([])\nplt.yticks([])\nplt.xlabel(xlabel2)\nplt.ylabel(ylabel2)\nplt.title(title2, y=1.05)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout()\nplt.savefig('HR_7.pdf', bbox_inches='tight')"}
{"idx": "HR_8", "instruction": "There is a reference image for you and I also have a set of data about traffic patterns at different intersections throughout the day. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the parallelogram boundary points\n# Adjust these points as needed to form a parallelogram\nboundary_points = np.array([[0, 0], [3, -1], [2, 2], [-1, 3]])\n\n# Define the data for each subplot\ndata1 = np.random.rand(100000, 2) # 10^5 points\ndata1[:, 0] = data1[:, 0] * 2 # Scale x component from 0 to 2\ndata2 = np.random.rand(1000, 2) # 10^3 points\ndata3 = np.random.rand(1000, 2) # 10^3 points\ndata3[:, 0] = data3[:, 0] + 1\n\nylabel = [\n\"Autonomous vehicle speed\",\n\"Traffic density\",\n\"Road surface temperature\",\n]\nxlabel = \"Time of day\"\nlabels = [\"Intersection A\", \"Intersection B\", \"Intersection C\", \"Intersection D\"]\nlegendtitle = \"num. of points = {}\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the parallelogram boundary points\n# Adjust these points as needed to form a parallelogram\nboundary_points = np.array([[0, 0], [3, -1], [2, 2], [-1, 3]])\n\n# Define the data for each subplot\ndata1 = np.random.rand(100000, 2)  # 10^5 points\ndata1[:, 0] = data1[:, 0] * 2  # Scale x component from 0 to 2\ndata2 = np.random.rand(1000, 2)  # 10^3 points\ndata3 = np.random.rand(1000, 2)  # 10^3 points\ndata3[:, 0] = data3[:, 0] + 1\n\nylabel = [\n    \"Autonomous vehicle speed\",\n    \"Traffic density\",\n    \"Road surface temperature\",\n]\nxlabel = \"Time of day\"\nlabels = [\"Intersection A\", \"Intersection B\", \"Intersection C\", \"Intersection D\"]\nxlim = [-4, 4]\nylim = [-5, 5]\nlegendtitle = \"num. of points = {}\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Define the figure size\nfig = plt.figure(figsize=(10, 4))\n\n# Create subplots\nfor i, data in enumerate([data1, data2, data3], 1):\n    ax = fig.add_subplot(1, 3, i)\n    # Fill the parallelogram\n    ax.fill(boundary_points[:, 0], boundary_points[:, 1], color=\"lightblue\", alpha=0.5)\n    ax.set_xlim(xlim)  # Adjusted x limits to better fit the parallelogram\n    ax.set_ylim(ylim)  # Adjusted y limits to better fit the parallelogram\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel[i - 1])\n    if i != 1:\n        ax.set_yticks([])\n   \n    for point, label in zip(boundary_points, labels):\n        if point[0] < 1:\n            ax.text(point[0] - 0.8, point[1] - 0.5, label, color=\"black\", fontsize=8)\n        else:\n            ax.text(point[0], point[1] + 0.2, label, color=\"black\", fontsize=8)\n    scatter = ax.scatter(data[:, 0], data[:, 1], color=\"red\", s=1)\n    ax.legend(\n        [scatter], [legendtitle.format(5 if i == 1 else 3)], loc=\"upper right\"\n    )\n    ax.plot(\n        np.append(boundary_points[:, 0], boundary_points[0, 0]),\n        np.append(boundary_points[:, 1], boundary_points[0, 1]),\n        color=\"blue\",\n    )\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('HR_8.pdf', bbox_inches='tight')"}
{"idx": "HR_9", "instruction": "There is a reference image for you and I also have a set of data about temperature variations at different weather stations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ndata1 = [np.random.normal(loc, 5, 100) for loc in range(11, 20)]\ndata2 = [np.random.normal(loc, 30, 100) for loc in range(35, 50)]\ntitles=[\"Weather Station = North\", \"Weather Station = South\"]\nylabel = \"Temperature Variation (\u00ac\u221eC)\"\nwidth =1.6\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.patches as patches\nimport matplotlib.colors as mcolors\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n\ndata1 = [np.random.normal(loc, 5, 100) for loc in range(11, 20)]\ndata2 = [np.random.normal(loc, 30, 100) for loc in range(35, 50)]\nxticks=[[1, 3], [1, 3]]\nxticklabels=[[\"Sunny\", \"Rainy\"], [\"Sunny\", \"Rainy\"]]\ntitles=[\"Weather Station = North\", \"Weather Station = South\"]\nylabel = \"Temperature Variation (\u00b0C)\"\nwidth =1.6\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n\ndef custom_boxplot(\n    ax,\n    data,\n    position,\n    width,\n    facecolor=\"lightblue\",\n    edgecolor=\"gray\",\n    mediancolor=\"gray\",\n    num_rectangles=10,\n):\n    median = np.median(data)\n    q1, q3 = np.percentile(data, [25, 75])\n    iqr = q3 - q1\n    lower_bound = q1 - (1.5 * iqr)\n    upper_bound = q3 + (1.5 * iqr)\n\n    # Draw the box\n    box = patches.Rectangle(\n        (position, q1), width, q3 - q1, facecolor=facecolor, edgecolor=edgecolor\n    )\n    ax.add_patch(box)\n\n    # Draw the median line\n    ax.plot([position, position + width], [median, median], color=mediancolor)\n\n    colors = mcolors.LinearSegmentedColormap.from_list(\"\", [facecolor, \"white\"])(\n        np.linspace(0.2, 0.7, 5)\n    )\n    # Draw the whiskers\n    lower_values = np.linspace(lower_bound, q1, num_rectangles // 2 + 1)\n    upper_values = np.linspace(q3, upper_bound, num_rectangles // 2 + 1)\n    # Find the outliers\n    outliers = data[(data < lower_bound) | (data > upper_bound)]\n\n    # Draw the outliers\n    ax.scatter(\n        [position + width / 2] * len(outliers),\n        outliers,\n        marker=\"o\",\n        edgecolor=\"gray\",\n        facecolor=\"None\",\n        s=30,\n    )\n    for i in range(num_rectangles // 2):\n        lower_val_min = lower_values[i]\n        lower_val_max = lower_values[i + 1]\n        upper_val_min = upper_values[i]\n        upper_val_max = upper_values[i + 1]\n        widthupper = (\n            0.6 - 0.59 * abs(np.sqrt(i)) / (np.sqrt(num_rectangles // 2 - 1))\n        ) * width\n        widthlower = (\n            0.6\n            - 0.59\n            * abs(np.sqrt(num_rectangles // 2 - 1 - i))\n            / np.sqrt((num_rectangles // 2 - 1))\n        ) * width\n        lower_whisker = patches.Rectangle(\n            (position + (width - widthlower) / 2, lower_val_min),\n            widthlower,\n            lower_val_max - lower_val_min,\n            facecolor=colors[num_rectangles // 2 - 1 - i],\n            edgecolor=edgecolor,\n        )\n        upper_whisker = patches.Rectangle(\n            (position + (width - widthupper) / 2, upper_val_min),\n            widthupper,\n            upper_val_max - upper_val_min,\n            facecolor=colors[i],\n            edgecolor=edgecolor,\n        )\n        ax.add_patch(lower_whisker)\n        ax.add_patch(upper_whisker)\n\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\ncustom_boxplot(axs[0], data1[0], 0, width, facecolor=\"#516897\")\ncustom_boxplot(axs[0], data1[1], 2, width, facecolor=\"#be825c\")\n\naxs[0].set_xticks(xticks[0])\naxs[0].set_xticklabels(xticklabels[0])\naxs[0].set_title(titles[0])\naxs[0].set_ylabel(ylabel)\naxs[0].spines[\"top\"].set_visible(False)\naxs[0].spines[\"right\"].set_visible(False)\ncustom_boxplot(axs[1], data2[0], 0, width, facecolor=\"#516897\")\ncustom_boxplot(axs[1], data2[1], 2, width, facecolor=\"#be825c\")\naxs[1].set_xticks(xticks[1])\naxs[1].set_xticklabels(xticklabels[1])\naxs[1].set_title(titles[1])\naxs[1].set_yticklabels([])\naxs[1].spines[\"top\"].set_visible(False)\naxs[1].spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_9.pdf', bbox_inches='tight')"}
{"idx": "HR_10", "instruction": "There is a reference image for you and I also have a set of data about a drone's flight path. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nstart_r = 2\nend_r = 12\nnum_points = 2500\nellipse_ratio = 1.5\n\n# Generate theta values\ntheta = np.linspace(0, 60 * np.pi, num_points) # Increase the range for more loops\n\n# Quadratic function for r to make the spiral more compact\nr = start_r + (end_r - start_r) * (theta / max(theta)) ** 2\n\n# Convert to Cartesian coordinates with scaling for the ellipse\nx = r * np.cos(theta) * ellipse_ratio\ny = r * np.sin(theta)\n\nlabel = \"Drone Flight Path\"\ntitle = \"Compact Spiral with Elliptical Path\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nstart_r = 2\nend_r = 12\nnum_points = 2500\nellipse_ratio = 1.5\n\n# Generate theta values\ntheta = np.linspace(0, 60 * np.pi, num_points)  # Increase the range for more loops\n\n# Quadratic function for r to make the spiral more compact\nr = start_r + (end_r - start_r) * (theta / max(theta)) ** 2\n\n# Convert to Cartesian coordinates with scaling for the ellipse\nx = r * np.cos(theta) * ellipse_ratio\ny = r * np.sin(theta)\n\nlabel = \"Drone Flight Path\"\ntitle = \"Compact Spiral with Elliptical Path\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nplt.figure(figsize=(8, 8))\nplt.plot(x, y, label=label)\nplt.plot(x[0], y[0], \"ko\")\nplt.title(title)\nplt.axis(\"equal\")  # Ensure the aspect ratio is equal\nplt.gca().set_aspect(\"equal\", adjustable=\"box\")  # Adjust aspect ratio\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_10.pdf', bbox_inches='tight')"}
{"idx": "HR_11", "instruction": "There is a reference image for you and I also have a set of data about compute performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nflops_per_byte = [0.2, 12]\nflops = [1e9, 1.5e12]\n\n# Points\npoints_x = [1.5, 2.5, 3.5, 4.5, 5.5, 6.5]\npoints_y = [1.2e11, 1.4e11, 1.6e11, 1.8e11, 2.0e11, 2.2e11]\nlabels = [\n\"simulation, low\",\n\"simulation, medium\",\n\"simulation, high\",\n\"analysis, low\",\n\"analysis, medium\",\n\"analysis, high\",\n]\nmarkers = [\"s\", \"s\", \"s\", \"d\", \"o\", \"v\"]\naxlines = [\n[[11.7, 15], [1.5e12, 1.5e12]],\n[[9.5, 15], [1e12, 1e12]],\n[[4.5, 15], [2.5e11, 2.5e11]],\n]\nx_fill = [0.2, 12, 15, 15] # x goes from 0.2 to 15 and back to 0.2\ny_fill_top = [\n1e9,\n1.5e12,\n1.5e12,\n1.5e12,\n] # y follows the line segment, then the horizontal line, and back to the start\ny_fill_bottom = [\n5e8,\n5e8,\n5e8,\n5e8,\n] # y is constant at 5e8 for the bottom boundary\nxlabel = \"Compute Intensity (Flops/byte)\"\nylabel = \"Performance (Flops/s)\"\ntextlabels = [\"Memory Bound\", \"Peak Performance\", \"No FMA\", \"No Vectorization\"]\ntextposition = [[0.3, 5e9], [14, 1.6e12], [14, 1e12], [14, 3e11]]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nflops_per_byte = [0.2, 12]\nflops = [1e9, 1.5e12]\n\n# Points\npoints_x = [1.5, 2.5, 3.5, 4.5, 5.5, 6.5]\npoints_y = [1.2e11, 1.4e11, 1.6e11, 1.8e11, 2.0e11, 2.2e11]\nlabels = [\n    \"simulation, low\",\n    \"simulation, medium\",\n    \"simulation, high\",\n    \"analysis, low\",\n    \"analysis, medium\",\n    \"analysis, high\",\n]\ncolors = [\"magenta\", \"navy\", \"teal\", \"orange\", \"green\", \"purple\"]\nmarkers = [\"s\", \"s\", \"s\", \"d\", \"o\", \"v\"]\naxlines = [\n    [[11.7, 15], [1.5e12, 1.5e12]],\n    [[9.5, 15], [1e12, 1e12]],\n    [[4.5, 15], [2.5e11, 2.5e11]],\n]\nx_fill = [0.2, 12, 15, 15]  # x goes from 0.2 to 15 and back to 0.2\ny_fill_top = [\n    1e9,\n    1.5e12,\n    1.5e12,\n    1.5e12,\n]  # y follows the line segment, then the horizontal line, and back to the start\ny_fill_bottom = [\n    5e8,\n    5e8,\n    5e8,\n    5e8,\n]  # y is constant at 5e8 for the bottom boundary\nxlabel = \"Compute Intensity (Flops/byte)\"\nylabel = \"Performance (Flops/s)\"\nxlim = [0.2, 1.5e1]\nylim = [5e8, 1.5e12 * 1.5]\ntextlabels = [\"Memory Bound\", \"Peak Performance\", \"No FMA\", \"No Vectorization\"]\ntextposition = [[0.3, 5e9], [14, 1.6e12], [14, 1e12], [14, 3e11]]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 7))\n\n# Plot the roofline model\nax.plot(flops_per_byte, flops, color=\"black\")\nax.plot(axlines[0][0], axlines[0][1], color=\"black\", linestyle=\"-\")\nax.plot(axlines[1][0], axlines[1][1], color=\"black\", linestyle=\"-\")\nax.plot(axlines[2][0], axlines[2][1], color=\"black\", linestyle=\"-\")\n\nax.fill_between(x_fill, y_fill_top, y_fill_bottom, color=\"lightblue\", alpha=0.3)\n\n# Add text annotations\nax.text(textposition[0][0], textposition[0][1], textlabels[0], rotation=40, verticalalignment=\"center\")\nax.text(textposition[1][0],textposition[1][1],textlabels[1], rotation=0, va=\"bottom\", ha=\"right\")\nax.text(textposition[2][0],textposition[2][1], textlabels[2], rotation=0, va=\"bottom\", ha=\"right\")\nax.text(textposition[3][0], textposition[3][1],textlabels[3], rotation=0, va=\"bottom\", ha=\"right\")\n\n# Plot the points\nfor x, y, label, color, marker in zip(points_x, points_y, labels, colors, markers):\n    ax.plot(x, y, label=label, color=color, marker=marker, linestyle=\"-\", markersize=10)\n\n# Set scale to log\nax.set_xscale(\"log\")\nax.set_yscale(\"log\")\n\n# Set labels\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Set limits\nax.set_xlim(xlim)\nax.set_ylim(ylim)\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_11.pdf', bbox_inches='tight')"}
{"idx": "HR_12", "instruction": "There is a reference image for you and I also have a set of data about the impact of various writing features on overall quality. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Given data\nfeatures = [\n\"accuracy\",\n\"clarity\",\n\"conciseness\",\n\"coherence\",\n\"relevance\",\n\"depth of information\",\n\"engagement\",\n\"originality\",\n\"organization\",\n\"technical correctness\",\n\"creativity\",\n]\nimpact_values = [0.01, 0.03, 0.02, -0.01, 0.02, 0.03, -0.02, 0.05, -0.04, 0.1, 0.15]\n# Starting x-axis value\nstart_x = 0.60\ncumulative_values = [start_x]\n\naxvhline = 0.85\ntextposition = [[0.85, 10.5], [0.60, -2]]\ntextlabels = [\"f(x) = 0.85\", \"f(x) = 0.60\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nfrom matplotlib import patches\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Given data\nfeatures = [\n    \"accuracy\",\n    \"clarity\",\n    \"conciseness\",\n    \"coherence\",\n    \"relevance\",\n    \"depth of information\",\n    \"engagement\",\n    \"originality\",\n    \"organization\",\n    \"technical correctness\",\n    \"creativity\",\n]\nimpact_values = [0.01, 0.03, 0.02, -0.01, 0.02, 0.03, -0.02, 0.05, -0.04, 0.1, 0.15]\n# Starting x-axis value\nstart_x = 0.60\ncumulative_values = [start_x]\n\naxvhline = 0.85\nylim = [-0.5, 11]\nxlim = [0.5, 0.9]\nxticks = [0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85]\ntextposition = [[0.85, 10.5], [0.60, -2]]\ntextlabels = [\"f(x) = 0.85\", \"f(x) = 0.60\"]\nylim = [-0.5, 11]\nxlim = [0.5, 1]\nxticks = [0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85,0.90,0.95,1.0]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Calculate the start point for each bar\nfor impact in impact_values:\n    next_value = cumulative_values[-1] + impact\n    cumulative_values.append(next_value)\n\n# Define colors for positive and negative impact\ncolors = [\"#ea3356\" if impact > 0 else \"#3d89f3\" for impact in impact_values]\n\nfig, ax = plt.subplots(figsize=(8, 6))\n# Add dashed lines to connect bars\nfor i in range(len(impact_values) - 1):\n    plt.plot(\n        [cumulative_values[i + 1], cumulative_values[i + 1]],\n        [features[i], features[i + 1]],\n        \"k--\",\n        linewidth=0.5,\n        color=\"gray\",\n    )\n# Customize bars with arrows\n\n# Drawing pencil-shaped bars with two right corners cut off\nfor idx, (feature, impact) in enumerate(zip(features, impact_values)):\n    left = cumulative_values[idx]\n    bar_width = 0.6  # Set the bar width\n\n    if impact > 0:\n        color = \"#ea3356\"\n        width = impact\n        text_x = left + width\n        # Draw the main bar body\n        ax.add_patch(\n            patches.Rectangle(\n                (left, idx - bar_width / 2),\n                width - 0.005,\n                bar_width,\n                facecolor=color,\n            )\n        )\n        # Draw the tip\n        ax.add_patch(\n            patches.Polygon(\n                [\n                    (left + width - 0.005, idx - bar_width / 2),\n                    (left + width, idx),\n                    (left + width - 0.005, idx + bar_width / 2),\n                ],\n                closed=True,\n                facecolor=color,\n            )\n        )\n        ax.text(text_x, idx, f\"+{impact}\", va=\"center\", ha=\"left\", color=\"#ea3356\")\n    else:\n        color = \"#3d89f3\"\n        width = -impact  # Width is positive for drawing\n        text_x = left - width\n        if impact == 0:\n            ax.add_patch(\n                patches.Rectangle(\n                    (left - width, idx - bar_width / 2),\n                    width,\n                    bar_width,\n                    facecolor=color,\n                    edgecolor=color,\n                )\n            )\n        else:\n            # Draw the main bar body\n            ax.add_patch(\n                patches.Rectangle(\n                    (left - width + 0.005, idx - bar_width / 2),\n                    width - 0.005,\n                    bar_width,\n                    facecolor=color,\n                )\n            )\n            # Draw the tip\n            ax.add_patch(\n                patches.Polygon(\n                    [\n                        (left - width + 0.005, idx - bar_width / 2),\n                        (left - width, idx),\n                        (left - width + 0.005, idx + bar_width / 2),\n                    ],\n                    closed=True,\n                    facecolor=color,\n                )\n            )\n\n        ax.text(\n            text_x, idx, f\"-{np.abs(impact)}\", va=\"center\", ha=\"right\", color=\"#3d89f3\"\n        )\n\nax.axvline(axvhline, linestyle=\"--\", color=\"gray\", alpha=0.3)\n# Set labels and title\nax.yaxis.grid(True, linestyle=\"dotted\", color=\"gray\", alpha=0.3)\nax.set_axisbelow(True)\nax.tick_params(axis=\"both\", length=0)\n# Remove spines\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\nax.set_ylim(ylim)\nax.set_xlim(xlim)\nax.set_xticks(xticks)\n# Adjust layout to make room for labels and display the plot\n# Add text annotation for f(x)\nax.text(textposition[0][0], textposition[0][1], textlabels[0], va=\"bottom\", ha=\"center\", color=\"grey\")\nax.text(textposition[1][0], textposition[1][1], textlabels[1], va=\"bottom\", ha=\"center\", color=\"grey\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_12.pdf', bbox_inches='tight')"}
{"idx": "HR_14", "instruction": "There is a reference image for you and I also have a set of data about various technology skills. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the data for the radar chart\n# Define the data for the radar chart\nlabels = np.array(\n[\n\"Logistics\",\n\"Cybersecurity\",\n\"AI Ethics\",\n\"Blockchain\",\n\"Quantum Computing\",\n\"5G Technology\",\n]\n)\nnum_vars = len(labels)\n\nvalues = np.array(\n[\n[23, 30, 25, 27, 28, 22],\n[25, 35, 30, 29, 32, 25],\n[27, 40, 34, 31, 37, 28],\n[29, 44, 36, 33, 40, 30],\n[32, 47, 39, 35, 42, 33],\n]\n)\n\n# Compute angle for each axis\nangles = [n * 2 * pi / float(num_vars) for n in range(num_vars)]\nperangles = 2 * pi / (float(num_vars) * (len(values) + 1))\nangles += angles[:1]\nx_angles = [n + pi / 9 for n in angles[:-1]]\n# Add legend\nlegend_labels = [\"Basic\", \"Intermediate\", \"Advanced\", \"Expert\", \"Master\"]\n# Set the start angle to degrees\noffset = 11 * pi / 18\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for the radar chart\n# Define the data for the radar chart\nlabels = np.array(\n    [\n        \"Logistics\",\n        \"Cybersecurity\",\n        \"AI Ethics\",\n        \"Blockchain\",\n        \"Quantum Computing\",\n        \"5G Technology\",\n    ]\n)\nnum_vars = len(labels)\n\nvalues = np.array(\n    [\n        [23, 30, 25, 27, 28, 22],\n        [25, 35, 30, 29, 32, 25],\n        [27, 40, 34, 31, 37, 28],\n        [29, 44, 36, 33, 40, 30],\n        [32, 47, 39, 35, 42, 33],\n    ]\n)\n\n# Compute angle for each axis\nangles = [n * 2 * pi / float(num_vars) for n in range(num_vars)]\nperangles = 2 * pi / (float(num_vars) * (len(values) + 1))\nangles += angles[:1]\nxticks = [40, 50]\nxtickslabel = [\"40\", \"50\"]\nx_angles = [n + pi / 9 for n in angles[:-1]]\n# Add legend\nlegend_labels = [\"Basic\", \"Intermediate\", \"Advanced\", \"Expert\", \"Master\"]\n# Set the start angle to degrees\noffset = 11 * pi / 18\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nplt.figure(figsize=(6, 6))\nax = plt.subplot(projection=\"polar\")\n\n# Set the direction of the plot to clockwise\nax.set_theta_direction(-1)\n\n\nax.set_theta_offset(offset)\n\ncolors = [\"#f8dbad\", \"#dbcce2\", \"#d2eac8\", \"#b8cce1\", \"#f1b7b0\"]\nfor index, value in enumerate(values):\n    for _index, _value in enumerate(value):\n        theta1 = angles[_index] + perangles * index\n        theta2 = angles[_index] + perangles * (index + 1)\n        ax.bar(theta1, _value, perangles, color=colors[index])\n\n# Add labels\n\nax.set_xticks(x_angles)\nax.set_xticklabels(labels, fontdict={\"fontsize\": 8})\nax.set_yticks(xticks)\nax.set_yticklabels(xtickslabel, color=\"grey\")\nax.tick_params(axis=\"x\", which=\"major\", pad=15)\n\n# Add a grid\nax.grid(alpha=0.3)\n\nfor i in range(len(legend_labels)):\n    ax.bar(\n        [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], color=colors[-i - 1], label=legend_labels[i]\n    )\nax.legend(loc=\"upper right\", bbox_to_anchor=(0.05, 0.2))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_14.pdf', bbox_inches='tight')"}
{"idx": "HR_15", "instruction": "There is a reference image for you and I also have a set of data about training session errors and their variability in relation to heart rate and speed. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nm_values = np.logspace(1, 2, 10) \n\nerrors_s19 = np.exp(-0.1 * m_values) + np.random.rand(len(m_values)) * 0.1\nerrors_s50 = np.exp(-0.2 * m_values - 1) + np.random.rand(len(m_values)) * 0.1\nerrors_s76 = np.exp(-0.3 * m_values - 2) + np.random.rand(len(m_values)) * 0.1\nerrors_s142 = np.exp(-0.4 * m_values - 3) + np.random.rand(len(m_values)) * 0.1\nerrors_s232 = np.exp(-0.5 * m_values - 4) + np.random.rand(len(m_values)) * 0.1\n\nerrors_s19_err = errors_s19 * 0.4\nerrors_s50_err = errors_s50 * 0.5\nerrors_s76_err = errors_s76 * 0.5\nerrors_s142_err = errors_s142 * 0.6\nerrors_s232_err = errors_s232 * 0.6\n\nxlabel = \"Number of Training Sessions\"\nylabels = [r\"Heart Rate Variability\", r\"Speed Variability\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nm_values = np.logspace(1, 2, 10) \n\nerrors_s19 = np.exp(-0.1 * m_values) + np.random.rand(len(m_values)) * 0.1\nerrors_s50 = np.exp(-0.2 * m_values - 1) + np.random.rand(len(m_values)) * 0.1\nerrors_s76 = np.exp(-0.3 * m_values - 2) + np.random.rand(len(m_values)) * 0.1\nerrors_s142 = np.exp(-0.4 * m_values - 3) + np.random.rand(len(m_values)) * 0.1\nerrors_s232 = np.exp(-0.5 * m_values - 4) + np.random.rand(len(m_values)) * 0.1\n\nerrors_s19_err = errors_s19 * 0.4\nerrors_s50_err = errors_s50 * 0.5\nerrors_s76_err = errors_s76 * 0.5\nerrors_s142_err = errors_s142 * 0.6\nerrors_s232_err = errors_s232 * 0.6\n\nxlabel = \"Number of Training Sessions\"\nylabels = [r\"Heart Rate Variability\", r\"Speed Variability\"]\nxlim = [6, 1e2]\nylim = [1e-7, 10]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes with specified size (width, height)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot data and curves for the left subplot\nax1.plot(m_values, errors_s19, \".\", color=\"purple\", label=\"s = 19\")\nax1.fill_between(\n    m_values,\n    errors_s19 - errors_s19_err,\n    errors_s19 + errors_s19_err,\n    color=\"purple\",\n    alpha=0.2,\n)\n# Fit and plot a line\ncoeffs = np.polyfit(np.log(m_values), np.log(errors_s19), 2)\nfit_func = np.poly1d(coeffs)\nax1.plot(m_values, np.exp(fit_func(np.log(m_values))), \"k:\")\n\nax1.plot(m_values, errors_s50, \".\", color=\"pink\", label=\"s = 50\")\nax1.fill_between(\n    m_values,\n    errors_s50 - errors_s50_err,\n    errors_s50 + errors_s50_err,\n    color=\"pink\",\n    alpha=0.2,\n)\n# Fit and plot a line\ncoeffs = np.polyfit(np.log(m_values), np.log(errors_s50), 2)\nfit_func = np.poly1d(coeffs)\nax1.plot(m_values, np.exp(fit_func(np.log(m_values))), \"k:\")\n\nax1.set_xscale(\"log\")\nax1.set_yscale(\"log\")\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabels[0])\n\n# Plot data and curves for the right subplot\nax2.plot(m_values, errors_s19, \".\", color=\"purple\", label=\"s = 19\")\nax2.fill_between(\n    m_values,\n    errors_s19 - errors_s19_err,\n    errors_s19 + errors_s19_err,\n    color=\"purple\",\n    alpha=0.2,\n)\n# Fit and plot a line\ncoeffs = np.polyfit(np.log(m_values), np.log(errors_s19), 2)\nfit_func = np.poly1d(coeffs)\nax2.plot(m_values, np.exp(fit_func(np.log(m_values))), \"k:\")\n\nax2.plot(m_values, errors_s50, \".\", color=\"pink\", label=\"s = 50\")\nax2.fill_between(\n    m_values,\n    errors_s50 - errors_s50_err,\n    errors_s50 + errors_s50_err,\n    color=\"pink\",\n    alpha=0.2,\n)\n# Fit and plot a line\ncoeffs = np.polyfit(np.log(m_values), np.log(errors_s50), 2)\nfit_func = np.poly1d(coeffs)\nax2.plot(m_values, np.exp(fit_func(np.log(m_values))), \"k:\")\n\nax2.plot(m_values, errors_s76, \".\", color=\"purple\", label=\"s = 76\")\nax2.fill_between(\n    m_values,\n    errors_s76 - errors_s76_err,\n    errors_s76 + errors_s76_err,\n    color=\"purple\",\n    alpha=0.2,\n)\n# Fit and plot a line\ncoeffs = np.polyfit(np.log(m_values), np.log(errors_s76), 2)\nfit_func = np.poly1d(coeffs)\nax2.plot(m_values, np.exp(fit_func(np.log(m_values))), \"k:\")\n\nax2.plot(m_values, errors_s142, \".\", color=\"pink\", label=\"s = 142\")\nax2.fill_between(\n    m_values,\n    errors_s142 - errors_s142_err,\n    errors_s142 + errors_s142_err,\n    color=\"pink\",\n    alpha=0.2,\n)\n# Fit and plot a line\ncoeffs = np.polyfit(np.log(m_values), np.log(errors_s142), 2)\nfit_func = np.poly1d(coeffs)\nax2.plot(m_values, np.exp(fit_func(np.log(m_values))), \"k:\")\n\nax2.plot(m_values, errors_s232, \".\", color=\"orange\", label=\"s = 232\")\nax2.fill_between(\n    m_values,\n    errors_s232 - errors_s232_err,\n    errors_s232 + errors_s232_err,\n    color=\"orange\",\n    alpha=0.2,\n)\n# Fit and plot a line\ncoeffs = np.polyfit(np.log(m_values), np.log(errors_s232), 2)\nfit_func = np.poly1d(coeffs)\nax2.plot(m_values, np.exp(fit_func(np.log(m_values))), \"k:\")\n\nax2.set_xlim(xlim)\nax2.set_ylim(ylim)\nax2.set_xscale(\"log\")\nax2.set_yscale(\"log\")\nax2.set_xlabel(xlabel)\nax2.set_ylabel(ylabels[1])\nax2.legend(frameon=True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('HR_15.pdf', bbox_inches='tight')"}
{"idx": "HR_16", "instruction": "There is a reference image for you and I also have a set of data about employee performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data and labels\nnum_metrics = 5\n\ntheta = np.linspace(0, 2 * np.pi, num_metrics, endpoint=False) \nradii = np.random.rand(num_metrics) * 10 \nwidth = np.random.rand(num_metrics) * 1.5 + 0.5 \n\n# Labels for the bars (e.g., different performance metrics)\ncategories = [\n\"Sprint Speed\",\n\"Endurance\",\n\"Jump Height\",\n\"Agility\",\n\"Strength\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data and labels\nnum_metrics = 5\n\ntheta = np.linspace(0, 2 * np.pi, num_metrics, endpoint=False) \nradii = np.random.rand(num_metrics) * 10  \nwidth = np.random.rand(num_metrics) * 1.5 + 0.5 \n\n# Labels for the bars (e.g., different performance metrics)\ncategories = [\n    \"Sprint Speed\",\n    \"Endurance\",\n    \"Jump Height\",\n    \"Agility\",\n    \"Strength\",\n]\ncolors = plt.cm.viridis(radii / 10.0)  # Colors mapped to the radii values\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure\nplt.figure(figsize=(8, 8))\nax = plt.subplot(111, projection=\"polar\")  # Set up polar plot\n\n# Plot the bars\nbars = ax.bar(theta, radii, width=width, bottom=0, color=colors, alpha=0.5, zorder=3)\n\n# Add labels to the bars\nfor bar, angle, label in zip(bars, theta, categories):\n    rotation = np.degrees(angle)  # Convert angle to degrees\n    alignment = \"center\"  # Center align the labels\n    # Place the text inside the bar, rotated correctly\n    ax.text(\n        angle,\n        bar.get_height() + 0.5,\n        label,\n        ha=alignment,\n        va=\"center\",\n        rotation_mode=\"anchor\",\n    )\n\n# Remove the polar angle labels to declutter the plot\nax.set_xticklabels([])\n\n# Remove the radial labels\nax.set_yticklabels([])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Save the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_16.pdf', bbox_inches='tight')"}
{"idx": "HR_17", "instruction": "There is a reference image for you and I also have a set of data about **gaussian mixture distributions**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ndef gaussian_mixture(x, n=6):\n\"\"\"Return a random mixture of *n* Gaussians, evaluated at positions *x*.\"\"\"\n\ndef add_random_gaussian(a):\namplitude = 1 / (0.1 + np.random.random())\ndx = x[-1] - x[0]\nx0 = (2 * np.random.random() - 0.5) * dx\nz = 5 / (0.1 + np.random.random()) / dx\na += amplitude * np.exp(-((z * (x - x0)) ** 2))\n\na = np.zeros_like(x)\nfor j in range(n):\nadd_random_gaussian(a)\nreturn a\nx = np.linspace(0, 200, 201)\nys = [gaussian_mixture(x) for _ in range(6)]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ndef gaussian_mixture(x, n=6):\n    \"\"\"Return a random mixture of *n* Gaussians, evaluated at positions *x*.\"\"\"\n\n    def add_random_gaussian(a):\n        amplitude = 1 / (0.1 + np.random.random())\n        dx = x[-1] - x[0]\n        x0 = (2 * np.random.random() - 0.5) * dx\n        z = 5 / (0.1 + np.random.random()) / dx\n        a += amplitude * np.exp(-((z * (x - x0)) ** 2))\n\n    a = np.zeros_like(x)\n    for j in range(n):\n        add_random_gaussian(a)\n    return a\n\n\nx = np.linspace(0, 200, 201)\nys = [gaussian_mixture(x) for _ in range(6)]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(6, 5))\nax.stackplot(x, ys, baseline=\"wiggle\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_17.pdf', bbox_inches='tight')"}
{"idx": "HR_18", "instruction": "There is a reference image for you and I also have a set of data about the average speed of athletes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Number of data points\nn = 7\n\n# Dummy data for demonstration\nx = np.arange(0, n, 1)\ny = np.random.rand(n) * 3.0 + 5.0 # Simulated values for average speed (e.g., in m/s)\n\n# Dummy errors (above and below) representing measurement uncertainty\nxerr = np.random.rand(2, n) * 0.5 + 0.1 # Variation due to environmental conditions\nyerr = np.random.rand(2, n) * 0.5 + 0.2 # Measurement errors in average speed\n\n# Updated titles and labels for sports domain\ntitle = \"Uncertainty in Average Speed of Athletes\"\nxlabel = \"Athlete Sample Number\"\nylabel = \"Average Speed (m/s)\"\n\ndef make_error_boxes(\nax, xdata, ydata, xerror, yerror, facecolor=\"r\", edgecolor=\"none\", alpha=0.5\n):\n# Loop over data points; create box from errors at each point\nerrorboxes = [\nRectangle((x - xe[0], y - ye[0]), xe.sum(), ye.sum())\nfor x, y, xe, ye in zip(xdata, ydata, xerror.T, yerror.T)\n]\n\n# Create patch collection with specified colour/alpha\npc = PatchCollection(\nerrorboxes, facecolor=facecolor, alpha=alpha, edgecolor=edgecolor\n)\n\n# Add collection to axes\nax.add_collection(pc)\n\n# Plot errorbars\nartists = ax.errorbar(\nxdata, ydata, xerr=xerror, yerr=yerror, fmt=\"none\", ecolor=\"k\"\n)\n\nreturn artists\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.patches import Rectangle\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Number of data points\nn = 7\n\n# Dummy data for demonstration\nx = np.arange(0, n, 1)\ny = np.random.rand(n) * 3.0 + 5.0  # Simulated values for average speed (e.g., in m/s)\n\n# Dummy errors (above and below) representing measurement uncertainty\nxerr = np.random.rand(2, n) * 0.5 + 0.1  # Variation due to environmental conditions\nyerr = np.random.rand(2, n) * 0.5 + 0.2  # Measurement errors in average speed\n\n# Updated titles and labels for sports domain\ntitle = \"Uncertainty in Average Speed of Athletes\"\nxlabel = \"Athlete Sample Number\"\nylabel = \"Average Speed (m/s)\"\n\ndef make_error_boxes(\n    ax, xdata, ydata, xerror, yerror, facecolor=\"r\", edgecolor=\"none\", alpha=0.5\n):\n    # Loop over data points; create box from errors at each point\n    errorboxes = [\n        Rectangle((x - xe[0], y - ye[0]), xe.sum(), ye.sum())\n        for x, y, xe, ye in zip(xdata, ydata, xerror.T, yerror.T)\n    ]\n\n    # Create patch collection with specified colour/alpha\n    pc = PatchCollection(\n        errorboxes, facecolor=facecolor, alpha=alpha, edgecolor=edgecolor\n    )\n\n    # Add collection to axes\n    ax.add_collection(pc)\n\n    # Plot errorbars\n    artists = ax.errorbar(\n        xdata, ydata, xerr=xerror, yerr=yerror, fmt=\"none\", ecolor=\"k\"\n    )\n\n    return artists\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Call function to create error boxes\n_ = make_error_boxes(ax, x, y, xerr, yerr)\n\n# Set titles and labels\nax.set_title(title)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_18.pdf', bbox_inches='tight')"}
{"idx": "HR_20", "instruction": "There is a reference image for you and I also have a set of data about average goals scored by different sports teams. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\ncategories = [\"Female Team\", \"Male Team\", \"Mixed Team\", \"Youth Team\"]\nmodels = [\n\"Method A\",\n\"Method B\",\n\"Method C\",\n\"Method D\",\n\"Method E\",\n]\n\n# Random values for demonstration (average goals scored)\nvalues = np.random.rand(4, 5) * 3 + 2 # Adjusted range for sports goals\n\n# Reference lines (e.g., league average goals)\nreferlines = [2.5, 3.2, 4, 4.5, 5]\n\n# Labels and limits relevant to sports\nylabel = \"Average Goals Scored per Match\"\narrowstart = (0.05, 0.03)\narrowend = (0.48, 0.03)\narrowstart2 = (0.55, 0.03)\narrowend2 = (0.9, 0.03)\n\n# Text positions and labels for annotations\ntextposition = [[0.5, 1], [2.5, 1]]\ntextlabel = \"Training Effectiveness\"\nspanposition = [[-0.5, 1.5], [1.5, 3.5]]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Female Team\", \"Male Team\", \"Mixed Team\", \"Youth Team\"]\nmodels = [\n    \"Method A\",\n    \"Method B\",\n    \"Method C\",\n    \"Method D\",\n    \"Method E\",\n]\n\n# Random values for demonstration (average goals scored)\nvalues = np.random.rand(4, 5) * 3 + 2  # Adjusted range for sports goals\n\n# Colors for the bars\ncolors = [\"mistyrose\", \"cornflowerblue\", \"lightgreen\", \"lightcoral\", \"lightblue\"]\n# Reference lines (e.g., league average goals)\nreferlines = [2.5, 3.2, 4, 4.5, 5]\n\n# Labels and limits relevant to sports\nylabel = \"Average Goals Scored per Match\"\nylim = [2, 6]\narrowstart = (0.05, 0.03)\narrowend = (0.48, 0.03)\narrowstart2 = (0.55, 0.03)\narrowend2 = (0.9, 0.03)\nxlim = [-0.5, 3.5]\n\n# Text positions and labels for annotations\ntextposition = [[0.5, 1], [2.5, 1]]\ntextlabel = \"Training Effectiveness\"\nspanposition = [[-0.5, 1.5], [1.5, 3.5]]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(figsize=(10, 5))\nwidth = 0.1\nx = np.arange(len(categories))\nax.axvspan(\n    spanposition[0][0],\n    spanposition[0][1],\n    color=\"#f5fff1\",\n)\nax.axvspan(\n    spanposition[1][0],\n    spanposition[1][1],\n    color=\"#f5f5fd\",\n)\n\nfor i, subcategory in enumerate(categories):\n    for j, (model, color, referline) in enumerate(zip(models, colors, referlines)):\n        ax.bar(\n            i + (j - 2) * width,\n            values[i, j] - referline,\n            width,\n            bottom=referline,\n            label=model if i == 0 else \"\",\n            color=color,\n        )\n\n# Annotations\nfor k, model in enumerate(models):\n    for i, category in enumerate(categories):\n        ax.text(\n            i + (k - 2) * width, values[i, k] + 0.1, f\"{values[i, k]:.1f}\", ha=\"center\"\n        )\n\nfor line, color in zip(referlines, colors):\n    ax.axhline(line, color=color, linestyle=\"--\")\n    ax.text(3.4, line + 0.1, f\"{line:.1f}\", ha=\"center\", color=color)\n\n# Customizations\nax.set_ylabel(ylabel)\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.set_ylim(ylim)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nplt.annotate(\n    \"\",\n    xy=arrowstart,\n    xytext=arrowend,\n    xycoords=\"figure fraction\",\n    arrowprops=dict(arrowstyle=\"<->\", color=\"green\", lw=1),\n)\nplt.annotate(\n    \"\",\n    xy=arrowstart2,\n    xytext=arrowend2,\n    xycoords=\"figure fraction\",\n    arrowprops=dict(arrowstyle=\"<->\", color=\"purple\", lw=1),\n)\ncurrent_ticks = ax.get_xticks()\nnew_ticks = current_ticks + 0.5\nax.set_xlim(xlim)\n# Set the new ticks without labels\nax.set_xticks(new_ticks, minor=True)  # Add as minor ticks\nax.xaxis.set_minor_formatter(plt.NullFormatter())  # Hide labels for minor ticks\n\n# Enable grid for minor ticks, adjust grid appearance as needed\nax.grid(which=\"minor\", color=\"black\", linestyle=\"--\", alpha=0.5)\nax.text(textposition[0][0], textposition[0][1], textlabel, ha=\"center\", va=\"top\", fontsize=12, color=\"green\")\nax.text(textposition[1][0], textposition[1][1], textlabel, ha=\"center\", va=\"top\", fontsize=12, color=\"purple\")\nax.legend(ncol=5, loc=\"upper center\", bbox_to_anchor=(0.5, 1.2))\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_20.pdf', bbox_inches='tight')"}
{"idx": "HR_21", "instruction": "There is a reference image for you and I also have a set of data about athletes' performance in an endurance race. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nbroken_barh_datax1 = [(10, 15), (40, 25), (90, 30)]\nbroken_barh_datay1 = (10, 9)\nbroken_barh_datax2 = [(20, 30), (70, 15)]\nbroken_barh_datay2 = (20, 9)\nbroken_barh_datax3 = [(50, 20), (130, 10)]\nbroken_barh_datay3 = (30, 9)\nbroken_barh_datax4 = [(0, 10), (60, 15), (100, 20)]\nbroken_barh_datay4 = (40, 9)\n\n# Updated labels for different activities\nlabels = [\"Running\", \"Rest\", \"Sprint\", \"Recovery\"]\ndatalabels = [\"Athlete A\", \"Athlete B\", \"Athlete C\", \"Athlete D\"]\nxlabel = \"Seconds Since Start\"\nannotations = \"Race interrupted due to severe weather\"\nannotatestart = (60, 25)\nannotateend = (0.8, 0.7)\ntitle = \"Endurance Race Performance Analysis with Updated Data\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nbroken_barh_datax1 = [(10, 15), (40, 25), (90, 30)]\nbroken_barh_datay1 = (10, 9)\nbroken_barh_datax2 = [(20, 30), (70, 15)]\nbroken_barh_datay2 = (20, 9)\nbroken_barh_datax3 = [(50, 20), (130, 10)]\nbroken_barh_datay3 = (30, 9)\nbroken_barh_datax4 = [(0, 10), (60, 15), (100, 20)]\nbroken_barh_datay4 = (40, 9)\n\n# Updated labels for different activities\nlabels = [\"Running\", \"Rest\", \"Sprint\", \"Recovery\"]\ndatalabels = [\"Athlete A\", \"Athlete B\", \"Athlete C\", \"Athlete D\"]\nyticks = [15, 25, 35, 45]\nylim = [5, 55]\nxlim = [0, 150]\nxlabel = \"Seconds Since Start\"\nannotations = \"Race interrupted due to severe weather\"\nannotatestart = (60, 25)\nannotateend = (0.8, 0.7)\ntitle = \"Endurance Race Performance Analysis with Updated Data\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Horizontal bar plot with gaps to show different race phases\nfig, ax = plt.subplots(figsize=(7, 5))\nax.broken_barh(\n    broken_barh_datax1, broken_barh_datay1, facecolors=\"tab:blue\", label=labels[0]\n)\nax.broken_barh(broken_barh_datax2, broken_barh_datay2, facecolors=\"tab:red\", label=labels[1])\nax.broken_barh(broken_barh_datax3, broken_barh_datay3, facecolors=\"tab:green\", label=labels[2])\nax.broken_barh(\n    broken_barh_datax4,\n    broken_barh_datay4,\n    facecolors=(\"tab:orange\", \"tab:red\", \"tab:blue\"),\n    label=labels[3],\n)\n\nax.set_ylim(ylim)\nax.set_xlim(xlim)\nax.set_xlabel(xlabel)\nax.set_yticks(\n    yticks, labels=datalabels\n)  # More descriptive labels\nax.grid(True)  # Make grid lines visible\nax.annotate(\n    annotations,\n    annotatestart,\n    xytext=annotateend,\n    textcoords=\"axes fraction\",\n    arrowprops=dict(facecolor=\"black\", shrink=0.05),\n    fontsize=12,\n    horizontalalignment=\"right\",\n    verticalalignment=\"top\",\n)\n\n# Title and legend\nax.set_title(title)\nax.legend(loc=\"lower right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_21.pdf', bbox_inches='tight')"}
{"idx": "HR_22", "instruction": "There is a reference image for you and I also have a set of data about income distribution across different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nnumber_of_bins = 40\n\nnumber_of_data_points = 387\nlabels = [\"North Region\", \"Central Region\", \"South Region\"]\ndata_sets = [\nnp.random.normal(1000, 200, number_of_data_points), # North Region\nnp.random.normal(1200, 250, number_of_data_points), # Central Region\nnp.random.normal(900, 150, number_of_data_points), # South Region\n]\n\nhist_range = [0, 2500]\nnumber_of_bins = 30\n\n# The bin_edges are the same for all of the histograms\nbin_edges = np.linspace(hist_range[0], hist_range[1], number_of_bins + 1)\ncenters = bin_edges[:-1] + np.diff(bin_edges) / 2\nxlabel = \"Frequency of Income Levels\"\nylabel = \"Income in USD\"\ntitle = \"Comparative Distribution of Income Levels Across Regions\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nnumber_of_bins = 40\n\nnumber_of_data_points = 387\nlabels = [\"North Region\", \"Central Region\", \"South Region\"]\ndata_sets = [\n    np.random.normal(1000, 200, number_of_data_points),  # North Region\n    np.random.normal(1200, 250, number_of_data_points), # Central Region\n    np.random.normal(900, 150, number_of_data_points),  # South Region\n]\n\nhist_range = [0, 2500]\nnumber_of_bins = 30\n\n# The bin_edges are the same for all of the histograms\nbin_edges = np.linspace(hist_range[0], hist_range[1], number_of_bins + 1)\ncenters = bin_edges[:-1] + np.diff(bin_edges) / 2\nxlabel = \"Frequency of Income Levels\"\nylabel = \"Income in USD\"\ntitle = \"Comparative Distribution of Income Levels Across Regions\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Cycle through and plot each histogram\n# Computed quantities to aid plotting\nhist_range = (np.min(data_sets), np.max(data_sets))\nbinned_data_sets = [\n    np.histogram(d, range=hist_range, bins=number_of_bins)[0] for d in data_sets\n]\nbinned_maximums = np.max(binned_data_sets, axis=1)\nx_locations = np.arange(0, sum(binned_maximums), np.max(binned_maximums))\n\nfig, ax = plt.subplots(figsize=(7, 5))\nfor x_loc, binned_data in zip(x_locations, binned_data_sets):\n    lefts = x_loc - 0.5 * binned_data\n    ax.barh(centers, binned_data, height=np.diff(bin_edges), left=lefts)\n\n# Set the x-axis labels\nax.set_xticks(x_locations)\nax.set_xticklabels(labels)\n\n# Set labels and title with specific names\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_22.pdf', bbox_inches='tight')"}
{"idx": "HR_24", "instruction": "There is a reference image for you and I also have a set of data about the distribution of values across different categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# First create the x and y coordinates of the points.\nn_points = 32\nn_categories = 4\nmin_value = 0.1\nvalues = np.linspace(min_value, 0.75, n_categories)\n\ncategories = np.linspace(0, 2 * np.pi, n_points, endpoint=False)\ncategories = np.repeat(categories[..., np.newaxis], n_categories, axis=1)\ncategories[:, 1::2] += np.pi / n_points\n\nx = (values * np.cos(categories)).flatten()\ny = (values * np.sin(categories)).flatten()\nz = (np.sin(values) * np.sin(3 * categories)).flatten()\ntitle = \"Distribution of Values Across Categories\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.tri as tri\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# First create the x and y coordinates of the points.\nn_points = 32\nn_categories = 4\nmin_value = 0.1\nvalues = np.linspace(min_value, 0.75, n_categories)\n\ncategories = np.linspace(0, 2 * np.pi, n_points, endpoint=False)\ncategories = np.repeat(categories[..., np.newaxis], n_categories, axis=1)\ncategories[:, 1::2] += np.pi / n_points\n\nx = (values * np.cos(categories)).flatten()\ny = (values * np.sin(categories)).flatten()\nz = (np.sin(values) * np.sin(3 * categories)).flatten()\ntitle = \"Distribution of Values Across Categories\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the Triangulation; no triangles so Delaunay triangulation created.\ntriang = tri.Triangulation(x, y)\n\n# Mask off unwanted triangles.\ntriang.set_mask(\n    np.hypot(x[triang.triangles].mean(axis=1), y[triang.triangles].mean(axis=1))\n    < min_value\n)\nfig1, ax1 = plt.subplots(figsize=(8, 6))\nax1.set_aspect(\"equal\")\ntpc = ax1.tripcolor(triang, z, shading=\"flat\")\nfig1.colorbar(tpc)\nax1.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('HR_24.pdf', bbox_inches='tight')"}
{"idx": "HR_25", "instruction": "There is a reference image for you and I also have a set of data about the cosine function's absolute value influenced by the sum of x and y coordinates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ninterp = \"nearest\"\n# Linear x array for cell centers:\nx = np.linspace(0, 5, 9)\n\n# Highly nonlinear x array:\nx2 = np.sin(x * np.pi / 5)\n\ny = np.linspace(0, 5, 9)\n\nz = np.abs(np.cos(x[np.newaxis, :] + y[:, np.newaxis]))\nsuptitle=\"Transformed NonUniformImage\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom matplotlib import cm\nfrom matplotlib.image import NonUniformImage\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ninterp = \"nearest\"\n# Linear x array for cell centers:\nx = np.linspace(0, 5, 9)\n\n# Highly nonlinear x array:\nx2 = np.sin(x * np.pi / 5)\n\ny = np.linspace(0, 5, 9)\n\nz = np.abs(np.cos(x[np.newaxis, :] + y[:, np.newaxis]))\nsuptitle=\"Transformed NonUniformImage\"\nxlim=[[0, 5], [-1, 1], [0, 5], [-1, 1]]\nylim=[[0, 5], [0, 5], [0, 5], [0, 5]]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axs = plt.subplots(nrows=2, ncols=2, layout=\"constrained\", figsize=(8, 6))\nfig.suptitle(suptitle, fontsize=\"large\")\nax = axs[0, 0]\nim = NonUniformImage(ax, interpolation=interp, extent=(xlim[0][0], xlim[0][1], ylim[0][0], ylim[1][0]), cmap=cm.Purples)\nim.set_data(x, y, z)\nax.add_image(im)\nax.set_xlim(xlim[0])\nax.set_ylim(ylim[0])\nax.set_title(interp)\n\nax = axs[0, 1]\nim = NonUniformImage(ax, interpolation=interp, extent=(xlim[1][0],xlim[1][1], ylim[0][0], ylim[1][0]), cmap=cm.Purples)\nim.set_data(x2, y, z)\nax.add_image(im)\nax.set_xlim(xlim[1])\nax.set_ylim(ylim[1])\nax.set_title(interp)\n\ninterp = \"bilinear\"\n\nax = axs[1, 0]\nim = NonUniformImage(ax, interpolation=interp, extent=(xlim[2][0],xlim[2][1],ylim[2][0],ylim[2][1]), cmap=cm.Purples)\nim.set_data(x, y, z)\nax.add_image(im)\nax.set_xlim(xlim[2])\nax.set_ylim(ylim[2])\nax.set_title(interp)\n\nax = axs[1, 1]\nim = NonUniformImage(ax, interpolation=interp, extent=(xlim[3][0],xlim[3][1],ylim[3][0],ylim[3][1]), cmap=cm.Purples)\nim.set_data(x2, y, z)\nax.add_image(im)\nax.set_xlim(xlim[3])\nax.set_ylim(ylim[3])\nax.set_title(interp)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('HR_25.pdf', bbox_inches='tight')"}
{"idx": "PIP_1", "instruction": "There is a reference image for you and I also have a set of data about age and height measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\nx_green = np.random.normal(50, 10, 10)\ny_green = np.random.normal(100, 20, 10)\nx_green_additional = np.random.normal(300, 50, 10)\ny_green_additional = np.random.normal(600, 100, 10)\nx_green_total = np.concatenate([x_green, x_green_additional])\ny_green_total = np.concatenate([y_green, y_green_additional])\nx_blue = np.random.normal(45, 5, 5)\ny_blue = np.random.normal(110, 15, 5)\nx_orange = np.random.normal(70, 7, 5)\ny_orange = np.random.normal(150, 10, 5)\nxlabel = \"Age (Years)\"\nylabel = \"Height (cm)\"\ndiffline1 = [[0, 0],[50,800],[100, 400]]\ndiffline2 = [[0, 0], [100, 200], [150, 300]]\nannotaterecx1 = [40, 90]\nannotaterecy1 = [80, 160]\nplotup1 = [40, 165]\nplotdown1 = [40, 90]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\nx_green = np.random.normal(50, 10, 10)\ny_green = np.random.normal(100, 20, 10)\nx_green_additional = np.random.normal(300, 50, 10)\ny_green_additional = np.random.normal(600, 100, 10)\nx_green_total = np.concatenate([x_green, x_green_additional])\ny_green_total = np.concatenate([y_green, y_green_additional])\nx_blue = np.random.normal(45, 5, 5)\ny_blue = np.random.normal(110, 15, 5)\nx_orange = np.random.normal(70, 7, 5)\ny_orange = np.random.normal(150, 10, 5)\nxlabel = \"Age (Years)\"\nylabel = \"Height (cm)\"\nax1xlim = [0, 400]\nax1ylim = [50, 800]\ndiffline1 = [[0, 0],[50,800],[100, 400]]\ndiffline2 = [[0, 0], [100, 200], [150, 300]]\nannotaterecx1 = [40, 90]\nannotaterecy1 = [80, 160]\nax2xlim = [40, 80]\nax2ylim = [90, 160]\nplotup1 = [40, 165]\nplotdown1 = [40, 90]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n# Scatter plots\nax1.scatter(x_green_total, y_green_total, marker=\"^\", color=\"green\")\nax1.scatter(x_blue, y_blue, marker=\"v\", color=\"blue\")\nax1.scatter(x_orange, y_orange, marker=\"D\", color=\"orange\")\n\n# Shaded regions\nax1.fill_betweenx(y=[100, ax1ylim[1]], x1=50, x2=400, color=\"red\", alpha=0.2)\nax1.fill_betweenx(y=[0, 100], x1=0, x2=50, color=\"green\", alpha=0.2)\n\n# Axis limits and aspect ratio\nax1.set_xlim(ax1xlim)\nax1.set_ylim(ax1ylim)\nax1.plot([50,50], [800,0], color=\"black\", lw=0.5)\nax1.plot([0,400], [100,100], color=\"black\", lw=0.5)\n\nax1.plot([annotaterecx1[0], annotaterecx1[1]], [annotaterecy1[1], annotaterecy1[1]], color=\"black\", lw=0.5)\nax1.plot([annotaterecx1[0], annotaterecx1[1]], [annotaterecy1[0], annotaterecy1[0]], color=\"black\", lw=0.5)\nax1.plot([annotaterecx1[0], annotaterecx1[0]], [annotaterecy1[0], annotaterecy1[1]], color=\"black\", lw=0.5)\nax1.plot([annotaterecx1[1], annotaterecx1[1]], [annotaterecy1[0], annotaterecy1[1]], color=\"black\", lw=0.5)\n\nax1.set_xlabel(xlabel)\nax1.set_ylabel(ylabel)\nax1.grid(True, which=\"both\", linestyle=\"--\", lw=0.5)\n\n# Scatter plots\nax2.scatter(x_green_total, y_green_total, marker=\"^\", color=\"green\")\nax2.scatter(x_blue, y_blue, marker=\"v\", color=\"blue\")\nax2.scatter(x_orange, y_orange, marker=\"D\", color=\"orange\")\n\n# Shaded regions\nax2.fill_betweenx(y=[100,400], x1=50, x2=400, color=\"red\", alpha=0.2)\nax2.fill_betweenx(y=[0, 100], x1=0, x2=50, color=\"green\", alpha=0.2)\n# Axis limits and aspect ratio\nax2.set_xlim(ax2xlim)\nax2.set_ylim(ax2ylim)\nax2.plot([40,80], [100,100], color=\"black\", lw=0.5)\nax2.plot([50,50], [90,160], color=\"black\", lw=0.5)\nax2.grid(True, which=\"both\", linestyle=\"--\", lw=0.5)\n\n# Coordinates of the main plot corners\nax1_plot_up = ax1.transData.transform_point(plotup1)\nax1_plot_down = ax1.transData.transform_point(plotdown1)\n\n# Coordinates of the inset corners\nax2_up = ax2.transData.transform_point(plotup1)\nax2_down = ax2.transData.transform_point(plotdown1)\n\n# Transform to figure coordinates for annotation\nmain_plot_up = fig.transFigure.inverted().transform(ax1_plot_up)\nmain_plot_down = fig.transFigure.inverted().transform(ax1_plot_down)\ninset_up = fig.transFigure.inverted().transform(ax2_up)\ninset_down = fig.transFigure.inverted().transform(ax2_down)\n\n# Draw lines connecting corners\nfig.add_artist(\n    plt.Line2D(\n        (main_plot_up[0], inset_up[0]), (main_plot_up[1], inset_up[1]), color=\"gray\"\n    )\n)\nfig.add_artist(\n    plt.Line2D(\n        (main_plot_down[0], inset_down[0]),\n        (main_plot_down[1], inset_down[1]),\n        color=\"gray\",\n    )\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('PIP_1.pdf', bbox_inches='tight')"}
{"idx": "PIP_2", "instruction": "There is a reference image for you and I also have a set of data about the population distribution by gender in a city. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Generate some dummy data\ncategory1 = [\n450,\n530,\n310,\n420,\n510,\n540,\n620,\n850,\n1010,\n2020,\n8050,\n] # Male population in a city\ncategory2 = [\n1120,\n710,\n330,\n440,\n580,\n810,\n1040,\n2040,\n3050,\n4090,\n7050,\n] # Female population in a city\nbins = [0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]\nlabels=[\"Male\", \"Female\"]\nxlabel=\"Population density\"\nylabel=\"Number of individuals\"\nleft, bottom, width, height = [0.3, 0.3, 0.3, 0.4]\nmainpointleft = [0.39, 0.74]\nmainpointright = [0.74, 1000]\ninsetleft=[0.35, 0]\ninsetright=[0.7, 0]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate some dummy data\ncategory1 = [\n    450,\n    530,\n    310,\n    420,\n    510,\n    540,\n    620,\n    850,\n    1010,\n    2020,\n    8050,\n]  # Male population in a city\ncategory2 = [\n    1120,\n    710,\n    330,\n    440,\n    580,\n    810,\n    1040,\n    2040,\n    3050,\n    4090,\n    7050,\n]  # Female population in a city\nbins = [0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9]\nlabels=[\"Male\", \"Female\"]\nxlabel=\"Population density\"\nxlim=[-0.1, 1.1]\nylim=[0, 20000]\nylabel=\"Number of individuals\"\nxticks=[0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nyticks=[0, 5000, 10000, 15000, 20000]\nleft, bottom, width, height = [0.3, 0.3, 0.3, 0.4]\ninsetxlim=[0.35, 0.7]\ninsetxticks=[0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70]\ninsetylim=[0, 2000]\ninsetyticks=[0, 1000, 2000]\nmainpointleft = [0.39, 0.74]\nmainpointright = [0.74, 1000]\ninsetleft=[0.35, 0]\ninsetright=[0.7, 0]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create main plot with adjusted bar widths and white borders\nfig, ax_main = plt.subplots(figsize=(10, 6))\nbar_width = 0.05  # Slightly less than the bin width to create a gap\nax_main.bar(\n    bins,\n    category1,\n    width=bar_width,\n    color=\"green\",\n    align=\"center\",\n    label=labels[0],\n    edgecolor=\"white\",\n)\nax_main.bar(\n    bins,\n    category2,\n    width=bar_width,\n    color=\"blue\",\n    align=\"center\",\n    bottom=category1,\n    label=labels[1],\n    edgecolor=\"white\",\n)\nax_main.set_xlabel(xlabel)\nax_main.set_xlim(xlim)\nax_main.set_xticks(xticks)\nax_main.set_ylabel(ylabel)\nax_main.set_ylim(ylim)\nax_main.set_yticks(yticks)\nax_main.legend(loc=\"upper left\", prop={\"size\": 16})\nax_main.grid()\n\n# Create inset plot with adjusted bar widths and white borders\n\nax_inset = fig.add_axes([left, bottom, width, height])\nax_inset.bar(\n    bins[:6],\n    category1[:6],\n    width=bar_width,\n    color=\"green\",\n    align=\"center\",\n    edgecolor=\"white\",\n)\nax_inset.bar(\n    bins[:6],\n    category2[:6],\n    width=bar_width,\n    color=\"blue\",\n    align=\"center\",\n    bottom=category1[:6],\n    edgecolor=\"white\",\n)\nax_inset.set_xlim(insetxlim)  # Zoom in on the right part of the data\nax_inset.set_xticks(\n    insetxticks\n)  # Zoom in on the right part of the data\nax_inset.set_ylim(insetylim)\nax_inset.set_yticks(insetyticks)\nax_inset.grid()\n\n# Adding lines to connect the plots.\n# Coordinates of the main plot corners\nmain_plot_left = ax_main.transData.transform_point(mainpointleft)\nmain_plot_right = ax_main.transData.transform_point(mainpointright)\n\n# Coordinates of the inset corners\ninset_left = ax_inset.transData.transform_point(insetleft)\ninset_right = ax_inset.transData.transform_point(insetright)\n\n# Transform to figure coordinates for annotation\nmain_plot_left = fig.transFigure.inverted().transform(main_plot_left)\nmain_plot_right = fig.transFigure.inverted().transform(main_plot_right)\ninset_left = fig.transFigure.inverted().transform(inset_left)\ninset_right = fig.transFigure.inverted().transform(inset_right)\n\n# Draw lines connecting corners\nfig.add_artist(\n    plt.Line2D(\n        (main_plot_left[0], inset_left[0]),\n        (main_plot_left[1], inset_left[1]),\n        color=\"gray\",\n    )\n)\nfig.add_artist(\n    plt.Line2D(\n        (main_plot_right[0], inset_right[0]),\n        (main_plot_right[1], inset_right[1]),\n        color=\"gray\",\n    )\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('PIP_2.pdf', bbox_inches='tight')"}
{"idx": "PIP_3", "instruction": "There is a reference image for you and I also have a set of data about average temperature by season and region. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nx = [\"Spring\", \"Summer\", \"Fall\", \"Winter\"]\ny1 = [12.5, 15.0, 10.0, 8.0]\ny2 = [14.0, 16.5, 11.5, 7.8]\ny3 = [13.5, 14.5, 12.0, 9.0]\ny4 = [11.0, 17.0, 9.5, 6.5]\nlabels = [\"North Region\", \"South Region\", \"East Region\", \"West Region\"]\ninsertax1 = [0.2, 0.2, 0.1, 0.3]\ninsertax2 = [0.8, 0.5, 0.1, 0.3]\nxlabel = \"Season\"\nylabel = \"Average Temperature (\u00ac\u221eC)\"\ntitle = \"Average Temperature by Season and Region\"\ninsetaxes = [0.45, 0.2, 0.1, 0.3]\narrowend1 = [0.45, 0.48]\narrowend2 = [0.90, 0.45]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nx = [\"Spring\", \"Summer\", \"Fall\", \"Winter\"]\ny1 = [12.5, 15.0, 10.0, 8.0]\ny2 = [14.0, 16.5, 11.5, 7.8]\ny3 = [13.5, 14.5, 12.0, 9.0]\ny4 = [11.0, 17.0, 9.5, 6.5]\nlabels = [\"North Region\", \"South Region\", \"East Region\", \"West Region\"]\ninsertax1 = [0.2, 0.2, 0.1, 0.3]\ninsertylim1 = [10.0, 18.0]\ninsertxlim1 = [0.5, 1.5]\ninsertax2 = [0.8, 0.5, 0.1, 0.3]\ninsertylim2 = [6.0, 10.0]\ninsertxlim2 = [2.5, 3.5]\nxlabel = \"Season\"\nylabel = \"Average Temperature (\u00b0C)\"\ntitle = \"Average Temperature by Season and Region\"\ninsetaxes = [0.45, 0.2, 0.1, 0.3]\narrowend1 = [0.45, 0.48]\narrowend2 = [0.90, 0.45]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(\n    figsize=(10, 6)\n)  # Adjust figure size to match original image's dimensions\n\nax.plot(x, y1, \"r-*\", label=labels[0])\nax.plot(x, y2, \"b-v\", label=labels[1])\nax.plot(x, y3, \"g--o\", label=labels[2])\nax.plot(x, y4, \"y-.s\", label=labels[3])\n\n# Create the inset with the zoomed-in view\nax_inset1 = fig.add_axes(\n    insetaxes\n)  # Adjust the position to align with the right side of the main plot\nax_inset1.plot(x, y1, \"r-*\")\nax_inset1.plot(x, y2, \"b-v\")\nax_inset1.plot(x, y3, \"g--o\")\nax_inset1.plot(x, y4, \"y-.s\")\nax_inset1.spines[\"bottom\"].set_color(\"black\")  # Add black border to the inset\nax_inset1.spines[\"left\"].set_color(\"black\")\nax_inset1.spines[\"top\"].set_color(\"black\")\nax_inset1.spines[\"right\"].set_color(\"black\")\nax_inset1.set_ylim(insertylim1)\nax_inset1.set_xlim(insertxlim1)\n\n# Create the inset with the zoomed-in view\nax_inset2 = fig.add_axes(\n    insertax2\n)  # Adjust the position to align with the right side of the main plot\nax_inset2.plot(x, y1, \"r-*\")\nax_inset2.plot(x, y2, \"b-v\")\nax_inset2.plot(x, y3, \"g--o\")\nax_inset2.plot(x, y4, \"y-.s\")\nax_inset2.spines[\"bottom\"].set_color(\"black\")  # Add black border to the inset\nax_inset2.spines[\"left\"].set_color(\"black\")\nax_inset2.spines[\"top\"].set_color(\"black\")\nax_inset2.spines[\"right\"].set_color(\"black\")\nax_inset2.set_ylim(insertylim2)\nax_inset2.set_xlim(insertxlim2)\n\n# Customizing the plot\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_title(title)\nax.legend(loc=\"lower right\")\nax.grid(True)\n\n# Annotate with arrows\nax.annotate(\n    \"\",\n    xy=(x[1], y3[1]),\n    xytext=arrowend1,\n    textcoords=\"axes fraction\",\n    arrowprops=dict(facecolor=\"black\", lw=0.1, shrink=0.01),\n)\nax.annotate(\n    \"\",\n    xy=(x[3], y3[3]),  # Start from the Qwen-7B-Chat line at INT2\n    xytext=arrowend2,  # Adjust these values as needed to point to your inset\n    textcoords=\"axes fraction\",\n    arrowprops=dict(facecolor=\"black\", lw=0.1, shrink=0.01),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('PIP_3.pdf', bbox_inches='tight')"}
{"idx": "PIP_4", "instruction": "There is a reference image for you and I also have a set of data about predicted probabilities for two categories of observations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Generate some dummy data\ncategory1 = [\n15000,\n8000,\n2500,\n2000,\n1500,\n1200,\n1000,\n800,\n1500,\n5000,\n4000,\n] # Known category\ncategory2 = [\n10000,\n7000,\n5000,\n3000,\n2000,\n1000,\n1000,\n2000,\n1600,\n2400,\n2100,\n] # Unknown category\nbins = [0.0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.5]\nlabels = [\"Known\", \"Unknown\"]\nxmainlabel = \"Predicted Probability\"\nymainlabel = \"Number of Observations\"\n# Create inset plot with adjusted bar widths and white borders\nleft, bottom, width, height = [0.5, 0.4, 0.3, 0.4]\nmainplotline = [(0.235, 1500), (0.4, 1000)]\nmaininsetline = [(0.20, 0), (0.55, 0)]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate some dummy data\ncategory1 = [\n    15000,\n    8000,\n    2500,\n    2000,\n    1500,\n    1200,\n    1000,\n    800,\n    1500,\n    5000,\n    4000,\n]  # Known category\ncategory2 = [\n    10000,\n    7000,\n    5000,\n    3000,\n    2000,\n    1000,\n    1000,\n    2000,\n    1600,\n    2400,\n    2100,\n]  # Unknown category\nbins = [0.0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.5]\nlabels = [\"Known\", \"Unknown\"]\nxmainlabel = \"Predicted Probability\"\nxmainlim = [-0.1, 0.8]\nxmainticks = [0.0, 0.2, 0.4, 0.6]\nymainlabel = \"Number of Observations\"\nymainlim = [0, 30000]\nymainticks = [0, 10000, 20000, 30000]\n\nxinsetlim = [0.20, 0.55]\nxinsetticks = [0.25, 0.30, 0.35, 0.40, 0.45, 0.50]\nyinsetlim = [0, 8000]\nyinsetticks = [0, 3000, 6000, 8000]\n# Create inset plot with adjusted bar widths and white borders\nleft, bottom, width, height = [0.5, 0.4, 0.3, 0.4]\nmainplotline = [(0.235, 1500), (0.4, 1000)]\nmaininsetline = [(0.20, 0), (0.55, 0)]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create main plot with adjusted bar widths and white borders\nfig, ax_main = plt.subplots(figsize=(10, 6))\nbar_width = 0.05  # Slightly less than the bin width to create a gap\nax_main.bar(\n    bins,\n    category1,\n    width=bar_width,\n    color=\"#FC8D59\",\n    align=\"center\",\n    label=labels[0],\n    edgecolor=\"white\",\n)\nax_main.bar(\n    bins,\n    category2,\n    width=bar_width,\n    color=\"#98C3DD\",\n    align=\"center\",\n    bottom=category1,\n    label=labels[1],\n    edgecolor=\"white\",\n)\nax_main.set_xlabel(xmainlabel)\nax_main.set_xlim(xmainlim)\nax_main.set_xticks(xmainticks)\nax_main.set_ylabel(ymainlabel)\nax_main.set_ylim(ymainlim)\nax_main.set_yticks(ymainticks)\nax_main.legend(loc=\"upper right\", prop={\"size\": 16})\nax_main.grid()\n\nax_inset = fig.add_axes([left, bottom, width, height])\nax_inset.bar(\n    bins[5:],\n    category1[5:],\n    width=bar_width,\n    color=\"#FC8D59\",\n    align=\"center\",\n    edgecolor=\"white\",\n)\nax_inset.bar(\n    bins[5:],\n    category2[5:],\n    width=bar_width,\n    color=\"#98C3DD\",\n    align=\"center\",\n    bottom=category1[5:],\n    edgecolor=\"white\",\n)\nax_inset.set_xlim(xinsetlim)  # Zoom in on the right part of the data\nax_inset.set_xticks(\n    xinsetticks\n)  # Zoom in on the right part of the data\nax_inset.set_ylim(yinsetlim)\nax_inset.set_yticks(yinsetticks)\nax_inset.grid()\n\n# Adding lines to connect the plots.\n# Coordinates of the main plot corners\nmain_plot_left = ax_main.transData.transform_point(mainplotline[0])\nmain_plot_right = ax_main.transData.transform_point(mainplotline[1])\n\n# Coordinates of the inset corners\ninset_left = ax_inset.transData.transform_point(maininsetline[0])\ninset_right = ax_inset.transData.transform_point(maininsetline[1])\n\n# Transform to figure coordinates for annotation\nmain_plot_left = fig.transFigure.inverted().transform(main_plot_left)\nmain_plot_right = fig.transFigure.inverted().transform(main_plot_right)\ninset_left = fig.transFigure.inverted().transform(inset_left)\ninset_right = fig.transFigure.inverted().transform(inset_right)\n\n# Draw lines connecting corners\nfig.add_artist(\n    plt.Line2D(\n        (main_plot_left[0], inset_left[0]),\n        (main_plot_left[1], inset_left[1]),\n        color=\"gray\",\n    )\n)\nfig.add_artist(\n    plt.Line2D(\n        (main_plot_right[0], inset_right[0]),\n        (main_plot_right[1], inset_right[1]),\n        color=\"gray\",\n    )\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('PIP_4.pdf', bbox_inches='tight')"}
{"idx": "PIP_5", "instruction": "There is a reference image for you and I also have a set of data about savings and investment plans for the years 2020 and 2021. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for plotting\nx = 2 ** np.arange(4, 10)\nsavings_plan_2020 = np.array([50000, 75000, 100000, 125000, 150000, 175000])\nsavings_plan_2021 = np.array([55000, 80000, 105000, 130000, 155000, 180000])\ninvestment_plan_2020 = np.array([2, 4, 6, 8, 12, 16])\ninvestment_plan_2021 = np.array([3, 5, 7, 10, 14, 18])\n\nlabels = [\"Savings Plan | 2020\", \"Savings Plan | 2021\", \"Investment Plan | 2020\", \"Investment Plan | 2021\"]\nxlabel = \"Investment in Thousands (in 2^x)\"\nylabel = \"Projected Returns\"\ninsetaxes = [0.6, 0.2, 0.35, 0.3]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nx = 2 ** np.arange(4, 10)\nsavings_plan_2020 = np.array([50000, 75000, 100000, 125000, 150000, 175000])\nsavings_plan_2021 = np.array([55000, 80000, 105000, 130000, 155000, 180000])\ninvestment_plan_2020 = np.array([2, 4, 6, 8, 12, 16])\ninvestment_plan_2021 = np.array([3, 5, 7, 10, 14, 18])\n\nlabels = [\"Savings Plan | 2020\", \"Savings Plan | 2021\", \"Investment Plan | 2020\", \"Investment Plan | 2021\"]\nxlabel = \"Investment in Thousands (in 2^x)\"\nylabel = \"Projected Returns\"\nxlim = [0, 200000]\nylim = [0, 250000]\nyticks = [0, 50000, 100000, 150000, 200000]\ninsetaxes = [0.6, 0.2, 0.35, 0.3]\nyinsetlim = [0, 20]\nxtickslabels = [f\"$2^{i}$\" for i in range(1, 7)]\nxinsetxtickslabels = [f\"$2^{i}$\" for i in range(1, 7)]\nyinsetyticks = [5, 10, 15]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the main figure and axis\nfig, ax = plt.subplots(\n    figsize=(6, 6)\n)  # Adjusted to match the original image's dimensions\n\n# Plot the data\nax.plot(x, savings_plan_2020, \"o-\", label=labels[0], color=\"green\")\nax.plot(x, savings_plan_2021, \"x-\", label=labels[1], color=\"green\")\nax.plot(x, investment_plan_2020, \"o-\", label=labels[2], color=\"blue\")\nax.plot(x, investment_plan_2021, \"x-\", label=labels[3], color=\"blue\")\n\n# Set the x-axis to be logarithmic\nax.set_xscale(\"log\")\n\n# Set labels and title\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Adjust y-axis limits\nax.set_ylim(ylim)\nax.set_yticks(yticks)\n\n# Add a legend\nax.legend()\n\n# Create an inset axis for the ReLU data\nax_inset = fig.add_axes(\n    insetaxes\n)  # Adjusted to match the original image's inset position and size\nax_inset.plot(x, investment_plan_2020, \"o-\", color=\"blue\")\nax_inset.plot(x, investment_plan_2021, \"x-\", color=\"blue\")\nax_inset.set_xscale(\"log\")\n\n# Adjust y-axis limits for inset\nax_inset.set_ylim(yinsetlim)\n\n# Set the same x-axis limits for the inset as the main plot\nax_inset.set_xlim(ax.get_xlim())\nax_inset.set_yticks(yinsetyticks)\n\n# Change x-axis tick labels to powers of 2 notation\nax.set_xticks(x)\nax.set_xticklabels(xtickslabels)\nax_inset.set_xticks(x)\nax_inset.set_xticklabels(xinsetxtickslabels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('PIP_5.pdf', bbox_inches='tight')"}
{"idx": "PIP_7", "instruction": "There is a reference image for you and I also have a set of data about performance metrics over iterations for two different groups: Experimental and Control. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to approximate the curves in the picture\nx = np.linspace(0, 200, 200)\ny1 = np.linspace(0.7, 1.2, 200) * (1 + np.random.normal(0, 0.05, 200))\ny2 = np.linspace(0.8, 1.0, 200) * (1 + np.random.normal(0, 0.05, 200))\n\nlabels = [\"Experimental\", \"Control\"]\nxlabel = \"Iterations\"\nylabel = \"Performance Metric\"\ninsetaxes = [0.2, 0.6, 0.25, 0.25]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to approximate the curves in the picture\nx = np.linspace(0, 200, 200)\ny1 = np.linspace(0.7, 1.2, 200) * (1 + np.random.normal(0, 0.05, 200))\ny2 = np.linspace(0.8, 1.0, 200) * (1 + np.random.normal(0, 0.05, 200))\n\nlabels = [\"Experimental\", \"Control\"]\nxlabel = \"Iterations\"\nylabel = \"Performance Metric\"\ninsetxlim = [100, 120]\ninsetylim = [0.75, 1.0]\ninsetxticks = [100, 110, 120]\ninsetyticks = [0.75, 0.85, 0.95]\ninsetaxes = [0.2, 0.6, 0.25, 0.25]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Plot the curves\nax.plot(x, y1, \"#0072B2\", label=labels[0])\nax.plot(x, y2, \"#D55E00\", label=labels[1])\n\n# Set labels and title\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Create the inset with the zoomed-in view\nax_inset = fig.add_axes(\n    insetaxes\n)  # Adjust the position to align with the right side of the main plot\nax_inset.plot(x, y1, \"#0072B2\")\nax_inset.plot(x, y2, \"#D55E00\")\nax_inset.set_xlim(insetxlim)\nax_inset.set_ylim(insetylim)\nax_inset.set_xticks(insetxticks)\nax_inset.set_yticks(insetyticks)\nax_inset.spines[\"bottom\"].set_color(\"black\")  # Add black border to the inset\nax_inset.spines[\"left\"].set_color(\"black\")\nax_inset.spines[\"top\"].set_color(\"black\")\nax_inset.spines[\"right\"].set_color(\"black\")\n\n# Add the legend to the main axis, outside the plot area\nax.legend(loc=\"lower left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('PIP_7.pdf', bbox_inches='tight')"}
{"idx": "PIP_8", "instruction": "There is a reference image for you and I also have a set of data about weather patterns. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate sample data for the three clusters with adjusted positions and spread\nx1 = np.random.normal(3, 0.5, 100)\ny1 = np.random.normal(-1, 0.7, 100)\n\nx2 = np.random.normal(-3, 0.8, 100)\ny2 = np.random.normal(3, 0.6, 100)\n\nx3 = np.random.normal(0, 1, 100)\ny3 = np.random.normal(-3, 0.9, 100)\n\nlabels = [\"Morning Clear\", \"Evening Stormy\", \"Temp Variability\"]\naxesgrid = [0.7, 0.2, 0.15, 0.15]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate sample data for the three clusters with adjusted positions and spread\nx1 = np.random.normal(3, 0.5, 100)\ny1 = np.random.normal(-1, 0.7, 100)\n\nx2 = np.random.normal(-3, 0.8, 100)\ny2 = np.random.normal(3, 0.6, 100)\n\nx3 = np.random.normal(0, 1, 100)\ny3 = np.random.normal(-3, 0.9, 100)\n\nlabels = [\"Morning Clear\", \"Evening Stormy\", \"Temp Variability\"]\n\ninsetxlim = [-2, 2]\ninsetylim = [-2, 2]\ninsetxticks = [-2, 0, 2]\ninsetyticks = [-2, 0, 2]\naxesgrid = [0.7, 0.2, 0.15, 0.15]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Plot the data with adjusted colors\nax.scatter(x1, y1, c=\"orange\", label=labels[0])\nax.scatter(x2, y2, c=\"blue\", label=labels[1])\nax.scatter(x3, y3, c=\"green\", label=labels[2])\n\n# Add the legend with adjusted order of labels\nax.legend(labels, loc=\"upper right\", frameon=True)\n\n# Create the inset with the zoomed-in view\nax_inset = fig.add_axes(\n    axesgrid\n)  # Adjust the position to align with the right side of the main plot\nax_inset.scatter(x1, y1, c=\"orange\", label=labels[0])\nax_inset.scatter(x2, y2, c=\"blue\", label=labels[1])\nax_inset.scatter(x3, y3, c=\"green\", label=labels[2])\nax_inset.set_xlim(insetxlim)\nax_inset.set_ylim(insetylim)\nax_inset.set_xticks(insetxticks)\nax_inset.set_yticks(insetyticks)\nax_inset.spines[\"bottom\"].set_color(\"black\")  # Add black border to the inset\nax_inset.spines[\"left\"].set_color(\"black\")\nax_inset.spines[\"top\"].set_color(\"black\")\nax_inset.spines[\"right\"].set_color(\"black\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('PIP_8.pdf', bbox_inches='tight')"}
{"idx": "PIP_9", "instruction": "There is a reference image for you and I also have a set of data about different clusters of points in a 2D space. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nclusters = {\n\"cluster_1\": np.random.normal(loc=(2, -1), scale=1.2, size=(50, 2)),\n\"cluster_2\": np.random.normal(loc=(6, 6), scale=0.8, size=(30, 2)),\n\"cluster_3\": np.random.normal(loc=(-2, 3), scale=1, size=(40, 2)),\n\"cluster_4\": np.random.normal(loc=(7, -4), scale=1.1, size=(60, 2)),\n\"cluster_5\": np.random.normal(loc=(-4, -6), scale=0.9, size=(70, 2)),\n\"cluster_6\": np.random.normal(loc=(4, 9), scale=1.3, size=(45, 2)),\n}\ninsetaxes = [0.25, 0.75, 0.25, 0.15]\narrowstart = (-2, 8)\narrowend = (0.35, 0.55)\nannotaterecx = [-1.5, 1.5]\nannotaterecy = [-1, 2]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nclusters = {\n    \"cluster_1\": np.random.normal(loc=(2, -1), scale=1.2, size=(50, 2)),\n    \"cluster_2\": np.random.normal(loc=(6, 6), scale=0.8, size=(30, 2)),\n    \"cluster_3\": np.random.normal(loc=(-2, 3), scale=1, size=(40, 2)),\n    \"cluster_4\": np.random.normal(loc=(7, -4), scale=1.1, size=(60, 2)),\n    \"cluster_5\": np.random.normal(loc=(-4, -6), scale=0.9, size=(70, 2)),\n    \"cluster_6\": np.random.normal(loc=(4, 9), scale=1.3, size=(45, 2)),\n}\n\n# Colors for each cluster (replace with actual colors)\ncolors = {\n    \"cluster_1\": \"cyan\",\n    \"cluster_2\": \"magenta\",\n    \"cluster_3\": \"lime\",\n    \"cluster_4\": \"navy\",\n    \"cluster_5\": \"brown\",\n    \"cluster_6\": \"pink\",\n}\n\ninsetaxes = [0.25, 0.75, 0.25, 0.15]\ninsetxlim = [-1.5, 1.5]\ninsetylim = [-1, 2]\ninsetxticks = [-1.5, 0, 1.5]\ninsetyticks = [-1, 0.5, 2]\narrowstart = (-2, 8)\narrowend = (0.35, 0.55)\nannotaterecx = [-1.5, 1.5]\nannotaterecy = [-1, 2]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the scatter plot\nfig, ax = plt.subplots(figsize=(6, 6))\nfor cluster, data in clusters.items():\n    ax.scatter(data[:, 0], data[:, 1], c=colors[cluster], alpha=0.5)\n\nax.plot([annotaterecx[0], annotaterecx[1]], [annotaterecy[1], annotaterecy[1]], color=\"black\", lw=1)\nax.plot([annotaterecx[0], annotaterecx[1]], [annotaterecy[0], annotaterecy[0]], color=\"black\", lw=1)\nax.plot([annotaterecx[0], annotaterecx[0]], [annotaterecy[0], annotaterecy[1]], color=\"black\", lw=1)\nax.plot([annotaterecx[1], annotaterecx[1]], [annotaterecy[0], annotaterecy[1]], color=\"black\", lw=1)\n\n# Create the inset with the zoomed-in view\nax_inset = fig.add_axes(\n    insetaxes\n)  # Adjust the position to align with the right side of the main plot\nfor cluster, data in clusters.items():\n    ax_inset.scatter(data[:, 0], data[:, 1], c=colors[cluster], alpha=0.5)\nax_inset.set_xlim(insetxlim)\nax_inset.set_ylim(insetylim)\nax_inset.set_xticks(insetxticks)\nax_inset.set_yticks(insetyticks)\nax_inset.spines[\"bottom\"].set_color(\"black\")  # Add black border to the inset\nax_inset.spines[\"left\"].set_color(\"black\")\nax_inset.spines[\"top\"].set_color(\"black\")\nax_inset.spines[\"right\"].set_color(\"black\")\n\nax.annotate(\n    \"\",\n    xy=arrowstart,\n    xytext=arrowend,\n    textcoords=\"axes fraction\",\n    arrowprops=dict(facecolor=\"black\", lw=0.1),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot\nplt.tight_layout()\nplt.savefig('PIP_9.pdf', bbox_inches='tight')"}
{"idx": "PIP_10", "instruction": "There is a reference image for you and I also have a set of data about **gradient descent optimization steps**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated gradient steps\ngradient_steps = np.linspace(0, 200, 50)\n\n# Generate different trends for each line\nline1_values = np.log(gradient_steps + 1) + 3.0 # Logarithmic growth\nline2_values = np.sqrt(gradient_steps) * 0.2 + 1.0 # Square root growth\nline3_values = np.random.uniform(\nlow=1.0, high=2.0, size=len(gradient_steps)\n) # Random uniform noise\nline4_values = np.tan(gradient_steps * 0.02) + 1.5 # Tangent trend\n\n# Simulate standard deviations for error\nstd_dev = 0.3\nline1_std = np.full_like(line1_values, std_dev)\nline2_std = np.full_like(line2_values, std_dev)\nline3_std = np.full_like(line3_values, std_dev)\nline4_std = np.full_like(line4_values, std_dev)\n\nxlabel=\"Iterations (x 10K)\"\nlabels =[\"Uniform Noise\",\"Tangent Growth\"]\nylabel=\"Logarithmic Scale\"\naxesinset= [0.6, 0.6, 0.3, 0.2]\narrowstart=(150, 22)\narrowend=(0.2, 0.3)\nannotaterecx = [0, 50]\nannotaterecy = [0, 4.5]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated gradient steps\ngradient_steps = np.linspace(0, 200, 50)\n\n# Generate different trends for each line\nline1_values = np.log(gradient_steps + 1) + 3.0  # Logarithmic growth\nline2_values = np.sqrt(gradient_steps) * 0.2 + 1.0  # Square root growth\nline3_values = np.random.uniform(\n    low=1.0, high=2.0, size=len(gradient_steps)\n)  # Random uniform noise\nline4_values = np.tan(gradient_steps * 0.02) + 1.5  # Tangent trend\n\n# Simulate standard deviations for error\nstd_dev = 0.3\nline1_std = np.full_like(line1_values, std_dev)\nline2_std = np.full_like(line2_values, std_dev)\nline3_std = np.full_like(line3_values, std_dev)\nline4_std = np.full_like(line4_values, std_dev)\n\nxlabel=\"Iterations (x 10K)\"\nlabels =[\"Uniform Noise\",\"Tangent Growth\"]\nylabel=\"Logarithmic Scale\"\nxticks=np.linspace(0, 200, 5)\nyticks=np.arange(-20, 60, 10)\naxesinset= [0.6, 0.6, 0.3, 0.2]\ninsetxlim=[0, 40]\ninsetylim=[0, 4.5]\ninsetxticks=[0, 20, 40]\ninsetyticks=[0, 1.5,3, 4.5]\narrowstart=(150, 22)\narrowend=(0.2, 0.3)\nannotaterecx = [0, 50]\nannotaterecy = [0, 4.5]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with a single plot\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the third line on the main plot\nax.plot(\n    gradient_steps, line3_values, \"^--\", color=\"green\", label=labels[0]\n)\nax.fill_between(\n    gradient_steps,\n    line3_values - line3_std,\n    line3_values + line3_std,\n    color=\"green\",\n    alpha=0.2,\n)\n\n# Plot the fourth line on the main plot\nax.plot(\n    gradient_steps, line4_values, \"*-\", color=\"red\", label=labels[1]\n)\nax.fill_between(\n    gradient_steps,\n    line4_values - line4_std,\n    line4_values + line4_std,\n    color=\"red\",\n    alpha=0.2,\n)\n\n# Set labels, ticks, legend and grid for the main plot\nax.set_xlabel(xlabel, fontsize=12)\nax.set_ylabel(ylabel, fontsize=12)\nax.set_xticks(xticks)\nax.set_yticks(yticks)\nax.legend(loc=\"upper left\", shadow=True, frameon=True, framealpha=0.9)\nax.grid(\n    True, which=\"both\", axis=\"both\", color=\"lightgray\", linestyle=\"--\", linewidth=0.5\n)\nax.set_facecolor(\"#f9f9f9\")\n\n# Draw a rectangle on the main plot to indicate the area of zoom-in\nax.plot([annotaterecx[0], annotaterecx[1]], [annotaterecy[1], annotaterecy[1]], color=\"black\", lw=1)\nax.plot([annotaterecx[0], annotaterecx[1]], [annotaterecy[0], annotaterecy[0]], color=\"black\", lw=1)\nax.plot([annotaterecx[0], annotaterecx[0]], [annotaterecy[0], annotaterecy[1]], color=\"black\", lw=1)\nax.plot([annotaterecx[1], annotaterecx[1]], [annotaterecy[0], annotaterecy[1]], color=\"black\", lw=1)\n\n# Create the inset with the zoomed-in view\nax_inset = fig.add_axes(\n    axesinset\n)  # Adjust the position to align with the right side of the main plot\n\n# Plot the third line on the inset\nax_inset.plot(\n    gradient_steps, line3_values, \"^--\", color=\"green\", label=labels[0]\n)\nax_inset.fill_between(\n    gradient_steps,\n    line3_values - line3_std,\n    line3_values + line3_std,\n    color=\"green\",\n    alpha=0.2,\n)\n\n# Plot the fourth line on the inset\nax_inset.plot(\n    gradient_steps, line4_values, \"*-\", color=\"red\", label=labels[1]\n)\nax_inset.fill_between(\n    gradient_steps,\n    line4_values - line4_std,\n    line4_values + line4_std,\n    color=\"red\",\n    alpha=0.2,\n)\n\n# Set limits, ticks and border color for the inset\nax_inset.set_xlim(insetxlim)\nax_inset.set_ylim(insetylim)\nax_inset.set_xticks(insetxticks)\nax_inset.set_yticks(insetyticks)\nax_inset.spines[\"bottom\"].set_color(\"black\")  # Add black border to the inset\nax_inset.spines[\"left\"].set_color(\"black\")\nax_inset.spines[\"top\"].set_color(\"black\")\nax_inset.spines[\"right\"].set_color(\"black\")\n\n# Add an arrow from the rectangle on the main plot to the inset\nax.annotate(\n    \"\",\n    xy=arrowstart,  # Arrow start point (on the main plot)\n    xytext=arrowend,  # Arrow end point (on the inset)\n    textcoords=\"axes fraction\",\n    arrowprops=dict(facecolor=\"black\", lw=0.1),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.savefig('PIP_10.pdf', bbox_inches='tight')"}
{"idx": "box_1", "instruction": "There is a reference image for you and I also have a set of data about geographical distribution and population density across different regions and gender. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Placeholder data\ncategories = [\n\"urban high\",\n\"urban low\",\n\"urban high\",\n\"urban low\",\n\"rural high\",\n\"rural low\",\n\"rural high\",\n\"rural low\",\n\"suburban high\",\n\"suburban low\",\n\"suburban high\",\n\"suburban low\",\n\"coastal high\",\n\"coastal low\",\n\"coastal high\",\n\"coastal low\",\n\"mountain\",\n\"mountain\",\n]\n\ngender = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1]\n\ntitle = \"Geographical Distribution\"\nylabel = \"Region Type\"\nxlabel = \"Population Density\"\n\n# Extract the first group of characters from each category\nfirst_chars = [category.split(\" \")[0] for category in categories]\n# Find all unique first characters\nunique_chars = list(set(first_chars))\n# Create a margin for each unique first character\nmargins = {char: i for i, char in enumerate(unique_chars)}\ndata = [np.random.uniform(low=2, high=15, size=100) for _ in range(len(categories))]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Placeholder data\ncategories = [\n    \"urban high\",\n    \"urban low\",\n    \"urban high\",\n    \"urban low\",\n    \"rural high\",\n    \"rural low\",\n    \"rural high\",\n    \"rural low\",\n    \"suburban high\",\n    \"suburban low\",\n    \"suburban high\",\n    \"suburban low\",\n    \"coastal high\",\n    \"coastal low\",\n    \"coastal high\",\n    \"coastal low\",\n    \"mountain\",\n    \"mountain\",\n]\n\ngender = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1]\n\ntitle = \"Geographical Distribution\"\nylabel = \"Region Type\"\nxlabel = \"Population Density\"\n\n# Extract the first group of characters from each category\nfirst_chars = [category.split(\" \")[0] for category in categories]\n# Find all unique first characters\nunique_chars = list(set(first_chars))\n# Create a margin for each unique first character\nmargins = {char: i for i, char in enumerate(unique_chars)}\ndata = [np.random.uniform(low=2, high=15, size=100) for _ in range(len(categories))]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(10, 8))\ncolor = [\"white\", \"gray\"]\n# Plot each category with a margin\npositions = []\nfor i, (category, datum, g) in enumerate(zip(categories, data, gender)):\n\n    position = i + margins[category.split(\" \")[0]]\n    if position in positions:\n        position = position + 4\n    positions.append(position)\n    # print(i,position)\n    bp = ax.boxplot(\n        datum, positions=[position], vert=False, patch_artist=True, widths=0.6\n    )\n    for patch in bp[\"boxes\"]:\n        patch.set_facecolor(color[g])\n\nax.set_title(title)\nax.set_ylabel(ylabel)\nax.set_xlabel(xlabel)\n\nplt.yticks(positions, labels=categories)\n\n# Adding a vertical line for reference\nax.axvline(x=5, color=\"gray\", linestyle=\"-\", linewidth=1)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('box_1.pdf', bbox_inches='tight')"}
{"idx": "box_4", "instruction": "There is a reference image for you and I also have a set of data about model performance scores for different natural language processing methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data\nmethods = [\"BERT (ours)\", \"GPT-2\", \"XLNet\", \"RoBERTa\", \"T5\", \"ALBERT\"]\nmean_scores = [0.92, 0.85, 0.88, 0.90, 0.87, 0.82]\nmedian_scores = [0.75, 0.70, 0.73, 0.72, 0.71, 0.68]\niqr_mean_scores = [0.82, 0.78, 0.80, 0.79, 0.77, 0.74]\noptimality_gap_scores = [0.08, 0.10, 0.09, 0.08, 0.11, 0.12]\n\n# Generate random data for box plots\ndata1 = [np.random.normal(mean, 0.05, 100) for mean in mean_scores]\ndata2 = [np.random.normal(median, 0.05, 100) for median in median_scores]\ndata3 = [np.random.normal(iqr, 0.05, 100) for iqr in iqr_mean_scores]\ndata4 = [np.random.normal(opt_gap, 0.05, 100) for opt_gap in optimality_gap_scores]\n\nxlabel = \"Model Performance Score\"\ntitles = [\"Mean (\u201a\u00dc\u00eb)\", \"Median (\u201a\u00dc\u00eb)\", \"Interquartile Mean (\u201a\u00dc\u00eb)\", \"Optimality Gap (\u201a\u00dc\u00ec)\"]\naxhline = 0.9\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data\nmethods = [\"BERT (ours)\", \"GPT-2\", \"XLNet\", \"RoBERTa\", \"T5\", \"ALBERT\"]\nmean_scores = [0.92, 0.85, 0.88, 0.90, 0.87, 0.82]\nmedian_scores = [0.75, 0.70, 0.73, 0.72, 0.71, 0.68]\niqr_mean_scores = [0.82, 0.78, 0.80, 0.79, 0.77, 0.74]\noptimality_gap_scores = [0.08, 0.10, 0.09, 0.08, 0.11, 0.12]\n\n# Generate random data for box plots\ndata1 = [np.random.normal(mean, 0.05, 100) for mean in mean_scores]\ndata2 = [np.random.normal(median, 0.05, 100) for median in median_scores]\ndata3 = [np.random.normal(iqr, 0.05, 100) for iqr in iqr_mean_scores]\ndata4 = [np.random.normal(opt_gap, 0.05, 100) for opt_gap in optimality_gap_scores]\n\nxlabel = \"Model Performance Score\"\ntitles = [\"Mean (\u2191)\", \"Median (\u2191)\", \"Interquartile Mean (\u2191)\", \"Optimality Gap (\u2193)\"]\naxhline = 0.9\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(12, 3))\n# Colors for each method\ncolors = [\"lightcoral\", \"bisque\", \"lightblue\", \"gold\", \"thistle\", \"yellowgreen\"]\n\n# Create subplots\nax1 = plt.subplot(141)\nax2 = plt.subplot(142)\nax3 = plt.subplot(143)\nax4 = plt.subplot(144)\n\n# Plotting\nboxplot1 = ax1.boxplot(\n    data1,\n    vert=False,\n    patch_artist=True,\n    medianprops={\"color\": \"black\"},\n    whiskerprops=dict(color=\"black\", linestyle=\"-\", linewidth=0),\n    showcaps=False,\n    showfliers=False,\n    boxprops=dict(linestyle=\"-\", linewidth=0),\n)\nboxplot2 = ax2.boxplot(\n    data2,\n    vert=False,\n    patch_artist=True,\n    medianprops={\"color\": \"black\"},\n    whiskerprops=dict(color=\"black\", linestyle=\"-\", linewidth=0),\n    showcaps=False,\n    showfliers=False,\n    boxprops=dict(linestyle=\"-\", linewidth=0),\n)\nboxplot3 = ax3.boxplot(\n    data3,\n    vert=False,\n    patch_artist=True,\n    medianprops={\"color\": \"black\"},\n    whiskerprops=dict(color=\"black\", linestyle=\"-\", linewidth=0),\n    showcaps=False,\n    showfliers=False,\n    boxprops=dict(linestyle=\"-\", linewidth=0),\n)\nboxplot4 = ax4.boxplot(\n    data4,\n    vert=False,\n    patch_artist=True,\n    medianprops={\"color\": \"black\"},\n    whiskerprops=dict(color=\"black\", linestyle=\"-\", linewidth=0),\n    showcaps=False,\n    showfliers=False,\n    boxprops=dict(linestyle=\"-\", linewidth=0),\n)\n\nfor bplot in [boxplot1, boxplot2, boxplot3, boxplot4]:\n    for patch, color in zip(bplot[\"boxes\"], colors):\n        patch.set_facecolor(color)\n# Set labels and titles\nax1.set_yticklabels(methods)\nax1.set_xlabel(xlabel)\nax1.set_title(titles[0])\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.xaxis.grid(True, alpha=0.7)\nax1.invert_yaxis()\nax1.axhline(axhline, color=\"black\", linewidth=1)\n\nax2.set_yticks([])\nax2.set_xlabel(xlabel)\nax2.set_title(titles[1])\nax2.spines[\"top\"].set_visible(False)\nax2.spines[\"left\"].set_visible(False)\nax2.spines[\"right\"].set_visible(False)\nax2.xaxis.grid(True, alpha=0.7)\nax2.invert_yaxis()\nax2.axhline(axhline, color=\"black\", linewidth=1)\n\nax3.set_yticks([])\nax3.set_xlabel(xlabel)\nax3.set_title(titles[2])\nax3.spines[\"top\"].set_visible(False)\nax3.spines[\"left\"].set_visible(False)\nax3.spines[\"right\"].set_visible(False)\nax3.xaxis.grid(True, alpha=0.7)\nax3.invert_yaxis()\nax3.axhline(axhline, color=\"black\", linewidth=1)\n\nax4.set_yticks([])\nax4.set_xlabel(xlabel)\nax4.set_title(titles[3])\nax4.spines[\"top\"].set_visible(False)\nax4.spines[\"left\"].set_visible(False)\nax4.spines[\"right\"].set_visible(False)\nax4.xaxis.grid(True, alpha=0.7)\nax4.invert_yaxis()\nax4.axhline(axhline, color=\"black\", linewidth=1)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('box_4.pdf', bbox_inches='tight')"}
{"idx": "box_5", "instruction": "There is a reference image for you and I also have a set of data about velocity measurements over time for different control systems. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\ndata1 = [\nnp.random.normal(0, std, 50)\nfor (i, std) in enumerate(np.random.choice(range(5, 15), 7, replace=False))\n]\ndata2 = [\nnp.random.normal(0, std, 50)\nfor (i, std) in enumerate(np.random.choice(range(5, 15), 7, replace=False))\n]\ndata3 = [\nnp.random.normal(0, std, 50)\nfor (i, std) in enumerate(np.random.choice(range(5, 15), 7, replace=False))\n]\n\nlabels = [\"Max Velocity\", \"Simulation Failure\", \"Kalman Filter (Proposed)\", \"Kalman Filter No Learning\", \"PID Control\"]\nxlabel = \"Time [s]\"\nylabel = \"Velocity [m/s]\"\naxhlines = [-15, 15]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\ndata1 = [\n    np.random.normal(0, std, 50)\n    for (i, std) in enumerate(np.random.choice(range(5, 15), 7, replace=False))\n]\ndata2 = [\n    np.random.normal(0, std, 50)\n    for (i, std) in enumerate(np.random.choice(range(5, 15), 7, replace=False))\n]\ndata3 = [\n    np.random.normal(0, std, 50)\n    for (i, std) in enumerate(np.random.choice(range(5, 15), 7, replace=False))\n]\n\nlabels = [\"Max Velocity\", \"Simulation Failure\", \"Kalman Filter (Proposed)\", \"Kalman Filter No Learning\", \"PID Control\"]\nxlabel = \"Time [s]\"\nylabel = \"Velocity [m/s]\"\nylim = [-40, 40]\naxhlines = [-15, 15]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Boxplot\nfig, ax = plt.subplots(\n    figsize=(8, 6)\n)  # Adjust figure size to match original dimensions\nbp1 = ax.boxplot(\n    data1,\n    positions=np.array(range(len(data1))) * 2.0 - 0.4,\n    widths=0.3,\n    patch_artist=True,\n    showfliers=False,\n)\nbp2 = ax.boxplot(\n    data2,\n    positions=np.array(range(len(data2))) * 2.0,\n    widths=0.3,\n    patch_artist=True,\n    showfliers=False,\n)\nbp3 = ax.boxplot(\n    data3,\n    positions=np.array(range(len(data3))) * 2.0 + 0.4,\n    widths=0.3,\n    patch_artist=True,\n    showfliers=False,\n)\n\n# Set properties for each boxplot\nfor bp, color in zip([bp1, bp2, bp3], [\"#4d67f6\", \"#f5bf5b\", \"#c62f5b\"]):\n    for patch in bp[\"boxes\"]:\n        patch.set_facecolor(color)\n    for whisker in bp[\"whiskers\"]:\n        whisker.set(color=\"black\", linewidth=1)\n    for cap in bp[\"caps\"]:\n        cap.set(color=\"black\", linewidth=1)\n    for median in bp[\"medians\"]:\n        median.set(color=\"black\", linewidth=2)\n    # for flier in bp['fliers']:\n    #     flier.set(marker='x', color='black', alpha=0.5)\n\n# Get the bottom and height of the boxes in bp2\nbox_data = [\n    np.abs(box.get_path().vertices[1][1] - box.get_path().vertices[2][1])\n    for box in bp2[\"boxes\"]\n]\n\n# Find the maximum and minimum values of the boxes\nmax_box = np.max(box_data)  # The top of the box is h\nmin_box = np.min(box_data)  # The bottom of the box is y\n\n# Find the positions of the maximum and minimum boxes\nmax_pos = np.argmax(box_data)\nmin_pos = np.argmin(box_data)\n\n# Add cross markers at the maximum and minimum values\nax.plot(\n    max_pos * 2.0,\n    bp2[\"medians\"][max_pos].get_ydata()[0],\n    marker=\"x\",\n    color=\"black\",\n    markersize=14,\n)\nax.plot(\n    min_pos * 2.0,\n    bp2[\"medians\"][min_pos].get_ydata()[0],\n    marker=\"x\",\n    color=\"black\",\n    markersize=14,\n)\n\n# Add dashed line for \u03b8max\nax.axhline(y=axhlines[0], color=\"black\", linestyle=\"--\", label=\"\u03b8max\")\nax.axhline(y=axhlines[1], color=\"black\", linestyle=\"--\", label=\"\u03b8max\")\n\n# Add legend\n# Create a Line2D instance for the axhline legend\naxhline_legend = mlines.Line2D([], [], color=\"black\", linestyle=\"-\", label=labels[0])\nmarker_legend = mlines.Line2D(\n    [], [], color=\"black\", marker=\"x\", linestyle=\"None\", label=labels[1]\n)\n# Add the legends to the plot\npatch1 = mpatches.Patch(color=\"#4d67f6\", label=labels[2])\npatch2 = mpatches.Patch(color=\"#f5bf5b\", label=labels[3])\npatch3 = mpatches.Patch(color=\"#c62f5b\", label=labels[4])\n\nax.legend(\n    handles=[patch1, patch2, patch3, axhline_legend, marker_legend],\n    loc=\"upper center\",\n    ncol=2,\n    frameon=False,\n)\n# Set x and y axis labels\nax.set_ylim(ylim)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Set x-axis tick positions and labels\nax.set_xticks(range(0, len(data1) * 2, 2))\nax.set_xticklabels([\"2.0\", \"2.5\", \"3.0\", \"3.5\", \"4.0\", \"4.5\", \"5.0\"])\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_5.pdf', bbox_inches='tight')"}
{"idx": "box_6", "instruction": "There is a reference image for you and I also have a set of data about energy efficiency of different sources throughout the day. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ndata_solar_efficiency = [\nnp.random.normal(22, 2, 50),\nnp.random.normal(20, 2, 50),\nnp.random.normal(18, 2, 50),\n]\ndata_wind_efficiency = [\nnp.random.normal(20, 2, 50),\nnp.random.normal(23, 2, 50),\nnp.random.normal(19, 2, 50),\n]\ndata_hydro_efficiency = [\nnp.random.normal(24, 2, 50),\nnp.random.normal(21, 2, 50),\nnp.random.normal(17, 2, 50),\n]\n\n# Positions of the boxplots\npositions_solar = [1, 5, 9]\npositions_wind = [2, 6, 10]\npositions_hydro = [3, 7, 11]\n\nxlabel = \"Time of Day\"\nylabel = \"Energy Efficiency (%)\"\nlegend_labels = [\"Solar (25%-75%)\", \"Wind (25%-75%)\", \"Hydro (25%-75%)\"]\nlegendtitle = \"Energy Source\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ndata_solar_efficiency = [\n    np.random.normal(22, 2, 50),\n    np.random.normal(20, 2, 50),\n    np.random.normal(18, 2, 50),\n]\ndata_wind_efficiency = [\n    np.random.normal(20, 2, 50),\n    np.random.normal(23, 2, 50),\n    np.random.normal(19, 2, 50),\n]\ndata_hydro_efficiency = [\n    np.random.normal(24, 2, 50),\n    np.random.normal(21, 2, 50),\n    np.random.normal(17, 2, 50),\n]\n\n# Positions of the boxplots\npositions_solar = [1, 5, 9]\npositions_wind = [2, 6, 10]\npositions_hydro = [3, 7, 11]\n\nxticklabels = [\"Morning\", \"Afternoon\", \"Evening\"]\nxticks = [2, 6, 10]\nxlabel = \"Time of Day\"\nylabel = \"Energy Efficiency (%)\"\nlegend_labels = [\"Solar (25%-75%)\", \"Wind (25%-75%)\", \"Hydro (25%-75%)\"]\nylim = [10, 30]\nlegendtitle = \"Energy Source\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Plotting the boxplots\nbp_gmml = ax.boxplot(\n    data_solar_efficiency,\n    positions=positions_solar,\n    widths=1,\n    patch_artist=True,\n    boxprops=dict(facecolor=\"#ab5b4e\"),\n    medianprops=dict(color=\"black\"),\n    showfliers=False,\n)\nbp_gml = ax.boxplot(\n    data_wind_efficiency,\n    positions=positions_wind,\n    widths=1,\n    patch_artist=True,\n    boxprops=dict(facecolor=\"#54addb\"),\n    medianprops=dict(color=\"black\"),\n    showfliers=False,\n)\nbp_ao = ax.boxplot(\n    data_hydro_efficiency,\n    positions=positions_hydro,\n    widths=1,\n    patch_artist=True,\n    boxprops=dict(facecolor=\"#a6edd1\"),\n    medianprops=dict(color=\"black\"),\n    showfliers=False,\n)\n\n# Customizing the axes\nax.set_xticks(xticks)\nax.set_xticklabels(xticklabels)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_ylim(ylim)\nax.yaxis.grid(True, linestyle=\"--\", linewidth=0.5)\nax.xaxis.grid(True, linestyle=\"--\", linewidth=0.5)\n\n# Adding legend\n\nax.legend(\n    [bp_gmml[\"boxes\"][0], bp_gml[\"boxes\"][0], bp_ao[\"boxes\"][0]],\n    legend_labels,\n    loc=\"lower left\",\n    title=legendtitle\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_6.pdf', bbox_inches='tight')"}
{"idx": "box_7", "instruction": "There is a reference image for you and I also have a set of data about population growth rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\ncenter_linear = np.random.randint(0, 20, 9)\ncenter_exponential = np.random.randint(10, 100, 9)\ncenter_sigmoidal = np.random.randint(20, 150, 9)\n\ndata = [\nnp.random.normal(center_linear[i], std, 100)\nfor (i, std) in enumerate(np.random.choice(range(1, 10), 9, replace=False))\n]\ndata2 = [\nnp.random.normal(center_exponential[i], std, 100)\nfor (i, std) in enumerate(np.random.choice(range(10, 30), 9, replace=False))\n]\ndata3= [\nnp.random.normal(center_sigmoidal[i], std, 100)\nfor (i, std) in enumerate(np.random.choice(range(10, 30), 9, replace=False))\n]\n\ntitles = [\"Linear Growth Rates\", \"Exponential Growth Rates\", \"Sigmoidal Growth Rates\"]\nylabel = \"Population Growth (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 25.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\ncenter_linear = np.random.randint(0, 20, 9)\ncenter_exponential = np.random.randint(10, 100, 9)\ncenter_sigmoidal = np.random.randint(20, 150, 9)\n\ndata = [\n    np.random.normal(center_linear[i], std, 100)\n    for (i, std) in enumerate(np.random.choice(range(1, 10), 9, replace=False))\n]\ndata2 = [\n    np.random.normal(center_exponential[i], std, 100)\n    for (i, std) in enumerate(np.random.choice(range(10, 30), 9, replace=False))\n]\ndata3= [\n    np.random.normal(center_sigmoidal[i], std, 100)\n    for (i, std) in enumerate(np.random.choice(range(10, 30), 9, replace=False))\n]\n\ntitles = [\"Linear Growth Rates\", \"Exponential Growth Rates\", \"Sigmoidal Growth Rates\"]\nylabel = \"Population Growth (%)\"\nxticklabels = [\"Data-avg\", \"PTO-kNN\", \"PTO-OLS\", \"PTO-F\", \"SAA\", \"SAA-kNN\", \"CSAA\", \"RSAA\", \"P-NN\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots\nfig, axs = plt.subplots(1, 3, figsize=(25, 8))\n\n# Create a colormap with only one color\ncmap = mcolors.LinearSegmentedColormap.from_list(\"mycmap\", [\"blue\", \"#b24743\"])\n\n# Get 10 colors from the colormap\ncolors = cmap(np.linspace(0, 1, 9))\n\n# Linear travel times subplot\nbplot = axs[0].boxplot(data, patch_artist=True)\naxs[0].set_title(titles[0])\naxs[0].set_ylabel(ylabel)\naxs[0].set_xticklabels(\n   xticklabels,\n    rotation=45,\n)\n\nfor patch, color in zip(bplot[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Exponential travel times subplot\nbplot1 = axs[1].boxplot(data2, patch_artist=True)\naxs[1].set_title(titles[1])\naxs[1].set_xticklabels(\n    xticklabels,\n    rotation=45,\n)\nfor patch, color in zip(bplot1[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Sigmoidal travel times subplot\nbplot2 = axs[2].boxplot(data3, patch_artist=True)\naxs[2].set_title(titles[2])\naxs[2].set_xticklabels(\n    xticklabels,\n    rotation=45,\n)\nfor patch, color in zip(bplot2[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('box_7.pdf', bbox_inches='tight')"}
{"idx": "box_8", "instruction": "There is a reference image for you and I also have a set of data about the performance of different medical imaging techniques in terms of Area Under Curve (AUC) across various healthcare facilities over the years. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\ndata1 = [\nnp.random.normal(0.78, 0.05, 20),\nnp.random.normal(0.82, 0.04, 20),\nnp.random.normal(0.80, 0.03, 20),\n]\ndata2 = [\nnp.random.normal(0.67, 0.03, 20),\nnp.random.normal(0.76, 0.02, 20),\nnp.random.normal(0.80, 0.03, 20),\n]\ndata3 = [\nnp.random.normal(0.80, 0.04, 20),\nnp.random.normal(0.77, 0.02, 20),\nnp.random.normal(0.74, 0.02, 20),\n]\n\n# Combine data\ndata = [data1, data2, data3]\n\nylabel = \"Area Under Curve (AUC)\"\nlabels = [\"General Hospital - 2021\", \"City Medical Center - 2022\", \"Regional Clinic - 2023\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom matplotlib.patches import Patch\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\ndata1 = [\n    np.random.normal(0.78, 0.05, 20),\n    np.random.normal(0.82, 0.04, 20),\n    np.random.normal(0.80, 0.03, 20),\n]\ndata2 = [\n    np.random.normal(0.67, 0.03, 20),\n    np.random.normal(0.76, 0.02, 20),\n    np.random.normal(0.80, 0.03, 20),\n]\ndata3 = [\n    np.random.normal(0.80, 0.04, 20),\n    np.random.normal(0.77, 0.02, 20),\n    np.random.normal(0.74, 0.02, 20),\n]\n\n# Combine data\ndata = [data1, data2, data3]\n\nxticklabels = [\"WSI\", \"CNV\", \"WSI + CNV\"]\nylabel = \"Area Under Curve (AUC)\"\nxticks = [1, 3, 5]\nylim = [0.7,0.95]\nlabels = [\"General Hospital - 2021\", \"City Medical Center - 2022\", \"Regional Clinic - 2023\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis with specific size\nfig, ax = plt.subplots(figsize=(5, 5))  # Size in inches to match 360x288 pixels\n\n# Plot boxplots with different colors and hatch patterns\ncolors = [\"#b6d7e4\", \"#a6ec9a\", \"#f4b9c2\"]  # Lighter shades of blue, green, and red\nhatches = [\"/\", \"\\\\\", \"o\"]  # Diagonal, horizontal lines, and dots\n\nfor i, d in enumerate(data):\n    bp = ax.boxplot(\n        d,\n        positions=np.array(range(len(d))) * 2 + (i + 1) * 0.5,\n        widths=0.5,\n        patch_artist=True,\n    )\n    for patch in bp[\"boxes\"]:\n        patch.set_facecolor(colors[i])\n        patch.set_hatch(hatches[i])\n        patch.set_edgecolor(\"black\")  # Set edge color to black\n        # Set outlier markers to black\n    for flier in bp[\"fliers\"]:\n        flier.set(\n            marker=\"o\", color=\"black\", markerfacecolor=\"black\", markersize=2, alpha=0.5\n        )\n\n# Customizing the plot to match the given picture\nax.set_xticks(xticks)\nax.set_xticklabels(xticklabels)\nax.set_ylabel(ylabel)\nax.set_ylim(ylim)\n\n# Adding legend manually to match the picture\nlegend_elements = [\n    Patch(facecolor=colors[0], hatch=hatches[0], label=labels[0], edgecolor=\"black\"),\n    Patch(facecolor=colors[1], hatch=hatches[1], label=labels[1], edgecolor=\"black\"),\n    Patch(facecolor=colors[2], hatch=hatches[2], label=labels[2], edgecolor=\"black\"),\n]\nax.legend(handles=legend_elements, loc=\"upper left\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_8.pdf', bbox_inches='tight')"}
{"idx": "box_9", "instruction": "There is a reference image for you and I also have a set of data about network throughput measurements under different penetration rates and protocols. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for the boxplots\ndata1 = [\nnp.random.normal(75, 5, 100),\nnp.random.normal(80, 4, 100),\nnp.random.normal(85, 3, 100),\n]\ndata2 = [\nnp.random.normal(65, 5, 100),\nnp.random.normal(70, 4, 100),\nnp.random.normal(75, 3, 100),\n]\n\ntitles = [\"0.25 Penetration Rate\", \"0.1 Penetration Rate\"]\nylabels = [\"Network Throughput (Mbps)\", \"Network Throughput (Mbps)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the boxplots\ndata1 = [\n    np.random.normal(75, 5, 100),\n    np.random.normal(80, 4, 100),\n    np.random.normal(85, 3, 100),\n]\ndata2 = [\n    np.random.normal(65, 5, 100),\n    np.random.normal(70, 4, 100),\n    np.random.normal(75, 3, 100),\n]\n\ntitles = [\"0.25 Penetration Rate\", \"0.1 Penetration Rate\"]\nylabels = [\"Network Throughput (Mbps)\", \"Network Throughput (Mbps)\"]\nxticklabels = [\"TCP/IP Standard\", \"UDP Protocol\", \"Optimized Protocol\"]\nyticks = [np.arange(60, 90, 5), np.arange(50, 80, 5)]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with custom size to match the original image's dimensions\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n# Create the boxplots\nbp1 = axs[0].boxplot(data1, medianprops=dict(color=\"orange\"))\nbp2 = axs[1].boxplot(data2, medianprops=dict(color=\"orange\"))\n\n# Set titles for subplots\naxs[0].set_title(titles[0])\naxs[1].set_title(titles[1])\n\n# Set y-axis labels\naxs[0].set_ylabel(ylabels[0])\naxs[1].set_ylabel(ylabels[1])\n\naxs[0].set_yticks(yticks[0])\naxs[1].set_yticks(yticks[1])\n\n# Set x-axis labels\naxs[0].set_xticklabels(xticklabels, rotation=45)\naxs[1].set_xticklabels(xticklabels, rotation=45)\n\naxs[0].grid(\"both\")\naxs[1].grid(\"both\")\n\n# Adjust layout to match the reference picture's dimensions and spacing\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1, wspace=0.4, hspace=0.4)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('box_9.pdf', bbox_inches='tight')"}
{"idx": "box_10", "instruction": "There is a reference image for you and I also have a set of data about daily activities such as commute time, work hours, leisure time, and sleep duration. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated sample data for the boxplots\ndata = {\n\"Commute Time\": np.random.uniform(10, 15, 20),\n\"Work Hours\": np.random.uniform(6, 10, 20),\n\"Leisure Time\": np.random.uniform(2, 6, 20),\n\"Sleep Duration\": np.random.uniform(5, 9, 20),\n}\nxlabel = \"Time (hours)\"\ntitle = \"Daily Time Distribution\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated sample data for the boxplots\ndata = {\n    \"Commute Time\": np.random.uniform(10, 15, 20),\n    \"Work Hours\": np.random.uniform(6, 10, 20),\n    \"Leisure Time\": np.random.uniform(2, 6, 20),\n    \"Sleep Duration\": np.random.uniform(5, 9, 20),\n}\nxlabel = \"Time (hours)\"\ntitle = \"Daily Time Distribution\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Create the boxplots with specific colors\nboxprops = dict(linestyle=\"-\", linewidth=2, color=\"darkblue\")\nflierprops = dict(marker=\"D\", color=\"red\", markerfacecolor=\"red\", markersize=5)\nmedianprops = dict(linestyle=\"-\", linewidth=2, color=\"green\")\n\n# Boxplot with vertical orientation\nbp = ax.boxplot(\n    data.values(),\n    vert=False,\n    patch_artist=True,\n    boxprops=boxprops,\n    flierprops=flierprops,\n    medianprops=medianprops,\n)\n\ncolors = [\"lightblue\", \"lightgreen\", \"lightyellow\", \"lightgray\"]\nfor patch, color in zip(bp[\"boxes\"], colors):\n    patch.set_facecolor(color)\n    # Scatter plot for data points\n    for j, key in enumerate(data.keys()):\n        x = data[key]\n        y = np.random.normal(j + 1, 0.02, size=len(x))\n        plt.plot(x, y, \"k.\", alpha=0.4, color=\"#4e8a84\")\n\n# Set the x-axis labels with data keys\nax.set_yticklabels(data.keys(), ha=\"right\")\n\n# Set the y-axis label\nax.set_xlabel(xlabel)\nax.xaxis.grid(False)\nax.xaxis.grid(True)\n\n# Set the title of the plot\nax.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_10.pdf', bbox_inches='tight')"}
{"idx": "box_11", "instruction": "There is a reference image for you and I also have a set of data about solar panel efficiency in different seasons. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Updated sample data for the boxplots\ndata1 = [75, 78, 80, 82, 81, 79, 77]\ndata2 = [72, 74, 75, 73, 72.5, 73.8, 73]\nylabel = \"Efficiency (%)\"\ntextlabel = \"1.0% Efficiency\"\nhlines = [80, 75]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated sample data for the boxplots\ndata1 = [75, 78, 80, 82, 81, 79, 77]\ndata2 = [72, 74, 75, 73, 72.5, 73.8, 73]\nxticklabels = [\"Solar Output\\n(Winter)\", \"Solar Output\\n(Summer)\"]\nylabel = \"Efficiency (%)\"\nxlim = [0.5, 3]\nylim = [70, 85]\nyticks = [70, 75, 80, 85]\ntextlabel = \"1.0% Efficiency\"\nhlines = [80, 75]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis with the specified dimensions\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Create the boxplots\nbp1 = ax.boxplot(\n    data1, positions=[1], widths=0.6, patch_artist=True, boxprops=dict(facecolor=\"none\")\n)\nbp2 = ax.boxplot(\n    data2, positions=[2], widths=0.6, patch_artist=True, boxprops=dict(facecolor=\"none\")\n)\n\n# Set the labels for the x-axis\nax.set_xticklabels(xticklabels, ha=\"center\")\nax.set_xlim()\n\n# Set the labels for the y-axis\nax.set_ylabel(ylabel)\n\n# Set the y-axis limits\nax.set_ylim(ylim)\nax.set_yticks(yticks)\n\n# Add a custom annotation for the 1.0 BLEU difference\nax.annotate(\n    \"\",\n    xy=(2.25, hlines[0]),\n    xytext=(2.25, hlines[1]),\n    arrowprops=dict(facecolor=\"black\", arrowstyle=\"->\"),\n    horizontalalignment=\"center\",\n)\n\n# Add the text for the 1.0 BLEU difference\nax.text(2.5, hlines[1]+2.5, textlabel, horizontalalignment=\"center\")\n\n# Add the dashed line for the 1.0 BLEU difference\nax.hlines(hlines[0], 1, 2.25, colors=\"grey\", linestyles=\"dashed\")\nax.hlines(hlines[1], 2, 2.25, colors=\"grey\", linestyles=\"dashed\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and show the plot\nplt.tight_layout()\nplt.savefig('box_11.pdf', bbox_inches='tight')"}
{"idx": "box_13", "instruction": "There is a reference image for you and I also have a set of data about execution accuracy. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to mimic the boxplot in the picture\ndata = [\nnp.random.normal(0.915, 0.02, 100),\nnp.random.normal(0.940, 0.03, 100),\nnp.random.normal(0.930, 0.025, 100),\nnp.random.normal(0.950, 0.015, 100),\nnp.random.normal(0.925, 0.02, 100),\n]\n\nlabels = [\"API-Only\", \"Hybrid Approach\", \"Direct Query\", \"Optimized Execution\", \"Hybrid+Optimization\"]\nylabel = \"Execution Accuracy\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic the boxplot in the picture\ndata = [\n    np.random.normal(0.915, 0.02, 100),\n    np.random.normal(0.940, 0.03, 100),\n    np.random.normal(0.930, 0.025, 100),\n    np.random.normal(0.950, 0.015, 100),\n    np.random.normal(0.925, 0.02, 100),\n]\n\nlabels = [\"API-Only\", \"Hybrid Approach\", \"Direct Query\", \"Optimized Execution\", \"Hybrid+Optimization\"]\nylabel = \"Execution Accuracy\"\nylim = [0.825, 1.025]\nyticks = np.arange(0.850, 1.001, 0.025)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the boxplot\nfig, ax = plt.subplots(\n    figsize=(6, 5)\n)  # Adjusting figure size as per the dimensions provided\nbp = ax.boxplot(\n    data,\n    labels=labels,\n    patch_artist=True,\n    boxprops=dict(facecolor=\"#549e9a\", color=\"black\"),\n    medianprops=dict(color=\"black\"),\n    whiskerprops=dict(color=\"black\", linestyle=\"-\"),\n    capprops=dict(color=\"black\", linestyle=\"-\"),\n)\n\n# Remove outliers\nfor flier in bp[\"fliers\"]:\n    flier.set(marker=\"\", color=\"black\")\n\n# Set the y-axis range and tick labels\nax.set_ylim(ylim)\nax.set_yticks(yticks)\n# Set the y-axis label\nax.set_ylabel(ylabel, fontsize=12)\n\n# Set the tick label size\nax.tick_params(axis=\"both\", which=\"major\", labelsize=10)\nplt.xticks(rotation=45)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('box_13.pdf', bbox_inches='tight')"}
{"idx": "box_14", "instruction": "There is a reference image for you and I also have a set of data about machine learning model performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\naccuracy = [\nnp.random.normal(0.92, 0.03, 100),\nnp.random.normal(0.89, 0.04, 100),\nnp.random.normal(0.85, 0.02, 100),\n]\nerror = [\nnp.random.normal(3.5, 1.2, 100),\nnp.random.normal(5.6, 1.8, 100),\nnp.random.normal(6.3, 2.1, 100),\n]\ntitles = [\"Algorithm Precision\", \"Processing Time (ms)\"]\nylabels = [\"Precision\", \"Time (ms)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\naccuracy = [\n    np.random.normal(0.92, 0.03, 100),\n    np.random.normal(0.89, 0.04, 100),\n    np.random.normal(0.85, 0.02, 100),\n]\nerror = [\n    np.random.normal(3.5, 1.2, 100),\n    np.random.normal(5.6, 1.8, 100),\n    np.random.normal(6.3, 2.1, 100),\n]\ntitles = [\"Algorithm Precision\", \"Processing Time (ms)\"]\nxticklabels = [\"Deep Learning Model\", \"Ensemble Method\", \"Support Vector Machine\"]\nylabels = [\"Precision\", \"Time (ms)\"]\nyticks = [np.arange(0.7, 1.1, 0.1), np.arange(1, 12, 1)]\nylims = [[0.6, 1], [0, 12]]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots with specified figure size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nmedianprops = dict(linestyle=\"-\", linewidth=1, color=\"black\")\n# Left subplot - Region Classification Accuracy\nbplot1 = ax1.boxplot(\n    accuracy,\n    patch_artist=True,\n    showfliers=True,\n    widths=0.6,\n    medianprops=medianprops,\n    flierprops=dict(marker=\"D\", color=\"black\", markerfacecolor=\"black\", markersize=5),\n)\nax1.set_title(titles[0])\nax1.set_xticklabels(xticklabels)\nax1.set_ylabel(ylabels[0])\nax1.set_yticks(yticks[0])\nax1.set_ylim(ylims[0])\nax1.set_facecolor(\"#eaeaf2\")\nax1.yaxis.grid(True, color=\"white\")\n\n# Add median value annotations\nfor i, line in enumerate(bplot1[\"medians\"]):\n    x, y = line.get_xydata()[1]\n    ax1.text(x - 0.3, y, f\"{y:.2f}\", horizontalalignment=\"center\", color=\"black\")\n\n# Right subplot - Slice Mean Error\nbplot2 = ax2.boxplot(\n    error,\n    patch_artist=True,\n    showfliers=True,\n    widths=0.6,\n    medianprops=medianprops,\n    flierprops=dict(marker=\"D\", color=\"black\", markerfacecolor=\"black\", markersize=5),\n)\nax2.set_title(titles[1])\nax2.set_xticklabels(xticklabels)\nax2.set_ylabel(ylabels[1])\nax2.set_yticks(yticks[1])\nax2.set_ylim(ylims[1])\nax2.set_facecolor(\"#eaeaf2\")\nax2.yaxis.grid(True, color=\"white\")\n\n# Add median value annotations\nfor i, line in enumerate(bplot2[\"medians\"]):\n    x, y = line.get_xydata()[1]\n    ax2.text(x - 0.3, y, f\"{y:.2f}\", horizontalalignment=\"center\", color=\"black\")\n\n# Set colors for boxplots\ncolors = [\"#5e74a0\", \"#c38c6a\", \"#6e9d72\"]\nfor bplot in (bplot1, bplot2):\n    for patch, color in zip(bplot[\"boxes\"], colors):\n        patch.set_facecolor(color)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap\nplt.tight_layout()\nplt.savefig('box_14.pdf', bbox_inches='tight')"}
{"idx": "box_15", "instruction": "There is a reference image for you and I also have a set of data about efficiency scores for different levels of optimization. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\ncenter = np.random.randint(50, 100, 5)\ndata = [np.random.normal(center[std - 1], std * 2, 100) for std in range(1, 6)]\nylabel = \"Efficiency Score\"\nxhline=50\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\ncenter = np.random.randint(50, 100, 5)\ndata = [np.random.normal(center[std - 1], std * 2, 100) for std in range(1, 6)]\nxticklabels = [\"No Optimization\", \"Low Optimization\", \"Medium Optimization\", \"High Optimization\", \"Full Optimization\"]\nylabel = \"Efficiency Score\"\nxhline=50\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with the specified dimensions\nfig, ax = plt.subplots(figsize=(8, 5))\n\nmedianprops = dict(linestyle=\"-\", linewidth=1, color=\"black\")\n# Boxplot with custom colors\nbox = ax.boxplot(data, patch_artist=True, medianprops=medianprops)\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\"]\nfor patch, color in zip(box[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Add threshold line\nax.axhline(xhline, color=\"r\", linestyle=\"--\", label=\"threshold\")\n\n# Set x-axis labels\nax.set_xticklabels(xticklabels)\n\n# Set y-axis label\nax.set_ylabel(ylabel)\n\n# Add legend for the threshold line\nax.legend(loc=\"upper right\", frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('box_15.pdf', bbox_inches='tight')"}
{"idx": "box_16", "instruction": "There is a reference image for you and I also have a set of data about population statistics and growth rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data (replace with actual values from the image)\ndata = {\n\"Mean\": np.random.rand(6, 6) * 3 + 2,\n}\n\nlabels = [\n\"Urban Population\",\n\"Rural Population\",\n\"Suburban Population\",\n\"Migration Rate\",\n\"Birth Rate\",\n\"Death Rate\",\n]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual values from the image)\ndata = {\n    \"Mean\": np.random.rand(6, 6) * 3 + 2,\n}\n\nlabels = [\n    \"Urban Population\",\n    \"Rural Population\",\n    \"Suburban Population\",\n    \"Migration Rate\",\n    \"Birth Rate\",\n    \"Death Rate\",\n]\nxlim=[2, 5]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(5, 5), constrained_layout=True)\ncolors = [\"#d1af8e\", \"#d09dca\", \"#d48b4f\", \"#65b598\", \"#5894c2\", \"#deae57\"]\nbplot = ax.boxplot(\n    data[\"Mean\"],\n    vert=False,\n    patch_artist=True,\n    showcaps=False,\n    showfliers=False,\n    whiskerprops=dict(color=\"black\", linestyle=\"-\", linewidth=0),\n    medianprops={\"color\": \"black\"},\n    boxprops=dict(linestyle=\"-\", linewidth=0),\n)\nfor patch, color in zip(bplot[\"boxes\"], colors):\n    patch.set_facecolor(color)\nax.set_title(\"Mean\")\nax.set_yticklabels(labels)\nax.set_xlim(xlim)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\nax.xaxis.grid(True, alpha=0.7)\nax.set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_16.pdf', bbox_inches='tight')"}
{"idx": "box_17", "instruction": "There is a reference image for you and I also have a set of data about various experiments and their measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Random data to simulate the boxplot\ndata = [np.random.normal(100, 30, 100) for _ in range(10)]\nylabel = \"Measurement\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Random data to simulate the boxplot\ndata = [np.random.normal(100, 30, 100) for _ in range(10)]\nxticklabels = [f\"Experiment {i+1}\" for i in range(10)]\nylabel = \"Measurement\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the boxplot\nfig, ax = plt.subplots(\n    figsize=(8, 4)\n)  # Adjust the figure size to match the original image's dimensions\nboxprops = dict(linestyle=\"-\", linewidth=2, color=\"blue\")\nmedianprops = dict(linestyle=\"-\", linewidth=2, color=\"orange\")\nmeanprops = dict(marker=None)  # Hide mean points\n\nbp = ax.boxplot(\n    data,\n    patch_artist=True,\n    showmeans=True,\n    meanprops=meanprops,\n    showfliers=False,\n    boxprops=boxprops,\n    medianprops=medianprops,\n)\n\nfor patch in bp[\"boxes\"]:\n    patch.set(facecolor=\"lightblue\")\n\n# Set the x-axis labels\nax.set_xticklabels(xticklabels, rotation=0)\n\n# Set the y-axis label\nax.set_ylabel(ylabel)\n\n# Add markers for minimum values\nfor i, line in enumerate(bp[\"whiskers\"][::2]):\n    mid_val = (line.get_ydata()[0] + line.get_ydata()[1]) / 2 + line.get_ydata()[\n        1\n    ]  # Get the y value of the minimum whisker\n    ax.plot(\n        i + 1, mid_val, marker=\"o\", color=\"red\"\n    )  # Add a marker at the minimum value\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_17.pdf', bbox_inches='tight')"}
{"idx": "box_18", "instruction": "There is a reference image for you and I also have a set of data about transportation and technology models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nmodels = [\n\"UberDemand\",\n\"SmartGrid\",\n\"EVCharging\",\n\"TrafficFlow\",\n\"TrainScheduling\",\n\"FreightLogistics\",\n\"FlightDelays\",\n\"PortOperations\",\n\"PublicTransit\",\n\"Bikeshare\",\n][::-1]\nscores = [\nnp.random.uniform(50, 100, 10) for _ in models * 2\n] # Placeholder for actual scores\nscores = [(score - np.min(score)) / (np.max(score) - np.min(score)) for score in scores]\nxlabels = [\"Transportation Model\", \"Technology Model\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodels = [\n    \"UberDemand\",\n    \"SmartGrid\",\n    \"EVCharging\",\n    \"TrafficFlow\",\n    \"TrainScheduling\",\n    \"FreightLogistics\",\n    \"FlightDelays\",\n    \"PortOperations\",\n    \"PublicTransit\",\n    \"Bikeshare\",\n][::-1]\nscores = [\n    np.random.uniform(50, 100, 10) for _ in models * 2\n]  # Placeholder for actual scores\nscores = [(score - np.min(score)) / (np.max(score) - np.min(score)) for score in scores]\nxlabels = [\"Transportation Model\", \"Technology Model\"]\nylims = [[0, 11], [0, 11]]\nxlims = [[-0.05, 1.05], [-0.05, 1.05]]\nyticks = [range(1, len(models) + 1), range(1, len(models) + 1)]\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure and Axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5), sharey=True)\nmedianprops = dict(linestyle=\"-\", linewidth=1, color=\"black\")\ncolors = [\n    \"#b0525d\",\n    \"#cc7760\",\n    \"#dca174\",\n    \"#e8cc94\",\n    \"#f3ebb8\",\n    \"#edf1bd\",\n    \"#d2e2ac\",\n    \"#a9ccac\",\n    \"#77aaa2\",\n    \"#557fa7\",\n][::-1]\nbackcolors = [\"#f3d2c9\", \"#fefae6\", \"#d3e8e5\", \"#c7d9e8\"][::-1]\n\n# Subplot 1: one by one\nbplot1 = ax1.boxplot(\n    scores[:10], vert=False, medianprops=medianprops, patch_artist=True\n)\nax1.set_ylim(ylims[0])\nax1.set_yticks(yticks[0])\nax1.set_yticklabels(models)\nax1.set_xlim(xlims[0])\nax1.set_xlabel(xlabels[0])\nax1.set_facecolor(\"#FFF7E6\")\nax1.xaxis.grid(True)\nax1.set_axisbelow(True)\n\nfor patch, color in zip(bplot1[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Set background colors\nax1.add_patch(\n    plt.Rectangle(\n        (-0.05, 0.5), 1.1, 1.5, facecolor=backcolors[0], edgecolor=\"none\", zorder=0\n    )\n)\nax1.add_patch(\n    plt.Rectangle(\n        (-0.05, 1.5), 1.1, 1.5, facecolor=backcolors[1], edgecolor=\"none\", zorder=0\n    )\n)\nax1.add_patch(\n    plt.Rectangle(\n        (-0.05, 2.5), 1.1, 5.5, facecolor=backcolors[2], edgecolor=\"none\", zorder=0\n    )\n)\nax1.add_patch(\n    plt.Rectangle(\n        (-0.05, 7.5), 1.1, 3, facecolor=backcolors[3], edgecolor=\"none\", zorder=0\n    )\n)\n\n# Subplot 2: all in one\nbplot2 = ax2.boxplot(\n    scores[10:], vert=False, medianprops=medianprops, patch_artist=True\n)\nax2.set_ylim(ylims[1])\nax2.set_yticks(yticks[1])\nax2.set_yticklabels(models)\nax2.set_xlim(xlims[1])\nax2.set_xlabel(xlabels[1])\nax2.set_facecolor(\"#FFF7E6\")\nax2.xaxis.grid(True)\nax2.set_axisbelow(True)\n\nfor patch, color in zip(bplot2[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Set background colors\nax2.add_patch(\n    plt.Rectangle(\n        (-0.05, 0.5), 1.1, 1.5, facecolor=backcolors[0], edgecolor=\"none\", zorder=0\n    )\n)\nax2.add_patch(\n    plt.Rectangle(\n        (-0.05, 1.5), 1.1, 1.5, facecolor=backcolors[1], edgecolor=\"none\", zorder=0\n    )\n)\nax2.add_patch(\n    plt.Rectangle(\n        (-0.05, 2.5), 1.1, 5.5, facecolor=backcolors[2], edgecolor=\"none\", zorder=0\n    )\n)\nax2.add_patch(\n    plt.Rectangle(\n        (-0.05, 7.5), 1.1, 3, facecolor=backcolors[3], edgecolor=\"none\", zorder=0\n    )\n)\n\n# Gradient background\nfor ax in [ax1, ax2]:\n    ax.set_facecolor(\"white\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('box_18.pdf', bbox_inches='tight')"}
{"idx": "box_19", "instruction": "There is a reference image for you and I also have a set of data about neural network performance across different tasks. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\ndata1 = np.random.normal(10, 2, 20)\ndata2 = np.random.normal(15, 3, 20)\ndata3 = np.random.normal(12, 2.5, 20)\n\ndata = [data1, data2, data3]\nylabel = \"Performance Score\"\ncategories = [\"Image Classification\", \"Text Generation\", \"Speech Recognition\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\ndata1 = np.random.normal(10, 2, 20)\ndata2 = np.random.normal(15, 3, 20)\ndata3 = np.random.normal(12, 2.5, 20)\n\ndata = [data1, data2, data3]\nylabel = \"Performance Score\"\nxticklabels = [\"NeuralNet A\", \"NeuralNet B\", \"NeuralNet C\"]\nxticks = [1, 2, 3]\nylim = [0, 20]\ncategories = [\"Image Classification\", \"Text Generation\", \"Speech Recognition\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(10, 4))\n\n# Define colors for each boxplot\ncolors = [\"#c0dbcd\", \"#edd1b9\", \"#d1d6e3\"]\n\n# Create subplots for each category\nfor i, category in enumerate(categories, 1):\n    plt.subplot(1, 3, i)\n    bplot = plt.boxplot(\n        data,\n        patch_artist=True,\n        widths=0.7,\n        medianprops=dict(color=\"black\"),\n        whiskerprops=dict(color=\"black\"),\n        capprops=dict(color=\"black\"),\n    )\n\n    # Set colors for each box\n    for patch, color in zip(bplot[\"boxes\"], colors):\n        patch.set_facecolor(color)\n\n    # Scatter plot for data points\n    for j in range(1, 4):\n        y = data[j - 1]\n        x = np.random.normal(j, 0.04, size=len(y))\n        plt.plot(x, y, \"k.\", alpha=0.7)\n\n    plt.title(category)\n    plt.xticks(xticks, xticklabels)\n    plt.ylim(ylim)\n    if i == 1:\n        plt.ylabel(ylabel)\n    plt.gca().xaxis.grid(True)\n    plt.gca().spines[\"top\"].set_visible(False)\n    plt.gca().spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap\nplt.tight_layout()\nplt.savefig('box_19.pdf', bbox_inches='tight')"}
{"idx": "box_20", "instruction": "There is a reference image for you and I also have a set of data about test scores across different subjects and semesters. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Placeholder data for the boxplots\ndata1 = [np.random.normal(100, 15, 100), np.random.normal(90, 15, 100)]\ndata2 = [np.random.normal(75, 10, 100), np.random.normal(70, 10, 100)]\ndata3 = [np.random.normal(60, 8, 100), np.random.normal(65, 5, 100)]\ndata4 = [np.random.normal(55, 7, 100), np.random.normal(50, 7, 100)]\ndata5 = [np.random.normal(80, 12, 100), np.random.normal(75, 12, 100)]\ntitles = [\"Math Test Scores\", \"Reading Test Scores\", \"Science Test Scores\", \"Art Test Scores\", \"Music Test Scores\"]\nxlabel = \"Semester\"\nylabels = \"Score\", \"Score\", \"Score\", \"Score\", \"Score\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Placeholder data for the boxplots\ndata1 = [np.random.normal(100, 15, 100), np.random.normal(90, 15, 100)]\ndata2 = [np.random.normal(75, 10, 100), np.random.normal(70, 10, 100)]\ndata3 = [np.random.normal(60, 8, 100), np.random.normal(65, 5, 100)]\ndata4 = [np.random.normal(55, 7, 100), np.random.normal(50, 7, 100)]\ndata5 = [np.random.normal(80, 12, 100), np.random.normal(75, 12, 100)]\ntitles = [\"Math Test Scores\", \"Reading Test Scores\", \"Science Test Scores\", \"Art Test Scores\", \"Music Test Scores\"]\nxticklabels = [\"Semester 1\", \"Semester 2\"]\nxticks = [1, 2]\nxlabel = \"Semester\"\nylabels = \"Score\", \"Score\", \"Score\", \"Score\", \"Score\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with custom dimensions to match the original image\nfig, axs = plt.subplots(1, 5, figsize=(10, 5))  # Adjusted for clarity\n\n# Define colors for the boxplots\ncolors = [\"#1f77b4\", \"#ff7f0e\"]\n\n# Plot the boxplots with the specified colors and outlier shapes\nfor i, data in enumerate([data1, data2, data3, data4, data5]):\n    bplot = axs[i].boxplot(\n        data,\n        patch_artist=True,\n        notch=False,\n        widths=0.7,\n        medianprops=dict(color=\"black\"),\n        flierprops=dict(\n            marker=\"D\", color=\"black\", markerfacecolor=\"black\", markersize=5\n        ),\n    )\n    for patch, color in zip(bplot[\"boxes\"], colors):\n        patch.set_facecolor(color)\n\n# Set the titles for each subplot\naxs[0].set_title(titles[0])\naxs[1].set_title(titles[1])\naxs[2].set_title(titles[2])\naxs[3].set_title(titles[3])\naxs[4].set_title(titles[4])\n\n# Set the x-axis labels with proper spacing\nfor ax in axs:\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(xticklabels)\n    ax.set_xlabel(xlabel)\n\n# Set the y-axis labels\naxs[0].set_ylabel(ylabels[0])\naxs[1].set_ylabel(ylabels[1])\naxs[2].set_ylabel(ylabels[2])\naxs[3].set_ylabel(ylabels[3])\naxs[4].set_ylabel(ylabels[4])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and save the figure\nplt.tight_layout()\nplt.savefig('box_20.pdf', bbox_inches='tight')"}
{"idx": "box_21", "instruction": "There is a reference image for you and I also have a set of data about utility consumption. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for the boxplots\ndata = {\n\"Electricity\": np.random.uniform(150, 300, 100),\n\"Water\": np.random.uniform(70, 180, 100),\n\"Gas\": np.random.uniform(80, 200, 100),\n\"Internet\": np.random.uniform(60, 150, 100),\n}\n\n# Reverse the order of data for boxplots\ndata_values = list(data.values())[::-1]\ndata_keys = list(data.keys())[::-1]\nxlabel = \"Consumption (kWh)\"\ntitle = \"Utility Consumption\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the boxplots\ndata = {\n    \"Electricity\": np.random.uniform(150, 300, 100),\n    \"Water\": np.random.uniform(70, 180, 100),\n    \"Gas\": np.random.uniform(80, 200, 100),\n    \"Internet\": np.random.uniform(60, 150, 100),\n}\n\n# Reverse the order of data for boxplots\ndata_values = list(data.values())[::-1]\ndata_keys = list(data.keys())[::-1]\nxlabel = \"Consumption (kWh)\"\nxlim = [0, 350]\nxticks = np.arange(0, 351, 50)\ntitle = \"Utility Consumption\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Create the boxplots with specific colors\nboxprops = dict(linestyle=\"-\", linewidth=2, color=\"black\")\nflierprops = dict(marker=\"o\", color=\"black\", markersize=5)\nmedianprops = dict(linestyle=\"-\", linewidth=2, color=\"black\")\n\nbp = ax.boxplot(\n    data_values,\n    vert=False,\n    patch_artist=True,\n    boxprops=boxprops,\n    flierprops=flierprops,\n    medianprops=medianprops,\n)\n\ncolors = [\"#824920\", \"#377e22\", \"#0000f5\", \"#75147c\"][::-1]\nfor patch, color in zip(bp[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Set the y-axis labels with reversed order\nax.set_yticklabels(data_keys)\n\n# Set the x-axis label\nax.set_xlabel(xlabel)\n\n# Set the x-axis limits and ticks\nax.set_xlim(xlim)\nax.set_xticks(xticks)\nax.set_xticklabels([\"{}%\".format(i) for i in xticks])\n\n# Set the title of the plot\nax.set_title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_21.pdf', bbox_inches='tight')"}
{"idx": "box_23", "instruction": "There is a reference image for you and I also have a set of data about daily time allocation. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for the boxplots\ndata = {\n\"Commute Time\": np.random.uniform(9, 12, 20),\n\"Work Hours\": np.random.uniform(6, 10, 20),\n\"Leisure Time\": np.random.uniform(2, 6, 20),\n\"Sleep Duration\": np.random.uniform(5, 9, 20),\n}\nylabel = \"Time (hours)\"\ntitle = \"Daily Time Allocation\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the boxplots\ndata = {\n    \"Commute Time\": np.random.uniform(9, 12, 20),\n    \"Work Hours\": np.random.uniform(6, 10, 20),\n    \"Leisure Time\": np.random.uniform(2, 6, 20),\n    \"Sleep Duration\": np.random.uniform(5, 9, 20),\n}\nylabel = \"Time (hours)\"\ntitle = \"Daily Time Allocation\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Create the boxplots with specific colors\nboxprops = dict(linestyle=\"-\", linewidth=2, color=\"darkblue\")\nflierprops = dict(marker=\"D\", color=\"red\", markerfacecolor=\"red\", markersize=5)\nmedianprops = dict(linestyle=\"-\", linewidth=2, color=\"#ea3323\")\n\n# Boxplot with vertical orientation\nbp = ax.boxplot(\n    data.values(),\n    vert=True,\n    notch=True,\n    patch_artist=True,\n    boxprops=boxprops,\n    flierprops=flierprops,\n    medianprops=medianprops,\n)\n\ncolors = [\"#f4b6c2\", \"#f6d8ae\", \"#daedbd\", \"#ece2f0\"]\nfor patch, color in zip(bp[\"boxes\"], colors):\n    patch.set_facecolor(color)\n\n# Set the x-axis labels with data keys\nax.set_xticklabels(data.keys(), ha=\"center\")\n\n# Set the y-axis label\nax.set_ylabel(\"Duration (minutes)\")\n\n# Disable x-axis grid and enable y-axis grid for clarity\nax.xaxis.grid(False)\nax.yaxis.grid(True)\n\n# Set the title of the plot\nax.set_title(\"Daily Activity Durations\")\n\n# Annotating medians inside the boxplots\nfor i, line in enumerate(bp[\"medians\"]):\n    x, y = line.get_xydata()[1]  # Top of the median line\n    # Display the median value at the top of the median line\n    ax.annotate(\n        f\"{y:.1f}\", (x - 0.1, y), textcoords=\"offset points\", xytext=(0, 5), ha=\"center\"\n    )\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_23.pdf', bbox_inches='tight')"}
{"idx": "box_24", "instruction": "There is a reference image for you and I also have a set of data about electrical voltage measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ndata = {\n\"Mean Voltage\": np.random.rand(6, 6) * 0.5 + 3,\n\"Median Voltage\": np.random.rand(6, 6) * 0.5 + 2.5,\n\"Voltage Variance\": np.random.rand(6, 6) * 0.5 + 1.5,\n\"Voltage Deviation\": np.random.rand(6, 6) * 0.5 + 1,\n}\nlabels = [\n\"Standard Operation\",\n\"Low Load\",\n\"High Load\",\n\"Maintenance\",\n\"Power Saving\",\n\"Overload\",\n] # Updated scenario labels in English\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ndata = {\n    \"Mean Voltage\": np.random.rand(6, 6) * 0.5 + 3,\n    \"Median Voltage\": np.random.rand(6, 6) * 0.5 + 2.5,\n    \"Voltage Variance\": np.random.rand(6, 6) * 0.5 + 1.5,\n    \"Voltage Deviation\": np.random.rand(6, 6) * 0.5 + 1,\n}\ncolors = [\"#d1af8e\", \"#d09dca\", \"#d48b4f\", \"#65b598\", \"#5894c2\", \"#deae57\"]\ncolors = plt.get_cmap(\"Set3\").colors\nlabels = [\n    \"Standard Operation\",\n    \"Low Load\",\n    \"High Load\",\n    \"Maintenance\",\n    \"Power Saving\",\n    \"Overload\",\n]  # Updated scenario labels in English\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axes = plt.subplots(2, 2, figsize=(8, 8), constrained_layout=True)\n\nfor i, (ax, (metric, values)) in enumerate(zip(axes.flatten(), data.items())):\n    bplot = ax.boxplot(\n        values,\n        vert=True,\n        patch_artist=True,\n        showcaps=False,\n        showfliers=False,\n        whiskerprops=dict(color=\"#4f4f4f\", linestyle=\"-\", linewidth=0),\n        medianprops={\"color\": \"#4f4f4f\"},\n        boxprops=dict(linestyle=\"-\", linewidth=0),\n    )\n    for patch, color in zip(bplot[\"boxes\"], colors):\n        patch.set_facecolor(color)\n    ax.set_title(metric)\n    if i == 2 or i == 3:\n        ax.set_xticklabels(labels, rotation=45)\n    else:\n        ax.set_xticks([])\n    ax.yaxis.grid(True, alpha=0.7)\n    ax.xaxis.grid(False)\n    ax.set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_24.pdf', bbox_inches='tight')"}
{"idx": "box_25", "instruction": "There is a reference image for you and I also have a set of data about engine performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated sample data for demonstration purposes\ndata1 = [\nnp.random.normal(0, std, 50)\nfor std in np.random.choice(range(5, 15), 5, replace=False)\n]\ndata2 = [\nnp.random.normal(0, std, 50)\nfor std in np.random.choice(range(5, 15), 5, replace=False)\n]\ndata3 = [\nnp.random.normal(0, std, 50)\nfor std in np.random.choice(range(5, 15), 5, replace=False)\n]\nlabels = [\"Hybrid Engine (Proposed)\", \"Electric Engine\", \"Combustion Engine\", \"Engine Failure\"]\nvlines = [-15, 15]\nylabel = \"Fuel Efficiency [mpg]\"\nxlabel = \"Engine Power [hp]\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.lines as mlines\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated sample data for demonstration purposes\ndata1 = [\n    np.random.normal(0, std, 50)\n    for std in np.random.choice(range(5, 15), 5, replace=False)\n]\ndata2 = [\n    np.random.normal(0, std, 50)\n    for std in np.random.choice(range(5, 15), 5, replace=False)\n]\ndata3 = [\n    np.random.normal(0, std, 50)\n    for std in np.random.choice(range(5, 15), 5, replace=False)\n]\nlabels = [\"Hybrid Engine (Proposed)\", \"Electric Engine\", \"Combustion Engine\", \"Engine Failure\"]\nvlines = [-15, 15]\nxlim = [-40, 30]\nylabel = \"Fuel Efficiency [mpg]\"\nxlabel = \"Engine Power [hp]\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Boxplot\nfig, ax = plt.subplots(figsize=(10, 6))  # Adjust figure size\nbp1 = ax.boxplot(\n    data1,\n    positions=np.array(range(len(data1))) * 2.0 - 0.4,\n    widths=0.3,\n    patch_artist=True,\n    vert=False,\n    showfliers=False,\n)\nbp2 = ax.boxplot(\n    data2,\n    positions=np.array(range(len(data2))) * 2.0,\n    widths=0.3,\n    patch_artist=True,\n    vert=False,\n    showfliers=False,\n)\nbp3 = ax.boxplot(\n    data3,\n    positions=np.array(range(len(data3))) * 2.0 + 0.4,\n    widths=0.3,\n    patch_artist=True,\n    vert=False,\n    showfliers=False,\n)\n\n# New colors for the boxplots\nnew_colors = [\"#a6cee3\", \"#1f78b4\", \"#b2df8a\"]\n\n# Set properties for each boxplot\nfor bp, color in zip([bp1, bp2, bp3], new_colors):\n    for patch in bp[\"boxes\"]:\n        patch.set_facecolor(color)\n    for whisker in bp[\"whiskers\"]:\n        whisker.set(color=\"black\", linewidth=1)\n    for cap in bp[\"caps\"]:\n        cap.set(color=\"black\", linewidth=1)\n    for median in bp[\"medians\"]:\n        median.set(color=\"black\", linewidth=2)\n\n# Add dashed line for \u03b8max adjusted for horizontal layout\nax.axvline(x=vlines[0], color=\"#8a4e6e\", linestyle=\"--\", linewidth=1.5, label=\"$\u03b8_{max}$\")\nax.axvline(x=vlines[1], color=\"#4e7d8a\", linestyle=\"--\", linewidth=1.5, label=\"$\u03b8_{min}$\")\n\n# Add legend with updated colors and markers\nlegend_elements = [\n    mpatches.Patch(color=\"#a6cee3\", label=labels[0]),\n    mpatches.Patch(color=\"#1f78b4\", label=labels[1]),\n    mpatches.Patch(color=\"#b2df8a\", label=labels[2]),\n    mlines.Line2D([], [], color=\"#8a4e6e\", linestyle=\"--\", label=\"$\u03b8_{max}$\"),\n    mlines.Line2D(\n        [],\n        [],\n        color=\"black\",\n        marker=\"x\",\n        linestyle=\"None\",\n        markersize=10,\n        label=labels[3],\n    ),\n    mlines.Line2D([], [], color=\"#4e7d8a\", linestyle=\"--\", label=\"$\u03b8_{min}$\"),\n]\n\n# Place legend outside the plot area\nax.legend(\n    handles=legend_elements,\n    loc=\"upper center\",\n    bbox_to_anchor=(0.5, -0.15),\n    ncol=3,\n    frameon=False,\n)\n\n# Set y-axis labels and limits\nax.set_xlim(xlim)\nax.set_ylabel(ylabel)\nax.set_xlabel(xlabel)\n\n# Set y-axis tick positions and labels\nax.set_yticks(range(0, len(data1) * 2, 2))\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('box_25.pdf', bbox_inches='tight')"}
{"idx": "errorbar_1", "instruction": "There is a reference image for you and I also have a set of data about machine learning model performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nmodels = [\n\"Logistic Regr.\",\n\"Random Forest\",\n\"XGBoost\",\n\"LightGBM\",\n\"CatBoost\",\n\"Neural Net\",\n\"SVM\",\n\"KNN\",\n\"Naive Bayes\",\n\"Decision Tree\",\n]\n\nlog_probabilities = [\n-0.75,\n-0.69,\n-0.61,\n-0.72,\n-0.70,\n-0.88,\n-0.69,\n-0.75,\n-0.70,\n-0.85,\n]\n\nerrors = [0.04] * 8 + [0.08] + [0.25]\n\nlegendtitle = [\"Ensemble\", \"Single Model\"]\n\nylabel = \"Log Probability \u201a\u00dc\u00eb\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.patches as mpatches\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nmodels = [\n    \"Logistic Regr.\",\n    \"Random Forest\",\n    \"XGBoost\",\n    \"LightGBM\",\n    \"CatBoost\",\n    \"Neural Net\",\n    \"SVM\",\n    \"KNN\",\n    \"Naive Bayes\",\n    \"Decision Tree\",\n]\n\nlog_probabilities = [\n    -0.75,\n    -0.69,\n    -0.61,\n    -0.72,\n    -0.70,\n    -0.88,\n    -0.69,\n    -0.75,\n    -0.70,\n    -0.85,\n]\n\nerrors = [0.04] * 8 + [0.08] + [0.25]\n\nlegendtitle = [\"Ensemble\", \"Single Model\"]\n\nylabel = \"Log Probability \u2191\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n\ncolors = [\"#58a65d\"] * 5 + [\"#9ba0a6\"] + [\"#58a65d\"] * 2 + [\"#f2bf42\"] * 2\n\n# Plot\nfig, ax = plt.subplots(figsize=(6, 4))\nbars = ax.bar(\n    models,\n    log_probabilities,\n    yerr=errors,\n    color=colors,\n    capsize=10,\n    error_kw={\n        \"ecolor\": \"gray\",\n    },\n)\n\n# Annotate bars with log probability values\nfor bar, log_prob, error, model in zip(bars, log_probabilities, errors, models):\n    ax.text(\n        bar.get_x() + bar.get_width() / 2,\n        bar.get_height() - error - 0.1,\n        f\"{log_prob:.3f}\",\n        ha=\"center\",\n        va=\"bottom\",\n    )\n    # Add model name on the bar\n    ax.text(\n        bar.get_x() + bar.get_width() / 2, 0, model, ha=\"center\", va=\"top\", rotation=90\n    )\n\n# Legend\nax.legend(legendtitle, loc=\"lower left\")\nax.set_xticks([])\nplt.tick_params(axis=\"x\", which=\"both\", length=0)\n# Labels and grid\nax.set_ylabel(ylabel)\nax.set_ylim(-2.00, 0.00)\n\nax.yaxis.grid(True)\nax.set_axisbelow(True)\n\n# Create patches for the legend\npatch1 = mpatches.Patch(color=\"#58a65d\", label=legendtitle[0])\npatch2 = mpatches.Patch(color=\"#f2bf42\", label=legendtitle[1])\n\n# Add legend\nax.legend(handles=[patch1, patch2], loc=\"lower left\", frameon=False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to match the original image's dimensions\nplt.tight_layout()\nplt.savefig('errorbar_1.pdf', bbox_inches='tight')"}
{"idx": "errorbar_2", "instruction": "There is a reference image for you and I also have a set of data about reviewer accuracy percentages across different review protocols. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\njudges = [\"Mona\", \"Lisa\", \"Charlie\", \"Alex\"]\nprotocols = [\n\"Screening\",\n\"Evaluation\",\n\"Consultation\",\n\"Interactive Review\",\n\"Discussion\",\n\"Interactive Discussion\",\n]\n\naccuracy_means = np.array(\n[\n[100, 72, 65, 78, 84, 90], # Mona\n[99, 75, 68, 81, 86, 93], # Lisa\n[98, 78, 70, 83, 88, 95], # Charlie\n[99, 80, 72, 85, 90, 98], # Alex\n]\n)\n\naccuracy_std = np.array(\n[\n[4, 4, 4, 4, 4, 4], # Mona\n[4, 4, 4, 4, 4, 4], # Lisa\n[4, 4, 4, 4, 4, 4], # Charlie\n[4, 4, 4, 4, 4, 4], # Alex\n]\n)\n\nlegendtitle = \"Review Protocol\"\nxlabel = \"Reviewer\"\nylabel = \"Reviewer Accuracy (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\njudges = [\"Mona\", \"Lisa\", \"Charlie\", \"Alex\"]\nprotocols = [\n    \"Screening\",\n    \"Evaluation\",\n    \"Consultation\",\n    \"Interactive Review\",\n    \"Discussion\",\n    \"Interactive Discussion\",\n]\n\naccuracy_means = np.array(\n    [\n        [100, 72, 65, 78, 84, 90],  # Mona\n        [99, 75, 68, 81, 86, 93],  # Lisa\n        [98, 78, 70, 83, 88, 95],  # Charlie\n        [99, 80, 72, 85, 90, 98],  # Alex\n    ]\n)\n\naccuracy_std = np.array(\n    [\n        [4, 4, 4, 4, 4, 4],  # Mona\n        [4, 4, 4, 4, 4, 4],  # Lisa\n        [4, 4, 4, 4, 4, 4],  # Charlie\n        [4, 4, 4, 4, 4, 4],  # Alex\n    ]\n)\n\nlegendtitle = \"Review Protocol\"\nxlabel = \"Reviewer\"\nylabel = \"Reviewer Accuracy (%)\"\nylim = [0, 110]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# colors\ncolors = [\n    \"white\",\n    \"#3171ad\",\n    \"#d39334\",\n    \"#469c76\",\n    \"#c76526\",\n    \"#c17cb9\",\n]  \n\n# Bar width\nbar_width = 0.15\nbar_width_screen = 0.75\n\n# Set position of bar on X axis\nr = np.arange(len(judges))\n\n# Draw bars for 'Screening' protocol\ni = 0\nax.bar(\n    r + (i + 3) * bar_width,\n    accuracy_means[:, i],\n    yerr=accuracy_std[:, i],\n    width=bar_width_screen,\n    label=protocols[i],\n    capsize=5,\n    color=colors[i],\n    hatch=\"//\",\n    edgecolor=\"black\",\n)\n\n# Draw bars for other protocols\nfor i in range(len(protocols)):\n    if protocols[i] == protocols[0]:\n        continue\n    ax.bar(\n        r + i * bar_width,\n        accuracy_means[:, i],\n        yerr=accuracy_std[:, i],\n        width=bar_width,\n        label=protocols[i],\n        capsize=5,\n        color=colors[i],\n        edgecolor=\"black\",\n    )\n\n# Add xticks on the middle of the group bars\nax.set_xlabel(xlabel)\nax.set_xticks(r + bar_width * (len(protocols) - 1) / 2)\nax.set_xticklabels(judges)\n\n# Create legend & Show graphic\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 1, 2, 4, 3, 5]  # Reordering the legend\nax.legend(\n    [handles[idx] for idx in order],\n    [labels[idx] for idx in order],\n    loc=\"upper center\",\n    bbox_to_anchor=(0.5, 1.15),\n    ncol=6,\n    title=legendtitle,\n)\nax.set_ylabel(ylabel)\nax.set_ylim(ylim)  # Adjust y-axis limit to accommodate error bars\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorbar_2.pdf', bbox_inches='tight')"}
{"idx": "errorbar_4", "instruction": "There is a reference image for you and I also have a set of data about airline flight times and passenger counts. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\nairlines = [\"Delta\", \"American\", \"United\", \"Southwest\", \"JetBlue\"]\nflight_time_means = [2.5, 3.2, 1.8, 2.0, 2.7]\nflight_time_errors = [0.5, 0.6, 0.4, 0.5, 0.3]\npassenger_count_means = [150.33, 180.67, 120.39, 145.99, 160.52]\npassenger_count_errors = [20, 25, 15, 20, 18]\n\nylabel1 = \"Flight Time (hours)\"\nxlabel1 = \"(a) Flight Time by Airline\"\nylabel2 = \"Number of Passengers\"\nxlabel2 = \"(b) Passenger Count by Airline\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nairlines = [\"Delta\", \"American\", \"United\", \"Southwest\", \"JetBlue\"]\nflight_time_means = [2.5, 3.2, 1.8, 2.0, 2.7]\nflight_time_errors = [0.5, 0.6, 0.4, 0.5, 0.3]\npassenger_count_means = [150.33, 180.67, 120.39, 145.99, 160.52]\npassenger_count_errors = [20, 25, 15, 20, 18]\n\nylabel1 = \"Flight Time (hours)\"\nxlabel1 = \"(a) Flight Time by Airline\"\nylabel2 = \"Number of Passengers\"\nxlabel2 = \"(b) Passenger Count by Airline\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(\n    1, 2, figsize=(10, 4)\n)  # Adjusted for the given dimensions\ncolors = [\"#acd9bb\", \"#83c3c7\", \"#5da2c7\", \"#3a77b0\", \"#224e8d\"]\n\n# Speak duration of airlines\nax1.bar(airlines, flight_time_means, yerr=flight_time_errors, color=colors, capsize=5)\nax1.set_ylabel(ylabel1)\nax1.set_xlabel(xlabel1)\nfor i, v in enumerate(flight_time_means):\n    ax1.text(i, v + flight_time_errors[i] + 0.05, str(v), ha=\"center\", va=\"bottom\")\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.yaxis.grid(True)\nax1.set_axisbelow(True)\n\n# Speak tokens of airlines\nax2.bar(airlines, passenger_count_means, yerr=passenger_count_errors, color=colors, capsize=5)\nax2.set_ylabel(ylabel2)\nax2.set_xlabel(xlabel2)\nfor i, v in enumerate(passenger_count_means):\n    ax2.text(i, v + passenger_count_errors[i] + 0.5, str(v), ha=\"center\", va=\"bottom\")\n\nax2.spines[\"top\"].set_visible(False)\nax2.spines[\"right\"].set_visible(False)\nax2.yaxis.grid(True)\nax2.set_axisbelow(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('errorbar_4.pdf', bbox_inches='tight')"}
{"idx": "errorbar_5", "instruction": "There is a reference image for you and I also have a set of data about success rates across different data collection periods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nsizes = [\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\", \"Q6\"]\nsamples = [\n\"(45 samples)\",\n\"(90 samples)\",\n\"(135 samples)\",\n\"(180 samples)\",\n\"(225 samples)\",\n\"(270 samples)\",\n]\nx = range(len(sizes))\ny = [29.35, 27.45, 24.67, 26.54, 27.98, 28.76]\nerrors = [2.1, 1.9, 2.0, 1.8, 1.7, 1.5]\nylabel = \"Success Rate (%)\"\nxlabel = \"Data Collection Period\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nsizes = [\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\", \"Q6\"]\nsamples = [\n    \"(45 samples)\",\n    \"(90 samples)\",\n    \"(135 samples)\",\n    \"(180 samples)\",\n    \"(225 samples)\",\n    \"(270 samples)\",\n]\nx = range(len(sizes))\ny = [29.35, 27.45, 24.67, 26.54, 27.98, 28.76]\nerrors = [2.1, 1.9, 2.0, 1.8, 1.7, 1.5]\nylabel = \"Success Rate (%)\"\nxlabel = \"Data Collection Period\"\nylim = [20, 32]\nyticks = [20, 22, 24, 26, 28, 30]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the bar chart\nplt.figure(\n    figsize=(10, 7)\n)  # Adjusting figure size to match original image's dimensions\nbars = plt.bar(x, y, yerr=errors, color=\"skyblue\", capsize=5)\n\n# Adding data labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(\n        bar.get_x() + bar.get_width() / 2,\n        yval + 0.5,\n        round(yval, 2),\n        ha=\"right\",\n        va=\"bottom\",\n    )\n\n# Setting the x-axis labels with both percentages and sample sizes\nplt.xticks(x, [f\"{size}\\n{sample}\" for size, sample in zip(sizes, samples)])\n\n# Setting the y-axis label\nplt.ylabel(ylabel)\n\n# Setting the title of the chart\nplt.xlabel(xlabel)\n\n# Adjusting y-axis range\nplt.ylim(ylim)\nplt.yticks(yticks)\n# Adding grid to the background\nplt.grid(axis=\"both\", alpha=0.7, which=\"both\", color=\"gray\")\n\n# Making the axis lines visible\nplt.gca().spines[\"top\"].set_visible(True)\nplt.gca().spines[\"right\"].set_visible(True)\nplt.gca().spines[\"bottom\"].set_visible(True)\nplt.gca().spines[\"left\"].set_visible(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('errorbar_5.pdf', bbox_inches='tight')"}
{"idx": "errorbar_6", "instruction": "There is a reference image for you and I also have a set of data about hypertension study groups and their respective accuracies and variances. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for the left plot (Out-of-domain accuracy)\nleft_categories = [\n\"baseline\",\n\"adolescents\",\n\"young_adults\",\n\"middle_aged\",\n\"seniors\",\n\"elderly\",\n\"urban_area\",\n\"suburban_area\",\n\"rural_area\",\n\"coastal_area\",\n]\nleft_means = [0.912, 0.908, 0.910, 0.909, 0.910, 0.909, 0.908, 0.907, 0.906, 0.906]\nleft_errors = [0.003] * 10\n\n# Data for the right plot (Performance Variance)\nright_categories = [\n\"baseline\",\n\"adolescents\",\n\"young_adults\",\n\"middle_aged\",\n\"seniors\",\n\"elderly\",\n\"urban_area\",\n\"suburban_area\",\n\"rural_area\",\n\"coastal_area\",\n]\nright_means = [0.050, 0.045, 0.046, 0.046, 0.046, 0.048, 0.047, 0.049, 0.046, 0.045]\nright_errors = [0.007] * 10\n\ntitle1 = \"In-domain Accuracy\"\ntitle2 = \"Performance Variance\"\nsuptitle = \"Hypertension Study\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the left plot (Out-of-domain accuracy)\nleft_categories = [\n    \"baseline\",\n    \"adolescents\",\n    \"young_adults\",\n    \"middle_aged\",\n    \"seniors\",\n    \"elderly\",\n    \"urban_area\",\n    \"suburban_area\",\n    \"rural_area\",\n    \"coastal_area\",\n]\nleft_means = [0.912, 0.908, 0.910, 0.909, 0.910, 0.909, 0.908, 0.907, 0.906, 0.906]\nleft_errors = [0.003] * 10\n\n# Data for the right plot (Performance Variance)\nright_categories = [\n    \"baseline\",\n    \"adolescents\",\n    \"young_adults\",\n    \"middle_aged\",\n    \"seniors\",\n    \"elderly\",\n    \"urban_area\",\n    \"suburban_area\",\n    \"rural_area\",\n    \"coastal_area\",\n]\nright_means = [0.050, 0.045, 0.046, 0.046, 0.046, 0.048, 0.047, 0.049, 0.046, 0.045]\nright_errors = [0.007] * 10\n\ntitle1 = \"In-domain Accuracy\"\nylim1 = [0.900, 0.915]\nyticks1 = np.arange(0.900, 0.916, 0.003)\ntitle2 = \"Performance Variance\"\nylim2 = [0, 0.060]\nsuptitle = \"Hypertension Study\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Left plot\nax1.bar(\n    left_categories,\n    left_means,\n    yerr=left_errors,\n    color=[\"#c53a32\"] + [\"#9ab6bd\"] + [\"#678c95\"] * 7 + [\"#454545\"],\n    capsize=5,\n    error_kw=dict(ecolor=\"black\", lw=1, capsize=5, capthick=2),\n)\nax1.set_title(title1)\nax1.set_ylim(ylim1)\nax1.set_yticks(yticks1)\nax1.set_xticklabels(left_categories, rotation=90, ha=\"center\")\nax1.tick_params(axis=\"both\", length=0)  # Hide tick marks\nax1.grid(True)\nax1.set_axisbelow(True)\nfor spine in ax1.spines.values():\n    spine.set_color(\"gray\")\n\n# Right plot\nax2.bar(\n    right_categories,\n    right_means,\n    yerr=right_errors,\n    color=[\"#c53a32\"] + [\"#9ab6bd\"] + [\"#678c95\"] * 7 + [\"#454545\"],\n    capsize=5,\n    error_kw=dict(ecolor=\"black\", lw=1, capsize=5, capthick=2),\n)\nax2.set_title(title2)\nax2.set_ylim(ylim2)\nax2.set_xticklabels(right_categories, rotation=90, ha=\"center\")\nax2.tick_params(axis=\"both\", length=0)  # Hide tick marks\nax2.grid(True)\nax2.set_axisbelow(True)\n\n# Set the title for the entire figure\nfig.suptitle(suptitle)\n\nfor spine in ax2.spines.values():\n    spine.set_color(\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('errorbar_6.pdf', bbox_inches='tight')"}
{"idx": "errorbar_7", "instruction": "There is a reference image for you and I also have a set of data about machine translation performance. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\ncategories = [\n\"Early Training\",\n\"Midpoint Training\",\n\"75% Training\",\n\"Final Model\\nGPT-3.5-Turbo\",\n\"Final Model\\nGPT-4-Turbo\",\n]\nvalues = [0.60, 0.45, 0.40, 0.55, 0.70]\nerrors = [0.05, 0.04, 0.04, 0.03, 0.02]\nxlabel = \"Accuracy Score\"\ntitle = \"Machine Translation Performance\"\nlabel = \"Threshold (0.675)\"\nxvline = 0.675\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ncategories = [\n    \"Early Training\",\n    \"Midpoint Training\",\n    \"75% Training\",\n    \"Final Model\\nGPT-3.5-Turbo\",\n    \"Final Model\\nGPT-4-Turbo\",\n]\nvalues = [0.60, 0.45, 0.40, 0.55, 0.70]\nerrors = [0.05, 0.04, 0.04, 0.03, 0.02]\nxlabel = \"Accuracy Score\"\ntitle = \"Machine Translation Performance\"\nlabel = \"Threshold (0.675)\"\nxvline = 0.675\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the bar chart\nplt.figure(\n    figsize=(10, 6)\n)  # Adjusting figure size to match the original image's dimensions\nplt.barh(categories, values, xerr=errors, color=\"skyblue\", capsize=5)\nplt.xlabel(xlabel)\nplt.title(title)\nplt.gca().tick_params(axis=\"both\", length=0)  # Hide tick marks\n\n# Adding the vertical line\nplt.axvline(x=xvline,color=\"red\", linestyle=\"--\", label=label)\nplt.gca().grid(\"both\", color=\"gray\", alpha=0.7)\n\n# Adding the legend\nplt.legend()\n\nfor spine in plt.gca().spines.values():\n    spine.set_color(\"gray\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting the layout and saving the figure\nplt.tight_layout()\nplt.savefig('errorbar_7.pdf', bbox_inches='tight')"}
{"idx": "errorbar_8", "instruction": "There is a reference image for you and I also have a set of data about fuel efficiency of various car models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data (estimated from the image)\nmodels = [\n\"Tesla Model S\",\n\"Ford F-150\",\n\"Toyota Corolla\",\n\"Chevrolet Silverado\",\n\"Honda Civic\",\n\"BMW 3 Series\",\n\"Audi A4\",\n\"Mercedes-Benz C-Class\",\n\"Volkswagen Golf\",\n]\nground_truth_fuel_efficiency = [120, 95, 110, 80, 105, 85, 115, 90, 100]\nestimated_fuel_efficiency = [115, 90, 105, 75, 100, 80, 110, 85, 95]\nerror = [5, 7, 5, 8, 5, 7, 5, 8, 5]\nlabels=[\"Ground-truth fuel efficiency\", \"Estimated fuel efficiency\"]\nylabel=\"Fuel Efficiency (MPGe)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data (estimated from the image)\nmodels = [\n    \"Tesla Model S\",\n    \"Ford F-150\",\n    \"Toyota Corolla\",\n    \"Chevrolet Silverado\",\n    \"Honda Civic\",\n    \"BMW 3 Series\",\n    \"Audi A4\",\n    \"Mercedes-Benz C-Class\",\n    \"Volkswagen Golf\",\n]\nground_truth_fuel_efficiency = [120, 95, 110, 80, 105, 85, 115, 90, 100]\nestimated_fuel_efficiency = [115, 90, 105, 75, 100, 80, 110, 85, 95]\nerror = [5, 7, 5, 8, 5, 7, 5, 8, 5]\nlabels=[\"Ground-truth fuel efficiency\", \"Estimated fuel efficiency\"]\nylabel=\"Fuel Efficiency (MPGe)\"\nylim=[0, 130]\nyticks=np.arange(0, 131, 10)\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig = plt.subplots(figsize=(10, 3))\n# Bar width\nbar_width = 0.35\n\n# X position of bars\nr1 = np.arange(len(ground_truth_fuel_efficiency))\nr2 = [x + bar_width for x in r1]\n\n# Create bars\nplt.bar(\n    r1,\n    ground_truth_fuel_efficiency,\n    color=\"#d47e6d\",\n    width=bar_width,\n    label=labels[0],\n    yerr=error,\n    capsize=7,\n)\nplt.bar(\n    r2,\n    estimated_fuel_efficiency,\n    color=\"#76a4c5\",\n    width=bar_width,\n    label=labels[1],\n    yerr=error,\n    capsize=7,\n)\n\n# Add xticks on the middle of the group bars\nplt.xticks([r + bar_width / 2 for r in range(len(ground_truth_fuel_efficiency))], models)\n\n# Create legend & Show graphic\nplt.ylabel(ylabel)\nplt.legend(frameon=False, loc=\"upper right\")  # Remove legend background\n\n# Set background color and grid\nplt.gca().set_facecolor(\"#e5e5e5\")\nplt.grid(color=\"white\", linestyle=\"-\", linewidth=0.25, axis=\"both\")\nplt.gca().set_axisbelow(True)\n\n# Set y-axis limits\nplt.ylim(ylim)\nplt.yticks(yticks)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorbar_8.pdf', bbox_inches='tight')"}
{"idx": "errorbar_9", "instruction": "There is a reference image for you and I also have a set of data about average winter temperatures of major cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Categories and values (estimated from the image)\ncategories = [\n\"Cloud Computing\",\n\"Edge Computing\",\n\"Quantum Computing\",\n\"AI and Machine Learning\",\n\"Blockchain Technology\",\n\"Cybersecurity\",\n\"Internet of Things (IoT)\",\n][::-1]\nvalues = [-72, -68, -65, -63, -60, -58, -55][::-1]\nerror = [3, 2.5, 2, 1.5, 1, 0.75, 0.5]\nxlabel = \"Average Temperature (\u00ac\u221eF)\"\nylabel = \"Cities\"\ntitle = \"Average Winter Temperatures of Major Cities\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Categories and values (estimated from the image)\ncategories = [\n    \"Cloud Computing\",\n    \"Edge Computing\",\n    \"Quantum Computing\",\n    \"AI and Machine Learning\",\n    \"Blockchain Technology\",\n    \"Cybersecurity\",\n    \"Internet of Things (IoT)\",\n][::-1]\nvalues = [-72, -68, -65, -63, -60, -58, -55][::-1]\nerror = [3, 2.5, 2, 1.5, 1, 0.75, 0.5]\nxlabel = \"Average Temperature (\u00b0F)\"\nylabel = \"Cities\"\ntitle = \"Average Winter Temperatures of Major Cities\"\nxlim = [-75,-50]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart\nfig, ax = plt.subplots(figsize=(8, 8))  # Adjust figure size\nbars = ax.barh(\n    categories,\n    values,\n    color=\"#c5b3d6\",\n    edgecolor=\"white\",\n    height=0.5,\n    xerr=error,\n    capsize=0,\n)\n\n# Set labels and title (if any)\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\nax.set_title(title)\n\n# Invert y-axis to match the image\nax.invert_yaxis()\n\n# Set x-axis range to match the reference image\nax.set_xlim(xlim)\n\n# Remove grid lines\nax.xaxis.grid(False)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\n# Set background color to white\nax.set_facecolor(\"white\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('errorbar_9.pdf', bbox_inches='tight')"}
{"idx": "errorbar_11", "instruction": "There is a reference image for you and I also have a set of data about school test scores. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nschools = [\"Greenwood High\", \"Riverside Academy\", \"Maple Leaf School\"]\npre_test_scores = [65, 78, 72]\npost_test_scores = [75, 83, 79]\nimprovement_program = [80, 82, 82]\nerror_margins = [3, 2, 4]\n\n# Bar positions\nx = np.arange(len(schools))\nwidth = 0.25\nlabels = [\"Pre-Test\", \"Post-Test\", \"Improvement Program\"]\nylabel = \"Scores\"\ntitle = \"Scores by school and method\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nschools = [\"Greenwood High\", \"Riverside Academy\", \"Maple Leaf School\"]\npre_test_scores = [65, 78, 72]\npost_test_scores = [75, 83, 79]\nimprovement_program = [80, 82, 82]\nerror_margins = [3, 2, 4]\n\n# Bar positions\nx = np.arange(len(schools))\nwidth = 0.25\nlabels = [\"Pre-Test\", \"Post-Test\", \"Improvement Program\"]\nylabel = \"Scores\"\ntitle = \"Scores by school and method\"\nylim = [60, 90]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(figsize=(8, 5))\nbars1 = ax.bar(\n    x - width,\n    pre_test_scores,\n    width,\n    label=labels[0],\n    color=\"lightskyblue\",\n    hatch=\"\\\\\",\n    yerr=error_margins,\n    capsize=5,\n    error_kw=dict(ecolor=\"black\"),\n)\nbars2 = ax.bar(\n    x,\n    post_test_scores,\n    width,\n    label=labels[1],\n    color=\"lightsalmon\",\n    hatch=\"//\",\n    yerr=error_margins,\n    capsize=5,\n    error_kw=dict(ecolor=\"black\"),\n)\nbars3 = ax.bar(\n    x + width,\n    improvement_program,\n    width,\n    label=labels[2],\n    color=\"palegreen\",\n    hatch=\"o\",\n    yerr=error_margins,\n    capsize=5,\n    error_kw=dict(ecolor=\"black\"),\n)\n\n# Adding text for labels, title, and custom x-axis tick labels\nax.set_ylabel(ylabel)\nax.set_title(title)\nax.set_xticks(x)\nax.set_xticklabels(schools)\nax.set_ylim(ylim)  # Adjust y-axis scale to match reference picture\nax.legend(loc=\"upper center\", ncol=3)  # Move legend to match reference picture\n\n\n# Adding the data labels on the bars\ndef add_labels(bars):\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(\n            \"{}\".format(round(height, 3)),\n            xy=(\n                bar.get_x() + bar.get_width() / 2,\n                height + error_margins[bars.index(bar)],\n            ),  # Adjust label position to be above error bars\n            xytext=(0, 3),  # 3 points vertical offset\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"bottom\",\n        )\n\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('errorbar_11.pdf', bbox_inches='tight')"}
{"idx": "errorbar_12", "instruction": "There is a reference image for you and I also have a set of data about car manufacturing losses. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data (estimated from the image)\nmeans = [np.random.uniform(-50000, -1000, 3) for m in range(4)]\nerrors = [np.random.randint(1000, 5000, 3) for n in range(4)]\n\n# Labels\nlabels = [\"Tesla\", \"Ford\", \"Chevrolet\", \"BMW\"]\nx = np.arange(len(labels) - 1) # Adjusted to have 3 bars instead of 4\n\nlabel_s = [\n[\"Ford\", \"Chevrolet\", \"BMW\"],\n[\"Tesla\", \"Chevrolet\", \"BMW\"],\n[\"Tesla\", \"Ford\", \"Chevrolet\"],\n[\"Tesla\", \"Ford\", \"BMW\"],\n]\ntitle = \"Losses in Car Manufacturing (valuation 60)\"\nxlabel = \"Manufacturer (valuation 40)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data (estimated from the image)\nmeans = [np.random.uniform(-50000, -1000, 3) for m in range(4)]\nerrors = [np.random.randint(1000, 5000, 3) for n in range(4)]\n\n# Labels\nlabels = [\"Tesla\", \"Ford\", \"Chevrolet\", \"BMW\"]\nx = np.arange(len(labels) - 1)  # Adjusted to have 3 bars instead of 4\n\nlabel_s = [\n    [\"Ford\", \"Chevrolet\", \"BMW\"],\n    [\"Tesla\", \"Chevrolet\", \"BMW\"],\n    [\"Tesla\", \"Ford\", \"Chevrolet\"],\n    [\"Tesla\", \"Ford\", \"BMW\"],\n]\ntitle = \"Losses in Car Manufacturing (valuation 60)\"\nxlabel = \"Manufacturer (valuation 40)\"\nylim = [-50000, 0]\nyticks = [-50000, -25000, 0]\n\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, axs = plt.subplots(\n    2, 2, figsize=(8, 5)\n)  # Adjusted to match the original image's dimensions\n# Define colors for each bar\ncolors = [\n    [\"sandybrown\", \"lightseagreen\", \"indianred\"],\n    [\"dodgerblue\", \"lightseagreen\", \"indianred\"],\n    [\"dodgerblue\", \"sandybrown\", \"lightseagreen\"],\n    [\"dodgerblue\", \"sandybrown\", \"indianred\"],\n]\n\n# Loop through each subplot to set properties\nfor i, ax in enumerate(axs.flat):\n    ax.bar(\n        x,\n        means[i],\n        yerr=errors[i],\n        color=colors[i],\n        edgecolor=\"white\",\n        label=label_s[i],\n    )\n    ax.set_xlabel(f\"{labels[i]} {xlabel}\")\n    ax.set_xticks([])\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n    ax.set_ylim(ylim)\n    ax.set_yticks(yticks)\n    ax.set_facecolor(\"#eaeaf2\")\n    ax.yaxis.grid(color=\"white\", linestyle=\"-\", linewidth=1)\n    ax.set_axisbelow(True)\n    ax.tick_params(axis=\"both\", length=0)\n\nfig.legend(\n    labels,\n    loc=\"lower center\",\n    ncol=4,\n    bbox_to_anchor=(0.5, -0.1),\n    title=title,\n    facecolor=\"#eaeaf2\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n# Legend\nplt.savefig('errorbar_12.pdf', bbox_inches='tight')"}
{"idx": "errorbar_13", "instruction": "There is a reference image for you and I also have a set of data about **Transformer model performance metrics across different configurations**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\n\"Transformer \\n(k=1)\",\n\"Transformer \\nblue\\n(k=2)\",\n\"Transformer \\n(k=1)\",\n\"Transformer blue\\n (k=1)\",\n][::-1]\nsubcategories = [\"[s]\", \"[\u0152\u00eeT]\", \"[${\u0152\u00eeT^{-1}}$]\", \"[none]\"][::-1]\nvalues = [\n[0.75, 0.74, 0.73, 0.69],\n[0.75, 0.74, 0.735, 0.69],\n[0.73, 0.72, 0.71, 0.67],\n[0.72, 0.71, 0.7, 0.66],\n]\nerrors = [\n[0.03, 0.02, 0.02, 0.015],\n[0.03, 0.02, 0.03, 0.015],\n[0.02, 0.05, 0.04, 0.02],\n[0.02, 0.02, 0.02, 0.018],\n]\npercentages = [\n\"+9.0%\",\n\"+7.8%\",\n\"+7.5%\",\n\" \",\n\"+7.5%\",\n\"+5.5%\",\n\"+5.0%\",\n\" \",\n\"+10.0%\",\n\"+8.0%\",\n\"+7.5%\",\n\" \",\n\"+9.0%\",\n\"+7.5%\",\n\"+7.0%\",\n\" \",\n][::-1]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\n    \"Transformer \\n(k=1)\",\n    \"Transformer \\nblue\\n(k=2)\",\n    \"Transformer \\n(k=1)\",\n    \"Transformer blue\\n (k=1)\",\n][::-1]\nsubcategories = [\"[s]\", \"[\u0394T]\", \"[${\u0394T^{-1}}$]\", \"[none]\"][::-1]\nvalues = [\n    [0.75, 0.74, 0.73, 0.69],\n    [0.75, 0.74, 0.735, 0.69],\n    [0.73, 0.72, 0.71, 0.67],\n    [0.72, 0.71, 0.7, 0.66],\n]\nerrors = [\n    [0.03, 0.02, 0.02, 0.015],\n    [0.03, 0.02, 0.03, 0.015],\n    [0.02, 0.05, 0.04, 0.02],\n    [0.02, 0.02, 0.02, 0.018],\n]\npercentages = [\n    \"+9.0%\",\n    \"+7.8%\",\n    \"+7.5%\",\n    \" \",\n    \"+7.5%\",\n    \"+5.5%\",\n    \"+5.0%\",\n    \" \",\n    \"+10.0%\",\n    \"+8.0%\",\n    \"+7.5%\",\n    \" \",\n    \"+9.0%\",\n    \"+7.5%\",\n    \"+7.0%\",\n    \" \",\n][::-1]\nxlim = [0.60, 0.8]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, axes = plt.subplots(4, 1, figsize=(8, 8), sharex=True)\n\nfor i, ax in enumerate(axes):\n    ax.barh(subcategories, values[i][::-1], xerr=errors[i], color=\"gray\", capsize=5)\n    ax.set_yticklabels(subcategories)\n    ax.set_xlim(xlim)\n    ax.set_ylabel(categories[i])\n    for j, v in enumerate(values[i][::-1]):\n        ax.text(\n            v + errors[i][j] + 0.01,\n            j,\n            percentages[i * 4 + j],\n            color=\"black\",\n            va=\"center\",\n        )\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save\nplt.tight_layout()\nplt.savefig('errorbar_13.pdf', bbox_inches='tight')"}
{"idx": "errorbar_15", "instruction": "There is a reference image for you and I also have a set of data about different categories and their assessment scores in various methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\ncategories = [\"Renewable\", \"AI Systems\", \"Healthcare\"]\nmethods = [\"EnvImpact\", \"ModelAccuracy\", \"ServiceQuality\", \"TechInnovation\"]\nperformance = np.array([[65, 75, 85, 75], [85, 75, 80, 85], [75, 85, 80, 85]])\nerrors = np.array([[8, 9, 5, 5], [5, 9, 4, 3], [8, 3, 4, 3]])\nylabel = \"Assessment Score\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Renewable\", \"AI Systems\", \"Healthcare\"]\nmethods = [\"EnvImpact\", \"ModelAccuracy\", \"ServiceQuality\", \"TechInnovation\"]\nperformance = np.array([[65, 75, 85, 75], [85, 75, 80, 85], [75, 85, 80, 85]])\nerrors = np.array([[8, 9, 5, 5], [5, 9, 4, 3], [8, 3, 4, 3]])\nylim = [50, 95]\nylabel = \"Assessment Score\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure size 720x216 pixels\nfig, axes = plt.subplots(1, 3, figsize=(10, 3))\n# Colors\ncolors = [\"#d66929\", \"#f7cc46\", \"blue\", \"darkblue\"]\n\n# Bar width\nbar_width = 1\n\n# Plotting bars\nfor i, ax in enumerate(axes):\n    for j, method in enumerate(methods):\n        ax.bar(\n            j + bar_width * i,\n            performance[i, j],\n            width=bar_width,\n            color=colors[j],\n            yerr=errors[i, j],\n            capsize=5,\n            label=method if i == 0 else \"\",\n        )\n\n# Setting x-axis labels, y-axis limits, and titles\nfor i, ax in enumerate(axes):\n    ax.set_xticks([])\n    # ax.set_xticklabels(methods)\n    ax.set_ylim(ylim)\n    ax.set_xlabel(f\"({chr(97+i)}) {categories[i]}\")\n    ax.set_ylabel(ylabel)\n    ax.yaxis.grid(True)\n    ax.set_axisbelow(True)\n\n# Adding legend outside of the plot\nfig.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.1), ncol=len(methods))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout and saving the figure\nplt.tight_layout()\nplt.savefig('errorbar_15.pdf', bbox_inches='tight')"}
{"idx": "errorbar_16", "instruction": "There is a reference image for you and I also have a set of data about business growth metrics across different categories and periods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data (replace with actual values)\ngroups = [\n\"Small Biz / 2022 / Q1\",\n\"Small Biz / 2022 / Q2\",\n\"Small Biz / 2023 / Q1\",\n\"Small Biz / 2023 / Q2\",\n\"Tech Startup / 2022 / Q1\",\n\"Tech Startup / 2022 / Q2\",\n\"Tech Startup / 2023 / Q1\",\n\"Tech Startup / 2023 / Q2\",\n\"Enterprise / 2022 / Q1\",\n\"Enterprise / 2022 / Q2\",\n\"Enterprise / 2023 / Q1\",\n\"Enterprise / 2023 / Q2\",\n\"Retail / 2022 / Q1\",\n\"Retail / 2022 / Q2\"\n]\nsolid_bar_values = np.random.rand(14) * 0.5\nstriped_bar_values = np.random.rand(14) * 0.5\nerror = np.random.rand(14) * 0.1 + 0.02\nlabels = [\"Solid\", \"Striped\"]\nxlabel = \"Growth Metric\"\nylabel = \"Business Categories and Periods\"\ntitle = \"Business Growth Analysis\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual values)\ngroups = [\n    \"Small Biz / 2022 / Q1\",\n    \"Small Biz / 2022 / Q2\",\n    \"Small Biz / 2023 / Q1\",\n    \"Small Biz / 2023 / Q2\",\n    \"Tech Startup / 2022 / Q1\",\n    \"Tech Startup / 2022 / Q2\",\n    \"Tech Startup / 2023 / Q1\",\n    \"Tech Startup / 2023 / Q2\",\n    \"Enterprise / 2022 / Q1\",\n    \"Enterprise / 2022 / Q2\",\n    \"Enterprise / 2023 / Q1\",\n    \"Enterprise / 2023 / Q2\",\n    \"Retail / 2022 / Q1\",\n    \"Retail / 2022 / Q2\"\n]\nsolid_bar_values = np.random.rand(14) * 0.5\nstriped_bar_values = np.random.rand(14) * 0.5\nerror = np.random.rand(14) * 0.1 + 0.02\nlabels = [\"Solid\", \"Striped\"]\nxlabel = \"Growth Metric\"\nylabel = \"Business Categories and Periods\"\ntitle = \"Business Growth Analysis\"\nxlim = [0, 1.1]\nylim = [-0.4, 13.4]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nplt.figure(figsize=(8, 8))\n\n# Create grouped bar chart with error bars\nbar_width = 0.8\nindex = np.arange(len(groups))\nplt.barh(\n    index,\n    solid_bar_values,\n    bar_width,\n    color=\"#bdbad7\",\n    xerr=error,\n    label=labels[0],\n    capsize=3,\n    edgecolor=\"black\",\n)\nplt.barh(\n    index,\n    striped_bar_values,\n    bar_width,\n    left=solid_bar_values,\n    color=\"#f5cfe4\",\n    xerr=error,\n    label=labels[1],\n    capsize=3,\n    edgecolor=\"black\",\n)\n\n# Add labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\nplt.yticks(index, groups, rotation=0)\nplt.gca().set_xlim(xlim)\nplt.gca().set_ylim(ylim)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('errorbar_16.pdf', bbox_inches='tight')"}
{"idx": "errorbar_17", "instruction": "There is a reference image for you and I also have a set of data about internet penetration rates and mobile device ownership ratios across different countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\ncategories = [\"Canada\", \"France\", \"China\", \"Australia\", \"South Korea\"]\n\nvalues = [0.75, 0.68, 0.55, 0.45, 0.60]\nerrors = [0.04, 0.03, 0.04, 0.05, 0.03]\n\ncategories2 = [\"Canada\", \"France\", \"China\", \"Australia\", \"South Korea\"]\nvalues2 = [18, 17, 30, 22, 14]\nerrors2 = [1.2, 0.6, 1.8, 1.4, 0.7]\n\ntitles = [\"Internet Penetration Rate\", \"Mobile Device Ownership Ratio\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\ncategories = [\"Canada\", \"France\", \"China\", \"Australia\", \"South Korea\"]\n\nvalues = [0.75, 0.68, 0.55, 0.45, 0.60]\nerrors = [0.04, 0.03, 0.04, 0.05, 0.03]\n\ncategories2 = [\"Canada\", \"France\", \"China\", \"Australia\", \"South Korea\"]\nvalues2 = [18, 17, 30, 22, 14]\nerrors2 = [1.2, 0.6, 1.8, 1.4, 0.7]\n\ntitles = [\"Internet Penetration Rate\", \"Mobile Device Ownership Ratio\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\ncolors = plt.get_cmap(\"Set3\")(np.linspace(0.2, 0.8, 5))\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 6))\nax1.barh(categories, values, xerr=errors, color=colors, capsize=3)\nax2.barh(categories2, values2, xerr=errors2, color=colors, capsize=3)\n\nax1.set_title(titles[0])\nax2.set_title(titles[1])\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorbar_17.pdf', bbox_inches='tight')"}
{"idx": "errorbar_18", "instruction": "There is a reference image for you and I also have a set of data about environmental factors affecting transportation safety. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Regions for environmental data\nregions = [\"North\", \"East\", \"West\", \"South\", \"Central\"]\n\n# Annual Traffic Accident Rates (hypothetical data)\naccident_rates = [2300, 1500, 2800, 1900, 1700] # Approximate values\naccident_rates_errors = [200, 180, 250, 210, 190] # Error estimates\n\n# Public Transport Usage Rate (% of population using public transport)\ntransport_usage = [45, 30, 55, 40, 35] # Approximate percentages\ntransport_usage_errors = [5, 4, 6, 5, 4] # Error estimates\n\n# Bicycle Lane Coverage (% of total road length)\nbicycle_lane_coverage = [12, 20, 15, 10, 18] # Approximate percentages\nbicycle_lane_coverage_errors = [2, 3, 2, 1, 2] # Error estimates\n\ntitles =[\"Annual Traffic Accident Rates\",\"Public Transport Usage Rate\",\"Bicycle Lane Coverage\"]\nxlabels=[\"Number of Accidents\",\"% of Population\",\"% of Road Length\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 9.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Regions for environmental data\nregions = [\"North\", \"East\", \"West\", \"South\", \"Central\"]\n\n# Annual Traffic Accident Rates (hypothetical data)\naccident_rates = [2300, 1500, 2800, 1900, 1700]  # Approximate values\naccident_rates_errors = [200, 180, 250, 210, 190]  # Error estimates\n\n# Public Transport Usage Rate (% of population using public transport)\ntransport_usage = [45, 30, 55, 40, 35]  # Approximate percentages\ntransport_usage_errors = [5, 4, 6, 5, 4]  # Error estimates\n\n# Bicycle Lane Coverage (% of total road length)\nbicycle_lane_coverage = [12, 20, 15, 10, 18]  # Approximate percentages\nbicycle_lane_coverage_errors = [2, 3, 2, 1, 2]  # Error estimates\n\ntitles =[\"Annual Traffic Accident Rates\",\"Public Transport Usage Rate\",\"Bicycle Lane Coverage\"]\nxlabels=[\"Number of Accidents\",\"% of Population\",\"% of Road Length\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a subplot for each category\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(6, 9))\n# Colors for bars, each plot can have its own color map or shared\ncolors = plt.get_cmap(\"Pastel2\")(np.linspace(0.2, 0.8, 5))\n\n\ndef add_bars_with_annotations(ax, data, errors, colors):\n    bars = ax.barh(regions, data, xerr=errors, color=colors, capsize=0)\n    for i, bar in enumerate(bars):\n        width = bar.get_width()\n        label_x_pos = bar.get_width() + errors[i] * 0.2\n        ax.text(\n            label_x_pos, bar.get_y() + bar.get_height() / 2, f\"{width}\", va=\"bottom\"\n        )\n\n\n# Plot Carbon Dioxide Emissions on the first subplot\nax1.barh(\n    regions,\n    accident_rates,\n    xerr=accident_rates_errors,\n    edgecolor=\"black\",\n    color=colors,\n    capsize=0,\n)\nadd_bars_with_annotations(ax1, accident_rates, accident_rates_errors, colors)\nax1.set_title(titles[0])\nax1.set_xlabel(xlabels[0])\nax1.xaxis.grid(True, linestyle=\"--\")\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\n\n# Plot Forest Coverage Rate on the second subplot\nax2.barh(\n    regions,\n    transport_usage,\n    xerr=transport_usage_errors,\n    edgecolor=\"black\",\n    color=colors,\n    capsize=0,\n)\nadd_bars_with_annotations(ax2, transport_usage, transport_usage_errors, colors)\nax2.set_title(titles[1])\nax2.set_xlabel(xlabels[1])\nax2.xaxis.grid(True, linestyle=\"--\")\nax2.spines[\"right\"].set_visible(False)\nax2.spines[\"top\"].set_visible(False)\n\n# Plot Renewable Energy Usage on the third subplot\nax3.barh(\n    regions,\n    bicycle_lane_coverage,\n    xerr=bicycle_lane_coverage_errors,\n    edgecolor=\"black\",\n    color=colors,\n    capsize=0,\n)\nadd_bars_with_annotations(ax3, bicycle_lane_coverage, bicycle_lane_coverage_errors, colors)\nax3.set_title(titles[2])\nax3.set_xlabel(xlabels[2])\nax3.xaxis.grid(True, linestyle=\"--\")\nax3.spines[\"right\"].set_visible(False)\nax3.spines[\"top\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('errorbar_18.pdf', bbox_inches='tight')"}
{"idx": "errorbar_19", "instruction": "There is a reference image for you and I also have a set of data about social statistics for three different cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data representing social statistics for three different cities\ncategories = [\"Manufacturing\", \"Technology\", \"Healthcare\"]\nmetrics = [\n\"Innovation Index\",\n\"Employee Satisfaction\",\n\"Market Share Growth\",\n\"Environmental Impact\",\n]\nperformance = np.array(\n[\n[65, 85, 75, 50], \n[70, 90, 80, 60], \n[60, 75, 85, 55], \n]\n)\nerrors = np.array(\n[\n[4, 5, 6, 5], \n[5, 6, 7, 6], \n[6, 7, 5, 6], \n]\n)\nylabel = \"Index/Percentage\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 9.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data representing social statistics for three different cities\ncategories = [\"Manufacturing\", \"Technology\", \"Healthcare\"]\nmetrics = [\n    \"Innovation Index\",\n    \"Employee Satisfaction\",\n    \"Market Share Growth\",\n    \"Environmental Impact\",\n]\nperformance = np.array(\n    [\n        [65, 85, 75, 50], \n        [70, 90, 80, 60], \n        [60, 75, 85, 55],  \n    ]\n)\nerrors = np.array(\n    [\n        [4, 5, 6, 5], \n        [5, 6, 7, 6],  \n        [6, 7, 5, 6],  \n    ]\n)\nylim = [40, 100]\nylabel = \"Index/Percentage\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Figure size to match a 3x1 subplot layout\nfig, axes = plt.subplots(3, 1, figsize=(10, 9), sharex=True)\n\n# Colors, choosing a different palette to differentiate the plots\ncolors = [\"#8e44ad\", \"#3498db\", \"#e74c3c\", \"#f1c40f\"]\n\n# Plotting bars\nfor i, ax in enumerate(axes):\n    for j, metric in enumerate(metrics):\n        ax.bar(\n            j,\n            performance[i, j],\n            width=0.8,\n            color=colors[j],\n            yerr=errors[i, j],\n            capsize=0,\n            label=metric if i == 0 else \"\",\n        )\n\n    # Setting x-axis labels, y-axis limits, and titles\n    ax.set_xticks(range(len(metrics)))\n    ax.set_xticklabels(metrics, rotation=45)\n    ax.set_ylim(ylim)\n    ax.set_xlabel(f\"({chr(97+i)}) {categories[i]}\")\n    ax.set_ylabel(ylabel)\n    ax.yaxis.grid(True)\n    ax.set_axisbelow(True)\n\n# Adding a legend outside of the plot on top\nfig.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.05), ncol=len(metrics))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout to prevent overlap and ensure labels are visible\nplt.tight_layout()\nplt.savefig('errorbar_19.pdf', bbox_inches='tight')"}
{"idx": "errorbar_20", "instruction": "There is a reference image for you and I also have a set of data about meteorological conditions in different cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Meteorological data for different cities\ncities = [\"San Francisco\", \"Berlin\", \"Mumbai\", \"Sydney\"]\nx = np.arange(len(cities)) # Location of labels on the x-axis\n\n# Simplifying data arrays to two seasons per metric\npopulation_growth = np.array(\n[np.random.uniform(1.5, 3.5, 4), np.random.uniform(1.5, 3.5, 4)]\n).T # Spring and Autumn population growth\nemployment_rate = np.array(\n[np.random.uniform(60, 90, 4), np.random.uniform(60, 90, 4)]\n).T # Spring and Autumn employment rate\ngreen_space = np.array(\n[np.random.uniform(20, 50, 4), np.random.uniform(20, 50, 4)]\n).T # Spring and Autumn green space percentage\nwaste_recycling = np.array(\n[np.random.uniform(30, 70, 4), np.random.uniform(30, 70, 4)]\n).T # Spring and Autumn waste recycling rate\n\n# Errors for each season\npop_growth_errors = np.array([np.random.uniform(0.1, 0.5, 4), np.random.uniform(0.1, 0.5, 4)]).T\nemp_rate_errors = np.array([np.random.uniform(1, 5, 4), np.random.uniform(1, 5, 4)]).T\ngreen_space_errors = np.array([np.random.uniform(2, 5, 4), np.random.uniform(2, 5, 4)]).T\nwaste_recycling_errors = np.array([np.random.uniform(3, 7, 4), np.random.uniform(3, 7, 4)]).T\n\nlabels = [\"Spring\", \"Autumn\"]\ntitles = [\n\"Annual Population Growth\",\n\"Employment Rate\",\n\"Green Space Percentage\",\n\"Waste Recycling Rate\",\n]\nylabels = [\"Growth (%)\", \"Rate (%)\", \"Percentage (%)\", \"Rate (%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(0)\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Meteorological data for different cities\ncities = [\"San Francisco\", \"Berlin\", \"Mumbai\", \"Sydney\"]\nx = np.arange(len(cities))  # Location of labels on the x-axis\n\n# Simplifying data arrays to two seasons per metric\npopulation_growth = np.array(\n    [np.random.uniform(1.5, 3.5, 4), np.random.uniform(1.5, 3.5, 4)]\n).T  # Spring and Autumn population growth\nemployment_rate = np.array(\n    [np.random.uniform(60, 90, 4), np.random.uniform(60, 90, 4)]\n).T  # Spring and Autumn employment rate\ngreen_space = np.array(\n    [np.random.uniform(20, 50, 4), np.random.uniform(20, 50, 4)]\n).T  # Spring and Autumn green space percentage\nwaste_recycling = np.array(\n    [np.random.uniform(30, 70, 4), np.random.uniform(30, 70, 4)]\n).T  # Spring and Autumn waste recycling rate\n\n# Errors for each season\npop_growth_errors = np.array([np.random.uniform(0.1, 0.5, 4), np.random.uniform(0.1, 0.5, 4)]).T\nemp_rate_errors = np.array([np.random.uniform(1, 5, 4), np.random.uniform(1, 5, 4)]).T\ngreen_space_errors = np.array([np.random.uniform(2, 5, 4), np.random.uniform(2, 5, 4)]).T\nwaste_recycling_errors = np.array([np.random.uniform(3, 7, 4), np.random.uniform(3, 7, 4)]).T\n\nlabels = [\"Spring\", \"Autumn\"]\ntitles = [\n    \"Annual Population Growth\",\n    \"Employment Rate\",\n    \"Green Space Percentage\",\n    \"Waste Recycling Rate\",\n]\nylabels = [\"Growth (%)\", \"Rate (%)\", \"Percentage (%)\", \"Rate (%)\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, axs = plt.subplots(2, 2, figsize=(10, 5))  # Adjusted to 2 rows and 2 columns\naxs = axs.flatten()\n# Define colors for each set of bars to keep the design cohesive and attractive\ncolors = [\n    [\"#ff9999\", \"#66b3ff\"],  # Spring and Autumn for temperature\n    [\"#99ff99\", \"#2878b5\"],  # Spring and Autumn for employment_rate\n    [\"#f7b7a3\", \"#f7c6c7\"],  # Spring and Autumn for wind speed\n    [\"#9ac9db\", \"#9b59b6\"],\n]  # Spring and Autumn for waste_recycling\n\n\n# Helper function to plot data\ndef plot_data(ax, j, data, errors, title, ylabel):\n    for i in range(2):  # Adjusted to only two bars per city\n        ax.bar(\n            x + i * 0.2,\n            data[:, i],\n            yerr=errors[:, i],\n            color=colors[j][i],\n            label=labels[i],\n            width=0.2,\n            capsize=3,\n        )\n    ax.set_title(title)\n    ax.set_xticks(x + 0.1)  # Adjust position to center the group\n    ax.set_xticklabels(cities)\n    ax.set_ylabel(ylabel)\n    ax.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.4), ncol=2)\n\n\n# Plot each category of meteorological data\nplot_data(\n    axs[0],\n    0,\n    population_growth,\n    pop_growth_errors,\n    titles[0],\n    ylabels[0],\n)\nplot_data(axs[1], 1, employment_rate, emp_rate_errors, titles[1], ylabels[1])\nplot_data(axs[2], 2, green_space, green_space_errors, titles[2], ylabels[2])\nplot_data(axs[3], 3, waste_recycling, waste_recycling_errors, titles[3], ylabels[3])\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig(\"errorbar_20.pdf\", bbox_inches=\"tight\")"}
{"idx": "errorbar_21", "instruction": "There is a reference image for you and I also have a set of data about the funding and research output in various scientific fields. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Categories and values for different countries\ncategories = [\"Quantum Computing\", \"Nanotechnology\", \"Biotechnology\", \"Astrophysics\", \"Robotics\"][::-1]\nfunding_received = [-1800, -2400, -2200, -2000, -1900][::-1] # Funding received in millions of dollars\nfunding_error = [250, 300, 275, 260, 240][::-1] # Error values for funding received\n\nresearch_output = [28, 22, 30, 25, 20][::-1] # Research output as percentage of total projects\noutput_error = [3.4, 3.1, 3.7, 3.2, 2.9][::-1] # Error values for research output\nxlabels = [\"Funding Received (Millions of Dollars)\", \"Research Output (%)\"]\ntitles = [\"Total Funding Received by Field\", \"Research Output by Field\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Categories and values for different countries\ncategories = [\"Quantum Computing\", \"Nanotechnology\", \"Biotechnology\", \"Astrophysics\", \"Robotics\"][::-1]\nfunding_received = [-1800, -2400, -2200, -2000, -1900][::-1]  # Funding received in millions of dollars\nfunding_error = [250, 300, 275, 260, 240][::-1]  # Error values for funding received\n\nresearch_output = [28, 22, 30, 25, 20][::-1]  # Research output as percentage of total projects\noutput_error = [3.4, 3.1, 3.7, 3.2, 2.9][::-1]  # Error values for research output\nxlabels = [\"Funding Received (Millions of Dollars)\", \"Research Output (%)\"]\ntitles = [\"Total Funding Received by Field\", \"Research Output by Field\"]\nxlims = [[-3000, 0], [0, 35]]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create horizontal bar chart with subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 6), sharey=True)  # Adjust figure size\n\n# Setting colors for the bars\nneg_colors = [\"#c5b3d6\"] * 5\npos_colors = [\"#76d7c4\"] * 5\n\n# Plotting bars for negative values (Energy Consumption)\nbars = axes[0].barh(\n    categories,\n    funding_received,\n    color=neg_colors,\n    edgecolor=\"white\",\n    height=0.5,\n    xerr=funding_error,\n    capsize=0,\n)\naxes[0].set_xlabel(xlabels[0])\naxes[0].set_title(titles[0])\naxes[0].invert_yaxis()\naxes[0].set_xlim(xlims[0])\naxes[0].xaxis.grid(True)\naxes[0].spines[\"top\"].set_visible(False)\naxes[0].spines[\"right\"].set_visible(False)\n\n# Plotting bars for positive values (Renewable Energy Usage)\nbars2 = axes[1].barh(\n    categories,\n    research_output,\n    color=pos_colors,\n    edgecolor=\"white\",\n    height=0.5,\n    xerr=output_error,\n    capsize=0,\n)\naxes[1].set_xlabel(xlabels[1])\naxes[1].set_title(titles[1])\naxes[1].invert_yaxis()\naxes[1].set_xlim(xlims[1])\naxes[1].xaxis.grid(True)\naxes[1].spines[\"top\"].set_visible(False)\naxes[1].spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorbar_21.pdf', bbox_inches='tight')"}
{"idx": "errorbar_22", "instruction": "There is a reference image for you and I also have a set of data about battery life ratings for different models of electronic devices. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for appliances in different categories\nappliances = [\"Smartphone\", \"Laptop\", \"Tablet\"]\nbattery_life_standard = [8, -5, 7] # Standard model battery life in hours\nbattery_life_advanced = [7, -4, 9] # Advanced model battery life in hours\nbattery_life_optimal = [10, -2, 11] # Optimal model battery life in hours\nerror = [0.5, 0.3, 0.4] # Error margins for the battery life values\n\n# Bar positions\nx = np.arange(len(appliances))\nwidth = 0.25 # Width of the bars\n\nlabels = [\"Standard Model\", \"Advanced Model\", \"Optimal Model\"]\nylabel = \"Battery Life (Hours)\"\ntitle = \"Battery Life Ratings by Device Model\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for appliances in different categories\nappliances = [\"Smartphone\", \"Laptop\", \"Tablet\"]\nbattery_life_standard = [8, -5, 7]  # Standard model battery life in hours\nbattery_life_advanced = [7, -4, 9]  # Advanced model battery life in hours\nbattery_life_optimal = [10, -2, 11]  # Optimal model battery life in hours\nerror = [0.5, 0.3, 0.4]  # Error margins for the battery life values\n\n# Bar positions\nx = np.arange(len(appliances))\nwidth = 0.25  # Width of the bars\n\nlabels = [\"Standard Model\", \"Advanced Model\", \"Optimal Model\"]\nylabel = \"Battery Life (Hours)\"\ntitle = \"Battery Life Ratings by Device Model\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(figsize=(8, 5))\nbars1 = ax.bar(\n    x - width,\n    battery_life_standard,\n    width,\n    label=labels[0],\n    color=\"lightcoral\",\n    yerr=error,\n    capsize=5,\n    hatch=\"//\",\n)\nbars2 = ax.bar(\n    x,\n    battery_life_advanced,\n    width,\n    label=labels[1],\n    color=\"lightgreen\",\n    yerr=error,\n    capsize=5,\n    hatch=\"\\\\\",\n)\nbars3 = ax.bar(\n    x + width,\n    battery_life_optimal,\n    width,\n    label=labels[2],\n    color=\"lightblue\",\n    yerr=error,\n    capsize=5,\n    hatch=\"--\",\n)\n\n# Adding text for labels, title, and custom x-axis tick labels\nax.set_ylabel(ylabel)\nax.set_title(title)\nax.set_xticks(x)\nax.set_xticklabels(appliances)\nax.axhline(0, color=\"gray\")\nax.legend()  # Adjust legend location as needed\n\n\n# Adding data labels on the bars\ndef add_labels(bars):\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(\n            f\"{height:.2f}\",\n            xy=(\n                bar.get_x() + bar.get_width() / 2,\n                (\n                    height + error[bars.index(bar)]\n                    if height > 0\n                    else height - error[bars.index(bar)]\n                ),\n            ),\n            xytext=(\n                0,\n                3 if height > 0 else -12,\n            ),  # move text up or down based on bar direction\n            textcoords=\"offset points\",\n            ha=\"center\",\n            va=\"bottom\",\n        )\n\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show the plot\nplt.tight_layout()\nplt.savefig('errorbar_22.pdf', bbox_inches='tight')"}
{"idx": "errorbar_23", "instruction": "There is a reference image for you and I also have a set of data about energy assessment across various entities and protocols. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data\nentities = [\"Carbon Capture\", \"Geothermal\", \"Biomass\", \"Wave\"]\nprotocols = [\n\"Cost Efficiency\",\n\"Energy Output Efficiency\",\n\"Maintenance Costs\",\n\"Environmental Impact\",\n\"Regulatory Compliance\",\n\"Safety Standards\",\n]\n# Simulated mean scores for different protocols (more distinctive values)\nefficiency_means = np.array(\n[\n[80, 65, 85, 50, 75, 80], # Carbon Capture\n[65, 85, 60, 80, 55, 75], # Geothermal\n[75, 70, 90, 65, 85, 70], # Biomass\n[50, 80, 55, 95, 80, 60], # Wave\n]\n)\n\n# Simulated standard deviations for scores (made more dramatic)\nefficiency_std = np.array(\n[\n[6, 9, 7, 5, 6, 4], # Carbon Capture\n[9, 5, 8, 6, 10, 3], # Geothermal\n[7, 8, 5, 9, 7, 5], # Biomass\n[8, 6, 9, 4, 8, 7], # Wave\n]\n)\nxlabel = \"Energy Assessment Entity\"\nylabel = \"Efficiency and Cost Scores (%)\"\nlegendtitle = \"Evaluation Protocol\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\nentities = [\"Carbon Capture\", \"Geothermal\", \"Biomass\", \"Wave\"]\nprotocols = [\n    \"Cost Efficiency\",\n    \"Energy Output Efficiency\",\n    \"Maintenance Costs\",\n    \"Environmental Impact\",\n    \"Regulatory Compliance\",\n    \"Safety Standards\",\n]\n# Simulated mean scores for different protocols (more distinctive values)\nefficiency_means = np.array(\n    [\n        [80, 65, 85, 50, 75, 80],  # Carbon Capture\n        [65, 85, 60, 80, 55, 75],  # Geothermal\n        [75, 70, 90, 65, 85, 70],  # Biomass\n        [50, 80, 55, 95, 80, 60],  # Wave\n    ]\n)\n\n# Simulated standard deviations for scores (made more dramatic)\nefficiency_std = np.array(\n    [\n        [6, 9, 7, 5, 6, 4],  # Carbon Capture\n        [9, 5, 8, 6, 10, 3],  # Geothermal\n        [7, 8, 5, 9, 7, 5],  # Biomass\n        [8, 6, 9, 4, 8, 7],  # Wave\n    ]\n)\nxlabel = \"Energy Assessment Entity\"\nylabel = \"Efficiency and Cost Scores (%)\"\nylim = [40, 105]\nlegendtitle = \"Evaluation Protocol\"\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(10, 5))\n# Subdued color palette\ncolors = [\"#92c6ff\", \"#97f0aa\", \"#ff9f9a\", \"#d0bbff\", \"#ffb480\", \"#99e6e6\"]\n\n# Bar width and positions\nbar_width = 0.12\n\n# Positions of the bar groups\nr = np.arange(len(entities))\n\n# Drawing bars for different protocols\nfor i in range(len(protocols)):\n    ax.bar(\n        r + i * bar_width,\n        efficiency_means[:, i],\n        yerr=efficiency_std[:, i],\n        width=bar_width,\n        label=protocols[i],\n        capsize=0,\n        color=colors[i],\n        edgecolor=\"black\",\n    )\n\n# Set x-axis labels and axis properties\nax.set_xlabel(xlabel)\nax.set_xticks(r + bar_width * (len(protocols) / 2))\nax.set_xticklabels(entities)\nax.set_ylabel(ylabel)\nax.set_ylim(ylim)  # Adjust y-axis to better fit extended range\n\n# Customize the legend\nax.legend(\n    loc=\"lower center\", bbox_to_anchor=(0.5, -0.4), title=legendtitle, ncol=3\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorbar_23.pdf', bbox_inches='tight')"}
{"idx": "errorbar_25", "instruction": "There is a reference image for you and I also have a set of data about employment rates across various universities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the bar charts\nuniversities = [\"Harvard University\", \"Stanford University\", \"MIT\", \"UC Berkeley\"]\ngraduate_employment_rate = [82.5, 75.3, 88.7, 69.4]\npostgraduate_employment_rate = [90.1, 85.4, 92.3, 78.5]\nerror_graduate = [3.5, 4.1, 2.8, 3.9] # Error values for graduate employment rate\nerror_postgraduate = [2.5, 3.2, 2.1, 3.0] # Error values for postgraduate employment rate\nx = np.arange(len(graduate_employment_rate)) # x-coordinates for the bars\nlabels = [\"Graduate Employment Rate\", \"Postgraduate Employment Rate\"]\ntitle = \"Comparison of Employment Rates Across Universities\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar charts\nuniversities = [\"Harvard University\", \"Stanford University\", \"MIT\", \"UC Berkeley\"]\ngraduate_employment_rate = [82.5, 75.3, 88.7, 69.4]\npostgraduate_employment_rate = [90.1, 85.4, 92.3, 78.5]\nerror_graduate = [3.5, 4.1, 2.8, 3.9]  # Error values for graduate employment rate\nerror_postgraduate = [2.5, 3.2, 2.1, 3.0]  # Error values for postgraduate employment rate\nx = np.arange(len(graduate_employment_rate))  # x-coordinates for the bars\nlabels = [\"Graduate Employment Rate\", \"Postgraduate Employment Rate\"]\ntitle = \"Comparison of Employment Rates Across Universities\"\nylims = [[60, 100], [70, 100]]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nfig, ax1 = plt.subplots(figsize=(8, 5))\n# Bar width\nwidth = 0.35\n\n# Plotting 'graduate_employment_rate' on the primary y-axis\nbars1 = ax1.bar(\n    x - width / 2,\n    graduate_employment_rate,\n    width,\n    label=labels[0],\n    color=\"#4695a2\",\n    yerr=error_graduate,\n    capsize=5,\n    edgecolor=\"black\",\n)\n\n# Create the secondary y-axis for 'postgraduate_employment_rate'\nax2 = ax1.twinx()\nbars2 = ax2.bar(\n    x + width / 2,\n    postgraduate_employment_rate,\n    width,\n    label=labels[1],\n    color=\"coral\",\n    yerr=error_postgraduate,\n    capsize=5,\n    edgecolor=\"black\",\n)\n\n# Adding annotations directly on the bars for clarity\nfor i, bar in enumerate(bars1):\n    height = bar.get_height()\n    label_x_pos = bar.get_x() + bar.get_width() / 2\n    ax1.text(\n        label_x_pos,\n        height - error_graduate[i] - 1,\n        f\"{height}%\",\n        rotation=90,\n        ha=\"center\",\n        va=\"bottom\" if height < 0 else \"top\",\n    )\nfor j, bar in enumerate(bars2):\n    height = bar.get_height()\n    label_x_pos = bar.get_x() + bar.get_width() / 2\n    ax2.text(\n        label_x_pos,\n        height - error_postgraduate[j] - 1,\n        f\"{height}%\",\n        rotation=90,\n        ha=\"center\",\n        va=\"bottom\" if height < 0 else \"top\",\n    )\n\n\nfig.suptitle(title)\n# Adding labels, title, and custom x-axis tick labels\nax1.set_ylabel(labels[0], color=\"#5b93a0\")\nax2.set_ylabel(labels[1], color=\"coral\")\nax1.set_xticks(x)\nax1.set_xticklabels(universities)\n\n# Add a horizontal line at y=0 if needed\nax1.axhline(0, color=\"grey\", linewidth=0.8)\n\n# Adjusting y-axis limits to fit the annotations and errors\nax1.set_ylim(ylims[0])\nax2.set_ylim(ylims[1])\n\n# Adding grid lines for better readability\nax1.yaxis.grid(linestyle=\"--\", linewidth=\"0.5\", color=\"grey\")\nax1.set_axisbelow(True)\n\nax2.yaxis.grid(linestyle=\"--\", color=\"grey\")\nax2.set_axisbelow(True)\n# Adding legend\nfig.legend(loc=\"upper center\", bbox_to_anchor=(0.5, 1.05), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\nplt.savefig('errorbar_25.pdf', bbox_inches='tight')"}
{"idx": "errorbar_26", "instruction": "There is a reference image for you and I also have a set of data about weather conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for different service categories\ncategories = [\n\"Precipitation\",\n\"Temperature\",\n\"Humidity\",\n\"Wind Speed\",\n\"Visibility\",\n\"Pressure\",\n\"Air Quality\",\n]\nweather_indexes = [\n35,\n42,\n58,\n65,\n40,\n38,\n50,\n] # Weather index scores (0-100 scale)\nvariance_rates = [\n-10,\n-12,\n-15,\n-8,\n-14,\n-7,\n-5,\n] # Negative values for variance rates\n\n# Error data for each category\nindex_errors = [4, 3, 5, 2, 3, 2, 2]\nvariance_errors = [1, 2, 2, 1, 2, 1, 1]\nlabels=[\"Variance Rates\", \"Weather Index Scores\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for different service categories\ncategories = [\n    \"Precipitation\",\n    \"Temperature\",\n    \"Humidity\",\n    \"Wind Speed\",\n    \"Visibility\",\n    \"Pressure\",\n    \"Air Quality\",\n]\nweather_indexes = [\n    35,\n    42,\n    58,\n    65,\n    40,\n    38,\n    50,\n]  # Weather index scores (0-100 scale)\nvariance_rates = [\n    -10,\n    -12,\n    -15,\n    -8,\n    -14,\n    -7,\n    -5,\n]  # Negative values for variance rates\n\n# Error data for each category\nindex_errors = [4, 3, 5, 2, 3, 2, 2]\nvariance_errors = [1, 2, 2, 1, 2, 1, 1]\nlabels=[\"Variance Rates\", \"Weather Index Scores\"]\n# Define colors\nsatisfaction_colors = [\n    \"#8ea8c3\",\n    \"#b5c0b7\",\n    \"#a3acd1\",\n    \"#d1c4e9\",\n    \"#d7ccc8\",\n    \"#cfd8dc\",\n    \"#b2dfdb\",\n]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))  # Adjusted size for clarity\n\ncomplaint_colors = [\n    mcolors.to_rgba(color, alpha=0.6) for color in satisfaction_colors\n]  # Slightly lighter for complaints\n\n# Plot horizontal bar charts with error bars\nax.barh(\n    categories,\n    variance_rates,\n    color=complaint_colors,\n    edgecolor=\"black\",\n    xerr=variance_errors,\n    label=labels[0],\n    capsize=3,\n)\nax.barh(\n    categories,\n    weather_indexes,\n    left=0,\n    color=satisfaction_colors,\n    edgecolor=\"black\",\n    xerr=index_errors,\n    label=labels[1],\n    capsize=3,\n)\n\n# Adding labels within bars for values\nfor i, (com_val, sat_val) in enumerate(zip(variance_rates, weather_indexes)):\n    ax.text(com_val / 2, i, f\"{abs(com_val)}%\", va=\"center\", ha=\"center\", color=\"gray\")\n    ax.text(sat_val / 2, i, f\"{sat_val}%\", va=\"center\", ha=\"center\", color=\"gray\")\n\n# Customizing axis and layout\nax.tick_params(axis=\"y\", which=\"both\", left=False)  # Remove y-axis tick marks\nax.set_xlim(min(variance_rates) - 10, max(weather_indexes) + 10)\nax.set_xticks([])\nax.spines[\"left\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.axvline(0, color=\"black\")  # Draw a vertical line at x=0 for separation\n\n# Labels at the ends\nax.text(-15, 7, labels[0], ha=\"right\", va=\"bottom\")\nax.text(55, 7, labels[1], ha=\"left\", va=\"bottom\")\n\n# Invert the y-axis for readability\nax.invert_yaxis()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot with tight layout\nplt.tight_layout()\nplt.savefig('errorbar_26.pdf', bbox_inches='tight')"}
{"idx": "errorbar_27", "instruction": "There is a reference image for you and I also have a set of data about weather conditions and extreme event rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for different service categories\ncategories = [\n\"Cloud Cover\",\n\"Sunshine Hours\",\n\"Rainfall\",\n\"Snowfall\",\n\"UV Index\",\n\"Wind Gusts\",\n\"Storm Intensity\",\n]\nweather_scores = [\n68,\n75,\n69,\n82,\n78,\n85,\n70,\n] # Scores for different weather conditions (0-100 scale)\nextreme_event_rates = [\n-12,\n-14,\n-16,\n-10,\n-15,\n-8,\n-5,\n] # Negative values for extreme event rates\n\nlabels = [\"Extreme Event Rates\", \"Weather Scores\"]\ntextlabels = [\"Increase rates\", \"Decrease rates\"]\n\n# Error data for each category\nweather_errors = [4, 3, 5, 2, 3, 2, 2]\nextreme_event_errors = [1, 2, 2, 1, 2, 1, 1]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for different service categories\ncategories = [\n    \"Cloud Cover\",\n    \"Sunshine Hours\",\n    \"Rainfall\",\n    \"Snowfall\",\n    \"UV Index\",\n    \"Wind Gusts\",\n    \"Storm Intensity\",\n]\nweather_scores = [\n    68,\n    75,\n    69,\n    82,\n    78,\n    85,\n    70,\n]  # Scores for different weather conditions (0-100 scale)\nextreme_event_rates = [\n    -12,\n    -14,\n    -16,\n    -10,\n    -15,\n    -8,\n    -5,\n]  # Negative values for extreme event rates\n\nlabels = [\"Extreme Event Rates\", \"Weather Scores\"]\ntextlabels = [\"Increase rates\", \"Decrease rates\"]\n\n# Error data for each category\nweather_errors = [4, 3, 5, 2, 3, 2, 2]\nextreme_event_errors = [1, 2, 2, 1, 2, 1, 1]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))  # Adjusted size for clarity\n\n# Define colors\nsatisfaction_colors = [\n    \"#ffcccb\",\n    \"#ffa07a\",\n    \"#ff6347\",\n    \"#ff4500\",\n    \"#ff8c00\",\n    \"#ffd700\",\n    \"#ffebcd\",\n]\ncomplaint_colors = [\n    mcolors.to_rgba(color, alpha=0.6) for color in satisfaction_colors\n]  # Slightly lighter for complaints\n\n# Plot vertical bar charts with error bars\nax.bar(\n    categories,\n    extreme_event_rates,\n    color=complaint_colors,\n    edgecolor=\"black\",\n    yerr=extreme_event_errors,\n    label=labels[0],\n    capsize=3,\n)\nax.bar(\n    categories,\n    weather_scores,\n    bottom=0,\n    color=satisfaction_colors,\n    edgecolor=\"black\",\n    yerr=weather_errors,\n    label=labels[1],\n    capsize=3,\n)\n\n# Adding labels within bars for values\nfor i, (com_val, sat_val) in enumerate(zip(extreme_event_rates, weather_scores)):\n    ax.text(i, com_val / 2, f\"{abs(com_val)}%\", va=\"center\", ha=\"center\", color=\"gray\")\n    ax.text(i, sat_val / 2, f\"{sat_val}%\", va=\"center\", ha=\"center\", color=\"gray\")\n\n# Customizing axis and layout\nax.tick_params(axis=\"x\", which=\"both\", bottom=False)  # Remove x-axis tick marks\nax.set_ylim(min(extreme_event_rates) - 10, max(weather_scores) + 10)\nax.set_yticks([])\nax.spines[\"left\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.axhline(0, color=\"black\")  # Draw a horizontal line at y=0 for separation\n\n# Labels at the ends\nax.text(-0.5, -25, textlabels[0], ha=\"right\", va=\"bottom\", rotation=\"vertical\")\nax.text(-0.5, 25, textlabels[1], ha=\"right\", va=\"bottom\", rotation=\"vertical\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('errorbar_27.pdf', bbox_inches='tight')"}
{"idx": "errorbar_29", "instruction": "There is a reference image for you and I also have a set of data about environmental metrics for urban transportation in three major cities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Updated Urban Transportation Data for three major cities\nmetrics = [\"Air Quality\", \"Water Conservation\", \"Renewable Energy\"]\nvalues = np.array(\n[\n[85, 75, 80], # Copenhagen\n[70, 65, 75], # Vancouver\n[60, 55, 70], # Stockholm\n]\n)\n\n# Updated asymmetric error values, now more proportionate to the data scale\nerrors = np.array(\n[\n[[10, 8], [7, 8], [9, 8]], # Errors for Copenhagen (lower, upper)\n[[8, 7], [6, 8], [7, 6]], # Errors for Vancouver\n[[7, 6], [6, 5], [8, 7]], # Errors for Stockholm\n]\n)\n\n# Creating subplots for each city\ncities = [\"Copenhagen\", \"Vancouver\", \"Stockholm\"]\n\nylabel = \"Environmental Metric Values\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Updated Urban Transportation Data for three major cities\nmetrics = [\"Air Quality\", \"Water Conservation\", \"Renewable Energy\"]\nvalues = np.array(\n    [\n        [85, 75, 80],  # Copenhagen\n        [70, 65, 75],  # Vancouver\n        [60, 55, 70],  # Stockholm\n    ]\n)\n\n# Updated asymmetric error values, now more proportionate to the data scale\nerrors = np.array(\n    [\n        [[10, 8], [7, 8], [9, 8]],  # Errors for Copenhagen (lower, upper)\n        [[8, 7], [6, 8], [7, 6]],  # Errors for Vancouver\n        [[7, 6], [6, 5], [8, 7]],  # Errors for Stockholm\n    ]\n)\n\n# Creating subplots for each city\ncities = [\"Copenhagen\", \"Vancouver\", \"Stockholm\"]\n\nylabel = \"Environmental Metric Values\"\nylim=[40, 100]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))  # Compact and square figure layout\n\n\n# Function to plot each city's data\ndef plot_city_data(ax, errors, city_index, city_name):\n    x = np.arange(len(metrics))  # the label locations\n    bar_colors = [\"#6a8347\", \"#377eb8\", \"#d62728\"]\n    barerrors = np.array(errors).T[:, :, city_index]\n    bars = ax.bar(x, values[city_index], yerr=barerrors, color=bar_colors, capsize=5)\n    for bar, lower_error, upper_error in zip(bars, barerrors[0], barerrors[1]):\n        # Position for lower error text\n        ax.text(\n            bar.get_x() + bar.get_width() / 2,\n            bar.get_height() - lower_error - 5,\n            f\"-{lower_error}\",\n            va=\"bottom\",\n            ha=\"center\",\n            color=\"black\",\n        )\n        # Position for upper error text\n        ax.text(\n            bar.get_x() + bar.get_width() / 2,\n            bar.get_height() + upper_error + 3,\n            f\"+{upper_error}\",\n            ha=\"center\",\n            color=\"black\",\n        )\n\n    ax.set_title(city_name)\n    ax.set_xticks(x)\n    ax.set_xticklabels(metrics, rotation=90)\n    ax.set_ylabel(ylabel)\n    ax.set_ylim(ylim)  # Uniform scale for all charts\n\n\nfor i, city in enumerate(cities):\n    plot_city_data(axs[i], errors, i, city)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorbar_29.pdf', bbox_inches='tight')"}
{"idx": "errorbar_30", "instruction": "There is a reference image for you and I also have a set of data about stress levels and work dissatisfaction across different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data setup\nregions = [\"Scandinavia\", \"Eastern Europe\", \"Southeast Asia\", \"South America\"]\nx = np.arange(len(regions)) # X-axis points\n\n# Stress levels and work dissatisfaction scores in different regions\n# These are fabricated values for demonstration\nstress_levels_scores = np.array([-7.9, -6.8, -7.2, -7.0]) # Simulated negative values\nwork_dissatisfaction_scores = np.array([-8.1, -6.5, -7.3, -7.4]) # Simulated negative values\n\n# Errors for both metrics\nstress_levels_errors = np.array([0.3, 0.4, 0.2, 0.25])\nwork_dissatisfaction_errors = np.array([0.2, 0.35, 0.3, 0.25])\n\nlabels = [\"Stress Levels\", \"Work Dissatisfaction\"]\nylabels = [\"Stress Levels Score\", \"Work Dissatisfaction Score\"]\n\ntitle = \"Stress Levels and Work Dissatisfaction Across Regions\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data setup\nregions = [\"Scandinavia\", \"Eastern Europe\", \"Southeast Asia\", \"South America\"]\nx = np.arange(len(regions))  # X-axis points\n\n# Stress levels and work dissatisfaction scores in different regions\n# These are fabricated values for demonstration\nstress_levels_scores = np.array([-7.9, -6.8, -7.2, -7.0])  # Simulated negative values\nwork_dissatisfaction_scores = np.array([-8.1, -6.5, -7.3, -7.4])  # Simulated negative values\n\n# Errors for both metrics\nstress_levels_errors = np.array([0.3, 0.4, 0.2, 0.25])\nwork_dissatisfaction_errors = np.array([0.2, 0.35, 0.3, 0.25])\n\nlabels = [\"Stress Levels\", \"Work Dissatisfaction\"]\nylabels = [\"Stress Levels Score\", \"Work Dissatisfaction Score\"]\n\ntitle = \"Stress Levels and Work Dissatisfaction Across Regions\"\nylims = [[-9, -6], [-9, -6]]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting setup\nfig, ax1 = plt.subplots(figsize=(8, 5))\n\n# Bar width and hatch patterns\nwidth = 0.35\nhatch_patterns = [\"+\", \"x\"]\n\n# Colors for the bars\ncolors = [\"#e18683\", \"#98bb93\"]  # Greener and bluer shades\n\n# Plot data on the left y-axis (air quality scores)\nax1.bar(\n    x,\n    stress_levels_scores,\n    width,\n    color=colors[0],\n    hatch=hatch_patterns[0],\n    label=labels[0],\n    yerr=stress_levels_errors,\n    capsize=5,\n    edgecolor=\"black\",\n)\n\n# Create a second y-axis sharing the same x-axis (water quality scores)\nax2 = ax1.twinx()\nax2.bar(\n    x + width,\n    work_dissatisfaction_scores,\n    width,\n    color=colors[1],\n    hatch=hatch_patterns[1],\n    label=labels[1],\n    yerr=work_dissatisfaction_errors,\n    capsize=5,\n    edgecolor=\"black\",\n)\n\n# Set the x-ticks to be in the middle of the two bars and add the labels\nax1.set_xticks(x + width / 2)\nax1.set_xticklabels(regions)\n\n# Add a legend\nax1.legend(loc=\"lower left\")\nax2.legend(loc=\"lower right\")\n\n# Set labels for y-axes\nax1.set_ylabel(ylabels[0], color=colors[0])\nax2.set_ylabel(ylabels[1], color=colors[1])\n\n# Set colors for y-axes\nax1.tick_params(axis=\"y\", colors=colors[0])\nax2.tick_params(axis=\"y\", colors=colors[1])\n\n# Set the limits for y-axes to fit the negative data\nax1.set_ylim(ylims[0])\nax2.set_ylim(ylims[0])\n\n# Set title for the chart\nplt.title(title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorbar_30.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_2", "instruction": "There is a reference image for you and I also have a set of data about various technology-related topics and their importance as reported in different sources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\ncategories = [\"Data Privacy\", \"AI Ethics\", \"Cybersecurity\", \"Tech Regulation\", \"Innovation\"]\nmeans = [0.28, 0.25, 0.23, 0.21, 0.20]\nerrors = [0.03, 0.02, 0.02, 0.03, 0.02]\ndataset_mean = [0.23]\nxlabel = \"Importance (Fraction of Reports)\"\nlabel = \"Dataset Mean\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ncategories = [\"Data Privacy\", \"AI Ethics\", \"Cybersecurity\", \"Tech Regulation\", \"Innovation\"]\nmeans = [0.28, 0.25, 0.23, 0.21, 0.20]\nerrors = [0.03, 0.02, 0.02, 0.03, 0.02]\ndataset_mean = [0.23]\nxlabel = \"Importance (Fraction of Reports)\"\nlabel = \"Dataset Mean\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nplt.figure(figsize=(8, 6))  # Adjusting figure size to match original image's dimensions\nplt.errorbar(\n    means,\n    categories,\n    xerr=errors,\n    fmt=\"o\",\n    color=\"#bc4949\",\n    ecolor=\"#bc4949\",\n    capsize=0,\n    label=\"Mean\",\n)\nplt.axvline(dataset_mean, linestyle=\"--\", label=label)\n\n# Customizing the plot\nplt.xlabel(xlabel)\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting the layout and saving the figure\nplt.tight_layout()\nplt.savefig('errorpoint_2.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_3", "instruction": "There is a reference image for you and I also have a set of data about **magnitude measurements of astronomical objects**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\nauthors = [\n\"This study*\",\n\"Smith et al.\",\n\"Smith et al.\",\n\"Johnson et al.\",\n\"Lee et al.\",\n\"Lee et al.\",\n\"Miller et al.\",\n\"Miller et al.\",\n\"Davis et al.\",\n\"Davis et al.\",\n]\nvalues = [\n4.572,\n4.635,\n4.589,\n4.625,\n4.598,\n4.612,\n4.620,\n4.629,\n4.647,\n4.610,\n]\nerrors = [\n[0.025, -0.023],\n[0.018, -0.017],\n[0.016, -0.015],\n[0.030, -0.032],\n[0.022, -0.021],\n[0.027, -0.026],\n[0.019, -0.018],\n[0.021, -0.020],\n[0.025, -0.024],\n[0.026, -0.025],\n]\nmethods = [\n\"Method A+Sample X\",\nr\"${Method B+Sample Y}$\",\nr\"${Method C+Sample Z}$\",\nr\"Method D+${Sample W}$\",\n\"Method E+Sample X (Condition 1)\",\n\"Method F+Sample Y (Condition 2)\",\n\"Method G+Sample Z (Condition 3)\",\n\"Method H+Sample W\",\nr\"${Method I+Sample V}$\",\nr\"${Method J+Sample U}$\",\n]\nxvline = 4.6\nxvspan = [4.58, 4.62]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\nauthors = [\n    \"This study*\",\n    \"Smith et al.\",\n    \"Smith et al.\",\n    \"Johnson et al.\",\n    \"Lee et al.\",\n    \"Lee et al.\",\n    \"Miller et al.\",\n    \"Miller et al.\",\n    \"Davis et al.\",\n    \"Davis et al.\",\n]\nvalues = [\n    4.572,\n    4.635,\n    4.589,\n    4.625,\n    4.598,\n    4.612,\n    4.620,\n    4.629,\n    4.647,\n    4.610,\n]\nerrors = [\n    [0.025, -0.023],\n    [0.018, -0.017],\n    [0.016, -0.015],\n    [0.030, -0.032],\n    [0.022, -0.021],\n    [0.027, -0.026],\n    [0.019, -0.018],\n    [0.021, -0.020],\n    [0.025, -0.024],\n    [0.026, -0.025],\n]\nmethods = [\n    \"Method A+Sample X\",\n    r\"${Method B+Sample Y}$\",\n    r\"${Method C+Sample Z}$\",\n    r\"Method D+${Sample W}$\",\n    \"Method E+Sample X (Condition 1)\",\n    \"Method F+Sample Y (Condition 2)\",\n    \"Method G+Sample Z (Condition 3)\",\n    \"Method H+Sample W\",\n    r\"${Method I+Sample V}$\",\n    r\"${Method J+Sample U}$\",\n]\nxticks = np.arange(4.5, 4.7, 0.05)\nxlim = [4.5, 4.7]\nxvline = 4.6\nxvspan = [4.58, 4.62]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(10, 8)\n)  # Adjust the figsize to match the original image's dimensions\n\n# Error bars with different positive and negative values\nfor i, (author, value, error) in enumerate(zip(authors, values, errors)):\n    ax.errorbar(\n        value,\n        i,\n        xerr=[[abs(error[1])], [error[0]]],\n        fmt=\"o\",\n        color=\"black\",\n        ecolor=\"black\",\n        capsize=3,\n    )\n    ax.text(\n        value,\n        i - 0.15,\n        r\"$%.3f^{+%.3f} _{-%.3f}$\" % (value, error[0], abs(error[1])),\n        va=\"center\",\n        ha=\"center\",\n        fontsize=9,\n    )\n# Highlighted region with adjusted color and alpha\nax.axvspan(xvspan[0],xvspan[1], color=\"purple\", alpha=0.3)\n\n# Text for methods with adjusted font size\nfor i, method in enumerate(methods):\n    ax.text(4.7, i, method, va=\"center\", ha=\"left\", fontsize=11)\n\n# Set labels and title\nax.set_yticks(range(len(authors)))\nax.set_yticklabels(authors)\nax.set_xlabel(r\"$M_B$\", fontsize=12)\nax.set_xlim(xlim)\nax.invert_yaxis()  # Invert y-axis to match the original image\nax.axvline(x=xvline, linestyle=\"--\", color=\"red\")\n# Adjust x-axis ticks and labels\nax.set_xticks(xticks)\nax.set_xticklabels([f\"{x:.1f}\" for x in xticks])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save/show the plot\nplt.tight_layout()\nplt.savefig('errorpoint_3.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_4", "instruction": "There is a reference image for you and I also have a set of data about the average number of unique speakers and shouters across different categories such as Climate Change, Technology, Health, Economy, Social Issues, and International Relations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data (example values, replace with actual data)\ncategories = [\n\"Climate Change\",\n\"Technology\",\n\"Health\",\n\"Economy\",\n\"Social Issues\",\n\"International Relations\",\n]\nunique_speaker_mean = [20, 18, 25, 22, 24, 26]\nunique_shouter_mean = [10, 9, 11, 10, 12, 11]\nunique_speaker_error = [2, 1.5, 2.5, 2, 2.5, 2]\nunique_shouter_error = [1, 0.75, 1.25, 1, 1.5, 1.25]\nlabels = [\"Unique speaker count mean\", \"Unique shouter count mean\"]\nylabel = \"Number of speakers\"\naxlabel = \"Dataset unique shouter count mean\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data (example values, replace with actual data)\ncategories = [\n    \"Climate Change\",\n    \"Technology\",\n    \"Health\",\n    \"Economy\",\n    \"Social Issues\",\n    \"International Relations\",\n]\nunique_speaker_mean = [20, 18, 25, 22, 24, 26]\nunique_shouter_mean = [10, 9, 11, 10, 12, 11]\nunique_speaker_error = [2, 1.5, 2.5, 2, 2.5, 2]\nunique_shouter_error = [1, 0.75, 1.25, 1, 1.5, 1.25]\nlabels = [\"Unique speaker count mean\", \"Unique shouter count mean\"]\nylabel = \"Number of speakers\"\naxlabel = \"Dataset unique shouter count mean\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting\nfig, ax = plt.subplots(\n    figsize=(10, 6)\n)  # Adjust the size to match the original image's dimensions\nax.errorbar(\n    categories,\n    unique_speaker_mean,\n    yerr=unique_speaker_error,\n    fmt=\"o\",\n    color=\"blue\",\n    label=labels[0],\n)\nax.errorbar(\n    categories,\n    unique_shouter_mean,\n    yerr=unique_shouter_error,\n    fmt=\"o\",\n    color=\"red\",\n    label=labels[1],\n)\n\n# Customization\nax.set_ylabel(ylabel)\nax.set_xticklabels(categories, rotation=45, ha=\"right\")\nax.axhline(\n    y=sum(unique_shouter_mean) / len(unique_shouter_mean),\n    color=\"grey\",\n    linestyle=\"--\",\n    label=axlabel,\n)\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('errorpoint_4.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_5", "instruction": "There is a reference image for you and I also have a set of data about male speaker presence in different categories such as AI ethics, remote work, healthcare, cybersecurity, and climate action. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for plotting\ncategories = [\n\"AI ETHICS\",\n\"REMOTE WORK\",\n\"HEALTHCARE\",\n\"CYBERSECURITY\",\n\"CLIMATE ACTION\",\n] # Capitalized category labels\nmeans = [0.10, 0.35, 0.20, 0.15, 0.17]\nerrors = [0.04, 0.03, 0.05, 0.06, 0.02]\ndownerrors = [0.02, 0.02, 0.03, 0.04, 0.05]\nlegendtitles = [\"Dataset mean\", \"Mean\"]\ntexttitle = \"Dataset mean\"\nylabel = \"Male Speaker presence (Fraction of reports)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for plotting\ncategories = [\n    \"AI ETHICS\",\n    \"REMOTE WORK\",\n    \"HEALTHCARE\",\n    \"CYBERSECURITY\",\n    \"CLIMATE ACTION\",\n]  # Capitalized category labels\nmeans = [0.10, 0.35, 0.20, 0.15, 0.17]\nerrors = [0.04, 0.03, 0.05, 0.06, 0.02]\ndownerrors = [0.02, 0.02, 0.03, 0.04, 0.05]\nlegendtitles = [\"Dataset mean\", \"Mean\"]\ntexttitle = \"Dataset mean\"\nylabel = \"Male Speaker presence (Fraction of reports)\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plotting the data\nfig, ax = plt.subplots(\n    figsize=(8, 6)\n)  # Adjusting figure size to match original image dimensions\nax.errorbar(\n    categories,\n    means,\n    yerr=[errors, downerrors],\n    fmt=\"o\",\n    color=\"blue\",\n    ecolor=\"blue\",\n    capsize=5,\n)\n\n# Adding a legend with both \"Mean\" and \"Dataset mean\"\ndataset_mean = 0.253\nmean_line = ax.errorbar(\n    [], [], yerr=[], fmt=\"o\", color=\"blue\", ecolor=\"blue\", capsize=5\n)\ndataset_mean_line = ax.axhline(\n    y=dataset_mean, color=\"gray\", linestyle=\"--\", linewidth=1\n)\nax.legend(\n    [dataset_mean_line, mean_line],\n    legendtitles,\n    loc=\"upper right\",\n    fancybox=True,\n    framealpha=1,\n    shadow=True,\n    borderpad=1,\n)\n# Adding a horizontal line for dataset mean and text annotation with a white background\nax.text(\n    0.95,\n    dataset_mean,\n    texttitle,\n    va=\"center\",\n    ha=\"right\",\n    backgroundcolor=\"white\",\n    transform=ax.get_yaxis_transform(),\n)\n# Setting labels\nax.set_ylabel(ylabel)\nax.set_title(\"\")\nplt.xticks(rotation=30)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorpoint_5.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_6", "instruction": "There is a reference image for you and I also have a set of data about **sine wave measurements with error margins**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# example data\nx = np.array([0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\ny = np.sin(x)\nxerr = 0.1\nyerr = 0.15\n\n# lower & upper limits of the error\nlolims = np.array([1, 0, 0, 1, 0, 0, 1, 0, 0, 1], dtype=bool)\nuplims = np.array([0, 0, 1, 0, 1, 0, 0, 1, 0, 0], dtype=bool)\nls = \"None\"\nlabels = [\n\"sine wave\",\n\"upper limits\",\n\"lower limits\",\n\"upper and lower limits\",\n\"random\",\n]\ntitle = \"Errorbar upper and lower limits\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# example data\nx = np.array([0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\ny = np.sin(x)\nxerr = 0.1\nyerr = 0.15\n\n# lower & upper limits of the error\nlolims = np.array([1, 0, 0, 1, 0, 0, 1, 0, 0, 1], dtype=bool)\nuplims = np.array([0, 0, 1, 0, 1, 0, 0, 1, 0, 0], dtype=bool)\nls = \"None\"\nlabels = [\n    \"sine wave\",\n    \"upper limits\",\n    \"lower limits\",\n    \"upper and lower limits\",\n    \"random\",\n]\ntitle = \"Errorbar upper and lower limits\"\nxlim = [0, 5.5]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# standard error bars\nax.errorbar(x, y, xerr=xerr, yerr=yerr, label=labels[0], linestyle=ls)\n\n# including upper limits\nax.errorbar(\n    x, y + 0.5, xerr=xerr, yerr=yerr, uplims=uplims, label=labels[1], linestyle=ls\n)\n\n# including lower limits\nax.errorbar(\n    x, y + 1.0, xerr=xerr, yerr=yerr, lolims=lolims, label=labels[2], linestyle=ls\n)\n\n# including upper and lower limits\nax.errorbar(\n    x,\n    y + 1.5,\n    xerr=xerr,\n    yerr=yerr,\n    lolims=lolims,\n    uplims=uplims,\n    marker=\"o\",\n    markersize=8,\n    label=labels[3],\n    linestyle=ls,\n)\n\n# Plot a series with lower and upper limits in both x & y\n# constant x-error with varying y-error\nxerr = 0.2\nyerr = np.full_like(x, 0.2)\nyerr[[3, 6]] = 0.3\n\n# mock up some limits by modifying previous data\nxlolims = lolims\nxuplims = uplims\nlolims = np.zeros_like(x)\nuplims = np.zeros_like(x)\nlolims[[6]] = True  # only limited at this index\nuplims[[3]] = True  # only limited at this index\n\n# do the plotting\nax.errorbar(\n    x,\n    y + 2.1,\n    xerr=xerr,\n    yerr=yerr,\n    xlolims=xlolims,\n    xuplims=xuplims,\n    uplims=uplims,\n    lolims=lolims,\n    marker=\"o\",\n    markersize=8,\n    linestyle=\"none\",\n    label=labels[4],\n)\n\n# tidy up the figure\nax.set_xlim(xlim)\nax.set_title(title)\nplt.legend(bbox_to_anchor=(0.5, 1.15), ncol=5, loc=\"upper center\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorpoint_6.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_7", "instruction": "There is a reference image for you and I also have a set of data about **the relationship between a range of values and their natural logarithm, including the associated errors**. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# example data\n# Generating new data\nx = np.arange(0.1, 10, 0.5)\ny = np.log(x)\nerror = 0.1 + 0.3 * x\nlower_error = 0.5 * error\nupper_error = error\nasymmetric_error = [lower_error, upper_error]\ntitle = \"logarithmic variable, asymmetric error\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# example data\n# Generating new data\nx = np.arange(0.1, 10, 0.5)\ny = np.log(x)\nerror = 0.1 + 0.3 * x\nlower_error = 0.5 * error\nupper_error = error\nasymmetric_error = [lower_error, upper_error]\ntitle = \"logarithmic variable, asymmetric error\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, (ax0, ax1) = plt.subplots(figsize=(10, 4), ncols=2, sharex=True)\n\nax0.errorbar(x, y, yerr=error, fmt=\"o\", color=\"#b383b9\")\nax0.set_title(title)\n\nax1.errorbar(x, y, xerr=asymmetric_error, fmt=\"o\", color=\"#4b9c7a\")\nax1.set_title(title)\nax1.set_yscale(\"log\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorpoint_7.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_8", "instruction": "There is a reference image for you and I also have a set of data about temperature readings. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generating new data\nx = np.linspace(0, 20, 10)\ny = np.random.uniform(200, 400, 10)\nupper_error = np.random.uniform(20, 50, 10)\ndown_error = np.random.uniform(10, 30, 10)\nleft_error = [0.5] * 10\nright_error = [1.0] * 10\ntitle = \"temperature readings, asymmetric error\"\nxhline = 300\nlabel = \"temperature errorbar\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generating new data\nx = np.linspace(0, 20, 10)\ny = np.random.uniform(200, 400, 10)\nupper_error = np.random.uniform(20, 50, 10)\ndown_error = np.random.uniform(10, 30, 10)\nleft_error = [0.5] * 10\nright_error = [1.0] * 10\ntitle = \"temperature readings, asymmetric error\"\nxhline = 300\nlabel = \"temperature errorbar\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(10, 7))\nax.errorbar(\n    x,\n    y,\n    xerr=[left_error, right_error],\n    yerr=[down_error, upper_error],\n    fmt=\"*\",\n    color=\"#4b9c7a\",\n    capsize=3,\n    label=label,\n)\nfor i, (xi, yi, uperror, downerror) in enumerate(zip(x, y, upper_error, down_error)):\n    ax.text(\n        xi + 0.3, yi + 0.5 * uperror, r\"${+%.3f}$\" % (uperror), va=\"center\", ha=\"center\"\n    )\n    ax.text(\n        xi + 0.3,\n        yi - 0.5 * downerror,\n        r\"${-%.3f}$\" % (downerror),\n        va=\"center\",\n        ha=\"center\",\n    )\nax.set_title(title)\nax.legend()\nax.axhline(xhline, color=\"y\", linestyle=\"--\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorpoint_8.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_9", "instruction": "There is a reference image for you and I also have a set of data about pressure measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generating new data\nx = np.linspace(0, 30, 9)\ny = np.random.uniform(120, 210, 9)\nleft_error = np.random.uniform(5, 15, 9)\nright_error = np.random.uniform(5, 15, 9)\ntitle = \"pressure measurements, asymmetric error\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generating new data\nx = np.linspace(0, 30, 9)\ny = np.random.uniform(120, 210, 9)\nleft_error = np.random.uniform(5, 15, 9)\nright_error = np.random.uniform(5, 15, 9)\ntitle = \"pressure measurements, asymmetric error\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(10, 7))\nax.errorbar(\n    x,\n    y,\n    xerr=[left_error, right_error],\n    fmt=\"o\",\n    color=\"#6d32a8\",\n    capsize=0,\n    label=\"errorbar\",\n)\nfor i, (xi, yi, lefterror, righterror) in enumerate(zip(x, y, left_error, right_error)):\n    ax.text(\n        xi - 0.8 * lefterror,\n        yi + 0.1,\n        r\"${-%.1f}$\" % (lefterror),\n        va=\"center\",\n        ha=\"center\",\n    )\n    ax.text(\n        xi + 0.8 * righterror,\n        yi + 0.1,\n        r\"${+%.1f}$\" % (righterror),\n        va=\"center\",\n        ha=\"center\",\n    )\nax.set_title(title)\nax.legend(loc=\"upper left\")\nax.xaxis.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('errorpoint_9.pdf', bbox_inches='tight')"}
{"idx": "errorpoint_10", "instruction": "There is a reference image for you and I also have a set of data about sensor readings. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nlabels = [\"alpha\", \"beta\", \"gamma\"]\n\nx = np.linspace(0, 25, 6)\ny1 = np.random.uniform(50, 100, 6)\ny2 = np.random.uniform(60, 120, 6)\ny3 = np.random.uniform(30, 80, 6)\nerror1 = [np.random.uniform(5, 10, 6), np.random.uniform(5, 10, 6)]\nerror2 = [np.random.uniform(8, 15, 6), np.random.uniform(8, 15, 6)] # Symmetric horizontal error\nerror3 = np.random.uniform(4, 10, 6)\ntitle = \"Sensor Readings, Symmetric Error\"\nxvline = 12\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 9.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n\nlabels = [\"alpha\", \"beta\", \"gamma\"]\n\nx = np.linspace(0, 25, 6)\ny1 = np.random.uniform(50, 100, 6)\ny2 = np.random.uniform(60, 120, 6)\ny3 = np.random.uniform(30, 80, 6)\nerror1 = [np.random.uniform(5, 10, 6), np.random.uniform(5, 10, 6)]\nerror2 = [np.random.uniform(8, 15, 6), np.random.uniform(8, 15, 6)]  # Symmetric horizontal error\nerror3 = np.random.uniform(4, 10, 6)\ntitle = \"Sensor Readings, Symmetric Error\"\nxvline = 12\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with three subplots and shared x-axis\nfig, (ax0, ax1, ax2) = plt.subplots(figsize=(6, 9), nrows=3, sharex=True)\ncolors1 = plt.get_cmap(\"Set2\")(np.linspace(0.2, 0.8, 6))\ncolors2 = plt.get_cmap(\"coolwarm_r\")(np.linspace(0.2, 0.8, 6))\n# First subplot with symmetric vertical error bars\nfor i in range(len(x)):\n    ax0.errorbar(\n        x[i],\n        y1[i],\n        yerr=[[error1[0][i]], [error1[1][i]]],\n        fmt=\"o\",\n        color=colors1[i],\n        capsize=4,\n    )\n    ax0.text(x[i] - 0.5, y1[i], f\"{y1[i]:.2f}\", fontsize=8, ha=\"right\")\nax0.set_title(title)\nax0.axhline(y=14.5, linestyle=\"--\", color=\"#192770\")\nax0.yaxis.grid(True)\nax0.xaxis.grid(False)\n\n# Second subplot with symmetric horizontal error bars\nfor i in range(len(x)):\n    ax1.errorbar(\n        x[i],\n        y2[i],\n        xerr=[[error2[0][i]], [error2[1][i]]],\n        fmt=\"o\",\n        color=colors2[i],\n        markersize=8,\n    )\n    ax1.text(x[i] + 0.5, y2[i] + 0.1, f\"{y2[i]:.2f}\", fontsize=8, ha=\"left\")\nax1.set_title(title)\nax1.axvline(x=xvline, linestyle=\"--\", color=\"#265b2b\")\nax1.xaxis.grid(True)\nax1.yaxis.grid(False)\n\n# Third subplot with symmetric vertical error bars\nax2.errorbar(x, y3, yerr=error3, fmt=\"*\", color=\"#465d87\", capsize=2)\nax2.set_title(title)\nax2.legend([labels[2]])\nax2.yaxis.grid(True)\nax2.xaxis.grid(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.savefig('errorpoint_10.pdf', bbox_inches='tight')"}
{"idx": "hist_1", "instruction": "There is a reference image for you and I also have a set of data about health metrics such as Blood Pressure, Cholesterol Levels, Body Mass Index, Heart Rate, Blood Sugar, and Oxygen Saturation. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Simulating data for a new domain: Health\nsizes = np.linspace(500, 200, 6, dtype=int) # Generate sizes from 500 to 200\ndata = [\nnp.abs(np.random.normal(0, 0.4, size)) for size in sizes\n] # Generate data with mean 0 and take absolute value\n\nlabels = [\n\"Blood Pressure\",\n\"Cholesterol Levels\",\n\"Body Mass Index\",\n\"Heart Rate\",\n\"Blood Sugar\",\n\"Oxygen Saturation\",\n]\nxlabel=\"Health Metric Value\"\nylabel=\"Number of Patients\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulating data for a new domain: Health\nsizes = np.linspace(500, 200, 6, dtype=int)  # Generate sizes from 500 to 200\ndata = [\n    np.abs(np.random.normal(0, 0.4, size)) for size in sizes\n]  # Generate data with mean 0 and take absolute value\n\nlabels = [\n    \"Blood Pressure\",\n    \"Cholesterol Levels\",\n    \"Body Mass Index\",\n    \"Heart Rate\",\n    \"Blood Sugar\",\n    \"Oxygen Saturation\",\n]\nxlabel=\"Health Metric Value\"\nylabel=\"Number of Patients\"\nxlim=[0, 2]\nxticks=[0.0, 0.5, 1.0, 1.5, 2.0]\nbins=40\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Histogram plot\ncolors = [\"#d4f5f4\", \"#ffffc2\", \"#dacdfb\", \"#f4bab6\", \"#b8eabd\", \"#bfd6f4\"]\n\nplt.figure(figsize=(8, 7))\nplt.hist(\n    data,\n    bins=bins,\n    stacked=True,\n    edgecolor=\"black\",\n    linewidth=1.2,\n    color=colors,\n    label=labels,\n)\n\n# Set background color to white\nax = plt.gca()\nax.set_facecolor(\"white\")\n\n# Labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.xlim(xlim)\nplt.xticks(xticks)\nhandles, labels = plt.gca().get_legend_handles_labels()\n\n# Reverse handles and labels\nhandles = handles[::-1]\nlabels = labels[::-1]\n\nplt.legend(handles, labels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting the plot to match the original image's dimensions\nplt.tight_layout()\nplt.savefig('hist_1.pdf', bbox_inches='tight')"}
{"idx": "hist_2", "instruction": "There is a reference image for you and I also have a set of data about renewable energy metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Simulating data\nsizes = np.linspace(500, 200, 4, dtype=int) # Generate sizes from 500 to 200\n\ndata1 = np.abs(np.random.normal(2.5, 0.4, sizes[0]))\ndata2 = np.abs(np.random.normal(1.8, 0.4, sizes[1]))\ndata3 = np.abs(np.random.normal(2.1, 0.4, sizes[2]))\ndata4 = np.abs(np.random.normal(2.0, 0.4, sizes[3]))\nlabels = [\n\"Electric Vehicle Range\",\n\"Wind Turbine Efficiency\",\n\"Battery Storage Capacity\",\n\"Geothermal Temperature\",\n]\nxlabel = \"Measurement Value\"\nylabel = \"Frequency\"\nbins = np.linspace(0, 4, 20)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 9.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulating data\nsizes = np.linspace(500, 200, 4, dtype=int)  # Generate sizes from 500 to 200\n\ndata1 = np.abs(np.random.normal(2.5, 0.4, sizes[0]))\ndata2 = np.abs(np.random.normal(1.8, 0.4, sizes[1]))\ndata3 = np.abs(np.random.normal(2.1, 0.4, sizes[2]))\ndata4 = np.abs(np.random.normal(2.0, 0.4, sizes[3]))\nlabels = [\n    \"Electric Vehicle Range\",\n    \"Wind Turbine Efficiency\",\n    \"Battery Storage Capacity\",\n    \"Geothermal Temperature\",\n]\nxlabel = \"Measurement Value\"\nylabel = \"Frequency\"\nbins = np.linspace(0, 4, 20)\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Histogram plot\n\ncolors = [\"#6a9ad0\", \"#5985e1\", \"#4faeea\", \"#b1cf95\"]\n\nplt.figure(figsize=(9, 6))  # Adjusted to match the original image's dimensions\n\nplt.hist(\n    [data1, data2, data3, data4],\n    bins=bins,\n    stacked=True,\n    label=labels,\n    color=colors,\n    edgecolor=\"black\",\n)\n\n# Labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('hist_2.pdf', bbox_inches='tight')"}
{"idx": "hist_3", "instruction": "There is a reference image for you and I also have a set of data about animal weights. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Simulating data\ncamel_weights = np.random.exponential(scale=0.03, size=1000)\nkangaroo_weights = np.random.exponential(scale=0.03, size=1000)\n\n# Define the number of bins and bin edges for consistent bin width\nbins = np.histogram(np.hstack((camel_weights, kangaroo_weights)), bins=25)[1]\nlabels = [\"Elephant\", \"Giraffe\"]\nxlabel = \"Animal Weight\"\nylabel = \"Count\"\ntitle = \"Animal Weights Distribution\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Simulating data\ncamel_weights = np.random.exponential(scale=0.03, size=1000)\nkangaroo_weights = np.random.exponential(scale=0.03, size=1000)\n\n# Define the number of bins and bin edges for consistent bin width\nbins = np.histogram(np.hstack((camel_weights, kangaroo_weights)), bins=25)[1]\nlabels =  [\"Elephant\", \"Giraffe\"]\nxticks = [0.00, 0.05, 0.10, 0.15]\nxlabel = \"Animal Weight\"\nylabel = \"Count\"\ntitle = \"Animal Weights Distribution\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nplt.figure(figsize=(5, 4))\n\n# Create the histograms without stacking\nplt.hist(\n    camel_weights,\n    bins=bins,\n    color=\"#85c23b\",\n    label=labels[0],\n    edgecolor=\"white\",\n    linewidth=0.6,\n    alpha=0.6,\n    zorder=2,\n)\nplt.hist(\n    kangaroo_weights,\n    bins=bins,\n    color=\"#e57476\",\n    label=labels[1],\n    edgecolor=\"white\",\n    linewidth=0.6,\n    alpha=0.6,\n    zorder=3,\n)\n\n# Set the background color\nplt.gca().set_facecolor(\"#f5f5f5\")\n\n# Set the scale of y-axis to logarithmic\nplt.yscale(\"log\")\n\n# Set the x-axis ticks\nplt.xticks(xticks)\nplt.tick_params(axis=\"x\", length=0)\n\n# Add white grid lines and place them behind the bars (zorder=0)\nplt.grid(color=\"white\", linestyle=\"-\", linewidth=1.5, zorder=0)\n\n# Set the y-axis ticks and remove all line markings (spines)\nplt.yticks([1, 10, 100])\nplt.tick_params(axis=\"y\", length=0)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)  # Remove all the spines\n\n# remove small dash on y-axis\nplt.tick_params(axis=\"y\", which=\"minor\", length=0)\n\n# Set labels and title\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\n\n# Add legend with title\nplt.legend(title=\"Class\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('hist_3.pdf', bbox_inches='tight')"}
{"idx": "hist_4", "instruction": "There is a reference image for you and I also have a set of data about technology usage and healthcare. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data (replace with actual data)\n# Generate new data\ntech_usage_data = np.random.exponential(30, 1000)\nhealthcare_data = np.random.gamma(2, 20, 1000)\n\n# Define bins aligned for both histograms\nbins = np.histogram(np.hstack((tech_usage_data, healthcare_data)), bins=30)[1]\nlabels = [\"Tech Usage\", \"Healthcare\"]\nxlabel = \"Usage Difference (Healthcare vs. Tech)\"\nylabel = \"Number of Observations\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual data)\n# Generate new data\ntech_usage_data = np.random.exponential(30, 1000)\nhealthcare_data = np.random.gamma(2, 20, 1000)\n\n# Define bins aligned for both histograms\nbins = np.histogram(np.hstack((tech_usage_data, healthcare_data)), bins=30)[1]\nlabels = [\"Tech Usage\", \"Healthcare\"]\nxlabel = \"Usage Difference (Healthcare vs. Tech)\"\nylabel = \"Number of Observations\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(\n    figsize=(5, 3)\n)  # Adjusted to match the original image's dimensions\n\n# Calculate the histogram data for each set and plot them\nax.hist(\n    tech_usage_data,\n    bins=bins,\n    color=\"#f2a965\",\n    edgecolor=\"#fdf460\",\n    linewidth=1.2,\n    label=labels[0],\n    align=\"mid\",\n    histtype=\"stepfilled\",\n    alpha=0.7,\n)\nax.hist(\n    healthcare_data,\n    bins=bins,\n    color=\"#709dc6\",\n    edgecolor=\"#ca3531\",\n    linewidth=1.2,\n    label=labels[1],\n    align=\"mid\",\n    histtype=\"stepfilled\",\n    alpha=0.7,\n)\n\n# To show the overlapping areas, we plot the two histograms with transparency\nax.hist(\n    tech_usage_data,\n    bins=bins,\n    color=\"#f2a965\",\n    edgecolor=\"#fdf460\",\n    linewidth=1.2,\n    alpha=0.7,\n    align=\"mid\",\n    histtype=\"stepfilled\",\n)\nax.hist(\n    healthcare_data,\n    bins=bins,\n    color=\"#709dc6\",\n    edgecolor=\"#ca3531\",\n    linewidth=1.2,\n    alpha=0.7,\n    align=\"mid\",\n    histtype=\"stepfilled\",\n)\n\n# Set labels\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Add legend\nax.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\n# Save the plot\nplt.savefig('hist_4.pdf', bbox_inches='tight')"}
{"idx": "hist_5", "instruction": "There is a reference image for you and I also have a set of data about the age of respondents. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to approximate the distribution in the image\ndata = np.random.normal(loc=50, scale=10, size=10000)\ndata = data[(data > 20) & (data < 80)] # Limiting the data to match the x-axis in the image\nxlabel = \"Age of Respondents\"\nylabel = \"Frequency\"\nbinslist = [20, 20]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 4.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to approximate the distribution in the image\ndata = np.random.normal(loc=50, scale=10, size=10000)\ndata = data[(data > 20) & (data < 80)]  # Limiting the data to match the x-axis in the image\nxlabel = \"Age of Respondents\"\nylabel = \"Frequency\"\nbinslist = [20, 20]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(4, 3))\n\n# Show grid with some transparency\nplt.grid(True, linestyle=\"-\", linewidth=0.5, color=\"#000000\", alpha=0.1)\n\n# Create the histogram\nplt.hist(data, bins=binslist[0], color=\"#dca684\")\n\n# Create the histogram with histtype='step' for edge-only bars\nplt.hist(\n    data, bins=binslist[1], color=\"#dca684\", edgecolor=\"#d1885c\", histtype=\"step\", linewidth=1.2\n)\n\n# Set the title and labels to match the image\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.savefig('hist_5.pdf', bbox_inches='tight')"}
{"idx": "hist_6", "instruction": "There is a reference image for you and I also have a set of data about the probability of outcomes for two different scenarios: one where the outcomes are correctly classified and another where they are misclassified. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data (replace with your actual data)\ncorrectly_classified = np.random.beta(a=2.0, b=5.0, size=1000)\nmisclassified = np.random.beta(a=1.0, b=4.0, size=1000)\nlabels = [\"High Probability\", \"Low Probability\"]\nxlabel = \"Probability of Outcome\"\nbins = 10\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with your actual data)\ncorrectly_classified = np.random.beta(a=2.0, b=5.0, size=1000)\nmisclassified = np.random.beta(a=1.0, b=4.0, size=1000)\nlabels = [\"High Probability\", \"Low Probability\"]\nxlabel = \"Probability of Outcome\"\nbins = 10\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(5, 3))\n\n# Plot histograms with stacked bars\nplt.hist(\n    [correctly_classified, misclassified],\n    bins=bins,\n    stacked=True,\n    label=labels,\n    color=[\"#3b75af\", \"#ef8636\"],\n)\n\n# Add labels and title\nplt.xlabel(xlabel)\nplt.legend()\n\n# Adjust x-axis range to match the reference picture and add a little space at the beginning of the x-axis\nplt.xlim(left=plt.xlim()[0], right=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('hist_6.pdf', bbox_inches='tight')"}
{"idx": "hist_9", "instruction": "There is a reference image for you and I also have a set of data about environmental measurements. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data (replace with your actual data)\ndata1 = np.random.normal(15, 2, 10000) # Simulated temperature data in degrees Celsius\ndata2 = np.random.normal(10, 3, 10000) # Simulated humidity data in percentage\nbinslist = [100, 100]\ntitles = [\"Temperature Distribution\", \"Humidity Distribution\"]\nrangelist = [(8, 22), (0, 25)]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with your actual data)\ndata1 = np.random.normal(15, 2, 10000)  # Simulated temperature data in degrees Celsius\ndata2 = np.random.normal(10, 3, 10000)  # Simulated humidity data in percentage\nbinslist = [100, 100]\ntitles = [\"Temperature Distribution\", \"Humidity Distribution\"]\nrangelist = [(8, 22), (0, 25)]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes with specified figure size\nfig, axs = plt.subplots(2, 1, figsize=(10, 7), gridspec_kw={\"hspace\": 0.3})\n\n# First histogram (MNIST)\naxs[0].hist(data1, bins=binslist[0], range=rangelist[0], color=\"#3b75af\")\naxs[0].set_title(titles[0])\n\n# Second histogram (FashionMNIST)\naxs[1].hist(data2, bins=binslist[1], range=rangelist[1], color=\"#3b75af\")\naxs[1].set_title(titles[1])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('hist_9.pdf', bbox_inches='tight')"}
{"idx": "hist_10", "instruction": "There is a reference image for you and I also have a set of data about Sports Performance. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data (replace with actual data)\n# Updated data for a different domain: Sports Performance\nintra_team_performance = np.random.normal(0.5, 0.1, 1000) # Simulated performance similarity within the same team\ninter_team_performance = np.random.normal(0.7, 0.2, 1000) # Simulated performance similarity between different teams\nintra_game_performance = np.random.normal(0.4, 0.1, 1000) # Simulated performance similarity within the same game\ninter_game_performance = np.random.normal(0.6, 0.2, 1000) # Simulated performance similarity between different games\nxlabel = \"Performance Similarity\"\nylabel = \"Frequency\"\nbinslist = [30, 30, 30, 30]\nlabels = [\"Inter Team\", \"Intra Team\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 3.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data (replace with actual data)\n# Updated data for a different domain: Sports Performance\nintra_team_performance = np.random.normal(0.5, 0.1, 1000)  # Simulated performance similarity within the same team\ninter_team_performance = np.random.normal(0.7, 0.2, 1000)  # Simulated performance similarity between different teams\nintra_game_performance = np.random.normal(0.4, 0.1, 1000)  # Simulated performance similarity within the same game\ninter_game_performance = np.random.normal(0.6, 0.2, 1000)  # Simulated performance similarity between different games\nxlabel = \"Performance Similarity\"\nylabel = \"Frequency\"\nbinslist = [30, 30, 30, 30]\nlabels = [\"Inter Team\", \"Intra Team\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(10, 3))\n\n# Left subplot\nax_left = plt.subplot(1, 2, 1)\nplt.hist(\n    inter_team_performance, bins=binslist[0], alpha=0.5, label=labels[0], color=\"#4498c8\", zorder=2\n)\nplt.hist(\n    intra_team_performance, bins=binslist[1], alpha=0.5, label=labels[1], color=\"#5ac4a2\", zorder=3\n)\nleg = plt.legend(\n    frameon=False\n)  # Make legend background transparent and remove the border\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\nplt.gca().set_facecolor(\"#eaeaf1\")\nplt.grid(True, color=\"white\", zorder=0)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# Right subplot\nax_right = plt.subplot(1, 2, 2)\nplt.hist(\n    inter_game_performance,\n    bins=binslist[2],\n    alpha=0.5,\n    label=labels[0],\n    color=\"#4498c8\",\n    zorder=2,\n)\nplt.hist(\n    intra_game_performance,\n    bins=binslist[3],\n    alpha=0.5,\n    label=labels[1],\n    color=\"#5ac4a2\",\n    zorder=3,\n)\nleg = plt.legend(frameon=False)\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.tick_params(axis=\"both\", which=\"both\", length=0)\nplt.gca().set_facecolor(\"#eaeaf1\")\nplt.grid(True, color=\"white\", zorder=0)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# Set axis spine colors to black\nfor ax in [ax_left, ax_right]:\n    for spine in ax.spines.values():\n        spine.set_edgecolor(\"black\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the figure\nplt.savefig('hist_10.pdf', bbox_inches='tight')"}
{"idx": "hist_11", "instruction": "There is a reference image for you and I also have a set of data about caloric intake and population density. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate random data for demonstration\ndata1 = np.random.normal(2.5, 0.5, 500)\ndata2 = np.random.normal(3.0, 0.5, 1000)\nlabels = [\"Healthy\", \"Unhealthy\"]\nxlabel = \"Caloric Intake\"\nylabel = \"Population Density\"\ntitlelist = [\"(a) Study 1\", \"(b) Study 2\", \"(c) Study 3\", \"(d) Study 4\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate random data for demonstration\ndata1 = np.random.normal(2.5, 0.5, 500)\ndata2 = np.random.normal(3.0, 0.5, 1000)\nlabels = [\"Healthy\", \"Unhealthy\"]\nxlabel = \"Caloric Intake\"\nylabel = \"Population Density\"\ntitlelist = [\"(a) Study 1\", \"(b) Study 2\", \"(c) Study 3\", \"(d) Study 4\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set figure size to match the original image's dimensions\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot histograms for each subplot\nfor i, ax in enumerate(axs.flatten()):\n    ax.hist(\n        data1,\n        bins=30,\n        density=True,\n        alpha=0.6,\n        color=\"#f1a43a\",\n        label=labels[0],\n        edgecolor=\"black\",\n        linewidth=0.5,\n    )\n    ax.hist(\n        data2,\n        bins=30,\n        density=True,\n        alpha=0.6,\n        color=\"#3172bb\",\n        label=labels[1],\n        edgecolor=\"black\",\n        linewidth=0.5,\n    )\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.legend()\n\n# Set titles for each subplot\naxs[0, 0].set_title(titlelist[0])\naxs[0, 1].set_title(titlelist[1])\naxs[1, 0].set_title(titlelist[2])\naxs[1, 1].set_title(titlelist[3])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('hist_11.pdf', bbox_inches='tight')"}
{"idx": "hist_12", "instruction": "There is a reference image for you and I also have a set of data about population age distribution. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nimport numpy as np\n\n# Generate new data in a different domain (e.g., population age distribution)\ndata1 = np.random.normal(20, 4, 1000)\ndata2 = np.random.normal(18, 5, 1000)\ndata3 = np.random.normal(24, 8, 1000)\ndata4 = np.random.normal(30, 6, 1000)\n\n# Define the titles for each subplot (reflecting different demographic groups)\ntitles = [\n\"Urban Population Age\",\n\"Suburban Population Age\",\n\"Rural Population Age\",\n\"Metropolitan Population Age\",\n\"Male Age Distribution\",\n\"Female Age Distribution\",\n\"Children Age Distribution\",\n\"Elderly Age Distribution\",\n]\n\n# Define the colors for each subplot\nxlabel = \"Age\"\nylabel = \"Density\"\nbins = 20\nxvline = 20\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 7.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nimport numpy as np\n\n# Generate new data in a different domain (e.g., population age distribution)\ndata1 = np.random.normal(20, 4, 1000)\ndata2 = np.random.normal(18, 5, 1000)\ndata3 = np.random.normal(24, 8, 1000)\ndata4 = np.random.normal(30, 6, 1000)\n\n# Define the titles for each subplot (reflecting different demographic groups)\ntitles = [\n    \"Urban Population Age\",\n    \"Suburban Population Age\",\n    \"Rural Population Age\",\n    \"Metropolitan Population Age\",\n    \"Male Age Distribution\",\n    \"Female Age Distribution\",\n    \"Children Age Distribution\",\n    \"Elderly Age Distribution\",\n]\n\n# Define the colors for each subplot\nxlabel = \"Age\"\nylabel = \"Density\"\nbins = 20\nxvline = 20\n\ncolors = [\"blue\", \"blue\", \"red\", \"red\", \"purple\", \"purple\", \"orange\", \"orange\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(7, 8))  # Adjusted to match 720x864 dimensions\n\n# Create subplots\nfor i in range(8):\n    plt.subplot(4, 2, i + 1)\n    if i % 2 == 0:\n        data = data1 if i < 4 else data3\n    else:\n        data = data2 if i < 4 else data4\n    plt.hist(data, bins=bins, density=True, alpha=0.6, color=colors[i], range=(0, 40))\n    plt.title(titles[i])\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.axvline(x=xvline, color=\"k\", linestyle=\"--\", linewidth=1)  # Changed to dashed line\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust the layout and show the plot\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)  # Adjusted padding for tighter layout\nplt.savefig('hist_12.pdf', bbox_inches='tight')"}
{"idx": "hist_13", "instruction": "There is a reference image for you and I also have a set of data about temperature distributions in different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate bimodal data for city temperatures\nspring_temps = np.random.normal(loc=15, scale=3, size=200)\nfall_temps = np.random.normal(loc=20, scale=3, size=200)\ncity_temperatures = np.concatenate([spring_temps, fall_temps])\n\n# Generate bimodal data for countryside temperatures\ncountryside_summer_temps = np.random.normal(loc=25, scale=4, size=500)\ncountryside_winter_temps = np.random.normal(loc=5, scale=4, size=500)\ncountryside_temperatures = np.concatenate([countryside_summer_temps, countryside_winter_temps])\n\nlabels = [\"City\", \"Countryside\"]\nxlabel = \"Temperature (\u00ac\u221eC)\"\nylabel = \"Frequency\"\ntitle = \"Temperature Distribution in Different Regions\"\nlegendtitle = \"Location\"\n\nbins=15\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate bimodal data for city temperatures\nspring_temps = np.random.normal(loc=15, scale=3, size=200)\nfall_temps = np.random.normal(loc=20, scale=3, size=200)\ncity_temperatures = np.concatenate([spring_temps, fall_temps])\n\n# Generate bimodal data for countryside temperatures\ncountryside_summer_temps = np.random.normal(loc=25, scale=4, size=500)\ncountryside_winter_temps = np.random.normal(loc=5, scale=4, size=500)\ncountryside_temperatures = np.concatenate([countryside_summer_temps, countryside_winter_temps])\n\nlabels = [\"City\", \"Countryside\"]\nxticks = np.arange(0, 40, 5)\nyticks = [1, 50, 100]\nxlabel = \"Temperature (\u00b0C)\"\nylabel = \"Frequency\"\ntitle = \"Temperature Distribution in Different Regions\"\nlegendtitle = \"Location\"\n\nbins=15\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nplt.figure(figsize=(5, 5))\n\n# Define the number of bins and bin edges for consistent bin width\nbins = np.histogram(np.hstack((city_temperatures, countryside_temperatures)), bins=bins)[1]\n\n# Create the histograms without stacking\n# New colors using hex codes\nplt.hist(\n    city_temperatures,\n    bins=bins,\n    color=\"#1f77b4\",\n    label=labels[0],\n    edgecolor=\"white\",\n    linewidth=0.6,\n    alpha=0.6,\n    zorder=2,\n)\nplt.hist(\n    countryside_temperatures,\n    bins=bins,\n    color=\"#ff7f0e\",\n    label=labels[1],\n    edgecolor=\"white\",\n    linewidth=0.6,\n    alpha=0.6,\n    zorder=3,\n)\n\n# Set the background color\nplt.gca().set_facecolor(\"#f5f5f5\")\n\n# Set the scale of y-axis to logarithmic\nplt.yscale(\"log\")\n\n# Set the x-axis ticks\nplt.xticks(xticks)  # Adjusted to show more ticks\nplt.tick_params(axis=\"x\", length=0)\n\n# Add white grid lines and place them behind the bars (zorder=0)\nplt.grid(color=\"white\", linestyle=\"-\", linewidth=1.5, zorder=0)\n\n# Set the y-axis ticks and remove all line markings (spines)\nplt.yticks(yticks)  # Adjusted to show additional y-axis tick\nplt.tick_params(axis=\"y\", length=0)\n\n# Remove spine lines\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# remove small dash on y-axis\nplt.tick_params(axis=\"y\", which=\"minor\", length=0)\n\n# Set labels and title\nplt.xlabel(xlabel)  # Adjusted label\nplt.ylabel(ylabel)  # Adjusted label\nplt.title(title)  # Adjusted title\n\n# Move legend to the bottom center of the plot\nplt.legend(\n    title=legendtitle, loc=\"upper center\", bbox_to_anchor=(0.5, -0.15), ncol=2\n)  # Adjust legend position and make it span 2 columns\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to make room for the legend\nplt.tight_layout()  # We might need to adjust this to account for the new legend position\n\nplt.savefig('hist_13.pdf', bbox_inches='tight')"}
{"idx": "hist_14", "instruction": "There is a reference image for you and I also have a set of data about highway speeds and rush hour travel times. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# New sample data with different distribution characteristics\nhighway_speeds = np.random.uniform(60, 120, 1000)\n\n# Traffic data: travel times for a specific route during rush hour (minutes)\nrush_hour_travel_times = np.random.normal(45, 10, 1000)\n\n# Define bins aligned for both histograms with a little space between bars\nbin_width = 0.8 # Determines the space between bars; adjust as necessary for clear separation\nbins = np.histogram(np.hstack((highway_speeds, rush_hour_travel_times)), bins=40)[1]\n\n# Updated labels and titles\nlabels = [\"Highway Speeds (km/h)\", \"Rush Hour Travel Times (minutes)\"]\nxlabel = \"Value\"\nylabel = \"Frequency\"\ntitle = \"Comparison of Highway Speeds and Rush Hour Travel Times\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# New sample data with different distribution characteristics\nhighway_speeds = np.random.uniform(60, 120, 1000)\n\n# Traffic data: travel times for a specific route during rush hour (minutes)\nrush_hour_travel_times = np.random.normal(45, 10, 1000)\n\n# Define bins aligned for both histograms with a little space between bars\nbin_width = 0.8  # Determines the space between bars; adjust as necessary for clear separation\nbins = np.histogram(np.hstack((highway_speeds, rush_hour_travel_times)), bins=40)[1]\n\n# Updated labels and titles\nlabels = [\"Highway Speeds (km/h)\", \"Rush Hour Travel Times (minutes)\"]\nxlabel = \"Value\"\nylabel = \"Frequency\"\ntitle = \"Comparison of Highway Speeds and Rush Hour Travel Times\"\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))  # Adjust size if needed\n\n# Plot histograms directly using plt.hist() with appropriate alignment\nax.hist(\n    highway_speeds,\n    bins=bins,\n    alpha=0.7,\n    label=labels[0],\n    color=\"#ca3142\",\n    edgecolor=\"black\",\n)\nax.hist(\n    rush_hour_travel_times,\n    bins=bins,\n    alpha=0.7,\n    label=labels[1],\n    color=\"#458ef7\",\n    edgecolor=\"black\",\n)\n\n# Set labels\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Add title\nax.set_title(\n    title\n)  # Adjust title to reflect the data\n\n# Add grid\nax.grid(color=\"#d3d3d3\", linestyle=\"-\", linewidth=1, zorder=0)\n\n# Add legend at a new location\nax.legend(loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\n# Save the plot\nplt.savefig('hist_14.pdf', bbox_inches='tight')"}
{"idx": "hist_17", "instruction": "There is a reference image for you and I also have a set of data about various technology sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nsizes = np.linspace(500, 200, 6, dtype=int) # Generate sizes from 300 to 100\ndata = [\nnp.abs(np.random.normal(0, 0.3, size)) for size in sizes\n] # Generate data with mean 0 and take absolute value\n\nlabels = [\n\"Renewable Energy\",\n\"Artificial Intelligence\",\n\"Quantum Computing\",\n\"Gene Editing\",\n\"Climate Change\",\n\"Cybersecurity\",\n]\n\n# Adjusting the data and labels for the second histogram\n# Modifying data to represent a different distribution and adjusting labels to reflect changes\nmodified_sizes = np.linspace(600, 300, 6, dtype=int) # Generate sizes from 300 to 200\nmodified_data = [\nnp.abs(np.random.normal(0, 0.28, size)) for size in modified_sizes\n] # Increase variance to 0.28\n\nmodified_labels = [\n\"Modified \" + label for label in labels\n] # Prepend 'Modified ' to each original label\n\nxlabels = [\"Research Impact Score\", \"Research Impact Score\"]\nylabels = [\"Number of Publications\", \"Number of Publications\"]\nbinslist = [30, 30]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 16.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nsizes = np.linspace(500, 200, 6, dtype=int)  # Generate sizes from 300 to 100\ndata = [\n    np.abs(np.random.normal(0, 0.3, size)) for size in sizes\n]  # Generate data with mean 0 and take absolute value\n\nlabels = [\n    \"Renewable Energy\",\n    \"Artificial Intelligence\",\n    \"Quantum Computing\",\n    \"Gene Editing\",\n    \"Climate Change\",\n    \"Cybersecurity\",\n]\n\n# Adjusting the data and labels for the second histogram\n# Modifying data to represent a different distribution and adjusting labels to reflect changes\nmodified_sizes = np.linspace(600, 300, 6, dtype=int)  # Generate sizes from 300 to 200\nmodified_data = [\n    np.abs(np.random.normal(0, 0.28, size)) for size in modified_sizes\n]  # Increase variance to 0.28\n\nmodified_labels = [\n    \"Modified \" + label for label in labels\n]  # Prepend 'Modified ' to each original label\n\nxlabels = [\"Research Impact Score\", \"Research Impact Score\"]\nylabels = [\"Number of Publications\", \"Number of Publications\"]\nxlims = [[0, 1], [0, 1]]\nxticks = [[0.0, 0.2, 0.4, 0.6, 0.8, 1.0], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]]\nbinslist = [30, 30]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a 1 x 2 subplot again for updated plots\nfig, axs = plt.subplots(nrows=1, ncols=2, figsize=(16, 7))\n\ncolors = [\"#70d6ff\", \"#ff70a6\", \"#ff9770\", \"#ffd670\", \"#e9ff70\", \"#bfd6f4\"]\n\n# First subplot (original settings)\naxs[0].hist(\n    data,\n    bins=binslist[0],\n    stacked=True,\n    edgecolor=\"black\",\n    linewidth=1.2,\n    color=colors,\n    label=labels,\n)\naxs[0].set_xlabel(xlabels[0])\naxs[0].set_ylabel(ylabels[0])\naxs[0].set_xlim(xlims[0])\naxs[0].set_xticks(xticks[0])\naxs[0].set_facecolor(\"white\")\nhandles, labels = axs[0].get_legend_handles_labels()\nhandles = handles[::-1]\nlabels = labels[::-1]\naxs[0].legend(handles, labels, loc=\"upper right\")\n\n# Second subplot (modified settings)\naxs[1].hist(\n    modified_data,\n    bins=binslist[1],\n    stacked=True,\n    edgecolor=\"black\",\n    linewidth=1.2,\n    color=colors,\n    label=modified_labels,\n)\naxs[1].set_xlabel(xlabels[1])\naxs[1].set_ylabel(ylabels[1])\naxs[1].set_xlim(xlims[1])\naxs[1].set_xticks(xticks[1])\naxs[1].set_facecolor(\"white\")\nhandles, labels = axs[1].get_legend_handles_labels()\nhandles = handles[::-1]\nlabels = labels[::-1]\naxs[1].legend(handles, labels, loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('hist_17.pdf', bbox_inches='tight')"}
{"idx": "hist_18", "instruction": "There is a reference image for you and I also have a set of data about tech patents across various fields from 2019 to 2023. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Expanded data\ntech_fields = [\n\"Cybersecurity\",\n\"Blockchain Technology\",\n\"Internet of Things\",\n\"5G Technology\",\n\"Autonomous Vehicles\",\n]\n\nnumber_of_patents = np.array(\n[\nnp.random.randint(60, 200, 100), # Cybersecurity\nnp.random.randint(50, 150, 100), # Blockchain Technology\nnp.random.randint(100, 250, 100), # Internet of Things\nnp.random.randint(30, 100, 100), # 5G Technology\nnp.random.randint(40, 120, 100), # Autonomous Vehicles\n]\n)\nxlabel = \"Number of Patents\"\nylabel = \"Frequency\"\ntitle = \"Histogram of Tech Patents Across Various Fields 2019-2023\"\n\nbins = np.linspace(0, 300, 30) # Adjusted bin range to accommodate new data\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Expanded data\ntech_fields = [\n    \"Cybersecurity\",\n    \"Blockchain Technology\",\n    \"Internet of Things\",\n    \"5G Technology\",\n    \"Autonomous Vehicles\",\n]\n\nnumber_of_patents = np.array(\n    [\n        np.random.randint(60, 200, 100),  # Cybersecurity\n        np.random.randint(50, 150, 100),  # Blockchain Technology\n        np.random.randint(100, 250, 100),  # Internet of Things\n        np.random.randint(30, 100, 100),  # 5G Technology\n        np.random.randint(40, 120, 100),  # Autonomous Vehicles\n    ]\n)\n\n\nxlabel = \"Number of Patents\"\nylabel = \"Frequency\"\ntitle = \"Histogram of Tech Patents Across Various Fields 2019-2023\"\n\nbins = np.linspace(0, 300, 30)  # Adjusted bin range to accommodate new data\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nplt.figure(figsize=(12, 8))\nwarmer_colors = [\"#FF4500\", \"#FF8C00\", \"#FFA500\", \"#FF6347\", \"#FFD700\"]\n\nfor i, category in enumerate(tech_fields):\n    plt.hist(\n        number_of_patents[i],\n        bins=bins,\n        alpha=0.5,\n        color=warmer_colors[i % len(warmer_colors)],\n        label=category,\n    )\n\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\nplt.title(title)\nplt.legend(loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Displaying the plot with tight layout to minimize white space\nplt.tight_layout()\nplt.savefig('hist_18.pdf', bbox_inches='tight')"}
{"idx": "hist_19", "instruction": "There is a reference image for you and I also have a set of data about anomaly detection rates. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data with more random distribution\ndata1 = np.random.normal(0.7, 0.1, 10000)\ndata2 = np.random.normal(0.85, 0.12, 10000)\ndata3= np.random.normal(0.75, 0.15, 10000) # Additional data with more variance\ndata4 = np.random.normal(0.9, 0.13, 10000) # Additional data with more variance\n\nsuptitle = \"Anomaly Detection Rate Distribution\"\nbinslist = [100, 100]\ntitles = [\"(a) System A - Detection Rate\", \"(b) System B - Detection Rate\"]\nlabels = [\"Normal\", \"Anomalous\"]\nranges=[0, 1.5]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data with more random distribution\ndata1 = np.random.normal(0.7, 0.1, 10000)\ndata2 = np.random.normal(0.85, 0.12, 10000)\ndata3= np.random.normal(0.75, 0.15, 10000)  # Additional data with more variance\ndata4 = np.random.normal(0.9, 0.13, 10000)   # Additional data with more variance\n\nsuptitle = \"Anomaly Detection Rate Distribution\"\nbinslist = [100, 100]\ntitles = [\"(a) System A - Detection Rate\", \"(b) System B - Detection Rate\"]\nlabels = [\"Normal\", \"Anomalous\"]\nranges=[0, 1.5]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes with specified figure size\nfig, axs = plt.subplots(2, 1, figsize=(10, 7), gridspec_kw={\"hspace\": 0.5})\n\n# Overall title (suptitle)\nfig.suptitle(suptitle)\n\n# First histogram (MNIST)\nn, bins, patches = axs[0].hist(\n    data1, bins=binslist[0], range=ranges, alpha=0.75, label=labels[0], color=\"#1f77b4\"\n)\naxs[0].hist(data3, bins=bins, alpha=0.75, label=labels[1], color=\"#ff7f0e\")\naxs[0].set_title(titles[0])\naxs[0].grid(True)  # Adding grid\naxs[0].legend()  # Adding legend\n\n# Second histogram (FashionMNIST)\naxs[1].hist(\n    data2, bins=binslist[1], range=(0, 0.3), alpha=0.75, label=labels[0], color=\"#2ca02c\"\n)\naxs[1].hist(data4, bins=bins, alpha=0.75, label=labels[1], color=\"#d62728\")\naxs[1].set_title(titles[1])\naxs[1].grid(True)  # Adding grid\naxs[1].legend()  # Adding legend\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout(\n    rect=[0, 0.03, 1, 0.95]\n)  # Adjust the layout to accommodate the overall title\n\nplt.savefig('hist_19.pdf', bbox_inches='tight')"}
{"idx": "hist_20", "instruction": "There is a reference image for you and I also have a set of data about company performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate random bimodal data with different distributions for each plot\ndata1_travel_time = np.concatenate(\n[np.random.normal(45, 8, 700), np.random.normal(20, 5, 300)]\n)\ndata2_travel_time = np.concatenate(\n[np.random.normal(35, 7, 500), np.random.normal(25, 4, 500)]\n)\n\ndata1_delivery_cost = np.concatenate(\n[np.random.normal(100, 20, 600), np.random.normal(50, 15, 400)]\n)\ndata2_delivery_cost = np.concatenate(\n[np.random.normal(90, 25, 700), np.random.normal(60, 10, 300)]\n)\n\ndata1_customer_satisfaction = np.concatenate(\n[np.random.normal(8, 1, 500), np.random.normal(4, 0.5, 500)]\n)\ndata2_customer_satisfaction = np.concatenate(\n[np.random.normal(7, 1.2, 700), np.random.normal(6, 0.75, 300)]\n)\n\ndata1_order_volume = np.concatenate(\n[np.random.normal(200, 30, 400), np.random.normal(100, 20, 600)]\n)\ndata2_order_volume = np.concatenate(\n[np.random.normal(180, 25, 500), np.random.normal(80, 10, 500)]\n)\n\nbinslist = [30, 30]\nlabels = [\"2022\", \"2023\"]\nxlabel = \"Value\"\nylabel = \"Density\"\ntitles = [\"(a) Travel Time Distribution\", \"(b) Delivery Cost Distribution\", \"(c) Customer Satisfaction Scores\", \"(d) Order Volume Over Time\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate random bimodal data with different distributions for each plot\ndata1_travel_time = np.concatenate(\n    [np.random.normal(45, 8, 700), np.random.normal(20, 5, 300)]\n)\ndata2_travel_time = np.concatenate(\n    [np.random.normal(35, 7, 500), np.random.normal(25, 4, 500)]\n)\n\ndata1_delivery_cost = np.concatenate(\n    [np.random.normal(100, 20, 600), np.random.normal(50, 15, 400)]\n)\ndata2_delivery_cost = np.concatenate(\n    [np.random.normal(90, 25, 700), np.random.normal(60, 10, 300)]\n)\n\ndata1_customer_satisfaction = np.concatenate(\n    [np.random.normal(8, 1, 500), np.random.normal(4, 0.5, 500)]\n)\ndata2_customer_satisfaction = np.concatenate(\n    [np.random.normal(7, 1.2, 700), np.random.normal(6, 0.75, 300)]\n)\n\ndata1_order_volume = np.concatenate(\n    [np.random.normal(200, 30, 400), np.random.normal(100, 20, 600)]\n)\ndata2_order_volume = np.concatenate(\n    [np.random.normal(180, 25, 500), np.random.normal(80, 10, 500)]\n)\n\nbinslist = [30, 30]\nlabels = [\"2022\", \"2023\"]\nxlabel = \"Value\"\nylabel = \"Density\"\ntitles = [\"(a) Travel Time Distribution\", \"(b) Delivery Cost Distribution\", \"(c) Customer Satisfaction Scores\", \"(d) Order Volume Over Time\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the plots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot histograms for each subplot\ndatasets = [\n    (data1_travel_time, data2_travel_time),\n    (data1_delivery_cost, data2_delivery_cost),\n    (data1_customer_satisfaction, data2_customer_satisfaction),\n    (data1_order_volume, data2_order_volume),\n]\nfor (data1, data2), ax in zip(datasets, axs.flatten()):\n    ax.hist(\n        data1,\n        bins=binslist[0],\n        density=True,\n        alpha=0.6,\n        color=\"deepskyblue\",\n        label=labels[0],\n        edgecolor=\"black\",\n        linewidth=0.5,\n    )\n    ax.hist(\n        data2,\n        bins=binslist[1],\n        density=True,\n        alpha=0.6,\n        color=\"orangered\",\n        label=labels[1],\n        edgecolor=\"black\",\n        linewidth=0.5,\n    )\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.grid(True)\n    ax.legend()\n\n# Set titles for each subplot\naxs[0, 0].set_title(titles[0])\naxs[0, 1].set_title(titles[1])\naxs[1, 0].set_title(titles[2])\naxs[1, 1].set_title(titles[3])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('hist_20.pdf', bbox_inches='tight')"}
{"idx": "multidiff_2", "instruction": "There is a reference image for you and I also have a set of data about athlete performance and resource allocation in sports facilities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the histogram: scores from two types of assessments\ntest_scores_public = np.random.normal(loc=60, scale=10, size=1000) # e.g., scores from public training facilities\ntest_scores_private = np.random.normal(loc=100, scale=10, size=1000) # e.g., scores from private training facilities\n\n# Data for the pie chart: resource allocation\nlabels = [\"Equipment\", \"Training\", \"Facilities\", \"Nutrition\", \"Coaching\"]\nbudget = [25, 20, 30, 15, 10]\nexplode = (0.1, 0, 0, 0, 0) # highlight the largest segment\ntitles= [\"Athlete Performance in Training\", \"Resource Allocation in Sports Facilities\"]\nxlabel = \"Performance Score\"\nylabel = \"Number of Athletes\"\nhistlabels = [\"Public Training\", \"Private Training\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the histogram: scores from two types of assessments\ntest_scores_public = np.random.normal(loc=60, scale=10, size=1000)  # e.g., scores from public training facilities\ntest_scores_private = np.random.normal(loc=100, scale=10, size=1000)  # e.g., scores from private training facilities\n\n# Data for the pie chart: resource allocation\nlabels = [\"Equipment\", \"Training\", \"Facilities\", \"Nutrition\", \"Coaching\"]\nbudget = [25, 20, 30, 15, 10]\ncolors = plt.cm.tab20c(np.linspace(0, 1, len(budget)))\nexplode = (0.1, 0, 0, 0, 0)  # highlight the largest segment\ntitles= [\"Athlete Performance in Training\", \"Resource Allocation in Sports Facilities\"]\nxlabel = \"Performance Score\"\nylabel = \"Number of Athletes\"\nhistlabels = [\"Public Training\", \"Private Training\"]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure and grid\nfig = plt.figure(figsize=(10, 5))\ngs = gridspec.GridSpec(1, 2, figure=fig)\n\n# Histogram plot\naxes1 = fig.add_subplot(gs[0, 0])\naxes1.hist(\n    [test_scores_public, test_scores_private],\n    bins=50,\n    stacked=True,\n    color=[\"#6495ED\", \"#FFA07A\"],\n    label=histlabels,\n)\naxes1.set_title(titles[0])\naxes1.set_xlabel(xlabel)\naxes1.set_ylabel(ylabel)\naxes1.legend(loc=\"upper left\")\n\n# Pie chart plot\naxes2 = fig.add_subplot(gs[0, 1])\naxes2.pie(\n    budget,\n    explode=explode,\n    labels=labels,\n    colors=colors,\n    autopct=\"%1.1f%%\",\n    shadow=True,\n    startangle=90,\n)\naxes2.set_title(titles[1])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('multidiff_2.pdf', bbox_inches='tight')"}
{"idx": "multidiff_3", "instruction": "There is a reference image for you and I also have a set of data about athlete performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate sample data for the histogram representing athlete performance improvements\nperformance_improvements = np.random.normal(\nloc=0.1, scale=0.05, size=1000\n) # Average performance improvement of 10% with 5% volatility\nperformance_declines = np.random.normal(loc=-0.05, scale=0.03, size=1000) # Performance declines as negative improvements\n\n# Generate sample data for the scatter plot representing athlete performance clusters\nspeeds = np.random.uniform(5, 15, 100) # Simulated speeds in m/s\nstamina = np.random.normal(70, 10, 100) # Simulated stamina (measured as percentage of maximum)\nstrength = np.random.normal(100, 15, 100) # Simulated strength (measured in kg lifted)\n\nax1title = \"Histogram of Athlete Performance Improvements\"\nax1xlabel = \"Performance Change (%)\"\nax1ylabel = \"Frequency\"\nax1legend = [\"Improvements\", \"Declines\"]\nax2title = \"Athlete Performance Clusters\"\nax2labels = [\"Speed vs Stamina\", \"Strength vs Stamina\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom matplotlib.gridspec import GridSpec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate sample data for the histogram representing athlete performance improvements\nperformance_improvements = np.random.normal(\n    loc=0.1, scale=0.05, size=1000\n)  # Average performance improvement of 10% with 5% volatility\nperformance_declines = np.random.normal(loc=-0.05, scale=0.03, size=1000)  # Performance declines as negative improvements\n\n# Generate sample data for the scatter plot representing athlete performance clusters\nspeeds = np.random.uniform(5, 15, 100)  # Simulated speeds in m/s\nstamina = np.random.normal(70, 10, 100)  # Simulated stamina (measured as percentage of maximum)\nstrength = np.random.normal(100, 15, 100)  # Simulated strength (measured in kg lifted)\n\nax1title = \"Histogram of Athlete Performance Improvements\"\nax1xlabel = \"Performance Change (%)\"\nax1ylabel = \"Frequency\"\nax1legend = [\"Improvements\", \"Declines\"]\nax2title = \"Athlete Performance Clusters\"\nax2labels = [\"Speed vs Stamina\", \"Strength vs Stamina\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Histogram for stock performance_improvements\n# Create a figure and a 1x2 grid layout\nfig = plt.figure(figsize=(10, 5))\ngs = GridSpec(1, 2, figure=fig)\n\nax1 = fig.add_subplot(gs[0, 0])\nax1.hist(\n    [performance_improvements, performance_declines], bins=50, stacked=True, color=[\"#2ca02c\", \"#d62728\"], alpha=0.6\n)\nax1.set_title(ax1title)\nax1.set_xlabel(ax1xlabel)\nax1.set_ylabel(ax1ylabel)\nax1.legend(ax1legend)\n\n# Scatter plot for investment clusters\nax2 = fig.add_subplot(gs[0, 1])\nax2.scatter(speeds, stamina, c=\"gold\", label=ax2labels[0])\nax2.scatter(speeds, strength, c=\"deepskyblue\", label=ax2labels[1])\nax2.set_title(ax2title)\nax2.legend()\nax2.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save to file\nplt.tight_layout()\nplt.savefig('multidiff_3.pdf', bbox_inches='tight')"}
{"idx": "multidiff_6", "instruction": "There is a reference image for you and I also have a set of data about sports brand popularity and customer satisfaction. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to represent luxury fashion brands\nbrands = [\"Nike\", \"Adidas\", \"Under Armour\", \"Puma\", \"Reebok\"]\nprices = [85, 95, 80, 70, 75] # Average price per item for each brand (in dollars)\npopularity = [9.0, 8.5, 7.5, 7.0, 6.5] # Popularity index out of 10\n\n# Data for violin plot; customer satisfaction scores (1-10 scale)\nsatisfaction_data = np.random.normal(loc=[8, 7.5, 6, 7, 7], scale=0.5, size=(50, 5))\n\n# Updated labels for sports domain\nax0xlabel = \"Average Price ($)\"\nax0ylabel = \"Popularity Index\"\nax0title = \"Sports Brand Popularity vs Price\"\nax1xlabel = \"Brands\"\nax1ylabel = \"Customer Satisfaction\"\nax1title = \"Distribution of Customer Satisfaction Across Sports Brands\"\n\nx = np.linspace(4, 10, 400)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to represent luxury fashion brands\nbrands = [\"Nike\", \"Adidas\", \"Under Armour\", \"Puma\", \"Reebok\"]\nprices = [85, 95, 80, 70, 75]  # Average price per item for each brand (in dollars)\npopularity = [9.0, 8.5, 7.5, 7.0, 6.5]  # Popularity index out of 10\n\n# Data for violin plot; customer satisfaction scores (1-10 scale)\nsatisfaction_data = np.random.normal(loc=[8, 7.5, 6, 7, 7], scale=0.5, size=(50, 5))\n\n# Updated labels for sports domain\nax0xlabel = \"Average Price ($)\"\nax0ylabel = \"Popularity Index\"\nax0title = \"Sports Brand Popularity vs Price\"\nax1xticks = range(len(brands))\nax1xlabel = \"Brands\"\nax1ylabel = \"Customer Satisfaction\"\nax1title = \"Distribution of Customer Satisfaction Across Sports Brands\"\n\nx = np.linspace(4, 10, 400)\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create 1x2 subplot layout\nfig = plt.figure(figsize=(10, 6))\ngs = gridspec.GridSpec(1, 2, width_ratios=[1, 2])\n\n# Scatter plot on the left\nax0 = fig.add_subplot(gs[0])\nsc = ax0.scatter(\n    prices, popularity, s=100, c=np.linspace(0.1, 0.9, len(brands)), cmap=\"viridis\"\n)\nfor i, brand in enumerate(brands):\n    ax0.text(prices[i], popularity[i] + 0.05, brand, fontsize=9)\nax0.set_xlabel(ax0xlabel)\nax0.set_ylabel(ax0ylabel)\nax0.set_title(ax0title)\n\n# Violin plot on the right\nax1 = fig.add_subplot(gs[1])\n\n# Creating half-violins\nfor i, brand in enumerate(brands):\n    kde = gaussian_kde(satisfaction_data[:, i])\n    y = kde(x)\n    max_y = max(y)\n    ax1.fill_betweenx(x, -y / max_y * 0.5 + i, i, color=\"lightblue\", alpha=0.5)\n    ax1.fill_betweenx(x, y / max_y * 0.5 + i, i, color=\"blue\", alpha=0.5)\n\nax1.set_xticks(ax1xticks)\nax1.set_xticklabels(brands)\nax1.set_xlabel(ax1xlabel)\nax1.set_ylabel(ax1ylabel)\nax1.set_title(ax1title)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\n# Show plot\nplt.savefig('multidiff_6.pdf', bbox_inches='tight')"}
{"idx": "multidiff_7", "instruction": "There is a reference image for you and I also have a set of data about athletic shoe performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the plots\nmodels1 = [\n\"Sprinter2020\",\n\"Runner2021\",\n\"Athlete2020\",\n\"Competitor2021\",\n\"Track2019\",\n\"Racer2019\",\n]\nmodels2 = [\n\"Track2019\",\n\"Sprinter2020\",\n\"Athlete2020\",\n\"Competitor2021\",\n\"Runner2021\",\n\"Racer2019\",\n]\n\n# Updated performance scores\naccuracy = [88.12, 87.35, 86.78, 89.01, 84.60, 83.45]\nrobust_accuracy = [81.0, 79.9, 78.5, 80.4, 76.3, 75.1]\n\n# Updated performance score differences for pairwise comparisons\naccuracy_diff = np.array(\n[\n[0, 0.77, 1.34, -0.89, 3.52, 4.67],\n[-0.77, 0, 2.11, -1.66, 4.29, 5.44],\n[-1.34, -2.11, 0, -3.77, 2.18, 3.33],\n[0.89, 1.66, 3.77, 0, 5.95, 7.10],\n[-3.52, -4.29, -2.18, -5.95, 0, 1.15],\n[-4.67, -5.44, -3.33, -7.10, -1.15, 0],\n]\n)\nrobust_accuracy_diff = np.array(\n[\n[0, 1.1, 2.5, 0.6, 4.7, 5.9],\n[-1.1, 0, 3.6, -0.5, 5.8, 7.0],\n[-2.5, -3.6, 0, -4.1, 2.2, 3.4],\n[-0.6, 0.5, 4.1, 0, 6.3, 7.5],\n[-4.7, -5.8, -2.2, -6.3, 0, 1.2],\n[-5.9, -7.0, -3.4, -7.5, -1.2, 0],\n]\n)\n\n# Updated normalized performance ratings\nnfr = np.array(\n[\n[0, 1.25, 0.75, 1.1, 0.9, 0.85],\n[-1.25, 0, -0.5, -0.15, -0.35, -1.9],\n[-0.75, 0.5, 0, 0.35, 0.4, -1.4],\n[-1.1, 0.15, -0.35, 0, -0.6, -1.3],\n[-0.9, 0.35, -0.4, 0.6, 0, -2.2],\n[-0.85, 1.9, 1.4, 1.3, 2.2, 0],\n]\n)\nrobust_nfr = np.array(\n[\n[0, 2.15, 1.85, 2.4, 3.0, 2.65],\n[-2.15, 0, -1.3, -1.55, -2.25, -1.4],\n[-1.85, 1.3, 0, -1.25, -1.95, -0.35],\n[-2.4, 1.55, 1.25, 0, -1.0, -0.65],\n[-3.0, 2.25, 1.95, 1.0, 0, -0.55],\n[-2.65, 1.4, 0.35, 0.65, 0.55, 0],\n]\n)\n\ntitles = [\"Speed (%)\", \"Consistency (%)\", \"Speed Diff. (%)\", \"Consistency Diff. (%)\", \"Fatigue Resistance (%)\", \"Robust Fatigue Resistance (%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the plots\nmodels1 = [\n    \"Sprinter2020\",\n    \"Runner2021\",\n    \"Athlete2020\",\n    \"Competitor2021\",\n    \"Track2019\",\n    \"Racer2019\",\n]\nmodels2 = [\n    \"Track2019\",\n    \"Sprinter2020\",\n    \"Athlete2020\",\n    \"Competitor2021\",\n    \"Runner2021\",\n    \"Racer2019\",\n]\n\n# Updated performance scores\naccuracy = [88.12, 87.35, 86.78, 89.01, 84.60, 83.45]\nrobust_accuracy = [81.0, 79.9, 78.5, 80.4, 76.3, 75.1]\n\n# Updated performance score differences for pairwise comparisons\naccuracy_diff = np.array(\n    [\n        [0, 0.77, 1.34, -0.89, 3.52, 4.67],\n        [-0.77, 0, 2.11, -1.66, 4.29, 5.44],\n        [-1.34, -2.11, 0, -3.77, 2.18, 3.33],\n        [0.89, 1.66, 3.77, 0, 5.95, 7.10],\n        [-3.52, -4.29, -2.18, -5.95, 0, 1.15],\n        [-4.67, -5.44, -3.33, -7.10, -1.15, 0],\n    ]\n)\nrobust_accuracy_diff = np.array(\n    [\n        [0, 1.1, 2.5, 0.6, 4.7, 5.9],\n        [-1.1, 0, 3.6, -0.5, 5.8, 7.0],\n        [-2.5, -3.6, 0, -4.1, 2.2, 3.4],\n        [-0.6, 0.5, 4.1, 0, 6.3, 7.5],\n        [-4.7, -5.8, -2.2, -6.3, 0, 1.2],\n        [-5.9, -7.0, -3.4, -7.5, -1.2, 0],\n    ]\n)\n\n# Updated normalized performance ratings\nnfr = np.array(\n    [\n        [0, 1.25, 0.75, 1.1, 0.9, 0.85],\n        [-1.25, 0, -0.5, -0.15, -0.35, -1.9],\n        [-0.75, 0.5, 0, 0.35, 0.4, -1.4],\n        [-1.1, 0.15, -0.35, 0, -0.6, -1.3],\n        [-0.9, 0.35, -0.4, 0.6, 0, -2.2],\n        [-0.85, 1.9, 1.4, 1.3, 2.2, 0],\n    ]\n)\nrobust_nfr = np.array(\n    [\n        [0, 2.15, 1.85, 2.4, 3.0, 2.65],\n        [-2.15, 0, -1.3, -1.55, -2.25, -1.4],\n        [-1.85, 1.3, 0, -1.25, -1.95, -0.35],\n        [-2.4, 1.55, 1.25, 0, -1.0, -0.65],\n        [-3.0, 2.25, 1.95, 1.0, 0, -0.55],\n        [-2.65, 1.4, 0.35, 0.65, 0.55, 0],\n    ]\n)\n\ntitles = [\"Speed (%)\", \"Consistency (%)\", \"Speed Diff. (%)\", \"Consistency Diff. (%)\", \"Fatigue Resistance (%)\", \"Robust Fatigue Resistance (%)\"]\nxlim1 = [0, 100]\nxlim2 = [0, 100]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 7))\n\n# Plot Accuracy\naxs[0, 0].barh(models1, accuracy, color=\"green\")\naxs[0, 0].set_title(titles[0])\naxs[0, 0].set_xlim(xlim1)\naxs[0, 0].invert_yaxis()  # Reverse the order to match the reference\n# annotate the bars with the values\nfor i, v in enumerate(accuracy):\n    axs[0, 0].text(v + 0.4, i, str(v), color=\"black\", va=\"center\")\n\n# Plot Robust Accuracy\naxs[1, 0].barh(models2, robust_accuracy, color=\"red\")\naxs[1, 0].set_title(titles[1])\naxs[1, 0].set_xlim(xlim2)\naxs[1, 0].invert_yaxis()  # Reverse the order to match the reference\n# annotate the bars with the values\nfor i, v in enumerate(robust_accuracy):\n    axs[1, 0].text(v + 0.4, i, str(v), color=\"black\", va=\"center\")\n\n# Plot Accuracy Diff.\nim1 = axs[0, 1].imshow(accuracy_diff, cmap=\"PiYG\", aspect=\"auto\")\naxs[0, 1].set_title(titles[2])\nfor i in range(len(models1)):\n    for j in range(len(models1)):\n        text = axs[0, 1].text(\n            j,\n            i,\n            accuracy_diff[i, j],\n            ha=\"center\",\n            va=\"center\",\n            color=\"black\" if abs(accuracy_diff[i, j]) < 3 else \"white\",\n        )\naxs[0, 1].axis(\"off\")\n\n# Plot Robust Accuracy Diff.\nim2 = axs[1, 1].imshow(robust_accuracy_diff, cmap=\"PiYG\", aspect=\"auto\")\naxs[1, 1].set_title(titles[3])\nfor i in range(len(models2)):\n    for j in range(len(models2)):\n        text = axs[1, 1].text(\n            j,\n            i,\n            robust_accuracy_diff[i, j],\n            ha=\"center\",\n            va=\"center\",\n            color=\"black\" if abs(robust_accuracy_diff[i, j]) < 3 else \"white\",\n        )\naxs[1, 1].axis(\"off\")\n\n# Plot NFR\nim3 = axs[0, 2].imshow(nfr, cmap=\"PiYG\", aspect=\"auto\")\naxs[0, 2].set_title(titles[4])\nfor i in range(len(models1)):\n    for j in range(len(models1)):\n        text = axs[0, 2].text(\n            j,\n            i,\n            nfr[i, j],\n            ha=\"center\",\n            va=\"center\",\n            color=\"black\" if abs(nfr[i, j]) < 3 else \"white\",\n        )\naxs[0, 2].axis(\"off\")\n\n# Plot Robust NFR\nim4 = axs[1, 2].imshow(robust_nfr, cmap=\"PiYG\", aspect=\"auto\")\naxs[1, 2].set_title(titles[5])\nfor i in range(len(models2)):\n    for j in range(len(models2)):\n        text = axs[1, 2].text(\n            j,\n            i,\n            robust_nfr[i, j],\n            ha=\"center\",\n            va=\"center\",\n            color=\"black\" if abs(robust_nfr[i, j]) < 3 else \"white\",\n        )\naxs[1, 2].axis(\"off\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('multidiff_7.pdf', bbox_inches='tight')"}
{"idx": "multidiff_9", "instruction": "There is a reference image for you and I also have a set of data about athlete performance categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for simulated athlete performance categories\nathletes = [\n\"Usain Bolt\",\n\"Michael Phelps\",\n\"Simone Biles\",\n\"Serena Williams\",\n\"Cristiano Ronaldo\",\n\"LeBron James\",\n\"Lionel Messi\",\n\"Roger Federer\",\n\"Tom Brady\",\n\"Rafael Nadal\",\n\"Tiger Woods\",\n\"Megan Rapinoe\",\n\"Naomi Osaka\",\n\"Stephen Curry\",\n\"Novak Djokovic\",\n\"Kevin Durant\",\n]\nn_categories = len(athletes)\nperformance_correct = np.random.uniform(200, 800, n_categories)\nperformance_incorrect = performance_correct - np.random.uniform(50, 200, n_categories)\nsorted_indices = np.argsort((performance_correct + performance_incorrect) / 2)\ncategories = np.array(athletes)[sorted_indices]\nperformance_correct = performance_correct[sorted_indices]\nperformance_incorrect = performance_incorrect[sorted_indices]\n\n# Colors and assignments for the first plot\nassignments = [\"Nike\", \"Adidas\", \"Puma\", \"Reebok\"]\n\n# Data for the second plot (error bar plot with legend)\nfor i in range(len(assignments)):\naggregate_performance = np.random.randint(-150, 150, size=5)\ncorrect_score = np.random.randint(50, 300, size=5)\nerror = np.random.randint(5, 25, size=5)\n\n# Data for the third plot (scatter plot with trend line and correct text)\naggregate_scores = [\nnp.linspace(600, 800, 5) - 100 * i + np.random.randint(-30, 30, 5)\nfor i in range(len(assignments))\n]\njudge_ratings = [\nnp.linspace(70, 90, 5) - 10 * i + np.random.randint(-15, 15, 5)\nfor i in range(len(assignments))\n]\nscatterlabels = [\"Correct Score\", \"Incorrect Score\"]\nxlabels = [\"Performance Rating\", \"Aggregate Performance Rating\", \"Aggregate Performance Rating\"]\nylabels = [\"Athlete\", \"Correct Score - Incorrect Score\", \"Judge Rating (%)\"]\n\nax2textlabel = \"Judge: Elite Coach\"\ntitle = \"Athletes\"\ntext_j = 650\ntext_i = 25\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.lines as mlines\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for simulated athlete performance categories\nathletes = [\n    \"Usain Bolt\",\n    \"Michael Phelps\",\n    \"Simone Biles\",\n    \"Serena Williams\",\n    \"Cristiano Ronaldo\",\n    \"LeBron James\",\n    \"Lionel Messi\",\n    \"Roger Federer\",\n    \"Tom Brady\",\n    \"Rafael Nadal\",\n    \"Tiger Woods\",\n    \"Megan Rapinoe\",\n    \"Naomi Osaka\",\n    \"Stephen Curry\",\n    \"Novak Djokovic\",\n    \"Kevin Durant\",\n]\nn_categories = len(athletes)\nperformance_correct = np.random.uniform(200, 800, n_categories)\nperformance_incorrect = performance_correct - np.random.uniform(50, 200, n_categories)\nsorted_indices = np.argsort((performance_correct + performance_incorrect) / 2)\ncategories = np.array(athletes)[sorted_indices]\nperformance_correct = performance_correct[sorted_indices]\nperformance_incorrect = performance_incorrect[sorted_indices]\n\n# Colors and assignments for the first plot\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"]\nassignments = [\"Nike\", \"Adidas\", \"Puma\", \"Reebok\"]\n\n# Data for the second plot (error bar plot with legend)\nfor i in range(len(assignments)):\n    aggregate_performance = np.random.randint(-150, 150, size=5)\n    correct_score = np.random.randint(50, 300, size=5)\n    error = np.random.randint(5, 25, size=5)\n\n# Data for the third plot (scatter plot with trend line and correct text)\naggregate_scores = [\n    np.linspace(600, 800, 5) - 100 * i + np.random.randint(-30, 30, 5)\n    for i in range(len(assignments))\n]\njudge_ratings = [\n    np.linspace(70, 90, 5) - 10 * i + np.random.randint(-15, 15, 5)\n    for i in range(len(assignments))\n]\nscatterlabels = [\"Correct Score\", \"Incorrect Score\"]\nxlabels = [\"Performance Rating\", \"Aggregate Performance Rating\", \"Aggregate Performance Rating\"]\nylabels = [\"Athlete\", \"Correct Score - Incorrect Score\", \"Judge Rating (%)\"]\n\nax2textlabel = \"Judge: Elite Coach\"\ntitle = \"Athletes\"\ntext_j = 650\ntext_i = 25\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Adjusting figure size to match the original image's dimensions\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# First plot (bar plot with white circles)\naxs[0].grid(axis=\"x\", zorder=0)\n# Plotting the lines first\nfor i in range(n_categories):\n    color = colors[i // 4]\n    axs[0].plot(\n        [performance_incorrect[i], performance_correct[i]], [i, i], color=color, lw=6, zorder=1\n    )  # Black line for visibility\n# Plotting the points\n# set the layer of the white circles to be above the lines\naxs[0].scatter(\n    performance_correct, range(n_categories), color=\"black\", label=scatterlabels[0], zorder=2, s=80\n)  # Black dots for 'Correct'\naxs[0].scatter(\n    performance_incorrect,\n    range(n_categories),\n    color=\"white\",\n    edgecolors=\"black\",\n    label=scatterlabels[1],\n    zorder=2,\n    s=80,\n)  # White dots for 'Incorrect'\naxs[0].legend(loc=\"lower right\", title=\"Assignment\")\naxs[0].set_xlabel(xlabels[0])\naxs[0].set_ylabel(ylabels[0])\naxs[0].set_yticks(range(n_categories))\naxs[0].set_yticklabels(athletes[::-1])\n\n# Second plot (error bar plot with legend)\nfor i in range(len(assignments)):\n    axs[1].errorbar(\n        aggregate_performance,\n        correct_score,\n        yerr=error,\n        xerr=error + 10,\n        fmt=\"o\",\n        capsize=3,\n        color=colors[i],\n    )\naxs[1].set_xlabel(xlabels[1])\naxs[1].set_ylabel(ylabels[1])\naxs[1].grid()\n\n# Third plot (scatter plot with trend line and correct text)\nfor i in range(len(assignments)):\n    aggregate_elo = aggregate_scores[i]\n    judge_accuracy = judge_ratings[i]\n    error = np.random.randint(5, 10, size=5)\n    axs[2].errorbar(\n        aggregate_elo,\n        judge_accuracy,\n        yerr=error,\n        xerr=error + 10,\n        fmt=\"o\",\n        capsize=3,\n        color=colors[i],\n    )\n# Plotting the trend line\naxs[2].plot(\n    np.linspace(250, 750, 5), np.linspace(40, 85, 5), color=\"black\", lw=2, ls=\"-\"\n)\naxs[2].set_xlabel(xlabels[2])\naxs[2].set_ylabel(ylabels[2])\n# set box edge color\naxs[2].text(\n    text_j,\n    text_i,\n    ax2textlabel,\n    fontsize=8,\n    color=\"black\",\n    ha=\"right\",\n    va=\"bottom\",\n    bbox=dict(facecolor=\"white\", edgecolor=\"black\"),\n)\naxs[2].grid()\n\n# add legend to the whole figure and set colormaps\nlegend_handles = [\n    mlines.Line2D(\n        [], [], color=color, marker=\"s\", linestyle=\"None\", markersize=10, label=label\n    )\n    for label, color in zip(assignments, colors)\n]\nfig.legend(\n    handles=legend_handles,\n    loc=\"upper center\",\n    title=title,\n    ncol=len(assignments),\n    bbox_to_anchor=(0.5, 1.15),\n    facecolor=\"white\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Show plot\nplt.tight_layout()\nplt.savefig('multidiff_9.pdf', bbox_inches='tight')"}
{"idx": "multidiff_10", "instruction": "There is a reference image for you and I also have a set of data about athlete performance metrics and correlations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for two heatmaps and one bar chart\nnum_attributes = 5\n\n# Generate heatmap data for athlete performance correlations and comparisons\nperformance_comparison1 = np.random.rand(num_attributes, num_attributes) * 2 - 0.7 # Random values between -1 and 1\nperformance_comparison2 = np.random.rand(num_attributes, num_attributes) * 2 - 0.3 # Random values between -1 and 1\n\n# Generate bar data for athlete performance metrics\nperformance_metrics = np.random.rand(num_attributes) # Random values with a shift to mimic metrics\n\n# Define attributes relevant to sports performance\nattributes = [\"Speed\", \"Stamina\", \"Strength\", \"Agility\", \"Flexibility\"]\n\n# Titles and labels for plots\nheatmap_title = \"Performance Attribute Correlation\"\nbar_xlabel = r\"Performance Metric ($\\tilde{I}_\\infty$)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 2.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for two heatmaps and one bar chart\nnum_attributes = 5\n\n# Generate heatmap data for athlete performance correlations and comparisons\nperformance_comparison1 = np.random.rand(num_attributes, num_attributes) * 2 - 0.7 # Random values between -1 and 1\nperformance_comparison2 = np.random.rand(num_attributes, num_attributes) * 2 - 0.3  # Random values between -1 and 1\n\n# Generate bar data for athlete performance metrics\nperformance_metrics = np.random.rand(num_attributes)  # Random values with a shift to mimic metrics\n\n# Define attributes relevant to sports performance\nattributes = [\"Speed\", \"Stamina\", \"Strength\", \"Agility\", \"Flexibility\"]\n\n# Titles and labels for plots\nheatmap_title = \"Performance Attribute Correlation\"\nbar_xlabel = r\"Performance Metric ($\\tilde{I}_\\infty$)\"\nbar_xticks = [0.00, 0.25, 0.50, 0.75, 1.00]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with specific dimensions\nfig = plt.figure(figsize=(8, 2))  # Adjust as needed\n\n# Create a grid for subplots with adjusted width ratios\ngrid = plt.GridSpec(1, 3, width_ratios=[4, 4, 4], wspace=0.1)\n\n# Create first heatmap subplot\nheatmap_ax1 = plt.subplot(grid[0])\nheatmap1 = heatmap_ax1.imshow(\n    performance_comparison1, cmap=\"coolwarm\", aspect=\"auto\", vmin=-1, vmax=1.5\n)\nheatmap_ax1.set_xticks(np.arange(len(attributes)))\nheatmap_ax1.set_yticks(np.arange(len(attributes)))\nheatmap_ax1.set_xticklabels(attributes, rotation=45, ha=\"right\")\nheatmap_ax1.set_yticklabels(attributes)\nheatmap_ax1.set_xlabel(heatmap_title)\n\n# Create second heatmap subplot\nheatmap_ax2 = plt.subplot(grid[1])\nheatmap2 = heatmap_ax2.imshow(\n    performance_comparison2, cmap=\"coolwarm\", aspect=\"auto\", vmin=-1, vmax=1.5\n)\nheatmap_ax2.set_xticks(np.arange(len(attributes)))\nheatmap_ax2.set_yticks(np.arange(len(attributes)))\nheatmap_ax2.set_xticklabels(attributes, rotation=45, ha=\"right\")\nheatmap_ax2.set_yticklabels([])\nheatmap_ax2.set_xlabel(heatmap_title)\nheatmap_ax2.yaxis.set_visible(False)\n\n# Create an axes on the top side of ax_heatmap_top for the colorbar.\nax_colorbar = fig.add_axes(\n    [\n        heatmap_ax1.get_position().x0,\n        heatmap_ax1.get_position().y1 + 0.05,\n        heatmap_ax1.get_position().width * 2.1,\n        0.05,\n    ]\n)\n# Adding a colorbar at the very top of the heatmap\ncbar = plt.colorbar(heatmap1, cax=ax_colorbar, orientation=\"horizontal\")\ncbar.ax.xaxis.set_ticks_position(\"top\")\n\n# Create bar chart subplot\nbar_ax = plt.subplot(grid[2])\nbar_ax.barh(attributes[::-1], performance_metrics, color=plt.cm.coolwarm(performance_metrics))\nbar_ax.set_xlabel(bar_xlabel,fontsize=14)\nbar_ax.set_xticks(bar_xticks)\nbar_ax.yaxis.set_visible(False)\nbar_ax.grid(True)\nbar_ax.set_ylim(heatmap_ax1.get_ylim())\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('multidiff_10.pdf', bbox_inches='tight')"}
{"idx": "multidiff_11", "instruction": "There is a reference image for you and I also have a set of data about athlete performance models. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the bar chart\n# Updated data for sports models (e.g., athlete performance models)\nmodels = [\n\"Bolt (M1)\",\n\"Phelps (M2)\",\n\"Biles (M3)\",\n\"Williams (M4)\",\n\"Ronaldo (M5)\",\n\"James (M6)\",\n\"Federer (M7)\",\n]\nrobust_error = [15.35, 14.80, 13.55, 12.95, 12.50, 11.75, 10.60]\n\n# Updated data for the heatmap representing comparative performance metrics\nrnfs = np.array(\n[\n[0.00, 2.25, 1.75, 1.60, 2.10, 1.15, 1.00],\n[2.35, 0.00, 1.55, 1.25, 2.30, 1.20, 1.05],\n[2.50, 2.40, 0.00, 1.70, 1.85, 1.50, 1.35],\n[2.60, 2.00, 2.35, 0.00, 1.90, 1.25, 1.10],\n[2.90, 2.75, 2.15, 1.95, 0.00, 1.70, 1.45],\n[2.85, 2.50, 2.25, 1.75, 1.95, 0.00, 1.30],\n[3.20, 3.10, 2.75, 2.15, 2.80, 2.00, 0.00],\n]\n).T\n\n# Titles and labels for plots\nax1title = \"Robust Performance Error (%)\"\nax2title = \"Relative Performance Fluctuation (RNFs) (%)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the bar chart\n# Updated data for sports models (e.g., athlete performance models)\nmodels = [\n    \"Bolt (M1)\",\n    \"Phelps (M2)\",\n    \"Biles (M3)\",\n    \"Williams (M4)\",\n    \"Ronaldo (M5)\",\n    \"James (M6)\",\n    \"Federer (M7)\",\n]\nrobust_error = [15.35, 14.80, 13.55, 12.95, 12.50, 11.75, 10.60]\n\n# Updated data for the heatmap representing comparative performance metrics\nrnfs = np.array(\n    [\n        [0.00, 2.25, 1.75, 1.60, 2.10, 1.15, 1.00],\n        [2.35, 0.00, 1.55, 1.25, 2.30, 1.20, 1.05],\n        [2.50, 2.40, 0.00, 1.70, 1.85, 1.50, 1.35],\n        [2.60, 2.00, 2.35, 0.00, 1.90, 1.25, 1.10],\n        [2.90, 2.75, 2.15, 1.95, 0.00, 1.70, 1.45],\n        [2.85, 2.50, 2.25, 1.75, 1.95, 0.00, 1.30],\n        [3.20, 3.10, 2.75, 2.15, 2.80, 2.00, 0.00],\n    ]\n).T\n\n# Titles and labels for plots\nax1title = \"Robust Performance Error (%)\"\nax2title = \"Relative Performance Fluctuation (RNFs) (%)\"\nax1xlim = [0, 20]\n\n# Placeholder to show where heatmaps and other plots would be plotted. Actual plotting code is not included.\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(\n    1, 2, figsize=(10, 6), gridspec_kw={\"width_ratios\": [1, 1.25]}\n)\n\n# Bar chart\ny_pos = np.arange(len(models))\nax1.barh(y_pos, robust_error, color=\"#4a895c\")\nax1.set_yticks(y_pos)\nax1.set_yticklabels(models, fontsize=10)\nax1.invert_yaxis()  # labels read top-to-bottom\nax1.set_title(ax1title, fontsize=12)\nax1.set_xlim(ax1xlim)\nfor i, v in enumerate(robust_error):\n    ax1.text(v - 8.0, i, \"{:.2f}\".format(v), color=\"white\", va=\"center\")\n\n# Heatmap\nim = ax2.imshow(rnfs, cmap=\"summer\", aspect=\"auto\")\n\n# We want to show all ticks...\nax2.set_xticks(np.arange(len(models)))\n# ax2.set_yticks(np.arange(len(models)))\n# ... and label them with the respective list entries\nax2.set_xticklabels(models, fontsize=10)\nax2.yaxis.set_visible(False)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax2.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(models)):\n    for j in range(len(models)):\n        text = ax2.text(\n            j, i, \"{:.2f}\".format(rnfs[i, j]), ha=\"center\", va=\"center\", color=\"black\"\n        )\n\nax2.set_title(ax2title, fontsize=12)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('multidiff_11.pdf', bbox_inches='tight')"}
{"idx": "multidiff_12", "instruction": "There is a reference image for you and I also have a set of data about investment strategies and their performance under different market conditions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Set the figure size and create a gridspec with different widths\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Categories for different investment strategies\ncategories = [\"Growth Investing\", \"Value Investing\"]\nstrategy1_acc = [0.68, 0.75]\nstrategy2_acc = [0.72, 0.78]\nstrategy1_bottom = [0.15, 0.22]\nstrategy2_bottom = [0.18, 0.25]\n\n# Data for line plot representing performance under different market conditions\nangles = np.arange(0, 181, 15)\nstrategy1_growth = [\n0.65, 0.62, 0.60, 0.58, 0.56, 0.57, 0.60, 0.63, 0.66, 0.69, 0.68, 0.70, 0.72\n]\nstrategy1_value = [\n0.70, 0.68, 0.65, 0.63, 0.62, 0.61, 0.63, 0.66, 0.69, 0.72, 0.74, 0.77, 0.79\n]\nstrategy2_growth = [\n0.68, 0.66, 0.64, 0.62, 0.61, 0.60, 0.62, 0.65, 0.67, 0.70, 0.72, 0.74, 0.76\n]\nstrategy2_value = [\n0.75, 0.73, 0.71, 0.69, 0.68, 0.67, 0.68, 0.71, 0.73, 0.76, 0.78, 0.80, 0.82\n]\n\ntitles = [\"(A) Strategy 1\", \"(B) Strategy 2\", \"(C) Performance in Different Market Conditions\"]\nax1ylabel = \"Performance Index\"\nax3labels = [\"Strategy 1 Growth\", \"Strategy 2 Growth\", \"Strategy 1 Value\", \"Strategy 2 Value\"]\nax3xlabel = \"Market Conditions Severity (\u00ac\u221e)\"\nax3vlines = [0, 90, 180]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Set the figure size and create a gridspec with different widths\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Categories for different investment strategies\ncategories = [\"Growth Investing\", \"Value Investing\"]\nstrategy1_acc = [0.68, 0.75]\nstrategy2_acc = [0.72, 0.78]\nstrategy1_bottom = [0.15, 0.22]\nstrategy2_bottom = [0.18, 0.25]\n\n# Data for line plot representing performance under different market conditions\nangles = np.arange(0, 181, 15)\nstrategy1_growth = [\n    0.65, 0.62, 0.60, 0.58, 0.56, 0.57, 0.60, 0.63, 0.66, 0.69, 0.68, 0.70, 0.72\n]\nstrategy1_value = [\n    0.70, 0.68, 0.65, 0.63, 0.62, 0.61, 0.63, 0.66, 0.69, 0.72, 0.74, 0.77, 0.79\n]\nstrategy2_growth = [\n    0.68, 0.66, 0.64, 0.62, 0.61, 0.60, 0.62, 0.65, 0.67, 0.70, 0.72, 0.74, 0.76\n]\nstrategy2_value = [\n    0.75, 0.73, 0.71, 0.69, 0.68, 0.67, 0.68, 0.71, 0.73, 0.76, 0.78, 0.80, 0.82\n]\n\ntitles = [\"(A) Strategy 1\", \"(B) Strategy 2\", \"(C) Performance in Different Market Conditions\"]\nax1ylabel = \"Performance Index\"\nax3labels = [\"Strategy 1 Growth\", \"Strategy 2 Growth\", \"Strategy 1 Value\", \"Strategy 2 Value\"]\nax3xlabel = \"Market Conditions Severity (\u00b0)\"\nax3xticks = [0, 90, 180]\nax3vlines = [0, 90, 180]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Bar plot for VGG 16\nplt.figure(figsize=(10, 4))\ngs = gridspec.GridSpec(1, 3, width_ratios=[1, 1, 2])\n\nax1 = plt.subplot(gs[0])\nax1.bar(categories, strategy1_acc, color=[\"#c99796\", \"#f8d48b\"])\nax1.bar(categories, strategy1_bottom, color=[\"#983530\", \"#f2a93c\"])\nax1.set_title(titles[0])\nax1.set_ylabel(ax1ylabel)\nax1.set_ylim(0, 1)\nfor i, v in enumerate(strategy1_acc):\n    ax1.text(i, v - 0.045, str(v), color=\"black\", ha=\"center\")\nfor i, v in enumerate(strategy1_bottom):\n    ax1.text(i, v - 0.045, str(v), color=\"black\", ha=\"center\")\n\n# Bar plot for Resnet 101\nax2 = plt.subplot(gs[1])\nax2.bar(categories, strategy2_acc, color=[\"#a4b4eb\", \"#d9e1ed\"])\nax2.bar(categories, strategy2_bottom, color=[\"#4a68da\", \"#b4c4dc\"])\nax2.set_title(titles[1])\nax2.set_ylim(0, 1)\nfor i, v in enumerate(strategy2_acc):\n    ax2.text(i, v - 0.045, str(v), color=\"black\", ha=\"center\")\nfor i, v in enumerate(strategy2_bottom):\n    ax2.text(i, v - 0.045, str(v), color=\"black\", ha=\"center\")\n\n# Remove y-axis labels for the second plot\nax2.set_yticklabels([])\n\n# Line plot for rotation invariance - with double the width\nax3 = plt.subplot(gs[2])\nax3.plot(\n    angles,\n    strategy1_growth,\n    \"r-x\",\n    label=ax3labels[0],\n    color=\"#983530\",\n    markersize=4,\n)\nax3.plot(\n    angles,\n    strategy2_growth,\n    \"b-o\",\n    label=ax3labels[1],\n    color=\"#4a68da\",\n    markersize=4,\n)\nax3.plot(\n    angles,\n    strategy1_value,\n    \"y-x\",\n    label=ax3labels[2],\n    color=\"#f2a93c\",\n    markersize=4,\n)\nax3.plot(\n    angles,\n    strategy2_value,\n    \"c-o\",\n    label=ax3labels[3],\n    color=\"#b4c4dc\",\n    markersize=4,\n)\nax3.set_title(titles[2])\nax3.set_xlabel(ax3xlabel)\nax3.set_xticks(ax3xticks)\nax3.legend(loc=\"upper right\", bbox_to_anchor=(0.95, 1.0), fontsize=6, frameon=False)\nax3.vlines(ax3vlines, 0, 1, colors=\"k\", linestyles=\"dashed\", linewidth=0.5)\nax3.set_yticklabels([])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and show plot\nplt.tight_layout()\nplt.savefig('multidiff_12.pdf', bbox_inches='tight')"}
{"idx": "multidiff_13", "instruction": "There is a reference image for you and I also have a set of data about financial metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nheatmap_top_data = np.random.rand(12, 12) * 2- 0.9\nheatmap_bottom_data = np.random.rand(12, 12) * 2 - 0.9\n\n# Compute mean values for bar data representation\nbar_data_top = heatmap_top_data.mean(axis=0)\nbar_data_bottom = heatmap_bottom_data.mean(axis=0)\n\n# Attributes for y-axis (financial metrics)\nattributes = [\n\"Revenue Growth\",\n\"Profit Margin\",\n\"Debt to Equity\",\n\"Return on Equity\",\n\"Price to Earnings\",\n\"Dividend Yield\",\n\"Market Cap\",\n\"Cash Flow\",\n\"Earnings Growth\",\n\"Book Value\",\n\"Operating Margin\",\n\"Net Income\",\n]\n\n# Titles and labels for the plots\nheatmap_xlabel = \"Financial Metric\"\nbar_xlabel = \"$I_{\\infty}$(Risk, Return)\"\n\n# Normalize the bar data to match heatmap's vmin and vmax\nnorm = Normalize(vmin=-0.5, vmax=1.0)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.colors import Normalize\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nheatmap_top_data = np.random.rand(12, 12) * 2- 0.9\nheatmap_bottom_data = np.random.rand(12, 12) * 2 - 0.9\n\n# Compute mean values for bar data representation\nbar_data_top = heatmap_top_data.mean(axis=0)\nbar_data_bottom = heatmap_bottom_data.mean(axis=0)\n\n# Attributes for y-axis (financial metrics)\nattributes = [\n    \"Revenue Growth\",\n    \"Profit Margin\",\n    \"Debt to Equity\",\n    \"Return on Equity\",\n    \"Price to Earnings\",\n    \"Dividend Yield\",\n    \"Market Cap\",\n    \"Cash Flow\",\n    \"Earnings Growth\",\n    \"Book Value\",\n    \"Operating Margin\",\n    \"Net Income\",\n]\n\n# Titles and labels for the plots\nheatmap_xlabel = \"Financial Metric\"\nbar_xlabel = \"$I_{\\infty}$(Risk, Return)\"\nbar_xticks = [-0.5, 0, 0.5]\nbar_xlim = [-0.5, 0.5]\n\n# Normalize the bar data to match heatmap's vmin and vmax\nnorm = Normalize(vmin=-0.5, vmax=1.0)\ncmap = plt.get_cmap(\"coolwarm\")\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig = plt.figure(figsize=(8, 8))\n\n# Heatmap top\nax_heatmap_top = fig.add_subplot(2, 2, 1)\ncax_top = ax_heatmap_top.imshow(\n    heatmap_top_data, cmap=cmap, aspect=\"auto\", vmin=-0.5, vmax=1.5\n)\nax_heatmap_top.set_yticks(np.arange(len(attributes)))\nax_heatmap_top.set_yticklabels(attributes)\nax_heatmap_top.set_xticks([])\n\n# Create an axes on the top side of ax_heatmap_top for the colorbar.\nax_colorbar = fig.add_axes(\n    [\n        ax_heatmap_top.get_position().x0 + 0.05,\n        ax_heatmap_top.get_position().y1 + 0.15,\n        ax_heatmap_top.get_position().width,\n        0.02,\n    ]\n)\nax_colorbar.xaxis.set_ticks_position(\"top\")\nax_colorbar.xaxis.set_label_position(\"top\")\n\n# Adding a colorbar at the very top of the heatmap\nplt.colorbar(cax_top, cax=ax_colorbar, orientation=\"horizontal\")\n\n# Heatmap bottom\nax_heatmap_bottom = fig.add_subplot(2, 2, 3)\ncax_bottom = ax_heatmap_bottom.imshow(\n    heatmap_bottom_data, cmap=cmap, aspect=\"auto\", vmin=-0.5, vmax=1.5\n)\nax_heatmap_bottom.set_yticks(np.arange(len(attributes)))\nax_heatmap_bottom.set_yticklabels(attributes)\nax_heatmap_bottom.set_xticks(np.arange(len(attributes)))\nax_heatmap_bottom.set_xticklabels(attributes, rotation=45, ha=\"right\")\nax_heatmap_bottom.set_xlabel(heatmap_xlabel)\n\n# Bar plot top\nax_bar_top = fig.add_subplot(2, 2, 2)\ncolors_top = [cmap(norm(value)) for value in bar_data_top]\nax_bar_top.barh(np.arange(len(attributes)), bar_data_top, color=colors_top)\nax_bar_top.set_yticks([])\nax_bar_top.set_xticks([])\nax_bar_top.set_xlim(bar_xlim)\nax_bar_top.set_ylim(ax_heatmap_top.get_ylim())\n\n# Bar plot bottom\nax_bar_bottom = fig.add_subplot(2, 2, 4)\ncolors_bottom = [cmap(norm(value)) for value in bar_data_bottom]\nax_bar_bottom.barh(np.arange(len(attributes)), bar_data_bottom, color=colors_bottom)\nax_bar_bottom.set_yticks([])\nax_bar_bottom.set_xticks(bar_xticks)\nax_bar_bottom.set_xlim(bar_xlim)\nax_bar_bottom.set_xlabel(bar_xlabel)\nax_bar_bottom.set_ylim(ax_heatmap_bottom.get_ylim())\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()  # leave some space at the top for the colorbar\nplt.savefig('multidiff_13.pdf', bbox_inches='tight')"}
{"idx": "multidiff_14", "instruction": "There is a reference image for you and I also have a set of data about financial performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for the line plot\nx = np.array([0, 10000, 20000, 30000, 40000, 50000]) # Balances in dollars\ny = np.array([-2.5, -2.3, -2.1, -1.7, -1.5, -0.7]) # Corresponding loss in percentage\nerror = np.array([0.1, 0.15, 0.12, 0.18, 0.2, 0.22]) # Standard deviation of loss percentage\n\n# Sample data for the box plot (e.g., quarterly returns for different investment strategies)\ndata = [np.random.normal(5, 1.5, 100) for _ in range(5)]\npositions = [0, 10000, 20000, 30000, 40000] # Positions representing different time intervals or accounts\n# Add scatter data points (e.g., anomaly returns)\nscatters_data = np.random.normal(0.5, 0.1, len(positions))\n\ntitles = [\"(a) Account Balance vs Loss\", \"(b) Quarterly Returns\"]\nxlabels = [\"Account Balance ($)\", \"Time Period (quarters)\"]\nylabels = [\"Loss (%)\", \"Return (%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the line plot\nx = np.array([0, 10000, 20000, 30000, 40000, 50000])  # Balances in dollars\ny = np.array([-2.5, -2.3, -2.1, -1.7, -1.5, -0.7])  # Corresponding loss in percentage\nerror = np.array([0.1, 0.15, 0.12, 0.18, 0.2, 0.22])  # Standard deviation of loss percentage\n\n# Sample data for the box plot (e.g., quarterly returns for different investment strategies)\ndata = [np.random.normal(5, 1.5, 100) for _ in range(5)]\npositions = [0, 10000, 20000, 30000, 40000]  # Positions representing different time intervals or accounts\n# Add scatter data points (e.g., anomaly returns)\nscatters_data = np.random.normal(0.5, 0.1, len(positions))\n\ntitles = [\"(a) Account Balance vs Loss\", \"(b) Quarterly Returns\"]\nxlabels = [\"Account Balance ($)\", \"Time Period (quarters)\"]\nylabels = [\"Loss (%)\", \"Return (%)\"]\nxtickslabels = [[\"0\", \"10k\", \"20k\", \"30k\", \"40k\", \"50k\"], [\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\"]]\nyticks = [np.arange(-0.5, -3.0, -0.5), np.arange(0, 10, 2)]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and axes\nfig, axs = plt.subplots(2, 1, figsize=(5, 6))\n\n# Line plot\naxs[0].errorbar(\n    x,\n    y,\n    yerr=error,\n    fmt=\"o-\",\n    ecolor=\"lightgray\",\n    markersize=8,\n    linewidth=1,\n    color=\"black\",\n)\naxs[0].fill_between(x, y - error, y + error, color=\"lightgray\", alpha=0.5)\naxs[0].set_title(titles[0])\naxs[0].set_xlabel(xlabels[0])\n# axs[0].set_ylabel('Loss')\naxs[0].grid(True)\naxs[0].set_xticks(x)\naxs[0].set_xticklabels(xtickslabels[0])\naxs[0].set_yticks(yticks[0])\n\n# Box plot\n# set all linewidth to 1\naxs[1].boxplot(\n    data,\n    positions=positions,\n    widths=5000,\n    showfliers=False,\n    boxprops=dict(color=\"grey\", linewidth=2),\n    medianprops=dict(color=\"grey\", linewidth=2),\n    whiskerprops=dict(color=\"grey\", linewidth=2),\n    capprops=dict(color=\"grey\", linewidth=2),\n)\naxs[1].set_title(titles[1])\naxs[1].set_xlabel(xlabels[1])\naxs[1].set_ylabel(ylabels[1])\naxs[1].yaxis.grid(True)\naxs[1].set_xticks(positions)\naxs[1].set_xticklabels(xtickslabels[1])\naxs[1].set_yticks(yticks[1])\n\naxs[1].scatter(positions, scatters_data, marker=\"^\", color=\"gray\", s=100, zorder=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout\nplt.tight_layout()\n\nplt.savefig('multidiff_14.pdf', bbox_inches='tight')"}
{"idx": "multidiff_15", "instruction": "There is a reference image for you and I also have a set of data about financial metrics correlations. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\ncategories = [\"ROI\", \"Risk Exposure\", \"Asset Allocation\"]\nvalues = [0.45, 0.33, 0.25]\n\n# Data for heatmap representing financial metrics correlations\ndata = np.array(\n[[0.5, -0.2, 0.4, 0.3], [-0.1, 0.6, -0.3, 0.2], [0.4, -0.1, 0.2, 0.1]]\n)\nrows = [\"ROI\", \"Risk Exposure\", \"Asset Allocation\"]\ncolumns = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n\nylabel = \"Correlation\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n\ncategories = [\"ROI\", \"Risk Exposure\", \"Asset Allocation\"]\nvalues = [0.45, 0.33, 0.25]\n\n# Data for heatmap representing financial metrics correlations\ndata = np.array(\n    [[0.5, -0.2, 0.4, 0.3], [-0.1, 0.6, -0.3, 0.2], [0.4, -0.1, 0.2, 0.1]]\n)\nrows = [\"ROI\", \"Risk Exposure\", \"Asset Allocation\"]\ncolumns = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n\nylabel = \"Correlation\"\nylim = [0, 0.6]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the bar plot on the left\n# Set the figure size to match the original image's dimensions\nplt.figure(figsize=(10, 4))\nplt.subplot(1, 2, 1)\nbars = plt.bar(categories, values, color=\"#376686\")\nplt.ylabel(ylabel)\nplt.ylim(ylim)\n# Create the heatmap on the right\nplt.subplot(1, 2, 2)\nheatmap = plt.imshow(\n    data, cmap=\"coolwarm\", interpolation=\"nearest\", vmin=-1.0, vmax=1.0\n)\nplt.xticks(np.arange(len(columns)), columns, rotation=30, ha=\"right\")\nplt.yticks(np.arange(len(rows)), rows)\nplt.colorbar(heatmap)\n\n# Annotate the heatmap with text\nfor i in range(len(rows)):\n    for j in range(len(columns)):\n        plt.text(j, i, f\"{data[i, j]:.2f}\", ha=\"center\", va=\"center\", color=\"black\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\nplt.savefig('multidiff_15.pdf', bbox_inches='tight')"}
{"idx": "multidiff_16", "instruction": "There is a reference image for you and I also have a set of data about investment performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for bar chart\ncategories = [\"Mutual Funds\", \"ETFs\", \"Bonds\", \"Stocks\"]\nsuccessful_investments = [75, 68, 65, 90]\n\n# Data for boxplot representing KPI for different investment products\nkpi_data = [np.random.normal(0.55, 0.05, 100) for _ in categories]\n\n# Threshold values for success evaluation\nsuccess_threshold_upper = 0.60\nsuccess_threshold_lower = 0.50\n\n# Labels and limits\nylabels = [\"# Successful Investments\", \"KPI Values\"]\nax2hlineslabels = [\"Upper Success Threshold\", \"Lower Success Threshold\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport random\n\nrandom.seed(42)\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for bar chart\ncategories = [\"Mutual Funds\", \"ETFs\", \"Bonds\", \"Stocks\"]\nsuccessful_investments = [75, 68, 65, 90]\n\n# Data for boxplot representing KPI for different investment products\nkpi_data = [np.random.normal(0.55, 0.05, 100) for _ in categories]\n\n# Threshold values for success evaluation\nsuccess_threshold_upper = 0.60\nsuccess_threshold_lower = 0.50\n\n# Labels and limits\nylabels = [\"# Successful Investments\", \"KPI Values\"]\nax2hlineslabels = [\"Upper Success Threshold\", \"Lower Success Threshold\"]\nax2ylim = [0.35, 0.75]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots and ax1, ax2 share the same x-axis\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 6), sharex=True)\n\n# Bar chart\nax1.bar(\n    categories,\n    successful_investments,\n    hatch=\"//\",\n    color=\"#b0c5de\",\n    edgecolor=\"black\",\n    width=0.6,\n)\nax1.set_ylabel(ylabels[0])\n\n# Boxplot chart\nax2.boxplot(kpi_data, positions=range(len(categories)), widths=0.6)\nax2.hlines(\n    success_threshold_upper,\n    xmin=-0.5,\n    xmax=len(categories) - 0.5,\n    colors=\"red\",\n    linestyles=\"dashed\",\n    label=ax2hlineslabels[0],\n)\nax2.hlines(\n    success_threshold_lower,\n    xmin=-0.5,\n    xmax=len(categories) - 0.5,\n    colors=\"red\",\n    linestyles=\"dashed\",\n    label=ax2hlineslabels[1],\n)\nax2.fill_between(\n    [-0.5, len(categories) - 0.5],\n    success_threshold_lower,\n    success_threshold_upper,\n    color=\"grey\",\n    alpha=0.15,\n)\nax2.set_ylabel(ylabels[1])\nax2.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f\"{x:.2f}\"))\nax2.set_ylim(ax2ylim)\nax2.set_xticklabels(categories)\nax2.legend(loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('multidiff_16.pdf', bbox_inches='tight')"}
{"idx": "multidiff_17", "instruction": "There is a reference image for you and I also have a set of data about investment returns and the number of investments in various financial subdomains. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for Area Chart - Represents percentage increases in knowledge by subject area\n\n# Investment levels\nn_levels = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\nlow_risk = np.array([30, 11, 23, 17, 16, 15])\nmedium_risk = np.array([20, 13, 25, 13, 15, 5])\nhigh_risk = np.array([18, 15, 10, 8, 7, 6])\n\n# Cumulative data for the stacked Area chart\ncumulative_low_risk = low_risk\ncumulative_medium_risk = cumulative_low_risk + medium_risk\ncumulative_high_risk = cumulative_medium_risk + high_risk\n\n# Data for Bar Chart - Shows the number of investments by financial subdomain\ndomains = [\n\"Equity\",\n\"Bonds\",\n\"Real Estate\",\n\"Commodities\",\n\"Forex\",\n\"Cryptocurrency\",\n\"Options\",\n]\ninvestments = [200, 280, 320, 340, 260, 430, 210]\ntitles = [\"Investment Returns by Risk Level\", \"Number of Investments by Financial Subdomain\"]\nxlabels = [\"Investment Level\", \"Financial Subdomain\"]\nylabels = [\"Cumulative Return (%)\", \"Number of Investments\"]\nax1labels = [\"Low Risk\",\"Medium Risk\", \"High Risk\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for Area Chart - Represents percentage increases in knowledge by subject area\n\n# Investment levels\nn_levels = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\nlow_risk = np.array([30, 11, 23, 17, 16, 15])\nmedium_risk = np.array([20, 13, 25, 13, 15, 5])\nhigh_risk = np.array([18, 15, 10, 8, 7, 6])\n\n# Cumulative data for the stacked Area chart\ncumulative_low_risk = low_risk\ncumulative_medium_risk = cumulative_low_risk + medium_risk\ncumulative_high_risk = cumulative_medium_risk + high_risk\n\n# Data for Bar Chart - Shows the number of investments by financial subdomain\ndomains = [\n    \"Equity\",\n    \"Bonds\",\n    \"Real Estate\",\n    \"Commodities\",\n    \"Forex\",\n    \"Cryptocurrency\",\n    \"Options\",\n]\ninvestments = [200, 280, 320, 340, 260, 430, 210]\ntitles = [\"Investment Returns by Risk Level\", \"Number of Investments by Financial Subdomain\"]\nxlabels = [\"Investment Level\", \"Financial Subdomain\"]\nylabels = [\"Cumulative Return (%)\", \"Number of Investments\"]\nax1labels = [\"Low Risk\",\"Medium Risk\", \"High Risk\"]\n\n# Placeholder to show where the area chart and bar chart would be displayed. Actual plotting code is not included.\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Creating the subplot layout\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plotting the Area Chart\nax1.fill_between(\n    n_levels, 0, cumulative_low_risk, label=ax1labels[0], color=\"#008fd5\", alpha=0.6\n)\nax1.fill_between(\n    n_levels,\n    cumulative_low_risk,\n    cumulative_medium_risk,\n    label=ax1labels[1],\n    color=\"#fc4f30\",\n    alpha=0.6,\n)\nax1.fill_between(\n    n_levels,\n    cumulative_medium_risk,\n    cumulative_high_risk,\n    label=ax1labels[2],\n    color=\"#e5ae38\",\n    alpha=0.6,\n)\nax1.set_title(titles[0])\nax1.set_xlabel(xlabels[0])\nax1.set_ylabel(ylabels[0])\nax1.legend(loc=\"upper left\")\n\n# Plotting the Bar Chart\nax2.bar(domains, investments, color=\"#30a2da\")\nax2.set_title(titles[1])\nax2.set_xlabel(xlabels[1])\nax2.set_ylabel(ylabels[1])\nax2.set_xticklabels(domains, rotation=45)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout and saving the figure\nplt.tight_layout()\nplt.savefig('multidiff_17.pdf', bbox_inches='tight')"}
{"idx": "multidiff_18", "instruction": "There is a reference image for you and I also have a set of data about investment progress and innovation gaps in different financial sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for Area Chart\nn_aug = [\"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"]\nequities_progress = np.random.randint(10, 50, len(n_aug))\nbonds_progress = np.random.randint(5, 45, len(n_aug))\nreal_estate_progress = np.random.randint(0, 40, len(n_aug))\n# Data for Box Plot representing innovation gaps across different financial sectors\ndata_equities = np.random.normal(20, 10, 100)\ndata_bonds = np.random.normal(40, 12, 100)\ndata_real_estate = np.random.normal(30, 15, 100)\ndata_forex = np.random.normal(50, 18, 100)\ndata = [data_equities, data_bonds, data_real_estate, data_forex]\n\n# Labels and titles for the plots\nax1labels = [\"Equities\", \"Bonds\", \"Real Estate\"]\ntitles = [\"Investment Advancements Over Years\", \"Innovation Gaps Across Financial Sectors\"]\nxlabels = [\"Year\"]\nylabels = [\"Investment Progress (%)\", \"Innovation Gap (%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for Area Chart\nn_aug = [\"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"]\nequities_progress = np.random.randint(10, 50, len(n_aug))\nbonds_progress = np.random.randint(5, 45, len(n_aug))\nreal_estate_progress = np.random.randint(0, 40, len(n_aug))\n# Data for Box Plot representing innovation gaps across different financial sectors\ndata_equities = np.random.normal(20, 10, 100)\ndata_bonds = np.random.normal(40, 12, 100)\ndata_real_estate = np.random.normal(30, 15, 100)\ndata_forex = np.random.normal(50, 18, 100)\ndata = [data_equities, data_bonds, data_real_estate, data_forex]\n\n# Labels and titles for the plots\nax1labels = [\"Equities\", \"Bonds\", \"Real Estate\"]\ntitles = [\"Investment Advancements Over Years\", \"Innovation Gaps Across Financial Sectors\"]\nxlabels = [\"Year\"]\nax2xtickslabels = [\"Equities\", \"Bonds\", \"Real Estate\", \"Forex\"]\nylabels = [\"Investment Progress (%)\", \"Innovation Gap (%)\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with two subplots in a vertical layout\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 10))\n\n# ----- Area Chart for Technological Advancements -----\n# Calculate cumulative values for stacked area chart\ncumulative_hardware = equities_progress\ncumulative_software = cumulative_hardware + bonds_progress\ncumulative_ai = cumulative_software + real_estate_progress\n\n# Plotting Area Chart\nax1.fill_between(\n    n_aug, 0, cumulative_hardware, label=ax1labels[0], color=\"#1f77b4\", alpha=0.7\n)\nax1.fill_between(\n    n_aug,\n    cumulative_hardware,\n    cumulative_software,\n    label=ax1labels[1],\n    color=\"#ff7f0e\",\n    alpha=0.7,\n)\nax1.fill_between(\n    n_aug, cumulative_software, cumulative_ai, label=ax1labels[2], color=\"#2ca02c\", alpha=0.7\n)\n\nax1.set_title(titles[0])\nax1.set_xlabel(xlabels[0])\nax1.set_ylabel(ylabels[0])\nax1.legend(loc=\"upper left\")\nax1.grid(True)\n\n# ----- Box Plot for Innovation Gaps in Tech Companies -----\n# Creating Box Plot\nbp = ax2.boxplot(data, patch_artist=True, notch=False, showfliers=False)\n\n# Customizing boxplot colors\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"]\nfor patch, color in zip(bp[\"boxes\"], colors):\n    patch.set_facecolor(color)\nfor median in bp[\"medians\"]:\n    median.set(color=\"black\")\n\n# Setting labels and titles\nax2.set_xticklabels(ax2xtickslabels)\nax2.set_ylabel(ylabels[1])\nax2.set_title(titles[1])\nax2.yaxis.grid(True)\nax2.spines[\"top\"].set_visible(False)\nax2.spines[\"right\"].set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('multidiff_18.pdf', bbox_inches='tight')"}
{"idx": "multidiff_19", "instruction": "There is a reference image for you and I also have a set of data about investment returns and occurrences across different countries and investment types. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# ErrorBar Plot Data\n# Countries\n# Countries and their average investment returns\ncountries = [\"USA\", \"UK\", \"Germany\", \"France\", \"Italy\", \"Spain\"]\ninvestment_returns = [6.4, 7.6, 8.0, 7.8, 6.2, 5.2]\nerrors = [0.5, 0.4, 0.3, 0.5, 0.6, 0.4]\n\n# ErrorPoint Plot Data\ninvestment_types = [\"Stocks\", \"Bonds\", \"Real Estate\", \"Commodities\", \"Forex\"]\noccurrences = np.random.uniform(5, 15, len(investment_types))\nstd_devs = np.random.uniform(0.5, 2.0, len(investment_types))\ndataset_mean = np.mean(occurrences)\n\n# Titles and labels for the plots\ntitles = [\"Average Investment Returns by Country\", \"Investment Occurrence Rates by Type\"]\nylabels = [\"Investment Return (%)\", \"Occurrences (%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n\n# ErrorBar Plot Data\n# Countries\n# Countries and their average investment returns\ncountries = [\"USA\", \"UK\", \"Germany\", \"France\", \"Italy\", \"Spain\"]\ninvestment_returns = [6.4, 7.6, 8.0, 7.8, 6.2, 5.2]\nerrors = [0.5, 0.4, 0.3, 0.5, 0.6, 0.4]\n\n# ErrorPoint Plot Data\ninvestment_types = [\"Stocks\", \"Bonds\", \"Real Estate\", \"Commodities\", \"Forex\"]\noccurrences = np.random.uniform(5, 15, len(investment_types))\nstd_devs = np.random.uniform(0.5, 2.0, len(investment_types))\ndataset_mean = np.mean(occurrences)\n\n# Titles and labels for the plots\ntitles = [\"Average Investment Returns by Country\", \"Investment Occurrence Rates by Type\"]\nylabels = [\"Investment Return (%)\", \"Occurrences (%)\"]\nylim = [0, 16]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# ErrorBar Plot\n# Create figure and axes for the subplots\nfig, axes = plt.subplots(2, 1, figsize=(8, 10))\n\naxes[0].bar(\n    countries, investment_returns, yerr=errors, color=\"#ff9b54\", capsize=5, ecolor=\"grey\"\n)\naxes[0].set_title(titles[0])\naxes[0].set_ylabel(ylabels[0])\naxes[0].grid(True)\n\n# ErrorPoint Plot\naxes[1].errorbar(\n    investment_types,\n    occurrences,\n    yerr=std_devs,\n    fmt=\"o\",\n    color=\"#1b9aaa\",\n    ecolor=\"#1b9aaa\",\n    capsize=5,\n    ms=8,\n)\naxes[1].axhline(y=dataset_mean, color=\"grey\", linestyle=\"--\")\naxes[1].set_title(titles[0])\naxes[1].set_ylabel(ylabels[0])\naxes[1].set_ylim(ylim)\naxes[1].grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout to avoid overlap and save the figure\nplt.tight_layout()\nplt.savefig('multidiff_19.pdf', bbox_inches='tight')"}
{"idx": "multidiff_20", "instruction": "There is a reference image for you and I also have a set of data about investment returns for different regions and categories. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Seed for reproducibility\n\n# Generating synthetic data for the violin plot\n# Average annual temperatures for two regions over different years\n\n# Yearly investment returns for two different regions\nregion1_returns = np.random.normal(10, 1.5, 150) # Returns in region 1, mean 7%, std 1.5%\nregion2_returns = np.random.normal(8, 2, 150) # Returns in region 2, mean 8%, std 2%\n\n# Generating synthetic data for the density plot\n# Returns in percentage for three investment categories over time\nstocks = np.random.normal(10, 2, 1000) # Stock returns\nbonds = np.random.normal(5, 1, 1000) # Bond returns\nreal_estate = np.random.normal(7, 1.5, 1000) # Real estate returns\n\nxs = np.linspace(0, 15, 200) # x-axis representing return percentage range\n\n# Labels and titles for the plots\nlabels = [\"Stocks\", \"Bonds\", \"Real Estate\"]\ntitles = [\"Average Annual Investment Returns\", \"Investment Return Distribution\"]\nylabels = [\"Return (%)\", \"Density\"]\nax2xlabel = \"Return (%)\"\n\n# Placeholder to show where the plots would be displayed. Actual plotting code is not included.\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Seed for reproducibility\n\n# Generating synthetic data for the violin plot\n# Average annual temperatures for two regions over different years\n\n# Yearly investment returns for two different regions\nregion1_returns = np.random.normal(10, 1.5, 150)  # Returns in region 1, mean 7%, std 1.5%\nregion2_returns = np.random.normal(8, 2, 150)  # Returns in region 2, mean 8%, std 2%\n\n# Generating synthetic data for the density plot\n# Returns in percentage for three investment categories over time\nstocks = np.random.normal(10, 2, 1000)  # Stock returns\nbonds = np.random.normal(5, 1, 1000)  # Bond returns\nreal_estate = np.random.normal(7, 1.5, 1000)  # Real estate returns\n\nxs = np.linspace(0, 15, 200)  # x-axis representing return percentage range\n\n# Labels and titles for the plots\nlabels = [\"Stocks\", \"Bonds\", \"Real Estate\"]\ntitles = [\"Average Annual Investment Returns\", \"Investment Return Distribution\"]\nylabels = [\"Return (%)\", \"Density\"]\nax1xticks = [1, 2]\nax1xtickslabels = [\"Region 1\", \"Region 2\"]\nax2xlabel = \"Return (%)\"\n\n# Placeholder to show where the plots would be displayed. Actual plotting code is not included.\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Creating the figure and axes\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))\n\n# Violin plot\nviolin_data = [region1_returns, region2_returns]\naxes[0].violinplot(violin_data, showmeans=False, showmedians=True)\naxes[0].set_title(titles[0])\naxes[0].set_ylabel(ylabels[1])\naxes[0].set_xticks(ax1xticks)\naxes[0].set_xticklabels(ax1xtickslabels)\naxes[0].grid(True)\n\n# Density plot\ncolors = [\"blue\", \"green\", \"red\"]\n\nfor data, color, label in zip([stocks, bonds, real_estate], colors, labels):\n    density = gaussian_kde(data)\n    axes[1].fill_between(xs, density(xs), color=color, alpha=0.2, label=label)\naxes[1].set_title(titles[1])\naxes[1].set_xlabel(ax2xlabel)\naxes[1].set_ylabel(ylabels[1])\naxes[1].legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjusting layout for better visual appearance\nplt.tight_layout()\nplt.savefig('multidiff_20.pdf', bbox_inches='tight')"}
{"idx": "multidiff_21", "instruction": "There is a reference image for you and I also have a set of data about educational performance and resources. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Redefined data for Area Chart - Growth in various investment types over time\n\n# Time periods and corresponding average grades in different subjects\nperiods = [\"2019\", \"2020\", \"2021\", \"2022\"]\nmath_grades = np.array([80, 78, 85, 82])\nscience_grades = np.array([75, 80, 82, 88])\nhistory_grades = np.array([70, 72, 75, 78])\n\n# Adjust the cumulative calculation for clarity in visualization\ncumulative_math = math_grades\ncumulative_science = cumulative_math + science_grades\ncumulative_history = cumulative_science + history_grades\n\n# New data for Bar Chart - Popularity of educational resources\nresources = [\"Books\", \"Laboratories\", \"Teachers\", \"Online Tools\", \"Tutoring\", \"Extracurriculars\"]\npopularity = [70, 80, 90, 110, 140, 200]\n\n# Redefined data for Histogram - Financial aid distribution in urban vs rural areas\nurban_aid = np.random.normal(15000, 3000, 1000) # Financial aid amounts in urban areas\nrural_aid = np.random.normal(10000, 3500, 1000) # Financial aid amounts in rural areas\nbins = np.linspace(5000, 25000, 30) # Uniform bin size for both histograms\n\n# Labels and titles for the plots\nax1labels = [\"Math\", \"Science\", \"History\"]\ntitles = [\"Average Grades Over Time\", \"Popularity of Educational Resources\", \"Financial Aid Distribution by Region\"]\nxlabels = [\"Year\", \"Resource Type\", \"Financial Aid Amount ($)\"]\nylabels = [\"Cumulative Grades\", \"Number of Students\", \"Frequency\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Redefined data for Area Chart - Growth in various investment types over time\n\n# Time periods and corresponding average grades in different subjects\nperiods = [\"2019\", \"2020\", \"2021\", \"2022\"]\nmath_grades = np.array([80, 78, 85, 82])\nscience_grades = np.array([75, 80, 82, 88])\nhistory_grades = np.array([70, 72, 75, 78])\n\n# Adjust the cumulative calculation for clarity in visualization\ncumulative_math = math_grades\ncumulative_science = cumulative_math + science_grades\ncumulative_history = cumulative_science + history_grades\n\n# New data for Bar Chart - Popularity of educational resources\nresources = [\"Books\", \"Laboratories\", \"Teachers\", \"Online Tools\", \"Tutoring\", \"Extracurriculars\"]\npopularity = [70, 80, 90, 110, 140, 200]\n\n# Redefined data for Histogram - Financial aid distribution in urban vs rural areas\nurban_aid = np.random.normal(15000, 3000, 1000)  # Financial aid amounts in urban areas\nrural_aid = np.random.normal(10000, 3500, 1000)  # Financial aid amounts in rural areas\nbins = np.linspace(5000, 25000, 30)  # Uniform bin size for both histograms\n\n# Labels and titles for the plots\nax1labels = [\"Math\", \"Science\", \"History\"]\ntitles = [\"Average Grades Over Time\", \"Popularity of Educational Resources\", \"Financial Aid Distribution by Region\"]\nxlabels = [\"Year\", \"Resource Type\", \"Financial Aid Amount ($)\"]\nylabels = [\"Cumulative Grades\", \"Number of Students\", \"Frequency\"]\n\n# Placeholder to show where the stacked area chart, bar chart, and histograms would be displayed. Actual plotting code is not included.\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure with subplots\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n\n# Plotting the Area Chart with new data\nax1.stackplot(\n    periods,\n    cumulative_math,\n    cumulative_science,\n    cumulative_history,\n    labels=ax1labels,\n    colors=[\"#7bb274\", \"#5b92e5\", \"#ffcc5c\"],\n    alpha=0.8,\n)\nax1.set_title(titles[0])\nax1.set_xlabel(xlabels[0])\nax1.set_ylabel(ylabels[0])\nax1.legend(loc=\"upper right\")\n\n# Plotting the Bar Chart with different data\nax2.bar(resources, popularity, color=\"#a7c7e7\")\nax2.set_title(titles[1])\nax2.set_xlabel(xlabels[1])\nax2.set_ylabel(ylabels[1])\nax2.set_xticklabels(resources, rotation=45)\n\n# Plotting two overlapping Histograms\nax3.hist(urban_aid, bins=bins, color=\"#84c1ff\", alpha=0.7, label=\"Urban Loans\")\nax3.hist(rural_aid, bins=bins, color=\"#ffa07a\", alpha=0.7, label=\"Rural Loans\")\nax3.set_title(titles[2])\nax3.set_xlabel(xlabels[2])\nax3.set_ylabel(ylabels[2])\nax3.legend()\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot as a PDF file\nplt.tight_layout()\nplt.savefig('multidiff_21.pdf', bbox_inches='tight')"}
{"idx": "multidiff_22", "instruction": "There is a reference image for you and I also have a set of data about medical AI task success rates, treatment algorithm efficiency, and treatment model adaptability. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# ========== Bar with Error Data (AI Task Success Rates) ==========\n\n# Medical tasks and their success rates\nmedical_tasks = [\"Diagnosis\", \"Treatment Plan\", \"Follow-up Care\", \"Emergency Response\"]\nsuccess_rates = [95, 90, 82, 80]\nerrors = [7, 4, 8, 4]\n\n# ========== Scatter with Error Data (Treatment Algorithm Efficiency) ==========\n# Algorithms\nalgorithms = [\"Alg1\", \"Alg2\", \"Alg3\", \"Alg4\"]\n# Efficiency scores\nefficiency = np.random.uniform(50, 90, len(algorithms))\n# Standard deviations\nstd_devs = np.random.uniform(10, 20, len(algorithms))\n\n# ========== Line with Error Data (Treatment Model Adaptability) ==========\n# Models\nmodels = [\"Model A\", \"Model B\", \"Model C\", \"Model D\"]\n# Adaptability scores in different conditions\nadaptability_normal = np.random.uniform(110, 85, len(models))\nadaptability_stress = np.random.uniform(85, 115, len(models))\n# Error\nerror = np.random.uniform(1, 2, len(models))\n\n# Titles and labels for the plots\ntitles = [\"Medical Task Success Rates\", \"Treatment Algorithm Efficiency Scores\", \"Treatment Model Adaptability\"]\nylabels = [\"Success Rate (%)\", \"Efficiency (%)\", \"Adaptability Score (%)\"]\nax3labels = [\"Normal Conditions\", \"Stress Conditions\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom matplotlib.gridspec import GridSpec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# ========== Bar with Error Data (AI Task Success Rates) ==========\n\n# Medical tasks and their success rates\nmedical_tasks = [\"Diagnosis\", \"Treatment Plan\", \"Follow-up Care\", \"Emergency Response\"]\nsuccess_rates = [95, 90, 82, 80]\nerrors = [7, 4, 8, 4]\n\n# ========== Scatter with Error Data (Treatment Algorithm Efficiency) ==========\n# Algorithms\nalgorithms = [\"Alg1\", \"Alg2\", \"Alg3\", \"Alg4\"]\n# Efficiency scores\nefficiency = np.random.uniform(50, 90, len(algorithms))\n# Standard deviations\nstd_devs = np.random.uniform(10, 20, len(algorithms))\n\n# ========== Line with Error Data (Treatment Model Adaptability) ==========\n# Models\nmodels = [\"Model A\", \"Model B\", \"Model C\", \"Model D\"]\n# Adaptability scores in different conditions\nadaptability_normal = np.random.uniform(110, 85, len(models))\nadaptability_stress = np.random.uniform(85, 115, len(models))\n# Error\nerror = np.random.uniform(1, 2, len(models))\n\n# Titles and labels for the plots\ntitles = [\"Medical Task Success Rates\", \"Treatment Algorithm Efficiency Scores\", \"Treatment Model Adaptability\"]\nylabels = [\"Success Rate (%)\", \"Efficiency (%)\", \"Adaptability Score (%)\"]\nax2ylim = [30, 110]\nax3labels = [\"Normal Conditions\", \"Stress Conditions\"]\n\n# Placeholder to show where the bar plot, scatter plot, and line plot would be displayed. Actual plotting code is not included.\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Bar with Error Plot\n# Create figure and grid layout\nfig = plt.figure(figsize=(10, 10))\ngs = GridSpec(2, 2, figure=fig)\n\nax1 = fig.add_subplot(gs[0, :])\nax1.bar(medical_tasks, success_rates, yerr=errors, color=\"skyblue\", capsize=5, ecolor=\"grey\")\nax1.set_title(titles[0])\nax1.set_ylabel(ylabels[0])\nax1.grid(True)\n\n# Scatter with Error Plot\nax2 = fig.add_subplot(gs[1, 0])\nax2.errorbar(\n    algorithms,\n    efficiency,\n    yerr=std_devs,\n    fmt=\"o\",\n    color=\"#e5989b\",\n    ecolor=\"grey\",\n    capsize=5,\n    ms=10,\n)\nax2.set_title(titles[1])\nax2.set_ylabel(ylabels[1])\nax2.set_ylim(ax2ylim)\nax2.grid(True)\n\n# Line with Error Plot\nax3 = fig.add_subplot(gs[1, 1])\nax3.errorbar(\n    models,\n    adaptability_normal,\n    yerr=error,\n    fmt=\"o-\",\n    color=\"green\",\n    ecolor=\"grey\",\n    capsize=5,\n    label=ax3labels[0],\n)\nax3.errorbar(\n    models,\n    adaptability_stress,\n    yerr=error,\n    fmt=\"s-\",\n    color=\"blue\",\n    ecolor=\"grey\",\n    capsize=5,\n    label=ax3labels[1],\n)\nax3.set_title(titles[2])\nax3.set_ylabel(ylabels[2])\nax3.legend(title=\"Conditions\")\nax3.grid(True)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('multidiff_22.pdf', bbox_inches='tight')"}
{"idx": "multidiff_23", "instruction": "There is a reference image for you and I also have a set of data about heart rate, step count, and weight changes. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Seed for reproducibility\n\n# Generate synthetic traffic data\n\n# Heart rate counts at different times of day\nmorning_heart_rate = np.random.poisson(140, 500) # Morning heart rate\nevening_heart_rate = np.random.poisson(120, 500) # Evening heart rate\n\n# Step count data at different locations\nhome_steps = np.random.normal(4000, 800, 1000) # Steps at home\noffice_steps = np.random.normal(2000, 1000, 1000) # Steps at office\n\n# Weight data over a diet period\ndays = np.linspace(0, 7, 1000) # Days in a week\nweight_changes = np.sin(np.linspace(0, 2 * np.pi, 1000)) * 2 + 70 # Hypothetical weight changes\n\n# Labels and titles for the plots\nax1labels = [\"Morning Heart Rate\", \"Evening Heart Rate\"]\ntitles = [\"Heart Rate by Time of Day\", \"Step Count Distribution by Location\", \"Weight Changes Over a Diet Week\"]\nxlabels = [\"Heart Rate (bpm)\", \"Number of Steps\", \"Days\"]\nylabels = [\"Frequency\", \"Frequency\", \"Weight (kg)\"]\nbins = np.linspace(40, 200, 31)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 10.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom scipy.stats import gaussian_kde\nfrom matplotlib.gridspec import GridSpec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Seed for reproducibility\n\n# Generate synthetic traffic data\n\n# Heart rate counts at different times of day\nmorning_heart_rate = np.random.poisson(140, 500)  # Morning heart rate\nevening_heart_rate = np.random.poisson(120, 500)  # Evening heart rate\n\n# Step count data at different locations\nhome_steps = np.random.normal(4000, 800, 1000)  # Steps at home\noffice_steps = np.random.normal(2000, 1000, 1000)  # Steps at office\n\n# Weight data over a diet period\ndays = np.linspace(0, 7, 1000)  # Days in a week\nweight_changes = np.sin(np.linspace(0, 2 * np.pi, 1000)) * 2 + 70  # Hypothetical weight changes\n\n# Labels and titles for the plots\nax1labels = [\"Morning Heart Rate\", \"Evening Heart Rate\"]\ntitles = [\"Heart Rate by Time of Day\", \"Step Count Distribution by Location\", \"Weight Changes Over a Diet Week\"]\nxlabels = [\"Heart Rate (bpm)\", \"Number of Steps\", \"Days\"]\nylabels = [\"Frequency\", \"Frequency\", \"Weight (kg)\"]\nax2xtickslabels = [\"Home\", \"Office\"]\nax2xticks = [1, 2]\nbins = np.linspace(40, 200, 31)\n\n# Placeholder to show where the histograms and line plot would be displayed. Actual plotting code is not included.\n\n# Placeholder to show where the histograms and line plot would be displayed. Actual plotting code is not included.\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create the figure using GridSpec\nfig = plt.figure(figsize=(10, 10))\ngs = GridSpec(2, 2, figure=fig)\n\n# Histogram plot across top (1,1 and 1,2)\nax1 = fig.add_subplot(gs[0, :])\n# Define bin edges and width to align bars side by side\n\nax1.hist(\n    morning_heart_rate,\n    bins=bins,\n    alpha=0.7,\n    label=ax1labels[0],\n    color=\"#dca684\",\n    edgecolor=\"black\",\n)\nax1.hist(\n    evening_heart_rate,\n    bins=bins,\n    alpha=0.7,\n    label=ax1labels[1],\n    color=\"#8f8c6d\",\n    edgecolor=\"black\",\n)\nax1.set_title(titles[0])\nax1.set_xlabel(xlabels[0])\nax1.set_ylabel(ylabels[0])\nax1.legend()\n\n# Violin plot on bottom left (2,1)\nax2 = fig.add_subplot(gs[1, 0])\nax2.violinplot([home_steps, office_steps], showmeans=False, showmedians=True)\nax2.set_title(titles[1])\nax2.set_ylabel(ylabels[1])\nax2.set_xticks(ax2xticks)\nax2.set_xticklabels(ax2xtickslabels)\nax2.grid(True)\n\n# Fill between plot on bottom right (2,2)\nax3 = fig.add_subplot(gs[1, 1])\nax3.fill_between(days, weight_changes, color=\"blue\", alpha=0.2)\nax3.set_title(titles[2])\nax3.set_xlabel(xlabels[1])\nax3.set_ylabel(ylabels[2])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for a better visual appearance\nplt.tight_layout()\nplt.savefig('multidiff_23.pdf', bbox_inches='tight')"}
{"idx": "multidiff_25", "instruction": "There is a reference image for you and I also have a set of data about student performance and university ratings across different regions. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for Picture in Picture bar plot\n\n# Known and unknown test scores distribution for different subjects\nknown_scores = np.array(\n[37, 45, 78, 75, 70, 65, 60, 38, 55, 60, 75]\n)\nunknown_scores = np.array(\n[60, 55, 53, 50, 48, 45, 40, 48, 35, 30, 25]\n)\nbins = np.linspace(0, 100, 11) # Exam scores ranging from 0 to 100\n\n# Data for the heatmap representing university ratings across different regions\nuniversity_ratings = np.array(\n[\n[98, 92, 85, 78, 72, 65],\n[95, 90, 82, 75, 70, 60],\n[92, 88, 80, 72, 68, 55],\n[90, 85, 78, 70, 65, 50],\n[88, 82, 75, 68, 62, 45],\n]\n)\nx_labels = [\n\"Uni A\",\n\"Uni B\",\n\"Uni C\",\n\"Uni D\",\n\"Uni E\",\n\"Uni F\",\n]\ny_labels = [\"Region 1\", \"Region 2\", \"Region 3\", \"Region 4\", \"Region 5\"]\nbar_labels = [\"Known Scores\", \"Unknown Scores\"]\nxlabels = [\"Score Range\", \"Universities\"]\nylabels = [\"Number of Students\", \"Regions\"]\ncbarlabel = \"University Ratings\"\ninsetaxes = [0.251, 0.65, 0.1, 0.2]\ninsetxlim = [40, 80]\n\n# Data for bar chart showing student enrollment by field\nfields = [\"Science\", \"Engineering\", \"Arts\", \"Business\", \"Law\", \"Medicine\"]\nenrollment = [520, 470, 510, 390, 350, 400]\n\n# Redefined data for histogram representing student enrollment distribution by region\nurban_enrollment = np.random.normal(1000, 200, 1000) # Enrollment in urban areas\nrural_enrollment = np.random.normal(600, 150, 1000) # Enrollment in rural areas\nbins_enrollment = np.linspace(0, 2000, 30) # Uniform bin size for histograms\n\n# Titles for the plots\ntitles = [\"Student Scores Distribution\", \"University Ratings by Region\", \"Student Enrollment Distribution\"]\nxlabels = [\"Score Range\", \"Universities\", \"Enrollment Count\"]\nylabels = [\"Number of Students\", \"Regions\", \"Frequency\"]\n\n# Placeholder to show where histograms, bar charts, and heatmaps would be displayed. Actual plotting code is not included.\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nimport matplotlib.gridspec as gridspec\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for Picture in Picture bar plot\n\n# Known and unknown test scores distribution for different subjects\nknown_scores = np.array(\n    [37, 45, 78, 75, 70, 65, 60, 38, 55, 60, 75]\n)\nunknown_scores = np.array(\n    [60, 55, 53, 50, 48, 45, 40, 48, 35, 30, 25]\n)\nbins = np.linspace(0, 100, 11)  # Exam scores ranging from 0 to 100\n\n# Data for the heatmap representing university ratings across different regions\nuniversity_ratings = np.array(\n    [\n        [98, 92, 85, 78, 72, 65],\n        [95, 90, 82, 75, 70, 60],\n        [92, 88, 80, 72, 68, 55],\n        [90, 85, 78, 70, 65, 50],\n        [88, 82, 75, 68, 62, 45],\n    ]\n)\nx_labels = [\n    \"Uni A\",\n    \"Uni B\",\n    \"Uni C\",\n    \"Uni D\",\n    \"Uni E\",\n    \"Uni F\",\n]\ny_labels = [\"Region 1\", \"Region 2\", \"Region 3\", \"Region 4\", \"Region 5\"]\nbar_labels = [\"Known Scores\", \"Unknown Scores\"]\nxlabels = [\"Score Range\", \"Universities\"]\nylabels = [\"Number of Students\", \"Regions\"]\ncbarlabel = \"University Ratings\"\ninsetaxes = [0.251, 0.65, 0.1, 0.2]\ninsetxlim = [40, 80]\n\n# Data for bar chart showing student enrollment by field\nfields = [\"Science\", \"Engineering\", \"Arts\", \"Business\", \"Law\", \"Medicine\"]\nenrollment = [520, 470, 510, 390, 350, 400]\n\n# Redefined data for histogram representing student enrollment distribution by region\nurban_enrollment = np.random.normal(1000, 200, 1000)  # Enrollment in urban areas\nrural_enrollment = np.random.normal(600, 150, 1000)  # Enrollment in rural areas\nbins_enrollment = np.linspace(0, 2000, 30)  # Uniform bin size for histograms\n\n# Titles for the plots\ntitles = [\"Student Scores Distribution\", \"University Ratings by Region\", \"Student Enrollment Distribution\"]\nxlabels = [\"Score Range\", \"Universities\", \"Enrollment Count\"]\nylabels = [\"Number of Students\", \"Regions\", \"Frequency\"]\n\n# Placeholder to show where histograms, bar charts, and heatmaps would be displayed. Actual plotting code is not included.\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with GridSpec\nfig = plt.figure(figsize=(10, 5))\ngs = gridspec.GridSpec(1, 2, width_ratios=[1, 1.5])\n\n# Picture in Picture bar plot\nax0 = plt.subplot(gs[0])\nax0.bar(\n    bins,\n    known_scores,\n    width=8,\n    color=\"#8ac926\",\n    align=\"center\",\n    label=bar_labels[0],\n    edgecolor=\"black\",\n)\nax0.bar(\n    bins,\n    unknown_scores,\n    width=8,\n    color=\"#1982c4\",\n    align=\"center\",\n    bottom=known_scores,\n    label=bar_labels[1],\n    edgecolor=\"black\",\n)\nax0.set_xlabel(xlabels[0])\nax0.set_ylabel(ylabels[0])\nax0.legend(loc=\"upper right\")\nax0.grid(True)\nax0.set_ylim(40,150)\n\n# Add inset\nax_inset = fig.add_axes(insetaxes)\nax_inset.bar(\n    bins[5:],\n    known_scores[5:],\n    width=8,\n    color=\"#8ac926\",\n    align=\"center\",\n    edgecolor=\"black\",\n)\nax_inset.bar(\n    bins[5:],\n    unknown_scores[5:],\n    width=8,\n    color=\"#1982c4\",\n    align=\"center\",\n    bottom=known_scores[5:],\n    edgecolor=\"black\",\n)\nax_inset.set_xlim(insetxlim)\n\n# Heatmap plot\nax1 = plt.subplot(gs[1])\ncmap = plt.cm.coolwarm_r\nnorm = plt.Normalize(vmin=university_ratings.min(), vmax=university_ratings.max())\nheatmap = ax1.imshow(university_ratings, cmap=cmap, norm=norm, aspect=\"auto\")\n\n# Add color bar\ncbar = plt.colorbar(heatmap, ax=ax1, orientation=\"vertical\", pad=0.1)\ncbar.set_label(cbarlabel)\n\n# Set x and y labels\nax1.set_xticks(np.arange(len(x_labels)))\nax1.set_yticks(np.arange(len(y_labels)))\nax1.set_xticklabels(x_labels, rotation=45)\nax1.set_yticklabels(y_labels)\nax1.set_xlabel(xlabels[1])\nax1.set_ylabel(ylabels[1])\n\n\n# ===================\n# Part 4: Saving Output\n# ===================\nplt.tight_layout()\nplt.savefig('multidiff_25.pdf', bbox_inches='tight')"}
{"idx": "radar_1", "instruction": "There is a reference image for you and I also have a set of data about urban transportation and smart mobility metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\n\"PublicTransit\",\n\"ElectricVehicles\",\n\"TrafficCongestion\",\n\"AirPollution\",\n\"BicycleUsage\",\n\"RoadSafety\",\n\"UrbanMobility\",\n\"Ridesharing\",\n\"PedestrianZones\",\n]\nvalues1 = [45.2, 55.6, 70.3, 82.1, 63.5, 59.7, 76.4, 68.9, 50.3]\nvalues2 = [68.4, 74.1, 80.6, 67.5, 54.2, 60.8, 72.3, 78.5, 49.7]\nlabels = [\"UrbanTransport-2024\", \"SmartMobility-2024\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\n    \"PublicTransit\",\n    \"ElectricVehicles\",\n    \"TrafficCongestion\",\n    \"AirPollution\",\n    \"BicycleUsage\",\n    \"RoadSafety\",\n    \"UrbanMobility\",\n    \"Ridesharing\",\n    \"PedestrianZones\",\n]\nvalues1 = [45.2, 55.6, 70.3, 82.1, 63.5, 59.7, 76.4, 68.9, 50.3]\nvalues2 = [68.4, 74.1, 80.6, 67.5, 54.2, 60.8, 72.3, 78.5, 49.7]\nyticks = [20, 40, 60, 80, 100]\nylim = [0, 100]\nlabels = [\"UrbanTransport-2024\", \"SmartMobility-2024\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Size of the figure\nfig, ax = plt.subplots(figsize=(8, 7), subplot_kw=dict(polar=True))\n\n# Number of variables\nnum_vars = len(categories)\n# Compute angle for each category\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nangles += angles[:1]\n\nmargin = 0.1  # Adjust margin for labels\n# Draw one axe per variable and add labels with a margin\nlabels = []\nfor angle, label in zip(angles[:-1], categories):\n    x_offset = margin * np.cos(angle)\n    y_offset = margin * np.sin(angle)\n    labels.append(\n        ax.text(\n            angle + x_offset,\n            100 + y_offset,\n            label,\n            color=\"black\",\n            size=10,\n            horizontalalignment=\"center\",\n            verticalalignment=\"center\",\n        )\n    )\nplt.xticks(angles[:-1], [])\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, [], color=\"#bceced\", size=7)\nplt.ylim(ylim)\n\n# Plot data\nax.plot(\n    angles,\n    values2,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels[0],\n    color=\"#d1553e\",\n)\nax.fill(angles, values2, \"#d1553e\", alpha=0.2)\n\nax.plot(\n    angles,\n    values1,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels[1],\n    color=\"#4d88b9\",\n)\nax.fill(angles, values1, \"#4d88b9\", alpha=0.2)\n\n# Add data labels\nfor angle, value in zip(angles, values1):\n    ax.text(\n        angle,\n        value,\n        str(value),\n        color=\"black\",\n        size=10,\n        horizontalalignment=\"center\",\n        verticalalignment=\"bottom\",\n    )\nfor angle, value in zip(angles, values2):\n    ax.text(\n        angle,\n        value,\n        str(value),\n        color=\"black\",\n        size=10,\n        horizontalalignment=\"center\",\n        verticalalignment=\"bottom\",\n    )\n\n# Add legend\nplt.legend(\n    loc=\"lower center\",\n    ncol=2,\n    bbox_to_anchor=(0.5, -0.15),\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('radar_1.pdf', bbox_inches='tight')"}
{"idx": "radar_2", "instruction": "There is a reference image for you and I also have a set of data about urban mobility options such as Public Transit, Electric Vehicles, and Traffic Congestion. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Define the data for each model\nvalues1 = [63.2, 55.4, 72.1, 78.9, 65.0, 59.7, 50.4] # PublicTransit\nvalues2 = [75.6, 68.9, 82.4, 71.1, 74.3, 80.7, 64.5] # ElectricVehicles\nvalues3 = [54.1, 78.5, 69.3, 64.7, 70.9, 69.2, 79.0] # TrafficCongestion\nxlabels = [\"BikeSharing\", \"CarPooling\", \"SmartParking\", \"ElectricBuses\", \"UrbanLogistics\", \"RideHailing\", \"LastMileDelivery\"]\ntitle = \"Urban Mobility Comparison\"\nlabels = [\"PublicTransit\", \"ElectricVehicles\", \"TrafficCongestion\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for each model\nvalues1 = [63.2, 55.4, 72.1, 78.9, 65.0, 59.7, 50.4]  # PublicTransit\nvalues2 = [75.6, 68.9, 82.4, 71.1, 74.3, 80.7, 64.5]  # ElectricVehicles\nvalues3 = [54.1, 78.5, 69.3, 64.7, 70.9, 69.2, 79.0]  # TrafficCongestion\nxlabels = [\"BikeSharing\", \"CarPooling\", \"SmartParking\", \"ElectricBuses\", \"UrbanLogistics\", \"RideHailing\", \"LastMileDelivery\"]\nyticks = [20, 40, 60, 80, 100]\ntitle = \"Urban Mobility Comparison\"\nlabels = [\"PublicTransit\", \"ElectricVehicles\", \"TrafficCongestion\"]\nylim = [0, 100]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialize the spider plot\nfig, ax = plt.subplots(figsize=(8, 7), subplot_kw=dict(polar=True))\n\n# Number of variables\nnum_vars = len(values1)\n\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]  # Complete the loop\n\n# Repeat the first value to close the circle\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\n\n\n# Draw one axe per variable and add labels\nplt.xticks(\n    angles[:-1],\n    xlabels,\n    size=10,\n)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, [], color=\"#bceced\", size=7)\nplt.ylim(ylim)\n\n# Draw the inner circles with red color lines\nfor circle in ax.get_ygridlines():\n    circle.set_color(\"#97ccf6\")\n\n# Plot each model\nax.plot(angles, values1, linewidth=1, linestyle=\"solid\", label=labels[0], color=\"red\")\nax.fill(angles, values1, \"red\", alpha=0.1)\n\nax.plot(angles, values2, linewidth=1, linestyle=\"solid\", label=labels[1], color=\"blue\")\nax.fill(angles, values2, \"blue\", alpha=0.1)\n\nax.plot(angles, values3, linewidth=1, linestyle=\"solid\", label=labels[2], color=\"green\")\nax.fill(angles, values3, \"green\", alpha=0.1)\n\n# Add data labels\nfor i in range(num_vars):\n    plt.text(\n        angles[i],\n        values1[i],\n        str(values1[i]),\n        horizontalalignment=\"center\",\n        size=8,\n        color=\"black\",\n    )\n    plt.text(\n        angles[i],\n        values2[i],\n        str(values2[i]),\n        horizontalalignment=\"center\",\n        size=8,\n        color=\"black\",\n    )\n    plt.text(\n        angles[i],\n        values3[i],\n        str(values3[i]),\n        horizontalalignment=\"center\",\n        size=8,\n        color=\"black\",\n    )\n\n# Add a legend and title\nplt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, -0.1), ncol=3)\nplt.title(title, position=(0.5, -0.15), ha=\"center\")\n\n# Adjust figure size to match original image's dimensions\nfig.set_size_inches(8, 7)\nax.spines[\"polar\"].set_color(\"#97ccf6\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('radar_2.pdf', bbox_inches='tight')"}
{"idx": "radar_3", "instruction": "There is a reference image for you and I also have a set of data about vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data for PC1 and PC2\nvalues_speed = [55.2, 62.8, 70.5, 68.3, 73.0, 75.2, 79.3, 82.1, 84.5, 88.8]\nvalues_fuel_efficiency = [30.1, 28.4, 26.8, 27.2, 25.9, 24.3, 23.7, 22.1, 20.8, 19.5]\nnum_vars = len(values_speed)\nlabels = [\"Average Speed (km/h)\", \"Fuel Efficiency (mpg)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for PC1 and PC2\nvalues_speed = [55.2, 62.8, 70.5, 68.3, 73.0, 75.2, 79.3, 82.1, 84.5, 88.8]\nvalues_fuel_efficiency = [30.1, 28.4, 26.8, 27.2, 25.9, 24.3, 23.7, 22.1, 20.8, 19.5]\nnum_vars = len(values_speed)\nlabels = [\"Average Speed (km/h)\", \"Fuel Efficiency (mpg)\"]\nticks = [20, 40, 60, 80, 100]\ntickslabel = [\"20 km/h\", \"40 km/h\", \"60 km/h\", \"80 km/h\", \"100 km/h\"]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nvalues_speed += values_speed[:1]\nvalues_fuel_efficiency += values_fuel_efficiency[:1]\nangles += angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\nax.fill(angles, values_speed, color=\"black\", alpha=0.1)\nax.plot(angles, values_speed, color=\"black\", linewidth=2, label=labels[0])\nax.scatter(angles[:-1], values_speed[:-1], color=\"black\", s=50)\nax.fill(angles, values_fuel_efficiency, color=\"red\", alpha=0.1)\nax.plot(angles, values_fuel_efficiency, color=\"red\", linewidth=2, label=labels[1])\nax.scatter(angles[:-1], values_fuel_efficiency[:-1], color=\"red\", s=50)\n\n# Add labels to the plot\nax.set_yticklabels([])\ngrid_angles = np.linspace(0, 2 * np.pi, 8, endpoint=False)\nax.set_xticks(grid_angles)\nangle_labels = [f\"{i*45}\u00b0\" for i in range(8)]\nax.set_xticklabels(angle_labels)\n\n# Add grid lines and labels for the concentric circles\nax.set_rgrids(\n    ticks,\n    labels=tickslabel,\n    angle=30,\n    color=\"black\",\n    size=10,\n)\n\n# Create legend handles manually\nlegend_elements = [\n    Line2D(\n        [0],\n        [0],\n        color=\"black\",\n        linewidth=2,\n        marker=\"o\",\n        markersize=8,\n        label=labels[0],\n    ),\n    Line2D(\n        [0],\n        [0],\n        color=\"red\",\n        linewidth=2,\n        marker=\"o\",\n        markersize=8,\n        label=labels[1],\n    ),\n]\n\n# Add legend and title\nax.legend(\n    handles=legend_elements, loc=\"upper right\", bbox_to_anchor=(1.1, 1.1), frameon=False\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('radar_3.pdf', bbox_inches='tight')"}
{"idx": "radar_4", "instruction": "There is a reference image for you and I also have a set of data about different evaluation metrics for machine learning methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the data for each method\nlabels = np.array(\n[\"Accuracy\", \"Efficiency\", \"Scalability\", \"Security\", \"Usability\"]\n)\nstats = np.array([[4, 3, 5, 2, 4], [3, 4, 4, 3, 5], [5, 2, 3, 4, 3]])\ntitles = [\"Bayesian Network (\u0152\u00b5 = \u201a\u00e0\u00fb)\", \"Differential Privacy Synthesizer (\u0152\u00b5 = \u201a\u00e0\u00fb)\", \"Tabular Variational Autoencoder\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for each method\nlabels = np.array(\n    [\"Accuracy\", \"Efficiency\", \"Scalability\", \"Security\", \"Usability\"]\n)\nstats = np.array([[4, 3, 5, 2, 4], [3, 4, 4, 3, 5], [5, 2, 3, 4, 3]])\ntitles = [\"Bayesian Network (\u03b5 = \u221e)\", \"Differential Privacy Synthesizer (\u03b5 = \u221e)\", \"Tabular Variational Autoencoder\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nfig, ax = plt.subplots(figsize=(10, 6), nrows=1, ncols=3, subplot_kw=dict(polar=True))\n\n# Define the number of variables\nnum_vars = len(labels)\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n# The plot is made circular\nstats = np.concatenate((stats, stats[:, [0]]), axis=1)\nangles += angles[:1]\n\n\n# Draw one radar chart for each method\nfor idx, (title, case_data) in enumerate(\n    zip(titles, stats)\n):\n    thisColor = np.random.rand(\n        3,\n    )\n    #    ax[idx].fill(angles, case_data, color=thisColor, alpha=0.1)\n    ax[idx].plot(\n        angles, case_data, color=thisColor, linewidth=2\n    )  # Change the color for each method\n    ax[idx].set_yticks([1, 2, 3, 4, 5])\n    ax[idx].set_xticks(angles[:-1])\n    ax[idx].set_xticklabels(labels)\n    ax[idx].set_title(title, size=14, color=\"black\", position=(0.5, -0.1))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit\nplt.tight_layout()\n\n# Show the plot\nplt.savefig('radar_4.pdf', bbox_inches='tight')"}
{"idx": "radar_5", "instruction": "There is a reference image for you and I also have a set of data about renewable energy initiatives. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the radar chart\nlabels = np.array(\n[\n\"[1] Solar Panel\\nInstallation\",\n\"[2] Wind Turbine\\nSetup\",\n\"[3] Hydro Power\\nConstruction\",\n\"[4] Geothermal Plant\\nDevelopment\",\n\"[5] Energy Storage\\nSolutions\",\n\"[6] Smart Grid\\nImplementation\",\n\"[7] Electric Vehicle\\nInfrastructure\",\n\"[8] Biomass Energy\\nProduction\",\n\"[9] Energy Efficiency\\nImprovements\",\n\"[10] Renewable Energy\\nPolicy\",\n]\n)\nbaseline_values = np.array([80, 70, 60, 50, 80, 70, 42, 35, 50, 85])\nretrosyn2_values = np.array([75, 65, 55, 85, 65, 55, 55, 45, 95, 90])\nlabels2 = [\"Baseline\", \"GreenTech Initiative\"]\nrgrids = [30, 40, 50, 60, 70, 80, 90]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the radar chart\nlabels = np.array(\n    [\n        \"[1] Solar Panel\\nInstallation\",\n        \"[2] Wind Turbine\\nSetup\",\n        \"[3] Hydro Power\\nConstruction\",\n        \"[4] Geothermal Plant\\nDevelopment\",\n        \"[5] Energy Storage\\nSolutions\",\n        \"[6] Smart Grid\\nImplementation\",\n        \"[7] Electric Vehicle\\nInfrastructure\",\n        \"[8] Biomass Energy\\nProduction\",\n        \"[9] Energy Efficiency\\nImprovements\",\n        \"[10] Renewable Energy\\nPolicy\",\n    ]\n)\nbaseline_values = np.array([80, 70, 60, 50, 80, 70, 42, 35, 50, 85])\nretrosyn2_values = np.array([75, 65, 55, 85, 65, 55, 55, 45, 95, 90])\nyticks = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nytickslabel = [\"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\"]\nylim = [0, 100]\nlabels2 = [\"Baseline\", \"GreenTech Initiative\"]\nrgrids = [30, 40, 50, 60, 70, 80, 90]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Size of the figure\n\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nbaseline_values = np.concatenate((baseline_values, [baseline_values[0]]))\nretrosyn2_values = np.concatenate((retrosyn2_values, [retrosyn2_values[0]]))\nangles += angles[:1]\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], [], color=\"black\", size=8, ha=\"right\")\nfor angle, label in zip(angles[:-1], labels):  # Remove the appended first element\n    if (\n        angle < np.pi / 2 or angle > 3 * np.pi / 2\n    ):  # If the text is at the bottom or right side of the chart\n        ax.text(\n            angle,\n            110,\n            label,\n            horizontalalignment=\"left\",\n            size=8,\n            verticalalignment=\"bottom\",\n        )\n    else:  # If the text is at the top or left side of the chart\n        ax.text(\n            angle,\n            110,\n            label,\n            horizontalalignment=\"right\",\n            size=8,\n            verticalalignment=\"bottom\",\n        )\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(\n    yticks,\n    ytickslabel,\n    color=\"grey\",\n    size=8,\n)\nplt.ylim(ylim)\n\n# Plot data\nax.plot(\n    angles,\n    baseline_values,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels2[0],\n    color=\"blue\",\n)\nax.fill(angles, baseline_values, \"blue\", alpha=0.1)\n\nax.plot(\n    angles,\n    retrosyn2_values,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels2[1],\n    color=\"orange\",\n)\nax.fill(angles, retrosyn2_values, \"orange\", alpha=0.1)\n\n# Add legend\nplt.legend(loc=\"upper right\", bbox_to_anchor=(0.1, 0.1))\n\n# Adjust gridlines\nax.set_rgrids(\n    rgrids,\n    labels=rgrids,\n    angle=0,\n    color=\"black\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_5.pdf', bbox_inches='tight')"}
{"idx": "radar_6", "instruction": "There is a reference image for you and I also have a set of data about different scoring metrics for various systems. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Define the data for each line\nvalues_predicted = [0.05, 0.12, 0.09, 0.14, 0.07, 0.10]\nvalues_help = [0.10, 0.08, 0.11, 0.09, 0.13, 0.06]\nvalues_rs = [0.07, 0.15, 0.05, 0.12, 0.10, 0.08]\nvalues_rhpn = [0.12, 0.07, 0.14, 0.06, 0.11, 0.13]\nlabels = [\"predicted_score\", \"helpful_score\", \"result_score\", \"rating_score\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for each line\nvalues_predicted = [0.05, 0.12, 0.09, 0.14, 0.07, 0.10]\nvalues_help = [0.10, 0.08, 0.11, 0.09, 0.13, 0.06]\nvalues_rs = [0.07, 0.15, 0.05, 0.12, 0.10, 0.08]\nvalues_rhpn = [0.12, 0.07, 0.14, 0.06, 0.11, 0.13]\nxtickslabel = [\"System_A\", \"System_B\", \"System_C\", \"System_D\", \"System_E\", \"System_F\"]\ny_ticks = [0.05, 0.10, 0.15]\nlabels = [\"predicted_score\", \"helpful_score\", \"result_score\", \"rating_score\"]\nylim = [0, 0.2]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set up the figure and polar axis\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\n\n# Number of variables\nnum_vars = len(values_predicted)\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]  # Complete the loop\n\n# Repeat the first value to close the circle\nvalues_predicted += values_predicted[:1]\nvalues_help += values_help[:1]\nvalues_rs += values_rs[:1]\nvalues_rhpn += values_rhpn[:1]\n\n# Draw one axe per variable and add labels\nplt.xticks(\n    angles[:-1],\n    xtickslabel,\n    color=\"black\",\n    size=8,\n)\n\n\n# Draw ylabels\ndef add_custom_y_labels(ax, angles, labels, distance, size=7):\n    for angle, label in zip(angles, labels):\n        ax.text(\n            angle,\n            distance,\n            label,\n            horizontalalignment=\"center\",\n            size=size,\n            verticalalignment=\"bottom\",\n        )\n\n\n# Define the range of y-axis and y-labels\n\nplt.yticks(y_ticks, [str(i) for i in y_ticks], color=\"black\", size=7)\nadd_custom_y_labels(\n    ax, angles[:-1], [\"0.03\"] * len(angles[:-1]), 0.03\n)  # Add the 0.03 label at each axis\nadd_custom_y_labels(\n    ax, angles[:-1], [\"0.07\"] * len(angles[:-1]), 0.07\n)  # Add the 0.07 label at each axis\n\n# Set y-axis limit\nplt.ylim(ylim)\n\n# Plot data and fill area for each line\nax.plot(\n    angles,\n    values_predicted,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels[0],\n    color=\"green\",\n    marker=\"v\",\n)\nax.fill(angles, values_predicted, \"green\", alpha=0.05)\n\nax.plot(\n    angles,\n    values_help,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels[1],\n    color=\"orange\",\n    marker=\"o\",\n)\nax.fill(angles, values_help, \"orange\", alpha=0.05)\n\nax.plot(\n    angles,\n    values_rs,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels[2],\n    color=\"blue\",\n    marker=\"x\",\n)\nax.fill(angles, values_rs, \"blue\", alpha=0.05)\n\nax.plot(\n    angles,\n    values_rhpn,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels[3],\n    color=\"red\",\n    marker=\"^\",\n)\nax.fill(angles, values_rhpn, \"red\", alpha=0.05)\n\n# Add legend with a different style\nplt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, -0.2), ncol=4)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_6.pdf', bbox_inches='tight')"}
{"idx": "radar_7", "instruction": "There is a reference image for you and I also have a set of data about various business performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the data for each line\nlabels = np.array(\n[\n\"revenue\",\n\"profit_margin\",\n\"market_share\",\n\"customer_satisfaction\",\n\"employee_retention\",\n\"brand_awareness\",\n\"net_promoter_score\",\n\"customer_lifetime_value\",\n\"lead_conversion_rate\",\n\"social_media_engagement\",\n\"website_traffic\",\n\"sales_growth\",\n\"operational_efficiency\",\n\"product_quality\",\n\"inventory_turnover\",\n\"return_on_investment\",\n]\n)\nnum_vars = len(labels)\n\nvalues1 = np.array([50, 55, 60, 70, 65, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\nvalues2 = np.array([40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115])\nvalues3 = np.array([30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105])\nlabels2=[\"BizAnalyzer\", \"MarketMetrics\", \"CorpInsights\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for each line\nlabels = np.array(\n    [\n        \"revenue\",\n        \"profit_margin\",\n        \"market_share\",\n        \"customer_satisfaction\",\n        \"employee_retention\",\n        \"brand_awareness\",\n        \"net_promoter_score\",\n        \"customer_lifetime_value\",\n        \"lead_conversion_rate\",\n        \"social_media_engagement\",\n        \"website_traffic\",\n        \"sales_growth\",\n        \"operational_efficiency\",\n        \"product_quality\",\n        \"inventory_turnover\",\n        \"return_on_investment\",\n    ]\n)\nnum_vars = len(labels)\n\nvalues1 = np.array([50, 55, 60, 70, 65, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\nvalues2 = np.array([40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115])\nvalues3 = np.array([30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105])\nlabels2=[\"BizAnalyzer\", \"MarketMetrics\", \"CorpInsights\"]\nyticks=[20, 40, 60, 80, 100]\nytickslabel=[\"20\", \"40\", \"60\", \"80\", \"100\"]\nylim=[10, 130]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\n\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nvalues1 = np.concatenate((values1, [values1[0]]))\nvalues2 = np.concatenate((values2, [values2[0]]))\nvalues3 = np.concatenate((values3, [values3[0]]))\nangles += angles[:1]\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, ytickslabel, color=\"black\", size=7)\nplt.ylim(ylim)\n\n# Plot data\nax.plot(\n    angles,\n    values1,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=labels2[0],\n    color=\"#971d2b\",\n    marker=\"o\",\n)\nax.fill(angles, values1, \"#971d2b\", alpha=0.1)\n\nax.plot(\n    angles,\n    values2,\n    linewidth=1,\n    linestyle=\"dashed\",\n    label=labels2[1],\n    color=\"#6f98c3\",\n    marker=\"s\",\n)\nax.fill(angles, values2, \"#6f98c3\", alpha=0.1)\n\nax.plot(\n    angles,\n    values3,\n    linewidth=1,\n    linestyle=\"dotted\",\n    label=labels2[2],\n    color=\"#f4c17d\",\n    marker=\"D\",\n)\nax.fill(angles, values3, \"#f4c17d\", alpha=0.1)\n\n# Add legend\nplt.legend(loc=\"lower left\", bbox_to_anchor=(-0.15, -0.1))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_7.pdf', bbox_inches='tight')"}
{"idx": "radar_9", "instruction": "There is a reference image for you and I also have a set of data about various performance metrics across different sectors. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data\ncategories = [\"Urban Transport\", \"Tech Growth\", \"Financial Stability\", \"Healthcare Quality\", \"Educational Attainment\", \"Environmental Sustainability\"]\nvalues1 = [58.4, 72.1, 63.5, 71.2, 69.0, 66.3]\nvalues2 = [66.5, 67.2, 57.1, 53.8, 50.4, 60.7]\nlabels = [\"Predictive Model 2023\", \"Predictive Model 2024\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data\ncategories = [\"Urban Transport\", \"Tech Growth\", \"Financial Stability\", \"Healthcare Quality\", \"Educational Attainment\", \"Environmental Sustainability\"]\nvalues1 = [58.4, 72.1, 63.5, 71.2, 69.0, 66.3]\nvalues2 = [66.5, 67.2, 57.1, 53.8, 50.4, 60.7]\nlabels = [\"Predictive Model 2023\", \"Predictive Model 2024\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each category\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nangles += angles[:1]\n# Plot\nfig, ax = plt.subplots(figsize=(8, 7), subplot_kw=dict(polar=True))\nax.fill(angles, values1, color=\"#d1553e\", alpha=0.25)\nax.fill(angles, values2, color=\"#4d88b9\", alpha=0.25)\nax.plot(angles, values1, color=\"#d1553e\", linewidth=2, label=labels[0])\nax.plot(angles, values2, color=\"#4d88b9\", linewidth=2, label=labels[1])\n\n# Labels and annotations for each point\nfor angle, value1, value2 in zip(angles[:-1], values1[:-1], values2[:-1]):\n    ax.annotate(\n        f\"{value1}\", xy=(angle, value1), xytext=(5, 5), textcoords=\"offset points\"\n    )\n    ax.annotate(\n        f\"{value2}\", xy=(angle, value2), xytext=(5, -10), textcoords=\"offset points\"\n    )\n\n# Labels for each point\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# remove ylabels\nax.set_yticklabels([])\n\n# Legend\nax.legend(\n    loc=\"lower center\",\n    bbox_to_anchor=(0.5, -0.1),\n    ncol=2,\n    frameon=True,\n    facecolor=\"#f2f2f2\",\n    edgecolor=\"#f2f2f2\",\n)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_9.pdf', bbox_inches='tight')"}
{"idx": "radar_10", "instruction": "There is a reference image for you and I also have a set of data about advanced technology performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Define the data for the radar chart\ncategories = [\n\"quantum_computing\",\n\"artificial_intelligence\",\n\"blockchain\",\n\"cybersecurity\",\n\"biotechnology\",\n\"nanotechnology\",\n\"robotics\",\n\"augmented_reality\",\n\"virtual_reality\",\n\"internet_of_things\",\n\"5G_technology\",\n\"autonomous_vehicles\",\n\"cloud_computing\",\n\"edge_computing\",\n\"fintech\",\n]\nN = len(categories)\n\n# Values for each algorithm\nQuantumFlow = [80, 85, 78, 90, 88, 84, 82, 75, 80, 85, 90, 88, 85, 84, 82]\nAIDeepDive = [45, 50, 48, 52, 50, 49, 51, 48, 47, 50, 52, 50, 49, 48, 47]\nBlockSafe = [68, 70, 65, 72, 70, 68, 69, 65, 64, 68, 72, 70, 68, 67, 66]\n\nlabels=[\"QuantumFlow\", \"AIDeepDive\", \"BlockSafe\"]\ntitle=\"Advanced Tech Performance Comparison\\n(speed-up ratio: 4)\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for the radar chart\ncategories = [\n    \"quantum_computing\",\n    \"artificial_intelligence\",\n    \"blockchain\",\n    \"cybersecurity\",\n    \"biotechnology\",\n    \"nanotechnology\",\n    \"robotics\",\n    \"augmented_reality\",\n    \"virtual_reality\",\n    \"internet_of_things\",\n    \"5G_technology\",\n    \"autonomous_vehicles\",\n    \"cloud_computing\",\n    \"edge_computing\",\n    \"fintech\",\n]\nN = len(categories)\n\n# Values for each algorithm\nQuantumFlow = [80, 85, 78, 90, 88, 84, 82, 75, 80, 85, 90, 88, 85, 84, 82]\nAIDeepDive = [45, 50, 48, 52, 50, 49, 51, 48, 47, 50, 52, 50, 49, 48, 47]\nBlockSafe = [68, 70, 65, 72, 70, 68, 69, 65, 64, 68, 72, 70, 68, 67, 66]\n\nlabels=[\"QuantumFlow\", \"AIDeepDive\", \"BlockSafe\"]\ntitle=\"Advanced Tech Performance Comparison\\n(speed-up ratio: 4)\"\nyticks=[20, 40, 60, 80, 100]\nylim=[0, 100]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialize the spider plot\nfig, ax = plt.subplots(figsize=(5, 5), subplot_kw=dict(polar=True))\n\n# We need to repeat the first value to close the circular graph:\nQuantumFlow += QuantumFlow[:1]\nAIDeepDive += AIDeepDive[:1]\nBlockSafe += BlockSafe[:1]\n\n# Calculate angle for each category\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, color=\"grey\", size=10)\nplt.ylim(ylim)\n\n# Plot data\nax.plot(\n    angles, QuantumFlow, linewidth=3, linestyle=\"solid\", label=labels[0], color=\"#ee9f9b\"\n)\nax.plot(angles, AIDeepDive, linewidth=3, linestyle=\"solid\", label=labels[1], color=\"#549e3f\")\nax.plot(\n    angles, BlockSafe, linewidth=3, linestyle=\"solid\", label=labels[2], color=\"#3c76af\"\n)\n\n# Add a title and a legend\nplt.title(title, size=15, color=\"black\", y=1.1)\nplt.legend(loc=\"upper left\", bbox_to_anchor=(0.9, 1.3))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_10.pdf', bbox_inches='tight')"}
{"idx": "radar_12", "instruction": "There is a reference image for you and I also have a set of data about model performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Data values\nvalues_k1 = [0.52, 0.42, 0.55, 0.33, 0.44]\nvalues_k2 = [0.48, 0.55, 0.33, 0.52, 0.47]\nvalues_plus = [0.33, 0.48, 0.50, 0.47, 0.55]\ncategories = [\"Precision\", \"Recall\", \"F1-Score\", \"ROC-AUC\", \"Accuracy\"]\nlabels = [\"Model${_{k=1}}$\", \"Model${_{k=2}}$\", \"Model${^{\u201a\u00dc\u00eb}}$\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data values\nvalues_k1 = [0.52, 0.42, 0.55, 0.33, 0.44]\nvalues_k2 = [0.48, 0.55, 0.33, 0.52, 0.47]\nvalues_plus = [0.33, 0.48, 0.50, 0.47, 0.55]\ncategories = [\"Precision\", \"Recall\", \"F1-Score\", \"ROC-AUC\", \"Accuracy\"]\nlabels = [\"Model${_{k=1}}$\", \"Model${_{k=2}}$\", \"Model${^{\u2191}}$\"]\nyticks = [0.2, 0.3, 0.4, 0.5]\nylim = [0, 0.6]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialise the radar plot\nfig, ax = plt.subplots(figsize=(8, 6), subplot_kw=dict(polar=True))\n\n# Number of variables\nN = len(categories)\n\n# What will be the angle of each axis in the plot\nangles = [n / float(N) * 2 * np.pi for n in range(N)]\nangles += angles[:1]\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, [], color=\"grey\", size=7)\nplt.ylim(ylim)\n\n# Plot data\nax.plot(\n    angles,\n    values_k1 + values_k1[:1],\n    color=\"blue\",\n    linewidth=1,\n    linestyle=\"dotted\",\n    label=labels[0],\n    marker=\".\",\n)\nax.fill(angles, values_k1 + values_k1[:1], color=\"blue\", alpha=0.1)\n\nax.plot(\n    angles,\n    values_k2 + values_k2[:1],\n    color=\"orange\",\n    linewidth=1,\n    linestyle=\"dotted\",\n    label=labels[1],\n    marker=\".\",\n)\nax.fill(angles, values_k2 + values_k2[:1], color=\"orange\", alpha=0.1)\n\nax.plot(\n    angles,\n    values_plus + values_plus[:1],\n    color=\"green\",\n    linewidth=1,\n    linestyle=\"dotted\",\n    label=labels[2],\n    marker=\".\",\n)\nax.fill(angles, values_plus + values_plus[:1], color=\"green\", alpha=0.1)\n\n# add label for each point\nfor i in range(N):\n    ax.text(\n        angles[i],\n        values_k1[i],\n        str(values_k1[i]),\n        color=\"black\",\n        size=8,\n        verticalalignment=\"bottom\",\n        horizontalalignment=\"center\",\n    )\n    ax.text(\n        angles[i],\n        values_k2[i],\n        str(values_k2[i]),\n        color=\"black\",\n        size=8,\n        verticalalignment=\"bottom\",\n        horizontalalignment=\"center\",\n    )\n    ax.text(\n        angles[i],\n        values_plus[i],\n        str(values_plus[i]),\n        color=\"black\",\n        size=8,\n        verticalalignment=\"bottom\",\n        horizontalalignment=\"center\",\n    )\n\n# Add legend\nplt.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_12.pdf', bbox_inches='tight')"}
{"idx": "radar_13", "instruction": "There is a reference image for you and I also have a set of data about various industry sectors' performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the radar chart\nlabels = np.array(\n[\n\"e-commerce\",\n\"healthcare\",\n\"finance\",\n\"education\",\n\"transportation\",\n\"technology\",\n\"energy\",\n\"entertainment\",\n\"manufacturing\",\n\"agriculture\",\n\"real estate\",\n\"retail\",\n\"telecommunications\",\n]\n)\nstats_llama = np.array(\n[0.65, 0.75, 0.85, 0.55, 0.65, 0.75, 0.85, 0.55, 0.65, 0.75, 0.85, 0.55, 0.65]\n)\nstats_gpt = np.array([0.75, 0.85, 0.95, 0.65, 0.75, 0.85, 0.95, 0.65, 0.75, 0.85, 0.95, 0.65, 0.75])\nlabel=\"Model-Performance-Comparison\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Data for the radar chart\nlabels = np.array(\n    [\n        \"e-commerce\",\n        \"healthcare\",\n        \"finance\",\n        \"education\",\n        \"transportation\",\n        \"technology\",\n        \"energy\",\n        \"entertainment\",\n        \"manufacturing\",\n        \"agriculture\",\n        \"real estate\",\n        \"retail\",\n        \"telecommunications\",\n    ]\n)\nstats_llama = np.array(\n    [0.65, 0.75, 0.85, 0.55, 0.65, 0.75, 0.85, 0.55, 0.65, 0.75, 0.85, 0.55, 0.65]\n)\nstats_gpt = np.array([0.75, 0.85, 0.95, 0.65, 0.75, 0.85, 0.95, 0.65, 0.75, 0.85, 0.95, 0.65, 0.75])\nxticks=[0.2, 0.4, 0.6, 0.8, 1.0]\nxtickslabel=[\"0.2\", \"0.4\", \"0.6\", \"0.8\", \"1.0\"]\nlabel=\"Model-Performance-Comparison\"\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nstats_llama = np.concatenate((stats_llama, [stats_llama[0]]))\nstats_gpt = np.concatenate((stats_gpt, [stats_gpt[0]]))\nangles += angles[:1]\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels, color=\"black\", size=10)\nax.tick_params(pad=20)  # Increase the distance of the label from the axis\n\n# Draw ylabels\nax.set_rscale(\"linear\")\nplt.yticks(xticks, xtickslabel, color=\"grey\", size=7)\nplt.ylim(0, 1)\n\n# Plot data\nax.plot(\n    angles,\n    stats_llama,\n    linewidth=1,\n    linestyle=\"solid\",\n    label=label,\n    marker=\"o\",\n    color=\"#3b75af\",\n)\n\n# Add legend\nplt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, -0.2), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_13.pdf', bbox_inches='tight')"}
{"idx": "radar_14", "instruction": "There is a reference image for you and I also have a set of data about different vehicle performance metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\nlabels = np.array(\n[\n\"Top Speed\",\n\"Fuel Efficiency\",\n\"Passenger Capacity\",\n\"Maintenance Cost\",\n\"Safety Rating\",\n\"Fuel Consumption\",\n\"CO2 Emissions\",\n\"Maximum Range\",\n]\n)\nElectric_Sedan = np.array([0.75, 0.85, 0.65, 0.9, 0.95, 0.8, 0.6, 0.85])\nHybrid_SUV = np.array([0.6, 0.7, 0.55, 0.75, 0.85, 0.7, 0.55, 0.75])\nDiesel_Truck = np.array([0.7, 0.8, 0.6, 0.85, 0.9, 0.75, 0.6, 0.8])\nGasoline_Coupe = np.array([0.85, 0.9, 0.8, 0.95, 0.98, 0.85, 0.75, 0.9])\nlabels2 = [\"Electric Sedan\", \"Hybrid SUV\", \"Diesel Truck\", \"Gasoline Coupe\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\nlabels = np.array(\n    [\n        \"Top Speed\",\n        \"Fuel Efficiency\",\n        \"Passenger Capacity\",\n        \"Maintenance Cost\",\n        \"Safety Rating\",\n        \"Fuel Consumption\",\n        \"CO2 Emissions\",\n        \"Maximum Range\",\n    ]\n)\nElectric_Sedan = np.array([0.75, 0.85, 0.65, 0.9, 0.95, 0.8, 0.6, 0.85])\nHybrid_SUV = np.array([0.6, 0.7, 0.55, 0.75, 0.85, 0.7, 0.55, 0.75])\nDiesel_Truck = np.array([0.7, 0.8, 0.6, 0.85, 0.9, 0.75, 0.6, 0.8])\nGasoline_Coupe = np.array([0.85, 0.9, 0.8, 0.95, 0.98, 0.85, 0.75, 0.9])\nyticks = [0.2, 0.4, 0.6, 0.8, 1.0]\nlabels2 = [\"Electric Sedan\", \"Hybrid SUV\", \"Diesel Truck\", \"Gasoline Coupe\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is made circular, so we need to complete the loop\nElectric_Sedan = np.concatenate((Electric_Sedan, [Electric_Sedan[0]]))\nHybrid_SUV = np.concatenate((Hybrid_SUV, [Hybrid_SUV[0]]))\nDiesel_Truck = np.concatenate((Diesel_Truck, [Diesel_Truck[0]]))\nGasoline_Coupe = np.concatenate((Gasoline_Coupe, [Gasoline_Coupe[0]]))\nangles += angles[:1]\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels, color=\"black\", size=10)\nax.tick_params(pad=10)  # Increase the distance of the label from the axis\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, [], color=\"grey\", size=7)\nplt.ylim(0, 1)\n\n# Plot data\nax.plot(\n    angles,\n    Electric_Sedan,\n    color=\"#5471ab\",\n    linewidth=2,\n    linestyle=\"solid\",\n    label=labels2[0],\n    marker=\"o\",\n)\nax.plot(\n    angles,\n    Hybrid_SUV,\n    color=\"#d1885c\",\n    linewidth=2,\n    linestyle=\"solid\",\n    label=labels2[1],\n    marker=\"o\",\n)\nax.plot(\n    angles,\n    Diesel_Truck,\n    color=\"#6aa66e\",\n    linewidth=2,\n    linestyle=\"solid\",\n    label=labels2[2],\n    marker=\"o\",\n)\nax.plot(\n    angles,\n    Gasoline_Coupe,\n    color=\"#b65655\",\n    linewidth=2,\n    linestyle=\"solid\",\n    label=labels2[3],\n    marker=\"o\",\n)\n\n# Add legend\nplt.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the plot\nplt.tight_layout()\nplt.savefig('radar_14.pdf', bbox_inches='tight')"}
{"idx": "radar_16", "instruction": "There is a reference image for you and I also have a set of data about car brand performance in different countries. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Define the data for each brand\nvalues1 = [15.2, 22.4, 18.7, 25.9, 20.8] # Tesla\nvalues2 = [30.1, 27.6, 22.8, 28.3, 32.5] # BMW\nvalues3 = [10.3, 12.9, 15.4, 11.7, 14.1] # Audi\nlabels = [\"Tesla\", \"BMW\", \"Audi\"]\n\n# Number of variables\nnum_vars = len(values1)\n\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] # Complete the loop\n\n# Repeat the first value to close the circle\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for each brand\nvalues1 = [15.2, 22.4, 18.7, 25.9, 20.8]  # Tesla\nvalues2 = [30.1, 27.6, 22.8, 28.3, 32.5]  # BMW\nvalues3 = [10.3, 12.9, 15.4, 11.7, 14.1]  # Audi\nxtickslabel = [\"Germany\", \"USA\", \"Japan\", \"South Korea\", \"France\"]\nyticks = [10, 15, 20, 25, 30, 35]\nytickslabel = [\"10\", \"15\", \"20\", \"25\", \"30\", \"35\"]\nylim = [0, 35]\nlabels = [\"Tesla\", \"BMW\", \"Audi\"]\n\n# Number of variables\nnum_vars = len(values1)\n\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]  # Complete the loop\n\n# Repeat the first value to close the circle\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialize the spider plot\nfig, ax = plt.subplots(figsize=(8, 7), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1],xtickslabel, size=10)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks(yticks, ytickslabel, color=\"grey\", size=7)\nplt.ylim(ylim)\n\n# Plot each brand\nax.plot(\n    angles, values1, linewidth=1, linestyle=\"solid\", label=labels[0], color=\"darkorange\"\n)\nax.fill(angles, values1, \"darkorange\", alpha=0.1)\n\nax.plot(\n    angles, values2, linewidth=1, linestyle=\"solid\", label=labels[1], color=\"royalblue\"\n)\nax.fill(angles, values2, \"royalblue\", alpha=0.1)\n\nax.plot(\n    angles, values3, linewidth=1, linestyle=\"solid\", label=labels[2], color=\"forestgreen\"\n)\nax.fill(angles, values3, \"forestgreen\", alpha=0.1)\n\n# Add data points labels\nfor i in range(num_vars):\n    # For Apple values\n    ax.annotate(\n        f\"{values1[i]}\",\n        xy=(angles[i], values1[i]),\n        xytext=(5, 5),\n        textcoords=\"offset points\",\n        ha=\"right\",\n        va=\"bottom\",\n        size=8,\n        color=\"darkorange\",\n    )\n\n    # For Samsung values\n    ax.annotate(\n        f\"{values2[i]}\",\n        xy=(angles[i], values2[i]),\n        xytext=(5, 5),\n        textcoords=\"offset points\",\n        ha=\"right\",\n        va=\"bottom\",\n        size=8,\n        color=\"royalblue\",\n    )\n\n    # For Huawei values\n    ax.annotate(\n        f\"{values3[i]}\",\n        xy=(angles[i], values3[i]),\n        xytext=(5, 5),\n        textcoords=\"offset points\",\n        ha=\"right\",\n        va=\"bottom\",\n        size=8,\n        color=\"forestgreen\",\n    )\n\n# Add a legend to the upper right\nplt.legend(loc=\"upper right\", bbox_to_anchor=(1.15, 1.15))\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust figure size to match original image's dimensions\nfig.set_size_inches(8, 7)\n\n# Adjust layout\nplt.tight_layout()\n\nplt.savefig('radar_16.pdf', bbox_inches='tight')"}
{"idx": "radar_17", "instruction": "There is a reference image for you and I also have a set of data about different fitness training methods. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Define the new data for each method (plastic processing techniques)\nlabels = np.array(\n[\"Cardio\", \"Strength\", \"Flexibility\", \"Endurance\", \"Balance\"]\n)\nstats = np.array(\n[\n[3, 4, 5, 2, 4], # Cardio\n[5, 3, 4, 5, 3], # Strength\n[4, 3, 2, 4, 5], # Flexibility\n]\n)\ntitles = [\"Cardio\", \"Strength Training\", \"Flexibility\"]\nrticks = [1, 2, 3, 4, 5]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the new data for each method (plastic processing techniques)\nlabels = np.array(\n    [\"Cardio\", \"Strength\", \"Flexibility\", \"Endurance\", \"Balance\"]\n)\nstats = np.array(\n    [\n        [3, 4, 5, 2, 4],  # Cardio\n        [5, 3, 4, 5, 3],  # Strength\n        [4, 3, 2, 4, 5],  # Flexibility\n    ]\n)\ntitles = [\"Cardio\", \"Strength Training\", \"Flexibility\"]\nrticks = [1, 2, 3, 4, 5]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nfig, ax = plt.subplots(figsize=(10, 8), nrows=1, ncols=3, subplot_kw=dict(polar=True))\n# Define the number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is made circular\nstats = np.concatenate((stats, stats[:, [0]]), axis=1)\nangles += angles[:1]\n# Define colors\ncolors = [\"red\", \"green\", \"blue\"]\n\n# Draw one radar chart for each plastic processing technique\nfor idx, (title, case_data) in enumerate(\n    zip(titles, stats)\n):\n    ax[idx].fill(angles, case_data, color=colors[idx], alpha=0.25)\n    ax[idx].plot(angles, case_data, color=colors[idx])\n    ax[idx].set_rticks(rticks)\n    ax[idx].set_xticks(angles[:-1])\n    ax[idx].set_xticklabels(labels)\n    ax[idx].set_title(title, color=colors[idx])\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\nplt.savefig('radar_17.pdf', bbox_inches='tight')"}
{"idx": "radar_20", "instruction": "There is a reference image for you and I also have a set of data about laptop brand comparisons. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\n# Define the data for the radar chart\ncategories = [\n\"Accuracy\",\n\"Speed\",\n\"Battery Life\",\n\"Durability\",\n\"Portability\",\n\"Design\",\n\"Customer Support\",\n\"Price\",\n]\nvalues_a = [9, 7, 8, 6, 7, 8, 9, 7] # Values for Dell\nvalues_b = [8, 8, 7, 7, 8, 7, 8, 8.5] # Values for HP\nvalues_c = [7, 7, 8, 9, 6, 8, 7, 8] # Values for Lenovo\nsuptitle = \"Laptop Brand Comparison\"\nlabels = [\"Dell\", \"HP\", \"Lenovo\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 18.0, "height": 6.0, "code": "import numpy as np; np.random.seed(0)\n\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Define the data for the radar chart\ncategories = [\n    \"Accuracy\",\n    \"Speed\",\n    \"Battery Life\",\n    \"Durability\",\n    \"Portability\",\n    \"Design\",\n    \"Customer Support\",\n    \"Price\",\n]\nvalues_a = [9, 7, 8, 6, 7, 8, 9, 7]  # Values for Dell\nvalues_b = [8, 8, 7, 7, 8, 7, 8, 8.5]  # Values for HP\nvalues_c = [7, 7, 8, 9, 6, 8, 7, 8]  # Values for Lenovo\nsuptitle = \"Laptop Brand Comparison\"\nyticks = [2, 4, 6, 8, 10]\nytickslabel = [\"2\", \"4\", \"6\", \"8\", \"10\"]\nlabels = [\"Dell\", \"HP\", \"Lenovo\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Initialize figure\nfig, axs = plt.subplots(1, 3, figsize=(18, 6), subplot_kw=dict(polar=True))\nplt.suptitle(suptitle, fontsize=19)\n\n# Number of variables and angle calculation\nN = len(categories)\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n\n\n# Function to create radar chart\ndef create_radar_chart(ax, angles, values, color, brand_name):\n    values += values[:1]\n    ax.plot(angles, values, linewidth=2, linestyle=\"solid\", label=brand_name)\n    ax.fill(angles, values, color=color, alpha=0.25)\n\n    # Add data point markers\n    ax.scatter(angles[:-1], values[:-1], color=color, s=50, zorder=5)\n\n    ax.set_xticks(angles[:-1])\n    ax.set_xticklabels(categories, color=\"navy\")\n    ax.tick_params(pad=15)  # Adjust the distance of the label from the axis\n    ax.set_rlabel_position(30)\n    ax.set_yticks(yticks)\n    ax.set_yticklabels(ytickslabel, color=\"darkblue\")\n    ax.set_ylim(0, 10)\n\n\n# Create radar charts for each brand\ncreate_radar_chart(axs[0], angles, values_a, \"gold\", labels[0])\ncreate_radar_chart(axs[1], angles, values_b, \"silver\", labels[1])\ncreate_radar_chart(axs[2], angles, values_c, \"green\", labels[2])\n\n# Set a common legend\nfig.legend(loc=\"lower center\", bbox_to_anchor=(0.5, 0), ncol=3)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the figure\nplt.tight_layout(\n    rect=[0, 0.1, 1, 0.95]\n)  # Adjust the padding to make room for the suptitle\nplt.savefig('radar_20.pdf', bbox_inches='tight')"}
{"idx": "violin_1", "instruction": "There is a reference image for you and I also have a set of data about growth and sustainability metrics. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Set a random seed for reproducibility\n\n# Generate 5 equidistant mean values between 3 and 7 with a different trend\nmean_values1 = np.linspace(3, 5, 5) # Increasing trend\nmean_values2 = np.linspace(7, 4, 5) # Decreasing trend\n# Use smaller standard deviations to ensure data falls between -1 and 7\nstandard_deviations = [0.4] * 5\n\ndata1 = [\nnp.random.normal(loc=mean, scale=std, size=50)\nfor mean, std in zip(mean_values1, standard_deviations)\n]\ndata2 = [\nnp.random.normal(loc=mean, scale=std, size=50)\nfor mean, std in zip(mean_values2, standard_deviations)\n]\npositions1 = np.array(range(1, len(data1) + 1)) - 0.2\npositions2 = np.array(range(1, len(data2) + 1)) + 0.2\nlegend_labels=[\"Growth\", \"Sustainability\"]\nxlabel=\"Number of Metrics\"\nylabel=\"logP$_{Growth}$ - logP$_{Sustainability}$\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 7.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Set a random seed for reproducibility\n\n# Generate 5 equidistant mean values between 3 and 7 with a different trend\nmean_values1 = np.linspace(3, 5, 5)  # Increasing trend\nmean_values2 = np.linspace(7, 4, 5)  # Decreasing trend\n# Use smaller standard deviations to ensure data falls between -1 and 7\nstandard_deviations = [0.4] * 5\n\ndata1 = [\n    np.random.normal(loc=mean, scale=std, size=50)\n    for mean, std in zip(mean_values1, standard_deviations)\n]\ndata2 = [\n    np.random.normal(loc=mean, scale=std, size=50)\n    for mean, std in zip(mean_values2, standard_deviations)\n]\npositions1 = np.array(range(1, len(data1) + 1)) - 0.2\npositions2 = np.array(range(1, len(data2) + 1)) + 0.2\nlegend_labels=[\"Growth\", \"Sustainability\"]\nxlabel=\"Number of Metrics\"\nylabel=\"logP$_{Growth}$ - logP$_{Sustainability}$\"\nxticks = [1, 2, 3, 4, 5]\nxtickslabels = [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and axis with the specified dimensions\nfig, ax = plt.subplots(figsize=(8, 7))\n\n# Narrower violin plots\nviolin_width = 0.35  # set this to a suitable value\n\n# Create the violin plot with adjusted positions\n\nparts1 = ax.violinplot(\n    data1, positions=positions1, widths=violin_width, showmeans=False, showmedians=True\n)\nparts2 = ax.violinplot(\n    data2, positions=positions2, widths=violin_width, showmeans=False, showmedians=True\n)\n\n# Customizing the colors of the violin plot\nfor pc in parts1[\"bodies\"]:\n    pc.set_facecolor(\"#5e74a0\")\n    pc.set_edgecolor(\"black\")\n    pc.set_alpha(1)\n\nfor pc in parts2[\"bodies\"]:\n    pc.set_facecolor(\"#c28c69\")\n    pc.set_edgecolor(\"black\")\n    pc.set_alpha(1)\n\n# Customizing the median lines and removing caps\nfor partname in (\"cbars\", \"cmins\", \"cmaxes\", \"cmedians\"):\n    vp = parts1[partname]\n    vp.set_edgecolor(\"black\")\n    vp.set_linewidth(1)\n    if partname in (\"cmins\", \"cmaxes\", \"cmedians\"):\n        vp.set_visible(False)  # Hide caps\n\n    vp = parts2[partname]\n    vp.set_edgecolor(\"black\")\n    vp.set_linewidth(1)\n    if partname in (\"cmins\", \"cmaxes\", \"cmedians\"):\n        vp.set_visible(False)  # Hide caps\n\n# Customizing the colors of the violin plot and adding statistics\nfor i in range(len(data1)):\n    # Adding the statistical annotations for data1\n    quartile1, median, quartile3 = np.percentile(data1[i], [25, 50, 75])\n    iqr = quartile3 - quartile1\n    lower_whisker = np.min(data1[i][data1[i] >= quartile1 - 1.5 * iqr])\n    upper_whisker = np.max(data1[i][data1[i] <= quartile3 + 1.5 * iqr])\n    ax.vlines(positions1[i], quartile1, quartile3, color=\"black\", linestyle=\"-\", lw=4)\n    ax.hlines(\n        median,\n        positions1[i] - 0.025,\n        positions1[i] + 0.025,\n        color=\"white\",\n        linestyle=\"-\",\n        lw=1,\n        zorder=3,\n    )\n    ax.vlines(\n        positions1[i], lower_whisker, upper_whisker, color=\"black\", linestyle=\"-\", lw=1\n    )\n\n    # Adding the statistical annotations for data2\n    quartile1, median, quartile3 = np.percentile(data2[i], [25, 50, 75])\n    iqr = quartile3 - quartile1\n    lower_whisker = np.min(data2[i][data2[i] >= quartile1 - 1.5 * iqr])\n    upper_whisker = np.max(data2[i][data2[i] <= quartile3 + 1.5 * iqr])\n    ax.vlines(positions2[i], quartile1, quartile3, color=\"black\", linestyle=\"-\", lw=4)\n    ax.hlines(\n        median,\n        positions2[i] - 0.025,\n        positions2[i] + 0.025,\n        color=\"white\",\n        linestyle=\"-\",\n        lw=1,\n        zorder=3,\n    )\n    ax.vlines(\n        positions2[i], lower_whisker, upper_whisker, color=\"black\", linestyle=\"-\", lw=1\n    )\n\n# Change the border color to grey\nfor spine in ax.spines.values():\n    spine.set_edgecolor(\"grey\")\n\n# Remove small ticks beside the numbers on the x and y axes\nax.tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Adding the corrected legend\nax.legend(\n    [parts1[\"bodies\"][0], parts2[\"bodies\"][0]],\n    legend_labels,\n    loc=\"upper center\",\n    bbox_to_anchor=(0.5, 1.1),\n    ncol=2,\n)\n\n# Setting the title and labels\nax.set_xlabel(xlabel)\nax.set_ylabel(ylabel)\n\n# Setting the x-axis labels\nax.set_xticks(xticks)\nax.set_xticklabels(xtickslabels)\n\n# Enabling y-axis grid lines\nax.yaxis.grid(\n    True, linestyle=\"-\", linewidth=0.7, color=\"grey\", zorder=0\n)  # You can customize the style of the grid here\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust figure size to match original image's dimensions\nfig.set_size_inches(7, 5)  # Width, Height in inches\n\n# Adjust layout for better fit\nplt.tight_layout()\n\n# Display the plot\nplt.savefig('violin_1.pdf', bbox_inches='tight')"}
{"idx": "violin_3", "instruction": "There is a reference image for you and I also have a set of data about recovery times for different therapies. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to mimic the picture provided\nimport numpy as np\n\n# Generate new data for the health domain\ndata_5_therapies = np.random.gamma(shape=[2, 5, 2, 3, 4], scale=[5, 2, 3, 4, 1], size=(100, 5))\ndata_recovery_5_therapies = np.random.gamma(shape=[5, 2, 3, 4, 1], scale=[2, 5, 1, 2, 3], size=(100, 5))\n\ndata_3_therapies = np.random.gamma(shape=[2, 5, 2], scale=[5, 2, 3], size=(100, 3))\ndata_recovery_3_therapies = np.random.gamma(shape=[5, 2, 3], scale=[2, 1, 4], size=(100, 3))\n\nylabel = \"Recovery Time Distribution\"\nviolin_width = 0.5\nscaling_factor = 1\nkde_x = np.linspace(0, 6, 300)\n\n# Offsets for groups\noffsets_5_therapies = np.linspace(-3, 3, 5)\noffsets_3_therapies = np.linspace(-3, 3, 3)\n\nlabels = [\"Standard Therapy\", \"Advanced Therapy\"]\ntitles = [\"Therapy Effectiveness Evaluation\", \"Therapy Comparison\"]\nlegend_labels = [\"Control Group\", \"Treatment Group\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic the picture provided\nimport numpy as np\n\n# Generate new data for the health domain\ndata_5_therapies = np.random.gamma(shape=[2, 5, 2, 3, 4], scale=[5, 2, 3, 4, 1], size=(100, 5))\ndata_recovery_5_therapies = np.random.gamma(shape=[5, 2, 3, 4, 1], scale=[2, 5, 1, 2, 3], size=(100, 5))\n\ndata_3_therapies = np.random.gamma(shape=[2, 5, 2], scale=[5, 2, 3], size=(100, 3))\ndata_recovery_3_therapies = np.random.gamma(shape=[5, 2, 3], scale=[2, 1, 4], size=(100, 3))\n\nylabel = \"Recovery Time Distribution\"\nylim = [0, 6]\nviolin_width = 0.5\nscaling_factor = 1\nkde_x = np.linspace(0, 6, 300)\n\n# Offsets for groups\noffsets_5_therapies = np.linspace(-3, 3, 5)\noffsets_3_therapies = np.linspace(-3, 3, 3)\n\nlabels = [\"Standard Therapy\", \"Advanced Therapy\"]\ntitles = [\"Therapy Effectiveness Evaluation\", \"Therapy Comparison\"]\nlegend_labels = [\"Control Group\", \"Treatment Group\"]\n\nxticklabels = [\n    [\"Physical\", \"Chemo\", \"Radiation\", \"Immuno\", \"Hormone\"], \n    [\"CBT\", \"DBT\", \"Mindfulness\"]\n]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n\n# Define the colors for each group\ncolors_5_groups = [\"#e4aa90\", \"#9cc39f\"]\ncolors_3_groups = [\"#e4aa90\", \"#9cc39f\"]\n\n# Function to plot half violins\ndef plot_half_violins(\n    ax, data, data_memory, offsets, colors, labels, title, xticklabels\n):\n    # Plot the half-violins with an offset for groups\n    for i in range(data.shape[1]):\n        offset = offsets[i]\n\n        # Plot data without memory\n        kde_data = gaussian_kde(data[:, i])\n      \n        kde_data_y = kde_data(kde_x)\n        kde_data_y_scaled = kde_data_y / max(kde_data_y) * violin_width\n        ax.fill_betweenx(\n            kde_x,\n            kde_data_y_scaled * scaling_factor + offset,\n            offset,\n            color=colors[0],\n            edgecolor=\"#9e8d8b\",\n        )\n\n        # Plot data with memory\n        kde_data_memory = gaussian_kde(data_memory[:, i])\n        kde_data_memory_y = kde_data_memory(kde_x)\n        kde_data_memory_y_scaled = (\n            kde_data_memory_y / max(kde_data_memory_y) * violin_width\n        )\n        ax.fill_betweenx(\n            kde_x,\n            offset,\n            -kde_data_memory_y_scaled * scaling_factor + offset,\n            color=colors[1],\n            edgecolor=\"#9e8d8b\",\n        )\n\n    # Set x and y axis labels, limits, and add x-axis tick labels for groups\n    ax.set_xlim(\n        min(offsets) - scaling_factor - violin_width,\n        max(offsets) + scaling_factor + violin_width,\n    )\n    ax.set_ylim(ylim)  # Set y-axis limits to 0-1 for beta distribution\n    ax.set_ylabel(ylabel)\n    ax.set_xticks(offsets)  # Set x-ticks to the center of each group\n    ax.set_xticklabels(xticklabels)  # Label x-ticks accordingly\n    ax.title.set_text(title)\n\n\n# Plot each set of violins\nplot_half_violins(\n    ax1,\n    data_5_therapies,\n    data_recovery_5_therapies,\n    offsets_5_therapies,\n    colors_5_groups,\n    labels,\n    titles[0],\n    xticklabels[0],\n)\nplot_half_violins(\n    ax2,\n    data_3_therapies,\n    data_recovery_3_therapies,\n    offsets_3_therapies,\n    colors_3_groups,\n    labels,\n    titles[1],\n    xticklabels[1],\n)\n\n# Add a legend for the entire figure\nhandles = [\n    plt.Line2D(\n        [0], [0], marker=\"o\", color=\"w\", markerfacecolor=\"#9cc39f\", markersize=10\n    ),\n    plt.Line2D(\n        [0], [0], marker=\"o\", color=\"w\", markerfacecolor=\"#e4aa90\", markersize=10\n    ),\n]\n\nfig.legend(handles, legend_labels, loc=\"lower center\", bbox_to_anchor=(0.5, -0.05), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Tighten the layout and show the combined plot\nplt.tight_layout()\n\n# Display the plot\nplt.savefig('violin_3.pdf', bbox_inches='tight')"}
{"idx": "violin_4", "instruction": "There is a reference image for you and I also have a set of data about growth rates in different sectors such as UrbanTransport, TechGrowth, and SocialTrend. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\ndata_jTrans = np.random.normal(2.5, 0.5, 200)\ndata_PalmTree = np.random.normal(3.0, 0.6, 200)\ndata_CLAP = np.random.normal(3.5, 0.4, 200)\nylabel=\"Growth Rate\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 5.0, "height": 5.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\ndata_jTrans = np.random.normal(2.5, 0.5, 200)\ndata_PalmTree = np.random.normal(3.0, 0.6, 200)\ndata_CLAP = np.random.normal(3.5, 0.4, 200)\nxticklabels=[\"UrbanTransport\", \"TechGrowth\", \"SocialTrend\"]\nylabel=\"Growth Rate\"\nylim=[0.5, 4.5]\nxticks=[1, 2, 3]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure with specified dimensions\nfig, ax = plt.subplots(\n    figsize=(5, 5)\n)  # Adjusted to match the original image's dimensions\n\n# Create violin plots\nviolin_parts1 = ax.violinplot(data_jTrans, positions=[1], showmeans=True)\nviolin_parts2 = ax.violinplot(data_PalmTree, positions=[2], showmeans=True)\nviolin_parts3 = ax.violinplot(data_CLAP, positions=[3], showmeans=True)\n\n# Customize colors with vibrant colors\nviolin_parts1[\"bodies\"][0].set_facecolor(\"#FF6347\")  # Tomato red\nviolin_parts2[\"bodies\"][0].set_facecolor(\"#4682B4\")  # Steel blue\nviolin_parts3[\"bodies\"][0].set_facecolor(\"#6A5ACD\")  # Slate blue\n\n# Change mean line colors to blue for each violin plot\nfor partname in (\"cmeans\", \"cmaxes\", \"cmins\", \"cbars\"):\n    vp = violin_parts1[partname]\n    vp.set_edgecolor(\"#3b75af\")\n    vp.set_linewidth(1)\n\n    vp = violin_parts2[partname]\n    vp.set_edgecolor(\"#3b75af\")\n    vp.set_linewidth(1)\n\n    vp = violin_parts3[partname]\n    vp.set_edgecolor(\"#3b75af\")\n    vp.set_linewidth(1)\n\n# Set x-axis and y-axis labels\nax.set_xticks(xticks)\nax.set_xticklabels(xticklabels)\nax.set_ylabel(ylabel)\n\n# Set y-axis limits\nax.set_ylim(ylim)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# tight layout\nplt.tight_layout()\n\n# Display the plot\nplt.savefig('violin_4.pdf', bbox_inches='tight')"}
{"idx": "violin_5", "instruction": "There is a reference image for you and I also have a set of data about different performance metrics across five quarters. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data to mimic the picture provided\ndata = np.random.beta(a=[5, 20, 35, 25, 30], b=[20, 35, 45, 40, 50], size=(10, 5))\ndata_memory = np.random.beta(\na=[10, 30, 50, 40, 55], b=[25, 55, 35, 50, 60], size=(40, 5)\n)\nlegend_labels = [\"Growth\", \"Decline\"]\n# The scaling factor is used to ensure the violins do not overlap\nscaling_factor = 1\nviolin_width = 0.5\n\n# Adjust the offsets for 5 groups instead of 3\noffsets = np.linspace(-3, 3, 5)\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\nimport numpy as np; np.random.seed(0)\n\nimport random\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic the picture provided\ndata = np.random.beta(a=[5, 20, 35, 25, 30], b=[20, 35, 45, 40, 50], size=(10, 5))\ndata_memory = np.random.beta(\n    a=[10, 30, 50, 40, 55], b=[25, 55, 35, 50, 60], size=(40, 5)\n)\nxticklabels=[\"Q1\", \"Q2\", \"Q3\", \"Q4\", \"Q5\"]\nlegend_labels = [\"Growth\", \"Decline\"]\n# The scaling factor is used to ensure the violins do not overlap\nscaling_factor = 1\nviolin_width = 0.5\n\n# Adjust the offsets for 5 groups instead of 3\noffsets = np.linspace(-3, 3, 5)\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nfig, ax = plt.subplots(\n    figsize=(6, 6)\n)  # Increased the figure width to accommodate additional groups\n\n# Define the colors for each group\ncolors = [\"#d48640\", \"#44739d\"]\nlegend_colors = [\"#44739d\", \"#d48640\"]\n\n# Plot the half-violins with an offset for 5 groups\nfor i in range(data.shape[1]):\n    offset = offsets[i]\n\n    # Plot data without memory\n    kde_data = gaussian_kde(data[:, i])\n    kde_x = np.linspace(0, 1, 300)\n    kde_data_y = kde_data(kde_x)\n    kde_data_y_scaled = kde_data_y / max(kde_data_y) * violin_width\n    ax.fill_betweenx(\n        kde_x,\n        kde_data_y_scaled * scaling_factor + offset,\n        offset,\n        color=colors[0],\n        edgecolor=\"black\",\n    )\n\n    # Plot data with memory\n    kde_data_memory = gaussian_kde(data_memory[:, i])\n    kde_data_memory_y = kde_data_memory(kde_x)\n    kde_data_memory_y_scaled = kde_data_memory_y / max(kde_data_memory_y) * violin_width\n    ax.fill_betweenx(\n        kde_x,\n        offset,\n        -kde_data_memory_y_scaled * scaling_factor + offset,\n        color=colors[1],\n        edgecolor=\"black\",\n    )\n\n    # add yellow stars at the top of each violin plot\n    ax.scatter(\n        offset,\n        random.uniform(0.2, 0.8),\n        marker=\"*\",\n        color=\"yellow\",\n        s=260,\n        zorder=3,\n        edgecolor=\"black\",\n    )\n\n\n# Set x and y axis labels, limits, and add x-axis tick labels for 5 groups\nax.set_xlim(\n    min(offsets) - scaling_factor - violin_width,\n    max(offsets) + scaling_factor + violin_width,\n)\nax.set_xticks(offsets)  # Set x-ticks to the center of each group\nax.set_xticklabels(xticklabels)  # Label x-ticks accordingly\n\n# Adjust the legend\nhandles = [\n    plt.Rectangle((0, 0), 1, 1, color=color, edgecolor=\"black\")\n    for color in legend_colors\n]\n\nax.legend(handles, legend_labels, loc=\"upper left\", ncol=1)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save the plot\nplt.tight_layout()\nplt.savefig('violin_5.pdf', bbox_inches='tight')"}
{"idx": "violin_6", "instruction": "There is a reference image for you and I also have a set of data about success rates in technology innovation and market adoption. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for the purpose of this example\ntech_innovation_data = np.random.normal(70, 20, 200)\nmarket_adoption_data = np.random.normal(65, 11, 100)\n\ndata = [tech_innovation_data, market_adoption_data]\ncategories = [\"Tech Innovation\", \"Market Adoption\"]\nylabel =\"Success Rate\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 4.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for the purpose of this example\ntech_innovation_data = np.random.normal(70, 20, 200)\nmarket_adoption_data = np.random.normal(65, 11, 100)\n\ndata = [tech_innovation_data, market_adoption_data]\ncategories = [\"Tech Innovation\", \"Market Adoption\"]\nylabel =\"Success Rate\"\nxticks=[1, 2]\nylim=[10, 120]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(\n    figsize=(6, 4)\n)  # Adjusting figure size to match original image dimensions\nviolin_parts = ax.violinplot(data, showmeans=False, showmedians=True, showextrema=False)\n\n# Customizing the appearance\nax.set_ylabel(ylabel)\nax.set_xticks(xticks)\nax.set_xticklabels(categories)\nax.grid(axis=\"y\", alpha=0.6)  # Adding horizontal grid lines\nax.set_ylim(ylim)  # Setting y-axis limits\n\n# Removing the ticks on the x and y axes\nax.tick_params(axis=\"x\", which=\"both\", length=0)  # Remove x-axis ticks\nax.tick_params(axis=\"y\", which=\"both\", length=0)  # Remove y-axis ticks\n\n# Coloring the violins and adding the desired statistical annotations\nfor i, (pc, d) in enumerate(zip(violin_parts[\"bodies\"], data)):\n    pc.set_facecolor([\"#ce7a9b\", \"#3b78bb\"][i])\n    pc.set_edgecolor(\"black\")\n    pc.set_alpha(1)\n\n    # Calculate the quartiles and interquartile range\n    quartile1, median, quartile3 = np.percentile(d, [25, 50, 75])\n    iqr = quartile3 - quartile1\n\n    # Calculate lower and upper whiskers using 1.5xIQR rule\n    lower_whisker = np.min(d[d >= quartile1 - 1.5 * iqr])\n    upper_whisker = np.max(d[d <= quartile3 + 1.5 * iqr])\n\n    # Placing lines for median, quartiles, and whiskers\n    ax.vlines(i + 1, quartile1, quartile3, color=\"k\", linestyle=\"-\", lw=4)\n    ax.scatter(i + 1, median, color=\"w\", s=10, zorder=3)\n    ax.vlines(i + 1, lower_whisker, upper_whisker, color=\"k\", linestyle=\"-\", lw=1)\n\n# Remove the lines (medians, whiskers, etc.)\nfor partname in (\"cbars\", \"cmins\", \"cmaxes\", \"cmedians\"):\n    vp = violin_parts.get(partname)\n    if vp:\n        vp.set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit\nplt.tight_layout()\n\n# Display the plot\nplt.savefig('violin_6.pdf', bbox_inches='tight')"}
{"idx": "violin_7", "instruction": "There is a reference image for you and I also have a set of data about financial growth and economic stability. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Sample data for demonstration purposes\nfeatures = np.arange(1, 6)\nfinancial_growth_data = np.random.rand(20, 100) * 450\neconomic_stability_data = np.random.rand(20, 100) * 150\ntitles=[\"% Increase in ROI vs. Baseline A\",\"% Increase in ROI vs. Baseline B\"]\nxlabel=\"Number of Features\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 8.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\nfrom matplotlib.lines import Line2D\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data for demonstration purposes\nfeatures = np.arange(1, 6)\nfinancial_growth_data = np.random.rand(20, 100) * 450\neconomic_stability_data = np.random.rand(20, 100) * 150\ntitles=[\"% Increase in ROI vs. Baseline A\",\"% Increase in ROI vs. Baseline B\"]\nylims=[[0, 500],[0, 500]]\nxlabel=\"Number of Features\"\nytickslabels=[[\"0%\", \"100%\", \"200%\", \"300%\", \"400%\", \"500%\", \"600%\", \"700%\"],[\"0%\", \"100%\", \"200%\", \"300%\", \"400%\", \"500%\", \"600%\", \"700%\"]]\nxticklabel=[4, 8, 12, 16, 20]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create figure and subplots\nfig, axs = plt.subplots(2, 1, figsize=(8, 8))\n# Define the colors for the violin plots\ncolor_group_l0 = \"#4f86b8\"  # Color for Group \u21130\ncolor_agis = \"#ef8636\"  # Color for AGIS\n\n# Function to set the color of the violin plot\ndef set_violin_color(violin, color):\n    for body in violin[\"bodies\"]:\n        body.set_facecolor(color)\n        body.set_edgecolor(color)\n    # Set color for the median line\n    violin[\"cmedians\"].set_color(color)\n\n\n# Top subplot: FLAM-GL\nfor i, feature in enumerate(features):\n    vl = axs[0].violinplot(\n        financial_growth_data[i],\n        positions=[feature - 0.2],\n        showmedians=True,\n        widths=0.3,\n        showextrema=False,\n    )\n    set_violin_color(vl, color_group_l0)\n\n    vl = axs[0].violinplot(\n        economic_stability_data[i],\n        positions=[feature + 0.2],\n        showmedians=True,\n        widths=0.3,\n        showextrema=False,\n    )\n    set_violin_color(vl, color_agis)\n\n    axs[0].text(\n        feature - 0.35,\n        np.median(financial_growth_data[i]),\n        f\"{int(np.median(financial_growth_data[i]))}%\",\n        ha=\"right\",\n        va=\"bottom\",\n        color=color_group_l0,\n    )\n    axs[0].text(\n        feature + 0.35,\n        np.median(economic_stability_data[i]),\n        f\"{int(np.median(economic_stability_data[i]))}%\",\n        ha=\"left\",\n        va=\"bottom\",\n        color=color_agis,\n    )\n\naxs[0].set_title(titles[0])\naxs[0].set_xticks(features)\naxs[0].set_ylim(ylims[0])\n# remove x-axis label for the top subplot\naxs[0].set_xticklabels([])\naxs[0].set_yticklabels(ytickslabels[0])\n\n# Bottom subplot: EBM-RS\nfor i, feature in enumerate(features):\n    vl = axs[1].violinplot(\n        financial_growth_data[i],\n        positions=[feature - 0.2],\n        showmedians=True,\n        widths=0.3,\n        showextrema=False,\n    )\n    set_violin_color(vl, color_group_l0)\n\n    vl = axs[1].violinplot(\n        economic_stability_data[i],\n        positions=[feature + 0.2],\n        showmedians=True,\n        widths=0.3,\n        showextrema=False,\n    )\n    set_violin_color(vl, color_agis)\n\n    axs[1].text(\n        feature - 0.35,\n        np.median(financial_growth_data[i]),\n        f\"{int(np.median(financial_growth_data[i]))}%\",\n        ha=\"right\",\n        va=\"bottom\",\n        color=color_group_l0,\n    )\n    axs[1].text(\n        feature + 0.35,\n        np.median(economic_stability_data[i]),\n        f\"{int(np.median(economic_stability_data[i]))}%\",\n        ha=\"left\",\n        va=\"bottom\",\n        color=color_agis,\n    )\n\naxs[1].set_title(titles[1])\naxs[1].set_xticks(features)\naxs[1].set_ylim(ylims[1])\naxs[1].set_xlabel(xlabel)\naxs[1].set_xticklabels(xticklabel)\naxs[1].set_yticklabels(ytickslabels[1])\n\n# use line to create a custom legend\nlegend_elements = [\n    Line2D([0], [0], color=color_group_l0, lw=2, label=\"Group \u2113${_0}$\"),\n    Line2D([0], [0], color=color_agis, lw=2, label=\"AGIS\"),\n]\naxs[0].legend(handles=legend_elements, loc=\"upper right\")\naxs[1].legend(handles=legend_elements, loc=\"upper right\")\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout and save plot\nplt.tight_layout()\nplt.savefig('violin_7.pdf', bbox_inches='tight')"}
{"idx": "violin_8", "instruction": "There is a reference image for you and I also have a set of data about different performance metrics across various evaluation criteria. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Adjusting sample data to fit within 0-1 range and have appropriate shapes\n# Generating clipped normal data for different categories\ngrowth_tech_data = np.clip(\nnp.random.normal(0.85, 0.05, 200), 0, 2\n) # Slightly lower std dev, larger sample\nstability_finance_data = np.clip(np.random.normal(1.15, 0.05, 200), 0, 2) # Larger sample\ninnovation_data = np.clip(\nnp.random.normal(1.2, 0.12, 200), 0, 2\n) # Slightly lower std dev, larger sample\nadoption_market_data = np.clip(np.random.normal(1.32, 0.08, 200), 0, 2) # Larger sample\ntrend_analysis_data = np.clip(np.random.normal(0.7, 0.1, 200), 0, 2) # Larger sample\n\npearson_r = [0.25, 0.28, 0.29, 0.26, 0.23]\neer = [2.5, 2.7, 3.1, 4.5, 5.6]\n\ndata = [growth_tech_data, stability_finance_data, innovation_data, adoption_market_data, trend_analysis_data]\ncategories = [\"Tech Growth\", \"Financial Stability\", \"Innovation\", \"Market Adoption\", \"Trend Analysis\"]\nylabel = \"Performance Metric\"\nxlabel=\"Evaluation Criteria\"\ntextlabels=[ \"Pearson R\", \"EER(%)\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 10.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Adjusting sample data to fit within 0-1 range and have appropriate shapes\n# Generating clipped normal data for different categories\ngrowth_tech_data = np.clip(\n    np.random.normal(0.85, 0.05, 200), 0, 2\n)  # Slightly lower std dev, larger sample\nstability_finance_data = np.clip(np.random.normal(1.15, 0.05, 200), 0, 2)  # Larger sample\ninnovation_data = np.clip(\n    np.random.normal(1.2, 0.12, 200), 0, 2\n)  # Slightly lower std dev, larger sample\nadoption_market_data = np.clip(np.random.normal(1.32, 0.08, 200), 0, 2)  # Larger sample\ntrend_analysis_data = np.clip(np.random.normal(0.7, 0.1, 200), 0, 2)  # Larger sample\n\npearson_r = [0.25, 0.28, 0.29, 0.26, 0.23]\neer = [2.5, 2.7, 3.1, 4.5, 5.6]\n\ndata = [growth_tech_data, stability_finance_data, innovation_data, adoption_market_data, trend_analysis_data]\ncategories = [\"Tech Growth\", \"Financial Stability\", \"Innovation\", \"Market Adoption\", \"Trend Analysis\"]\nylabel = \"Performance Metric\"\nylim=[0, 1.6]\nxlabel=\"Evaluation Criteria\"\ntextlabels=[ \"Pearson R\", \"EER(%)\"]\n\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\nfig, ax = plt.subplots(\n    figsize=(10, 6)\n)  # Adjust the figure size to accommodate more violins\n\n# Create violin plots\nviolin_parts = ax.violinplot(data, showmeans=False, showmedians=True, showextrema=False)\n\n# Customize the appearance\nax.set_ylabel(ylabel)\nax.set_xticks(\n    np.arange(1, len(categories) + 1)\n)  # Adjust the x-ticks to match the number of categories\nax.set_xticklabels(categories)\nax.set_ylim(ylim)  # You may need to adjust this if the data range changes\nax.set_xlabel(xlabel)\n\n# Set violin colors and add statistical annotations\ncolors = [\n    \"#44739d\",\n    \"#d48640\",\n    \"#539045\",\n    \"#b14743\",\n    \"#8e73ae\",\n]  # Add more colors as needed\nfor i, (pc, d) in enumerate(zip(violin_parts[\"bodies\"], data)):\n    pc.set_facecolor(colors[i])\n    pc.set_edgecolor(\"black\")\n    pc.set_alpha(1)\n\n    # Calculate the quartiles and median\n    quartile1, median, quartile3 = np.percentile(d, [25, 50, 75])\n    iqr = quartile3 - quartile1\n\n    # Calculate whiskers\n    lower_whisker = np.min(d[d >= quartile1 - 1.5 * iqr])\n    upper_whisker = np.max(d[d <= quartile3 + 1.5 * iqr])\n\n    # Annotate statistics\n    ax.vlines(i + 1, quartile1, quartile3, color=\"k\", linestyle=\"-\", lw=4)\n    ax.scatter(i + 1, median, color=\"w\", s=10, zorder=3)\n    ax.vlines(i + 1, lower_whisker, upper_whisker, color=\"k\", linestyle=\"-\", lw=1)\n    ax.text(\n        i + 1 + 0.3,\n        np.median(data[i]),\n        f\"{median:.2f}\",\n        ha=\"left\",\n        va=\"center\",\n        color=\"black\",\n        rotation=45,\n    )\n\n    # Annotate with Pearson R and EER values\n    ax.text(\n        i + 1,\n        0.14,\n        f\"{pearson_r[i]:.2f}\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"green\",\n        fontsize=10,\n    )\n    ax.text(\n        i + 1,\n        0.08,\n        f\"{eer[i]:.2f}\",\n        ha=\"center\",\n        va=\"center\",\n        color=\"blue\",\n        fontsize=10,\n    )\n\nax.text(5.6, 0.14,textlabels[0], ha=\"left\", va=\"center\", color=\"green\", fontsize=10)\nax.text(5.6, 0.08,textlabels[1], ha=\"left\", va=\"center\", color=\"blue\", fontsize=10)\n\n# Make the other parts of the violin plots invisible\nfor partname in (\"cbars\", \"cmins\", \"cmaxes\", \"cmedians\"):\n    vp = violin_parts.get(partname)\n    if vp:\n        vp.set_visible(False)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit\nplt.tight_layout()\n\n# Display the plot\nplt.savefig('violin_8.pdf', bbox_inches='tight')"}
{"idx": "violin_9", "instruction": "There is a reference image for you and I also have a set of data about project performance across different phases. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Generate sample data\n# Simulated data for different classes and categories\nproject_performance = {\n\"Project A\": {\n\"Design Phase\": np.random.normal(85, 10, 100),\n\"Implementation Phase\": np.random.normal(90, 12, 100),\n},\n\"Project B\": {\n\"Design Phase\": np.random.normal(80, 15, 100),\n\"Implementation Phase\": np.random.normal(85, 10, 100),\n},\n\"Project C\": {\n\"Design Phase\": np.random.normal(88, 14, 100),\n\"Implementation Phase\": np.random.normal(87, 10, 100),\n},\n\"Project D\": {\n\"Design Phase\": np.random.normal(82, 9, 100),\n\"Implementation Phase\": np.random.normal(89, 13, 100),\n},\n}\ntitle=\"Distribution of Project Performance:\"\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 12.0, "height": 8.0, "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Generate sample data\n# Simulated data for different classes and categories\nproject_performance = {\n    \"Project A\": {\n        \"Design Phase\": np.random.normal(85, 10, 100),\n        \"Implementation Phase\": np.random.normal(90, 12, 100),\n    },\n    \"Project B\": {\n        \"Design Phase\": np.random.normal(80, 15, 100),\n        \"Implementation Phase\": np.random.normal(85, 10, 100),\n    },\n    \"Project C\": {\n        \"Design Phase\": np.random.normal(88, 14, 100),\n        \"Implementation Phase\": np.random.normal(87, 10, 100),\n    },\n    \"Project D\": {\n        \"Design Phase\": np.random.normal(82, 9, 100),\n        \"Implementation Phase\": np.random.normal(89, 13, 100),\n    },\n}\ntitle=\"Distribution of Project Performance:\"\nxticklabels=[\"Design Phase\", \"Implementation Phase\"]\nxticks=[1, 2]\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Create a figure and an array of axes: 2x2 subplot grid\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Prepare data for violin plot\ndata_to_plot = []\nfor class_name, genders in project_performance.items():\n    data_to_plot.extend([grades for gender, grades in genders.items()])\n\n# Flatten the axes array for easy iteration\naxs = axs.flatten()\n\nfor i, (class_name, ax) in enumerate(zip(project_performance, axs)):\n    gender_grades = project_performance[class_name]\n    ax.violinplot([gender_grades[\"Design Phase\"], gender_grades[\"Implementation Phase\"]])\n    ax.set_title(f\"{title} {class_name}\")\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(xticklabels)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Improve spacing between subplots\nplt.tight_layout()\n\nplt.savefig('violin_9.pdf', bbox_inches='tight')"}
{"idx": "violin_10", "instruction": "There is a reference image for you and I also have a set of data about athlete performance and resource allocation in sports facilities. Please refer to the reference image and generate Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\n\n\nimport numpy as np;np.random.seed(0)\n# Data for the histogram: scores from two types of assessments\ntest_scores_public = np.random.normal(loc=60, scale=10, size=1000) # e.g., scores from public training facilities\ntest_scores_private = np.random.normal(loc=100, scale=10, size=1000) # e.g., scores from private training facilities\n\n# Data for the pie chart: resource allocation\nlabels = [\"Equipment\", \"Training\", \"Facilities\", \"Nutrition\", \"Coaching\"]\nbudget = [25, 20, 30, 15, 10]\nexplode = (0.1, 0, 0, 0, 0) # highlight the largest segment\ntitles= [\"Athlete Performance in Training\", \"Resource Allocation in Sports Facilities\"]\nxlabel = \"Performance Score\"\nylabel = \"Number of Athletes\"\nhistlabels = [\"Public Training\", \"Private Training\"]\n\n\nNow, please output the Python matplotlib code that can create a chart that exactly mirrors the style of the reference image and accurately represents my data.\nNote: You must copy the data I provide completely into your code, and ensure that the code you generate contains the data and is directly executable.", "width": 6.0, "height": 6.0, "code": "import matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\nimport numpy as np; np.random.seed(0)\n\n\n# ===================\n# Part 2: Data Preparation\n# ===================\n# Sample data to mimic the picture provided\ndata = np.random.beta(a=[3, 2, 4], b=[4, 3, 2], size=(100, 3))\ndata_adoption = np.random.beta(a=[3, 4, 3], b=[3, 2, 3], size=(100, 3))\nkde_x = np.linspace(0, 1, 300)\n# Define the categories and the colors for each group\ncategories = [\"Innovation\", \"Adoption\", \"Impact\"]\ntitle=\"Comparison of Metrics with and without Adoption\"\n# Define offset to separate the half violin plots in the single Axes object\noffsets = [-0.05, 0, 0.05]\nylabel=\"Metric Score\"\nlabels = [\"Without Adoption\", \"With Adoption\"]\n\n# ===================\n# Part 3: Plot Configuration and Rendering\n# ===================\n# Set the figure size\nfig, ax = plt.subplots(figsize=(6, 6))\ncolors = [\"#1f77b4\", \"#ff7f0e\"]\n# The scaling factor is used to ensure the violins do not overlap\nscaling_factor = 1\nviolin_width = 0.02\n\n\n# Plot the half-violins with an offset\nfor i, category in enumerate(categories):\n    offset = offsets[i]\n    # Plot data without memory\n    kde_data = gaussian_kde(data[:, i])\n    kde_data_y = kde_data(kde_x)\n    kde_data_y_scaled = kde_data_y / max(kde_data_y) * violin_width\n    ax.fill_betweenx(\n        kde_x,\n        kde_data_y_scaled * scaling_factor + offset,\n        offset,\n        color=colors[0],\n        edgecolor=\"black\",\n    )\n\n    # Plot data with memory\n    kde_data_adoption = gaussian_kde(data_adoption[:, i])\n    kde_data_adoption_y = kde_data_adoption(kde_x)\n    kde_data_adoption_y_scaled = kde_data_adoption_y / max(kde_data_adoption_y) * violin_width\n    ax.fill_betweenx(\n        kde_x,\n        offset,\n        -kde_data_adoption_y_scaled * scaling_factor + offset,\n        color=colors[1],\n        edgecolor=\"black\",\n    )\n\n    # Plot the mean as a star marker for data without memory\n    ax.plot(\n        offset,\n        np.mean(data[:, i]),\n        \"*\",\n        color=\"white\",\n        markersize=12,\n        markeredgecolor=\"black\",\n    )\n    # Plot the mean as a star marker for data with memory\n    ax.plot(\n        offset,\n        np.mean(data_adoption[:, i]),\n        \"*\",\n        color=\"white\",\n        markersize=12,\n        markeredgecolor=\"black\",\n    )\n\n    ax.text(\n        offset, -0.1, category, ha=\"center\", va=\"top\", fontsize=9\n    )  # Add the category label below the violin plot\n\n# Add title\nax.set_title(title)\n\n# Add grid\nax.grid(True)\n\n# Set x and y axis labels and limits\nax.set_xlim(\n    min(offsets) - scaling_factor * violin_width - 0.06,\n    max(offsets) + scaling_factor * violin_width + 0.06,\n)\ny_margin = 0.02  # Adding margin at top and bottom of the y-axis\ny_min, y_max = ax.get_ylim()\nax.set_ylim(y_min - y_margin, y_max + y_margin)\nax.set_ylabel(ylabel)\nax.set_xticks([])  # Remove x-ticks as they are not meaningful here\n\n# Adjust the legend\nhandles = [\n    plt.Rectangle((0, 0), 1, 1, color=color, edgecolor=\"black\") for color in colors\n]\n\nax.legend(handles, labels, loc=\"lower center\", bbox_to_anchor=(0.5, -0.15), ncol=2)\n\n# ===================\n# Part 4: Saving Output\n# ===================\n# Adjust layout for better fit and save the figure\nplt.tight_layout()\nplt.savefig('violin_10.pdf', bbox_inches='tight')"}

{"file": "HR_22", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the three groups\nnp.random.seed(0)\ncontrol_group = np.random.normal(0, 1, 100)\ntreatment_group1 = np.random.normal(1, 1.5, 100)\ntreatment_group2 = np.random.normal(-1, 1, 100)\n\n# Create a figure with specified size\nplt.figure(figsize=(7.0, 5.0))\n\n# Create a violin plot\nplt.violinplot([control_group, treatment_group1, treatment_group2])\n\n# Set the x-ticks and their labels\nplt.xticks([1, 2, 3], ['Control Group', 'Treatment Group 1', 'Treatment Group 2'])\n\n# Set the y-axis label\nplt.ylabel('Value Range')\n\n# Set the title of the plot\nplt.title('Comparative Distribution of Three Different Groups')\n\n# Set the colors for each violin plot\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\nfor i, pc in enumerate(plt.gca().collections[::2]):\n    pc.set_facecolor(colors[i])\n    pc.set_edgecolor('black')\n    pc.set_alpha(0.7)\n\n# Show the plot\nplt.show()", "idx": "HR_22", "width": 7.0, "height": 5.0}
{"file": "bar_43", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar charts\ncategories = ['LM-7712-3b', 'Word2Vec', 'BioWordVec', 'ZapWord', 'BioBERT', 'BlueBERT', 'PubMedBERT', 'GermBERT', 'Bio']\nscores = [\n    [48.1, 57.2, 59.3, 45.9, 48.4, 57.6, 54.3, 79.1],\n    [50.8, 62.2, 64.4, 51.7, 64.4, 67.6, 58.0, 90.2],\n    [74.4, 75.8, 76.8, 74.4, 76.9, 79.0, 81.8, 82.0],\n    [55.6, 70.4, 75.6, 58.5, 71.1, 84.4, 89.6],\n    [79.2, 80.2, 69.4, 64.2, 67.9, 80.4, 76.7],\n    [78.5, 84.0, 86.1, 66.7, 78.5, 88.9, 88.0],\n    [57.8, 68.8, 67.6, 61.3, 69.2, 83.2, 89.0],\n    [72.0, 82.0, 71.0, 65.0, 75.0, 92.0, 93.0],\n    [79.8, 83.1, 68.8, 65.4, 74.3, 83.8, 77.7]\n]\n\n# Titles for the subplots\ntitles = ['MedMCQA', 'MedQA (USMLE)', 'PubMedQA', 'MMLU Anatomy', 'MMLU Clinical knowledge', 'MMLU College biology', 'MMLU College medicine', 'MMLU Medical genetics', 'MMLU Professional medicine']\n\n# Colors for the bars\ncolors = ['skyblue', 'royalblue', 'blue', 'salmon', 'tomato', 'red', 'brown', 'darkred', 'gray']\n\n# Create subplots\nfig, axes = plt.subplots(3, 3, figsize=(10.0, 8.0))\n\n# Flatten axes for easy iteration\naxes = axes.flatten()\n\n# Loop through each subplot\nfor i, ax in enumerate(axes):\n    # Create the bar chart\n    ax.bar(categories, scores[i], color=colors[i])\n    \n    # Set the title\n    ax.set_title(titles[i])\n    \n    # Set the y-axis label\n    ax.set_ylabel('Performance Score (%)')\n    \n    # Rotate x-axis labels for better readability\n    ax.set_xticklabels(categories, rotation=45, ha='right')\n    \n    # Add data labels on top of the bars\n    for j, score in enumerate(scores[i]):\n        ax.text(j, score + 1, f'{score}%', ha='center', va='bottom', fontsize=8)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_43", "width": 10.0, "height": 8.0}
{"file": "line_76", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for Model X, Y, Z with Config A, B, C\niterations = np.arange(1, 10)\nconfig_a_x = np.random.uniform(80, 95, len(iterations))\nconfig_b_x = np.random.uniform(75, 90, len(iterations))\nconfig_c_x = np.random.uniform(85, 95, len(iterations))\n\nconfig_a_y = np.random.uniform(55, 75, len(iterations))\nconfig_b_y = np.random.uniform(60, 75, len(iterations))\nconfig_c_y = np.random.uniform(55, 70, len(iterations))\n\nconfig_a_z = np.random.uniform(65, 85, len(iterations))\nconfig_b_z = np.random.uniform(70, 85, len(iterations))\nconfig_c_z = np.random.uniform(65, 80, len(iterations))\n\n# Create subplots with shared x-axis\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0), sharex=True)\n\n# Plot Model X\naxs[0].plot(iterations, config_a_x, 'o-r', label='Config A - Model X')\naxs[0].plot(iterations, config_b_x, 's-g', label='Config B - Model X')\naxs[0].plot(iterations, config_c_x, '^-b', label='Config C - Model X')\naxs[0].set_title('Performance of Model X')\naxs[0].set_ylabel('Score')\naxs[0].legend()\n\n# Plot Model Y\naxs[1].plot(iterations, config_a_y, 'o-r', label='Config A - Model Y')\naxs[1].plot(iterations, config_b_y, 's-g', label='Config B - Model Y')\naxs[1].plot(iterations, config_c_y, '^-b', label='Config C - Model Y')\naxs[1].set_title('Performance of Model Y')\naxs[1].set_ylabel('Score')\naxs[1].legend()\n\n# Plot Model Z\naxs[2].plot(iterations, config_a_z, 'o-r', label='Config A - Model Z')\naxs[2].plot(iterations, config_b_z, 's-g', label='Config B - Model Z')\naxs[2].plot(iterations, config_c_z, '^-b', label='Config C - Model Z')\naxs[2].set_title('Performance of Model Z')\naxs[2].set_xlabel('Iteration')\naxs[2].set_ylabel('Score')\naxs[2].legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "line_76", "width": 8.0, "height": 12.0}
{"file": "pie_6", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 12.4, 17.2, 24.7, 10.3]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.legend(loc=\"upper right\")\nplt.show()", "idx": "pie_6", "width": 8.0, "height": 6.0}
{"file": "line_19", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nfraction_of_training_data = np.array([0.01, 0.1, 1])\nfull_accuracy = np.array([50, 70, 80])\nspt_accuracy = np.array([45, 65, 75])\nvpt_accuracy = np.array([40, 60, 70])\n\n# Plotting the data\nplt.figure(figsize=(5.0, 4.0))\nplt.plot(fraction_of_training_data, full_accuracy, 'o-', color='green', label='Full')\nplt.plot(fraction_of_training_data, spt_accuracy, 'o-', color='red', label='SPT')\nplt.plot(fraction_of_training_data, vpt_accuracy, 'o-', color='blue', label='VPT')\n\n# Setting the x-axis to log scale\nplt.xscale('log')\n\n# Adding labels and title\nplt.xlabel('fraction of training data (log scale)')\nplt.ylabel('test accuracy (%)')\n\n# Adding a legend\nplt.legend()\n\n# Adding grid\nplt.grid(True, which=\"both\", ls=\"--\", linewidth=0.5)\n\n# Show the plot\nplt.show()", "idx": "line_19", "width": 5.0, "height": 4.0}
{"file": "violin_10", "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Sample data\nnp.random.seed(10)\ndata = np.random.rand(10, 3)\ncategories = ['Efficiency', 'Comfort', 'Safety']\ndf = pd.DataFrame(data, columns=categories)\n\n# Create a figure with specified size\nplt.figure(figsize=(6.0, 6.0))\n\n# Create a violin plot\nsns.violinplot(data=df, inner=None, color=\".8\")\n\n# Overlay a strip plot\nsns.stripplot(data=df, jitter=True, marker='*', size=20, linewidth=0, palette=['blue', 'orange'])\n\n# Set the title of the plot\nplt.title('Comparison of Scores with and without Memory')\n\n# Create a custom legend\nhandles, labels = plt.gca().get_legend_handles_labels()\nlabels = ['Without Memory', 'With Memory']\nplt.legend(handles[0:2], labels, loc='lower right')\n\n# Show the plot\nplt.show()", "idx": "violin_10", "width": 6.0, "height": 6.0}
{"file": "heatmap_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap (randomly generated to match the color pattern)\ndata = np.array([\n    [0.9, 0.6, 0.3, 0.9, 0.1],\n    [0.7, 0.4, 0.2, 0.7, 0.3],\n    [0.5, 0.8, 0.6, 0.5, 0.7],\n    [0.3, 0.2, 0.9, 0.3, 0.9],\n    [0.1, 0.7, 0.4, 0.1, 0.6],\n    [0.8, 0.1, 0.8, 0.8, 0.2]\n])\n\n# Labels for the rows and columns\nrow_labels = ['ada', 'mistral', 'distilroberta', 'mpnet', 'MiniLM', 'qa-distilbert']\ncol_labels = ['ada', 'mis', 'dis', 'mpn', 'Min', 'qad']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add color bars\nplt.colorbar(cax, ax=ax, label='Bottleneck Distance', fraction=0.046, pad=0.04)\nplt.colorbar(cax, ax=ax, label='Wasserstein Distance', fraction=0.046, pad=0.04)\n\n# Set the tick labels\nax.set_xticks(np.arange(len(col_labels)))\nax.set_yticks(np.arange(len(row_labels)))\nax.set_xticklabels(col_labels)\nax.set_yticklabels(row_labels)\n\n# Rotate the x-axis labels\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()", "idx": "heatmap_3", "width": 8.0, "height": 6.0}
{"file": "line_50", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Dummy data\ntime = np.linspace(1, 18, 18)\nsmoothed_data = np.random.normal(0.1, 0.05, 18)\ndifference_data = np.random.normal(0, 0.5, 20)[1:] - np.random.normal(0, 0.5, 20)[:-1]\ncumulative_sum = np.cumsum(np.random.normal(0.1, 0.05, 20))\n\n# Create figure with specified figsize\nfig, axs = plt.subplots(3, 1, figsize=(5.0, 10.0))\n\n# Smoothed Representation\naxs[0].plot(time, smoothed_data, marker='o', color='purple', label='Smoothed Data')\naxs[0].set_title('Smoothed Representation')\naxs[0].set_ylabel('Value')\naxs[0].legend()\n\n# First Difference of Data\naxs[1].plot(time[1:], difference_data, marker='x', color='orange', label='Difference Data')\naxs[1].set_title('First Difference of Data')\naxs[1].set_ylabel('Delta Value')\naxs[1].legend()\n\n# Cumulative Sum Over Time\naxs[2].plot(time, cumulative_sum, marker='s', color='green', label='Cumulative Sum')\naxs[2].set_title('Cumulative Sum Over Time')\naxs[2].set_xlabel('Time')\naxs[2].set_ylabel('Cumulative Value')\naxs[2].legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "line_50", "width": 5.0, "height": 10.0}
{"file": "HR_17", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 5.0))\n\n# Generate some data\nx = np.linspace(0, 150, 100)\ny1 = np.sin(x) * np.cos(x)\ny2 = np.cos(x)\ny3 = np.sin(x)\n\n# Plot the data with fill_between to create the areas\nplt.fill_between(x, y1, color=\"blue\", alpha=0.5)\nplt.fill_between(x, y1, y2, where=(y2 > y1), color=\"orange\", alpha=0.5, interpolate=True)\nplt.fill_between(x, y1, y2, where=(y2 <= y1), color=\"green\", alpha=0.5, interpolate=True)\n\n# Display the plot\nplt.show()", "idx": "HR_17", "width": 6.0, "height": 5.0}
{"file": "radar_1", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the chart\nlabels=np.array(['VQAv2', 'GQA', 'SQA-I', 'TextVQA', 'MM-Vet', 'POPE', 'LLaVA-W', 'MME', 'MMB'])\nstats_1=np.array([79.9, 62.0, 86.8, 78.2, 60.5, 86.4, 75.8, 64.9, 66.9])\nstats_2=np.array([58.5, 69.1, 59.1, 52.0, 63.4, 72.9, 51.7, 54.3, 51.7])\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is made circular, so we need to \"complete the loop\" and append the start to the end.\nstats_1=np.concatenate((stats_1,[stats_1[0]]))\nstats_2=np.concatenate((stats_2,[stats_2[0]]))\nangles+=angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\nax.fill(angles, stats_1, color='red', alpha=0.25)\nax.fill(angles, stats_2, color='blue', alpha=0.25)\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([20, 40, 60, 80], [\"20\", \"40\", \"60\", \"80\"], color=\"grey\", size=7)\nplt.ylim(0,100)\n\n# Add data points\nfor angle, stat in zip(angles, stats_1):\n    ax.text(angle, stat, str(stat), horizontalalignment='center', size=8, color='black', weight='bold')\n\nfor angle, stat in zip(angles, stats_2):\n    ax.text(angle, stat, str(stat), horizontalalignment='center', size=8, color='black', weight='bold')\n\n# Add legend\nlegend = ax.legend(['LLaVA-1.5-7B', 'TinyLLaVA-3.1B'], loc='lower right', frameon=True)\n\nplt.show()", "idx": "radar_1", "width": 8.0, "height": 7.0}
{"file": "violin_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the distribution in the picture\nnp.random.seed(0)\ndata_jTrans = np.random.normal(0.6, 0.1, 200)\ndata_PalmTree = np.random.normal(0.7, 0.15, 200)\ndata_CLAP = np.random.normal(0.55, 0.05, 200)\n\n# Create a figure with specified size\nplt.figure(figsize=(5.0, 5.0))\n\n# Create violin plots\nplt.violinplot(data_jTrans, positions=[1], showmeans=True, showextrema=True, showmedians=False)\nplt.violinplot(data_PalmTree, positions=[2], showmeans=True, showextrema=True, showmedians=False)\nplt.violinplot(data_CLAP, positions=[3], showmeans=True, showextrema=True, showmedians=False)\n\n# Set the x-axis labels\nplt.xticks([1, 2, 3], ['jTrans', 'PalmTree', 'CLAP'])\n\n# Set the y-axis label\nplt.ylabel('Accuracy')\n\n# Set the y-axis limits\nplt.ylim(0.2, 1.0)\n\n# Show the plot\nplt.show()", "idx": "violin_4", "width": 5.0, "height": 5.0}
{"file": "hist_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data for demonstration\nnp.random.seed(0)\nmnist_data = np.random.normal(loc=0.06, scale=0.02, size=10000)\nfashion_mnist_data = np.random.normal(loc=0.1, scale=0.03, size=10000)\n\n# Create a figure with two subplots and set the size\nfig, axs = plt.subplots(2, 1, figsize=(10.0, 7.0))\n\n# Plot the MNIST data histogram\naxs[0].hist(mnist_data, bins=50, color='blue', alpha=0.7)\naxs[0].set_title('MNIST')\naxs[0].set_xlim([0, 0.12])\n\n# Plot the FashionMNIST data histogram\naxs[1].hist(fashion_mnist_data, bins=50, color='blue', alpha=0.7)\naxs[1].set_title('FashionMNIST')\naxs[1].set_xlim([0, 0.25])\n\n# Adjust the layout and show the plot\nplt.tight_layout()\nplt.show()", "idx": "hist_9", "width": 10.0, "height": 7.0}
{"file": "bar_89", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\naccuracy = [0.8, 0.82, 0.78, 0.79, 0.81, 0.8, 0.83, 0.79, 0.82, 0.8]\nrecall = [0.25, 0.4, 0.35, 0.3, 0.45, 0.4, 0.35, 0.3, 0.5, 0.55]\nprecision = [0.6, 0.65, 0.63, 0.64, 0.62, 0.66, 0.65, 0.63, 0.6, 0.7]\nx = range(1, 11)\n\n# Create subplots with shared x-axis\nfig, axs = plt.subplots(3, 1, figsize=(10.0, 6.0), sharex=True)\n\n# Plot accuracy\naxs[0].bar(x, accuracy, color='blue')\naxs[0].axhline(y=0.8, color='red', linestyle='--')\naxs[0].set_ylabel('Accuracy')\naxs[0].set_ylim(0, 1)\n\n# Plot recall\naxs[1].bar(x, recall, color='red')\naxs[1].set_ylabel('Recall')\naxs[1].set_ylim(0, 1)\n\n# Plot precision\naxs[2].bar(x, precision, color='purple')\naxs[2].set_ylabel('Precision')\naxs[2].set_ylim(0, 1)\n\n# Set x-axis label for the last subplot\naxs[2].set_xlabel('Top-10 superfamilies in training dataset')\n\n# Set x-axis ticks for the last subplot\naxs[2].set_xticks(x)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_89", "width": 10.0, "height": 6.0}
{"file": "line_17", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nx = [10, 30, 50, 70, 90, 110]\ny = [0.1, 0.15, 0.05, 0.02, 0.01, 0.005]\n\n# Create the plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\n\n# Set the scale of the y-axis to logarithmic\nplt.yscale('log')\n\n# Set the labels for the axes\nplt.xlabel('Number of Parameters')\nplt.ylabel('Log KL Divergence')\n\n# Set the limits for the axes\nplt.xlim(0, 120)\nplt.ylim(1e-5, 1e-1)\n\n# Show grid\nplt.grid(True, which=\"both\", ls=\"--\")\n\n# Display the plot\nplt.show()", "idx": "line_17", "width": 6.0, "height": 4.0}
{"file": "bar_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['GSM8K', 'MNLI', 'race@High']\nM3 = [45, 55, 50]\nM4 = [50, 60, 55]\nM5 = [55, 65, 60]\nM6 = [60, 70, 65]\nM7 = [65, 75, 70]\n\n# X-axis positions\nx = np.arange(len(categories))\n\n# Bar width\nbar_width = 0.15\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nrects1 = ax.bar(x - 2*bar_width, M3, bar_width, label='M = 3')\nrects2 = ax.bar(x - bar_width, M4, bar_width, label='M = 4')\nrects3 = ax.bar(x, M5, bar_width, label='M = 5')\nrects4 = ax.bar(x + bar_width, M6, bar_width, label='M = 6')\nrects5 = ax.bar(x + 2*bar_width, M7, bar_width, label='M = 7')\n\n# Labels, title and custom x-axis tick labels\nax.set_ylabel('Performance')\nax.set_title('Performance by category and M value')\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()", "idx": "bar_18", "width": 10.0, "height": 6.0}
{"file": "box_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the boxplot in the picture\ndata = [np.random.normal(0.825, 0.02, 100),\n        np.random.normal(0.850, 0.02, 100),\n        np.random.normal(0.835, 0.02, 100),\n        np.random.normal(0.845, 0.02, 100)]\n\n# Create the boxplot\nplt.figure(figsize=(6.0, 5.0))\nplt.boxplot(data, patch_artist=True, boxprops=dict(facecolor='lightblue'))\n\n# Set the labels and title\nplt.xticks([1, 2, 3, 4], ['SQL Only', 'PoT', 'IC+LP', 'DAIL', 'IC+LP+PoT'])\nplt.ylabel('Execution Accuracy')\n\n# Show the plot\nplt.show()", "idx": "box_13", "width": 6.0, "height": 5.0}
{"file": "bar_76", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\nprevious_year = [-1400, -1200, -1000, -800]\ncurrent_year = [-200, -400, -600, -800]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Bar width\nbar_width = 0.35\n\n# Index for the sectors\nindex = np.arange(len(sectors))\n\n# Plotting the bars\nbars1 = ax.bar(index, previous_year, bar_width, label='Previous Year', color='orange', hatch='/')\nbars2 = ax.bar(index + bar_width, current_year, bar_width, label='Current Year', color='skyblue', hatch='/')\n\n# Adding labels and title\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\nax.set_title('Environmental Impact by Sector')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(sectors)\nax.legend()\n\n# Invert y-axis to show negative values on top\nax.invert_yaxis()\n\n# Show the plot\nplt.show()", "idx": "bar_76", "width": 10.0, "height": 6.0}
{"file": "hist_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data (replace with actual data from the paper)\ncamel_weights = np.random.rand(100) * 0.15\nkangaroo_weights = np.random.rand(100) * 0.15\n\n# Set the figure size as specified\nplt.figure(figsize=(5.0, 4.0))\n\n# Plot histograms\nplt.hist(camel_weights, bins=20, alpha=0.5, label='Camel', color='green')\nplt.hist(kangaroo_weights, bins=20, alpha=0.5, label='Kangaroo', color='pink')\n\n# Set the title and labels\nplt.title(\"CIFAR100 'Desert' Concept\")\nplt.xlabel('Concept Weight')\nplt.ylabel('Count')\n\n# Set y-axis to log scale\nplt.yscale('log')\n\n# Add legend\nplt.legend(title='Class')\n\n# Show the plot\nplt.show()", "idx": "hist_3", "width": 5.0, "height": 4.0}
{"file": "graph_2", "code": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a random graph\nG = nx.gnm_random_graph(n=30, m=45, seed=42)\n\n# Set the figure size\nplt.figure(figsize=(8.0, 8.0))\n\n# Draw the graph\npos = nx.spring_layout(G, seed=42)  # positions for all nodes\nnx.draw_networkx_nodes(G, pos, node_size=300, node_color='black')\nnx.draw_networkx_edges(G, pos, width=1, alpha=0.3)\n\n# Remove axis\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "graph_2", "width": 8.0, "height": 8.0}
{"file": "box_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['neutral', 'neutral', 'yellow high', 'yellow low', 'yellow high', 'yellow low', 'green low', 'green high', 'green low', 'green high', 'blue low', 'blue high', 'blue low', 'blue high', 'red low', 'red high', 'red low', 'red high']\nmeans = [5, 5, 6, 4, 6, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]\nstd_devs = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\ncolors = ['grey' if 'high' in cat else 'black' for cat in categories]\nerror_kw = {'capsize': 5, 'capthick': 2, 'ecolor': 'orange'}\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\ny_pos = np.arange(len(categories))\nax.barh(y_pos, means, xerr=std_devs, align='center', color=colors, error_kw=error_kw)\nax.set_yticks(y_pos)\nax.set_yticklabels(categories)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('SAM rating')\nax.set_title('Dominance')\n\nplt.show()", "idx": "box_1", "width": 10.0, "height": 8.0}
{"file": "pie_1", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['A', 'B', 'C', 'D', 'E', 'F']\nsizes = [30.5, 29.8, 13.2, 11.3, 10.6, 4.6]\ncolors = ['#4CAF50', '#2196F3', '#9C27B0', '#FFC107', '#9E9E9E', '#607D8B']\nexplode = (0.1, 0, 0, 0, 0, 0)  # explode the first slice\n\n# Plot\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, explode=explode, labels=None, colors=colors, autopct='%1.1f%%', startangle=140)\n\nplt.axis('equal')\nplt.show()", "idx": "pie_1", "width": 5.0, "height": 5.0}
{"file": "scatter_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(5.0, 5.0))\n\n# Generate random data for each cluster\nnp.random.seed(0)\nx1 = np.random.normal(0, 1, 50)\ny1 = np.random.normal(0, 1, 50)\n\nx2 = np.random.normal(3, 1, 50)\ny2 = np.random.normal(3, 1, 50)\n\nx3 = np.random.normal(0, 1, 50)\ny3 = np.random.normal(5, 1, 50)\n\nx4 = np.random.normal(-3, 1, 50)\ny4 = np.random.normal(-3, 1, 50)\n\nx5 = np.random.normal(5, 1, 50)\ny5 = np.random.normal(-5, 1, 50)\n\n# Plot each cluster with different colors\nplt.scatter(x1, y1, c='yellow', alpha=0.6)\nplt.scatter(x2, y2, c='green', alpha=0.6)\nplt.scatter(x3, y3, c='blue', alpha=0.6)\nplt.scatter(x4, y4, c='red', alpha=0.6)\nplt.scatter(x5, y5, c='purple', alpha=0.6)\n\n# Hide the axes\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "scatter_4", "width": 5.0, "height": 5.0}
{"file": "HR_10", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 8.0))\n\n# Define the range for the plot\ntheta = np.linspace(0, 4 * np.pi, 1000)\nr = theta**2\n\n# Convert polar coordinates to Cartesian coordinates\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Plot the spiral\nplt.plot(x, y, label='SINDy', color='blue')\n\n# Add a black dot at the center of the spiral\nplt.plot(0, 0, 'ko')\n\n# Set the title and legend\nplt.title('Compact Spiral with Elliptical Hollow Center')\nplt.legend()\n\n# Set the aspect ratio to be equal\nplt.axis('equal')\n\n# Set the x and y axis limits\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\n\n# Show the plot\nplt.show()", "idx": "HR_10", "width": 8.0, "height": 8.0}
{"file": "bar_62", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot bars\ny_pos = range(len(categories))\nax.barh(y_pos, synthetic_data, color=colors, edgecolor='black', height=0.4, label='synthetic data')\nax.barh(y_pos, [-x for x in human_data], color=colors, edgecolor='black', height=0.4, label='human-authored data')\n\n# Add data labels\nfor i, (syn_val, hum_val) in enumerate(zip(synthetic_data, human_data)):\n    ax.text(syn_val + 1, i, f'{syn_val}%', va='center', ha='left', color='black')\n    ax.text(-hum_val - 3, i, f'{hum_val}%', va='center', ha='right', color='black')\n\n# Set y-axis labels\nax.set_yticks(y_pos)\nax.set_yticklabels(categories)\n\n# Set x-axis labels\nax.set_xticks([])\nax.set_xticklabels([])\n\n# Add vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Remove spines\nfor spine in ax.spines.values():\n    spine.set_visible(False)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()", "idx": "bar_62", "width": 6.0, "height": 6.0}
{"file": "heatmap_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\ndata = np.array([\n    [np.nan, 1, 2, 3, 4, 5],\n    [0, np.nan, 2, 3, 4, 5],\n    [0, 1, np.nan, 3, 4, 5],\n    [0, 1, 2, np.nan, 4, 5],\n    [0, 1, 2, 3, np.nan, 5],\n    [0, 1, 2, 3, 4, np.nan]\n])\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='inferno')\n\n# Add color bar\ncbar = fig.colorbar(cax, ax=ax, label='Increase in perplexity')\n\n# Set axis labels\nax.set_xlabel('To layer')\nax.set_ylabel('Start removing from layer')\n\n# Set axis ticks\nax.set_xticklabels(['', '1', '3', '5', '9', '12'])\nax.set_yticklabels(['', '1', '3', '5', '9', '12'])\n\n# Add text box\nprops = dict(boxstyle='round', facecolor='white', alpha=0.5)\ntextstr = 'mbert\u2192sat\\nPerplexity=7.59'\nax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\n# Show the plot\nplt.show()", "idx": "heatmap_15", "width": 6.0, "height": 8.0}
{"file": "CB_22", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\n\n# Sample data for the histograms\ntotal_data = np.random.normal(1659.02, 23.47, 1000)\nproposer_data = np.random.normal(211.46, 2.55, 1000)\nattestor_data = np.random.normal(1397.72, 19.74, 1000)\nsync_committee_data = np.random.normal(49.89, 0.63, 1000)\n\n# Create a figure with specified size\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot histograms and fit lines for each subplot\ntitles = ['Total', 'Proposer', 'Attestor', 'Sync committee member']\ndata = [total_data, proposer_data, attestor_data, sync_committee_data]\ncolors = ['blue', 'orange', 'green', 'yellow']\nfor i, ax in enumerate(axs.flatten()):\n    # Histogram\n    n, bins, patches = ax.hist(data[i], bins=30, density=True, alpha=0.6, color=colors[i])\n    \n    # Fit line\n    mu, std = norm.fit(data[i])\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    \n    # Title and labels\n    ax.set_title(titles[i])\n    ax.set_xlabel('Daily reward (Ether)')\n    ax.set_ylabel('Probability')\n    \n    # Text for mean and standard deviation\n    ax.text(0.7, 0.9, f'$\\mu = {mu:.2f}$\\n$\\sigma = {std:.2f}$', transform=ax.transAxes, fontsize=10, verticalalignment='top', bbox=dict(boxstyle='round', facecolor='white', alpha=0.5))\n\n# Adjust layout\nplt.tight_layout()\nplt.show()", "idx": "CB_22", "width": 10.0, "height": 8.0}
{"file": "line_80", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for each category and run\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ncategory_data = {\n    'A': {'Run 1': [20, 40, 60, 70, 80], 'Run 2': [25, 45, 65, 75, 85]},\n    'B': {'Run 1': [5, 10, 15, 18, 20], 'Run 2': [6, 12, 17, 19, 21]},\n    'C': {'Run 1': [45, 50, 55, 58, 60], 'Run 2': [40, 45, 50, 53, 55]},\n    'D': {'Run 1': [60, 65, 70, 75, 80], 'Run 2': [55, 60, 65, 70, 75]},\n    'E': {'Run 1': [60, 50, 40, 45, 55], 'Run 2': [65, 55, 45, 50, 60]},\n    'F': {'Run 1': [25, 50, 75, 100, 125], 'Run 2': [30, 55, 80, 105, 130]}\n}\n\n# Colors for runs\ncolors = {'Run 1': 'blue', 'Run 2': 'red'}\n\n# Create a 2x3 subplot grid with shared x-axis and y-axis\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(9.0, 6.0), sharex=True, sharey=True)\n\n# Plot each category\nfor i, (category, data) in enumerate(category_data.items()):\n    ax = axes[i//3, i%3]\n    for run, values in data.items():\n        ax.plot(phases, values, marker='o', color=colors[run], label=run)\n    ax.set_title(f'Category {category} Growth')\n    ax.set_xlabel('Growth Phase')\n    ax.set_ylabel('Cumulative Value')\n    ax.grid(True)\n    ax.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_80", "width": 9.0, "height": 6.0}
{"file": "radar_7", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each line\nvalues1 = [4, 3, 2, 5, 4, 3, 4, 2, 3, 4]\nvalues2 = [3, 2, 3, 4, 3, 2, 3, 4, 2, 3]\nvalues3 = [2, 3, 4, 3, 2, 3, 2, 3, 4, 2]\ncategories = ['rose', '3D-bar', 'candlestick', 'line_num', 'heatmap', 'line', 'treemap', 'box', 'bar_num', 'histogram']\n\n# Number of variables\nN = len(categories)\n\n# What will be the angle of each axis in the plot\nangles = [n / float(N) * 2 * pi for n in range(N)]\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\nangles += angles[:1]\n\n# Initialise the spider plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([1, 2, 3, 4, 5], [\"1\", \"2\", \"3\", \"4\", \"5\"], color=\"grey\", size=7)\nplt.ylim(0, 5)\n\n# Plot data\nax.plot(angles, values1, linewidth=2, linestyle='solid', label='QWen-VL')\nax.fill(angles, values1, 'b', alpha=0.1)\n\nax.plot(angles, values2, linewidth=2, linestyle='dashed', label='SPHINX-V2')\nax.fill(angles, values2, 'r', alpha=0.1)\n\nax.plot(angles, values3, linewidth=2, linestyle='dotted', label='ChartLlama')\nax.fill(angles, values3, 'y', alpha=0.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_7", "width": 8.0, "height": 8.0}
{"file": "bar_4", "code": "import matplotlib.pyplot as plt\n\n# Data\nmethods = ['CometKiwi', 'LabSE', 'IF', 'Max', 'STARE', 'PPI', 'ALT+', 'Wass Combo', 'IF', 'Max', 'STARE', 'IF', 'Max', 'STARE']\nvalues = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 48.38, 62.94, 42.5, 36.63, 23.9, 26.38, 17.06]\ncolors = ['green' if i < 7 else 'salmon' for i in range(len(methods))]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Bar chart\nbars = ax.bar(methods, values, color=colors)\n\n# Add data labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 2), ha='center', va='bottom')\n\n# Set the dashed lines\nplt.axhline(y=26.86, color='gray', linestyle='--')\nplt.axhline(y=17.06, color='red', linestyle='--')\n\n# Set title and labels\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\nax.set_ylabel('FPR@90TPR')\n\n# Set legend\nplt.legend(['Non-Aggregation', 'Aggregation'], loc='upper right')\n\n# Show plot\nplt.show()", "idx": "bar_4", "width": 10.0, "height": 5.0}
{"file": "bar_6", "code": "import matplotlib.pyplot as plt\n\n# Data\nemotions = ['Amusement', 'Unbothered', 'Sadness', 'Pride', 'Nervousness', 'Annoyance', 'Gratitude', 'Relief', 'Joy', 'Disapproval', 'Excitement', 'Delight', 'Oblivious', 'Embarrassment', 'Disappointment']\nfrequencies = [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.barh(emotions, frequencies, color='blue', edgecolor='black')\n\n# Set labels\nax.set_xlabel('Frequency (%)')\nax.set_ylabel('Emotion')\nax.set_title('Emotion Frequencies')\n\n# Show plot\nplt.show()", "idx": "bar_6", "width": 8.0, "height": 8.0}
{"file": "bar_44", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFEO', 'AFEX', 'AFGX', 'AFKX', 'AFPO', 'AFPP', 'AFPR', 'AFRL', 'AFSC', 'AFSI', 'AFTH', 'AFVC', 'AFNS', 'AFNT', 'DAH', 'IC', 'SS']\ngpt_3_5_turbo = np.random.randint(10, 50, size=len(categories))\ngpt_4 = np.random.randint(5, 30, size=len(categories))\n\nx = np.arange(len(categories))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nrects1 = ax.bar(x - width/2, gpt_3_5_turbo, width, label='GPT-3.5-Turbo', color='blue')\nrects2 = ax.bar(x + width/2, gpt_4, width, label='GPT-4', color='orange')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Non-valid NAs')\nax.set_title('Non-valid NAs by category and model')\nax.set_xticks(x)\nax.set_xticklabels(categories, rotation=45, ha='right')\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\n\nplt.show()", "idx": "bar_44", "width": 8.0, "height": 6.0}
{"file": "line_59", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\niterations = np.arange(0, 201, 1)\nbase_model_accuracy = np.random.normal(0.5, 0.05, size=len(iterations))\nour_model_accuracy = np.random.normal(0.4, 0.05, size=len(iterations))\n\n# Plotting the data\nplt.figure(figsize=(5.0, 3.0))\nplt.plot(iterations, base_model_accuracy, label='Base Model', marker='o', color='blue', markersize=5, linestyle='-', linewidth=1)\nplt.plot(iterations, our_model_accuracy, label='Our Model', marker='o', color='lightblue', markersize=5, linestyle='-', linewidth=1)\n\n# Adding labels and title\nplt.xlabel('Training Iterations')\nplt.ylabel('Metric Value')\nplt.title('Accuracy')\n\n# Adding legend\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "line_59", "width": 5.0, "height": 3.0}
{"file": "radar_18", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for Disney and Universal Studios\ncategories = ['Food Quality', 'Shows', 'Family Rides', 'Thrill Rides', 'Parking', 'Souvenirs', 'Ticket Price', 'Wait Times', 'Cleanliness', 'Staff']\nDisney_values = [0.8, 0.7, 0.9, 0.6, 0.7, 0.8, 0.5, 0.6, 0.9, 0.8]\nUniversal_values = [0.6, 0.8, 0.5, 0.9, 0.6, 0.7, 0.4, 0.5, 0.7, 0.6]\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each category\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]  # Complete the loop\n\n# Plotting the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Disney\nDisney_values += Disney_values[:1]\nax.plot(angles, Disney_values, linewidth=2, linestyle='solid', label='Disney', color='orange')\nax.fill(angles, Disney_values, color='orange', alpha=0.25)\n\n# Universal Studios\nUniversal_values += Universal_values[:1]\nax.plot(angles, Universal_values, linewidth=2, linestyle='solid', label='Universal Studios', color='purple')\nax.fill(angles, Universal_values, color='purple', alpha=0.25)\n\n# Add category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nplt.title('Amusement Park Comparison: Disney vs Universal Studios', size=20, color='black', y=1.1)\n\n# Add gridlines\nax.yaxis.grid(True)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_18", "width": 8.0, "height": 8.0}
{"file": "bar_83", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar charts\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nfrequency_metric_1 = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\nfrequency_metric_2 = [2.6, 3.0, 3.7, 4.6, 5.0, 5.0, 5.5, 6.5, 7.0, 7.1]\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# First bar chart\nax1.barh(emotions, frequency_metric_1, color='red', edgecolor='black')\nax1.set_xlabel('Frequency Metric 1 (%)')\nax1.set_title('Emotion')\nax1.invert_yaxis()  # labels read top-to-bottom\nax1.set_xlim(0, max(frequency_metric_1) + 1)\n\n# Add data labels to the first bar chart\nfor i, v in enumerate(frequency_metric_1):\n    ax1.text(v + 0.1, i, f\"{v}%\", color='black', va='center')\n\n# Second bar chart\nax2.barh(emotions, frequency_metric_2, color='blue', edgecolor='black')\nax2.set_xlabel('Frequency Metric 2 (%)')\nax2.set_title('Emotion')\nax2.invert_yaxis()  # labels read top-to-bottom\nax2.set_xlim(0, max(frequency_metric_2) + 1)\n\n# Add data labels to the second bar chart\nfor i, v in enumerate(frequency_metric_2):\n    ax2.text(v + 0.1, i, f\"{v}%\", color='black', va='center')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_83", "width": 10.0, "height": 4.0}
{"file": "HR_11", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points\nx = np.array([0.1, 1, 10])\ny = np.array([1e10, 1e11, 1e12])\n\n# Labels for the data points\nlabels = ['explicit, random', 'explicit, block size 10', 'explicit, block size 100',\n          'implicit, random', 'implicit, block size 10', 'implicit, block size 100']\n\n# Markers for the data points\nmarkers = ['o', 'o', 'o', 'x', 's', 's']\n\n# Colors for the data points\ncolors = ['blue', 'orange', 'green', 'red', 'cyan', 'brown']\n\n# Create the plot with the specified figure size\nplt.figure(figsize=(8.0, 7.0))\n\n# Plot the data points\nfor i, label in enumerate(labels):\n    plt.scatter(x[i % 3], y[i % 3], label=label, marker=markers[i], color=colors[i])\n\n# Add the roofline model lines\nplt.plot(x, y, color='black', label='peak')\nplt.plot(x, y/2, color='black', linestyle='--', label='w/o FMA')\nplt.plot(x, y/4, color='black', linestyle=':', label='w/o vectorization')\n\n# Fill the area below the roofline model\nplt.fill_between(x, y/4, y, color='skyblue', alpha=0.5)\n\n# Add text for the roofline model\nplt.text(0.2, 2e11, 'DAXPY memory bandwidth', rotation=27, fontsize=10)\n\n# Set the scale of the axes\nplt.xscale('log')\nplt.yscale('log')\n\n# Set the labels of the axes\nplt.xlabel('Flops/byte')\nplt.ylabel('Flops/s')\n\n# Add the legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "HR_11", "width": 8.0, "height": 7.0}
{"file": "errorbar_12", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['GPT-4', 'Claude-2.1', 'Claude-2', 'GPT-3.5']\nbuyer_means = [-5, 0, -5, 0]\nseller_means = [5, 0, 5, 0]\nbuyer_std = [5, 5, 5, 5]\nseller_std = [5, 5, 5, 5]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 5.0))\n\n# Plotting each subplot\nfor i, ax in enumerate(axs.flatten()):\n    rects1 = ax.bar(x - width/2, buyer_means, width, label='Buyers (valuation 40)', yerr=buyer_std, capsize=5)\n    rects2 = ax.bar(x + width/2, seller_means, width, label='Sellers (valuation 60)', yerr=seller_std, capsize=5)\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax.set_ylabel('Values')\n    ax.set_title(labels[i] + ' Buyer (valuation 40)')\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels)\n    ax.axhline(0, color='grey', linewidth=0.8)\n    ax.legend()\n\n# Adjust layout to prevent overlap\nfig.tight_layout()\n\nplt.show()", "idx": "errorbar_12", "width": 8.0, "height": 5.0}
{"file": "line_79", "code": "import matplotlib.pyplot as plt\n\n# Sample data\ntime = [100, 200, 300, 400, 500, 600, 700]\nmetric1_run1 = [0.2, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\nmetric1_run2 = [0.1, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8]\nmetric2_run1 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\nmetric2_run2 = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3]\nmetric3_run1 = [0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45]\nmetric3_run2 = [0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40]\nmetric4_run1 = [0.3, 0.6, 0.9, 0.8, 0.7, 0.6, 0.5]\nmetric4_run2 = [0.2, 0.4, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create subplots\nfig, axs = plt.subplots(1, 4, figsize=(18.0, 4.0))\n\n# Plot data for each subplot\naxs[0].plot(time, metric1_run1, marker='o', color='blue', label='ECL Run 1')\naxs[0].plot(time, metric1_run2, marker='s', color='orange', label='ECL Run 2')\naxs[0].set_title('Traffic Performance')\naxs[0].set_xlabel('Time (s)')\naxs[0].set_ylabel('Metric Value')\n\naxs[1].plot(time, metric2_run1, marker='o', color='blue', label='ECL Run 1')\naxs[1].plot(time, metric2_run2, marker='s', color='orange', label='ECL Run 2')\naxs[1].set_title('ETMm2 Performance')\naxs[1].set_xlabel('Time (s)')\naxs[1].set_ylabel('Metric Value')\n\naxs[2].plot(time, metric3_run1, marker='o', color='blue', label='ECL Run 1')\naxs[2].plot(time, metric3_run2, marker='s', color='orange', label='ECL Run 2')\naxs[2].set_title('ETTh2 Performance')\naxs[2].set_xlabel('Time (s)')\naxs[2].set_ylabel('Metric Value')\n\naxs[3].plot(time, metric4_run1, marker='o', color='blue', label='ECL Run 1')\naxs[3].plot(time, metric4_run2, marker='s', color='orange', label='ECL Run 2')\naxs[3].set_title('ECL Performance')\naxs[3].set_xlabel('Time (s)')\naxs[3].set_ylabel('Metric Value')\n\n# Add legend to the first subplot\naxs[0].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_79", "width": 18.0, "height": 4.0}
{"file": "pie_5", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['26.2%', '21.4%', '19.0%', '14.3%', '13.3%', '5.7%']\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3, 5.7]\ncolors = ['#8B0000', '#FF0000', '#FF6347', '#FFA07A', '#FFDAB9', '#FFE4E1']\n\n# Plot\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, startangle=140)\n\nplt.title('Slice of a pie chart')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()", "idx": "pie_5", "width": 5.0, "height": 5.0}
{"file": "line_72", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nr = np.linspace(0.1, 1.0, 100)\npna_performance = np.where(r < 0.5, 0, np.where(r < 0.6, -80, 0))\ngin_performance = np.zeros_like(r)\n\n# Plotting the data\nplt.figure(figsize=(10.0, 5.0))\nplt.plot(r, pna_performance, 'm-', label='PNA + ours', marker='o')\nplt.plot(r, gin_performance, 'y-', label='GIN + ours', marker='^')\n\n# Customizing the plot\nplt.title('Dynamic Performance Trends')\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.axhline(0, color='black', linewidth=0.5)\nplt.fill_between(r, pna_performance, gin_performance, color='green', alpha=0.3)\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_72", "width": 10.0, "height": 5.0}
{"file": "CB_24", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\ndata_D0 = np.random.normal(60, 10, 1000)\ndata_D1 = np.random.normal(100, 15, 1000)\ndata_D2 = np.random.normal(140, 5, 1000)\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the histograms\nax.hist(data_D0, bins=30, density=True, alpha=0.5, color='red', edgecolor='black', linestyle='--', label='D0')\nax.hist(data_D1, bins=30, density=True, alpha=0.5, color='orange', edgecolor='black', linestyle='-', label='D1')\nax.hist(data_D2, bins=30, density=True, alpha=0.5, color='blue', edgecolor='black', linestyle=':', label='D2')\n\n# Add annotations for the arrows and text\nax.annotate('40', xy=(60, 0.06), xytext=(60, 0.08), arrowprops=dict(facecolor='black', arrowstyle='<->'))\nax.annotate('80', xy=(100, 0.06), xytext=(100, 0.08), arrowprops=dict(facecolor='black', arrowstyle='<->'))\nax.annotate('40', xy=(140, 0.06), xytext=(140, 0.08), arrowprops=dict(facecolor='black', arrowstyle='<->'))\n\n# Set labels and title\nax.set_xlabel('Execution Duration(clock)')\nax.set_ylabel('Distribution')\nax.set_title('Histogram of Execution Duration')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "CB_24", "width": 8.0, "height": 6.0}
{"file": "line_62", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nweeks = np.arange(1, 31)\nperformance = np.random.uniform(0.2, 1.0, size=30)\nefficiency = np.random.uniform(0.2, 1.0, size=30)\ngrowth = np.random.uniform(0.2, 1.0, size=30)\n\n# Create the plot\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot performance\ncolor = 'tab:blue'\nax1.set_xlabel('Weeks')\nax1.set_ylabel('Performance', color=color)\nax1.plot(weeks, performance, marker='o', color=color, label='Performance')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for efficiency\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Efficiency', color=color)\nax2.plot(weeks, efficiency, marker='x', linestyle='--', color=color, label='Efficiency')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Plot growth on the same axis as performance\nax1.plot(weeks, growth, marker='^', linestyle=':', color='tab:green', label='Growth')\n\n# Add a legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper left', title='Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the title\nplt.title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Show the plot\nplt.show()", "idx": "line_62", "width": 10.0, "height": 6.0}
{"file": "bar_96", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar charts\ncategories = ['Random', 'Ours', 'SOTA']\ntruthful_misleading_ratios = ['2:0', '2:1', '2:2', '1:2']\ndata = {\n    '2:0': [(66.3, 10.1), (61.9, 13.6), (53.8, 13.7)],\n    '2:1': [(49.3, 36.3), (45.7, 41.0), (41.6, 31.5)],\n    '2:2': [(48.0, 40.5), (42.6, 49.6), (36.5, 36.5)],\n    '1:2': [(43.8, 49.5), (40.2, 56.8), (30.6, 42.8)]\n}\n\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\nfor i, ratio in enumerate(truthful_misleading_ratios):\n    ax = axs[i//2, i%2]\n    ax.set_title(f'Truthful:Misleading = {ratio}')\n    ax.set_ylim(-80, 80)\n    ax.axhline(0, color='black', linewidth=0.8)\n    ax.set_xticks(range(len(categories)))\n    ax.set_xticklabels(categories)\n    \n    for j, category in enumerate(categories):\n        truthful, misleading = data[ratio][j]\n        ax.bar(j, truthful, color='blue', edgecolor='black')\n        ax.bar(j, misleading, bottom=truthful, color='red', edgecolor='black')\n        ax.text(j, truthful/2, f'{truthful}', ha='center', va='center', color='white')\n        ax.text(j, truthful + misleading/2, f'{misleading}', ha='center', va='center', color='white')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_96", "width": 8.0, "height": 8.0}
{"file": "radar_11", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the radar chart\nlabels=np.array(['Memory', 'Understanding', 'Interference', 'Questioning', 'Reasoning', 'Reflection', 'Paraphrasing'])\nstats_yi6b=np.array([6, 5, 4, 3, 2, 1, 6])\nstats_yi34b=np.array([5, 4, 3, 2, 1, 6, 5])\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nstats_yi6b=np.concatenate((stats_yi6b,[stats_yi6b[0]]))\nstats_yi34b=np.concatenate((stats_yi34b,[stats_yi34b[0]]))\nangles+=angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(4.0, 4.0), subplot_kw=dict(polar=True))\nax.fill(angles, stats_yi6b, color='green', alpha=0.25)\nax.fill(angles, stats_yi34b, color='lightgreen', alpha=0.25)\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels)\n\n# Draw ylabels\nax.set_rscale('linear')\nplt.yticks([2, 4, 6, 8, 10], [\"2\", \"4\", \"6\", \"8\", \"10\"], color=\"grey\", size=7)\nplt.ylim(0,10)\n\n# Add legend\nplt.legend(['Yi-6B', 'Yi-34B'], loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()", "idx": "radar_11", "width": 4.0, "height": 4.0}
{"file": "multidiff_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [-0.8, 0.1, 0.7, 1.2],\n    [-0.6, 0.2, 0.8, 1.3],\n    [-0.4, 0.3, 0.9, 1.4],\n    [-0.2, 0.4, 1.0, 1.5],\n    [0.0, 0.5, 1.1, 1.6]\n])\n\n# Data for the bar chart\nbar_data = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the figure size\nplt.figure(figsize=(8.0, 2.0))\n\n# Create the heatmap\nplt.subplot(1, 3, 1)\nplt.imshow(data, cmap='coolwarm', aspect='auto')\nplt.xticks(ticks=np.arange(4), labels=['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'])\nplt.yticks(ticks=np.arange(5), labels=['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'])\nplt.colorbar()\n\n# Create the second heatmap\nplt.subplot(1, 3, 2)\nplt.imshow(data, cmap='coolwarm', aspect='auto')\nplt.xticks(ticks=np.arange(4), labels=['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'])\nplt.yticks(ticks=[], labels=[])\nplt.colorbar()\n\n# Create the bar chart\nplt.subplot(1, 3, 3)\nplt.barh(np.arange(5), bar_data, color=['blue', 'orange', 'green', 'red', 'purple'])\nplt.yticks(ticks=np.arange(5), labels=['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'])\nplt.xlabel(r'$\\tilde{i}_\\infty (Y, Z)$')\nplt.xlim(0, 1)\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_10", "width": 8.0, "height": 2.0}
{"file": "line_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(7)\ny1 = np.array([75, 70, 68, 72, 74, 76, 78])\ny2 = np.array([65, 60, 58, 62, 64, 66, 68])\ny1_err = np.array([5, 4, 3, 4, 5, 4, 3])\ny2_err = np.array([4, 3, 2, 3, 4, 3, 2])\n\n# Labels for x-axis\nlabels = ['AI', 'MLP', 'GCN', 'NCN', 'NCNC', 'NeoGINN-BUDDY', 'SEAL', 'Node2Vec']\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.errorbar(x, y1, yerr=y1_err, fmt='o-', color='blue', label='ogbl-collab', capsize=5)\nax.errorbar(x, y2, yerr=y2_err, fmt='o--', color='orange', label='ogbl-ppa', capsize=5)\n\n# Customizing the plot\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation=45, ha='right')\nax.set_ylabel('Hits@50')\nax.set_ylim(40, 80)\nax.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.show()", "idx": "line_3", "width": 10.0, "height": 5.0}
{"file": "bar_25", "code": "import matplotlib.pyplot as plt\n\n# Data for the left bar chart\ncategories_left = ['Alpaca-52k+', 'AlpaGasus-1k+', 'LIMA-1k+', 'LIMA-1k*']\nrefined_wins_left = [78.8, 67.4, 44.2, 59.8]\ntie_left = [11.7, 18.1, 21.9, 21.0]\nloses_left = [9.5, 14.5, 33.9, 19.2]\n\n# Data for the right bar chart\ncategories_right = ['Alpaca-52k+', 'AlpaGasus-1k+', 'LIMA-1k+', 'LIMA-1k*']\nrefined_wins_right = [77.6, 68.3, 43.2, 62.9]\ntie_right = [18.0, 23.7, 26.7, 23.6]\nloses_right = [4.4, 8.0, 30.1, 13.5]\n\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Left bar chart\nax1.barh(categories_left, refined_wins_left, color='blue', label='Refined-Alpaca-1k-longest wins')\nax1.barh(categories_left, tie_left, left=refined_wins_left, color='orange', label='Tie')\nax1.barh(categories_left, loses_left, left=[i+j for i,j in zip(refined_wins_left, tie_left)], color='lightblue', label='Alpaca-1k-longest loses')\n\n# Right bar chart\nax2.barh(categories_right, refined_wins_right, color='blue', label='Refined-Alpaca-1k-longest loses')\nax2.barh(categories_right, tie_right, left=refined_wins_right, color='orange', label='Tie')\nax2.barh(categories_right, loses_right, left=[i+j for i,j in zip(refined_wins_right, tie_right)], color='lightblue', label='Alpaca-1k-longest loses')\n\n# Add data labels\nfor i in range(len(categories_left)):\n    ax1.text(refined_wins_left[i], i, str(refined_wins_left[i]), va='center', ha='right', color='white')\n    ax1.text(refined_wins_left[i] + tie_left[i], i, str(tie_left[i]), va='center', ha='right', color='white')\n    ax1.text(refined_wins_left[i] + tie_left[i] + loses_left[i], i, str(loses_left[i]), va='center', ha='right', color='white')\n\nfor i in range(len(categories_right)):\n    ax2.text(refined_wins_right[i], i, str(refined_wins_right[i]), va='center', ha='right', color='white')\n    ax2.text(refined_wins_right[i] + tie_right[i], i, str(tie_right[i]), va='center', ha='right', color='white')\n    ax2.text(refined_wins_right[i] + tie_right[i] + loses_right[i], i, str(loses_right[i]), va='center', ha='right', color='white')\n\n# Set labels and title\nax1.set_xlabel('GPT4-as-a-judge')\nax2.set_xlabel('PaLM2-as-a-judge')\n\n# Add legend\nax1.legend(loc='lower right')\nax2.legend(loc='lower right')\n\n# Display the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_25", "width": 10.0, "height": 4.0}
{"file": "heatmap_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = np.array([\n    [876, 136, 435, 534, 322, 804],\n    [750, 1737, 742, 375, 750, 1825],\n    [764, 676, 782, 421, 0, 0],\n    [482, 120, 843, 1170, 925, 911]\n])\n\n# Create masked array to handle the hatched cells\nmasked_data = np.ma.masked_where(data == 0, data)\n\n# Labels\nrows = ['Summit', 'Perlmutter', 'Corona', 'Frontier']\ncolumns = ['Kokkos', 'RAJA', 'OMP', 'DACC', 'SYCL', 'Native Port']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create heatmap\ncmap = plt.get_cmap('Reds')\ncax = ax.matshow(masked_data, cmap=cmap)\n\n# Add colorbar\ncbar = fig.colorbar(cax, orientation='vertical')\ncbar.set_label('BabelStream triad Average Memory Bandwidth (GB/s)')\n\n# Set ticks\nax.set_xticks(np.arange(len(columns)))\nax.set_yticks(np.arange(len(rows)))\n\n# Set tick labels\nax.set_xticklabels(columns)\nax.set_yticklabels(rows)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(rows)):\n    for j in range(len(columns)):\n        if data[i, j] != 0:\n            ax.text(j, i, f'{data[i, j]}', ha='center', va='center', color='black')\n\n# Handle the hatched cells\nfor i in range(2, 4):\n    for j in range(4, 6):\n        ax.add_patch(plt.Rectangle((j-0.5, i-0.5), 1, 1, fill=False, hatch='//', edgecolor='gray'))\n\n# Set title\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\n\n# Show the plot\nplt.show()", "idx": "heatmap_6", "width": 10.0, "height": 8.0}
{"file": "bar_91", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['GCN', 'RvNN', 'Hyphen', 'GET']\ndemocratic_scores = [0.75, 0.80, 0.85, 0.80]\nmixed_scores = [0.80, 0.85, 0.90, 0.85]\nrepublican_scores = [0.85, 0.90, 0.95, 0.90]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.25  # the width of the bars\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for Pheme\nax1.bar(x - width, democratic_scores, width, label='Democratic', color='lightblue')\nax1.bar(x, mixed_scores, width, label='Mixed', color='orange')\nax1.bar(x + width, republican_scores, width, label='Republican', color='salmon')\n\n# Plot for LLM-mis\nax2.bar(x - width, democratic_scores, width, color='lightblue')\nax2.bar(x, mixed_scores, width, color='orange')\nax2.bar(x + width, republican_scores, width, color='salmon')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax1.set_ylabel('Macro F1-Score')\nax1.set_title('Pheme')\nax1.set_xticks(x)\nax1.set_xticklabels(labels)\nax1.legend()\n\nax2.set_title('LLM-mis')\nax2.set_xticks(x)\nax2.set_xticklabels(labels)\n\n# Set y-axis limits\nax1.set_ylim(0.70, 0.90)\nax2.set_ylim(0.80, 0.90)\n\n# Set grid\nax1.grid(axis='y', linestyle='--', alpha=0.7)\nax2.grid(axis='y', linestyle='--', alpha=0.7)\n\nplt.tight_layout()\nplt.show()", "idx": "bar_91", "width": 10.0, "height": 5.0}
{"file": "line_32", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ndecomposition_io_norm = [0, 20, 40, 60, 80]\naccuracy_dictionary = [0.225, 0.275, 0.300, 0.325, 0.375]\naccuracy_laion = [0.200, 0.250, 0.275, 0.300, 0.350]\naccuracy_clip = [0.375] * len(decomposition_io_norm)\n\n# Create the plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(decomposition_io_norm, accuracy_dictionary, marker='o', color='orange', label='Dictionary')\nplt.plot(decomposition_io_norm, accuracy_laion, marker='o', color='orange', linestyle='--', label='laion')\nplt.plot(decomposition_io_norm, accuracy_clip, linestyle='--', color='black', label='CLIP')\n\n# Add title and labels\nplt.title('CIFAR100 States Zero Shot Accuracy')\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_32", "width": 8.0, "height": 6.0}
{"file": "3d_1", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data for Targets (orange line)\nx_targets = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny_targets = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\nz_targets = np.array([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n\n# Sample data for Predictions (blue line)\nx_predictions = np.array([0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05])\ny_predictions = np.array([0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15])\nz_predictions = np.array([0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05])\n\n# Create a new figure with specified figure size\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the Targets and Predictions\nax.plot(x_targets, y_targets, z_targets, color='orange', marker='o', label='Targets')\nax.plot(x_predictions, y_predictions, z_predictions, color='blue', marker='o', label='Predictions')\n\n# Set the labels for the axes\nax.set_xlabel('X axis')\nax.set_ylabel('Y axis')\nax.set_zlabel('Z axis')\n\n# Set the title and the legend\nax.set_title('3D Plot of Targets and Predictions')\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "3d_1", "width": 7.0, "height": 7.0}
{"file": "bar_20", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['LIMA', 'Vicuna', 'Koala', 'WizardIm', 'Self-Instruct']\nAP_1kL_wins = [68, 82, 68, 72, 68]\nTie = [24, 15, 22, 19, 23]\nAG_1k_wins = [8, 3, 10, 9, 9]\n\n# Create a horizontal bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Position of bars on y-axis\nind = range(len(AP_1kL_wins))\n\n# Plotting\np1 = ax.barh(ind, AP_1kL_wins, color='dodgerblue', edgecolor='white')\np2 = ax.barh(ind, Tie, left=AP_1kL_wins, color='lightblue', edgecolor='white')\np3 = ax.barh(ind, AG_1k_wins, left=[i+j for i,j in zip(AP_1kL_wins, Tie)], color='lightgrey', edgecolor='white')\n\n# Adding labels\nfor i in range(len(categories)):\n    ax.text(AP_1kL_wins[i] / 2, i, str(AP_1kL_wins[i]), ha='center', va='center', color='white')\n    ax.text(AP_1kL_wins[i] + Tie[i] / 2, i, str(Tie[i]), ha='center', va='center', color='black')\n    ax.text(AP_1kL_wins[i] + Tie[i] + AG_1k_wins[i] / 2, i, str(AG_1k_wins[i]), ha='center', va='center', color='black')\n\n# Set the y-axis labels\nax.set_yticks(ind)\nax.set_yticklabels(categories)\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Add legend\nax.legend((p1[0], p2[0], p3[0]), ('AP-1kL wins', 'Tie', 'AG-1k wins'), loc='upper right', bbox_to_anchor=(1.15, 1))\n\n# Remove axes splines\nfor s in ['top', 'bottom', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x, y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n# Add x, y gridlines\nax.grid(b=True, color='grey', linestyle='-.', linewidth=0.5, alpha=0.2)\n\n# Show top values\nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Comparison of Wins', loc='left')\n\n# Show plot\nplt.show()", "idx": "bar_20", "width": 8.0, "height": 5.0}
{"file": "area_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nn = np.array([0, 0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent = np.array([1, 2, 3, 5, 6, 5, 3, 1])\norganization = np.array([1, 2, 3, 4, 5, 4, 2, 1])\nlanguage = np.array([1, 2, 3, 4, 5, 4, 2, 1])\n\n# Cumulative data\ncumulative_content = np.cumsum(content)\ncumulative_organization = np.cumsum(organization) + cumulative_content\ncumulative_language = np.cumsum(language) + cumulative_organization\n\n# Plot\nplt.figure(figsize=(8.0, 4.0))\nplt.fill_between(n, 0, cumulative_content, label='Content', color='blue', alpha=0.5)\nplt.fill_between(n, cumulative_content, cumulative_organization, label='Organization', color='orange', alpha=0.5)\nplt.fill_between(n, cumulative_organization, cumulative_language, label='Language', color='green', alpha=0.5)\n\n# Labels and Title\nplt.xlabel('n')\nplt.ylabel('Performance Gain (%)')\nplt.title('Cumulative Performance Gain by Augmentation Level')\n\n# Legend\nplt.legend(loc='upper right')\n\n# Show plot\nplt.show()", "idx": "area_4", "width": 8.0, "height": 4.0}
{"file": "CB_14", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the histograms\nnp.random.seed(0)\ndata1 = np.random.normal(0.8, 0.1, 1000)\ndata2 = np.random.normal(0.6, 0.15, 1000)\n\n# Create the figure and axes\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the histograms\nn_bins = 30\nax.hist(data1, bins=n_bins, alpha=0.5, label='H-ward - centers-cos', color='blue', edgecolor='black')\nax.hist(data2, bins=n_bins, alpha=0.5, label='random', color='pink', edgecolor='black')\n\n# Add a legend\nax.legend(title='selector')\n\n# Add labels and title\nax.set_xlabel('norm size')\nax.set_ylabel('count')\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Show the plot\nplt.show()", "idx": "CB_14", "width": 10.0, "height": 6.0}
{"file": "errorbar_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncategories = ['all', 'arg_causal', 'test_0', 'test_1', 'test_2', 'test_3', 'test_4', 'test_5', 'test_6', 'constant']\naccuracy_values = [0.832, 0.830, 0.828, 0.829, 0.830, 0.831, 0.832, 0.833, 0.834, 0.826]\naccuracy_errors = [0.001] * len(categories)\nshift_values = [0.04, 0.035, 0.03, 0.031, 0.032, 0.033, 0.034, 0.035, 0.036, 0.02]\nshift_errors = [0.005] * len(categories)\n\n# Set up the figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the first bar chart\nax1.bar(categories, accuracy_values, yerr=accuracy_errors, color=['red'] + ['blue']*8 + ['black'], capsize=5)\nax1.set_title('Out-of-domain accuracy')\nax1.set_ylim(0.824, 0.834)\n\n# Plot the second bar chart\nax2.bar(categories, shift_values, yerr=shift_errors, color=['red'] + ['blue']*8 + ['black'], capsize=5)\nax2.set_title('Shift gap')\nax2.set_ylim(0.00, 0.05)\n\n# Set the x-axis labels\nax1.set_xticklabels(categories, rotation=45, ha='right')\nax2.set_xticklabels(categories, rotation=45, ha='right')\n\n# Set the y-axis labels\nax1.set_ylabel('Accuracy')\nax2.set_ylabel('Shift Value')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "errorbar_6", "width": 10.0, "height": 5.0}
{"file": "heatmap_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data in the form of a 2D array\ndata = np.array([\n    [169, 547, 662, 271, 145],\n    [115, 439, 753, 239, 141],\n    [219, 585, 557, 259, 153],\n    [67, 941, 708, 432, 162],\n    [177, 554, 661, 235, 169]\n])\n\n# Labels for rows and columns\nrow_labels = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\ncolumn_labels = ['0', '1', '2', '3', '4']\n\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set the tick labels\nax.set_xticklabels([''] + column_labels)\nax.set_yticklabels([''] + row_labels)\n\n# Display the values in the cells\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        ax.text(j, i, str(data[i, j]), va='center', ha='center')\n\n# Set the title and labels\nax.set_title('Question Type: All three types of questions', pad=20)\nax.set_xlabel('Response Action Category')\nax.set_ylabel('')\n\n# Show the plot\nplt.show()", "idx": "heatmap_2", "width": 9.0, "height": 6.0}
{"file": "scatter_17", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data - replace with actual data\nnp.random.seed(0)\nx = np.random.uniform(-30, 10, 100)\ny = np.random.uniform(-10, 30, 100)\nsizes = np.random.uniform(20, 1000, 100)\ncolors = np.random.rand(100)\n\n# Create the scatter plot\nplt.figure(figsize=(9.0, 6.0))\nscatter = plt.scatter(x, y, s=sizes, c=colors, alpha=0.5)\n\n# Add labels and title if needed\nplt.xlabel('\u0394 Robust Accuracy (%)')\nplt.ylabel('\u0394 NFR (%)')\n\n# Customize the grid\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()", "idx": "scatter_17", "width": 9.0, "height": 6.0}
{"file": "area_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data (approximated from the image)\nx = np.linspace(0, 80, 100)\ny1 = np.linspace(0.55, 0.75, 100)\ny2 = np.linspace(0.60, 0.76, 100)\ny3 = np.linspace(0.65, 0.77, 100)\ny4 = np.linspace(0.68, 0.78, 100)\n\n# Create the plot with the specified figure size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the filled areas (approximated colors)\nplt.fill_between(x, y1, color='saddlebrown', alpha=0.5, label='laion (5k)')\nplt.fill_between(x, y2, color='blue', alpha=0.5, label='coco (5k)')\nplt.fill_between(x, y3, color='green', alpha=0.5, label='laion (10k)')\nplt.fill_between(x, y4, color='red', alpha=0.5, label='coco (10k)')\n\n# Add the dashed line at y=0.75\nplt.axhline(y=0.75, color='black', linestyle='--')\n\n# Set the title and labels\nplt.title('Dynamic Effect of Vocab on Zero Shot Accuracy')\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\n\n# Add the legend\nplt.legend(loc='upper left')\n\n# Show the plot\nplt.show()", "idx": "area_3", "width": 10.0, "height": 6.0}
{"file": "violin_8", "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Sample data to mimic the picture\nnp.random.seed(10)\ndata = [np.random.normal(0, std, 100) for std in range(1, 6)]\n\n# Create a violin plot\nplt.figure(figsize=(10.0, 6.0))\nax = sns.violinplot(data=data, palette=\"Set3\", inner=\"point\", cut=0)\n\n# Add text annotations for KCC values\nkcc_values = [0.88, 0.85, 0.79, 0.67, 0.57]\nfor i in range(len(kcc_values)):\n    plt.text(i, max(data[i]) - 0.05, str(kcc_values[i]), ha='center', va='center', color='black')\n\n# Add text annotations for Pearson R and EER(%) values\npearson_r_values = [0.18, 0.19, 0.19, 0.18, 0.16]\neer_values = [3.33, 3.33, 10.67, 16.95, 29.10]\nfor i in range(len(pearson_r_values)):\n    plt.text(i, min(data[i]) - 0.15, f\"{pearson_r_values[i]}\\n{eer_values[i]}\", ha='center', va='center', color='green')\n\n# Set x-axis labels\nax.set_xticklabels(['Raw', '125Hz', '50Hz', '25Hz', '10Hz'])\n\n# Set y-axis label\nplt.ylabel('KCC')\n\n# Set title for the last violin plot\nplt.text(4, max(data[4]) + 0.1, 'Pearson R\\nEER(%)', ha='center', va='center', color='purple')\n\nplt.show()", "idx": "violin_8", "width": 10.0, "height": 6.0}
{"file": "errorbar_21", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [-5000, -4000, -3000, -2000, -1000]\nrenewable_energy_usage = [5, 10, 15, 20, 25]\nerror_consumption = [500, 400, 300, 200, 100]\nerror_renewable = [1, 2, 3, 4, 5]\n\n# Create a figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Plot the first bar chart for energy consumption\nax1.barh(countries, energy_consumption, xerr=error_consumption, color='purple', alpha=0.6)\nax1.set_xlabel('Energy Consumption (PetaJoules)')\nax1.set_title('Total Energy Consumption by Country')\n\n# Plot the second bar chart for renewable energy usage\nax2.barh(countries, renewable_energy_usage, xerr=error_renewable, color='teal', alpha=0.6)\nax2.set_xlabel('Renewable Energy Usage (%)')\nax2.set_title('Renewable Energy Usage by Country')\n\n# Adjust the layout and display the plot\nplt.tight_layout()\nplt.show()", "idx": "errorbar_21", "width": 10.0, "height": 6.0}
{"file": "multidiff_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 10.0))\n\n# Create a subplot for the stacked area chart\nax1 = plt.subplot(211)\n\n# Data for the stacked area chart\nyears = np.arange(2015, 2023)\nhardware = np.array([20, 25, 30, 35, 40, 45, 50, 55])\nsoftware = np.array([20, 25, 30, 35, 40, 45, 50, 55])\nai = np.array([20, 25, 30, 35, 40, 45, 50, 55])\n\n# Plot the stacked area chart\nax1.stackplot(years, hardware, software, ai, labels=['Hardware', 'Software', 'AI'], colors=['#1f77b4', '#ff7f0e', '#2ca02c'])\n\n# Customize the subplot\nax1.set_title('Technological Progress in Hardware, Software, and AI')\nax1.set_xlabel('Year')\nax1.set_ylabel('Progress (%)')\nax1.legend(loc='upper left')\n\n# Create a subplot for the boxplot\nax2 = plt.subplot(212)\n\n# Data for the boxplot\ndata = [np.random.normal(0, std, 100) for std in range(6, 10)]\n\n# Plot the boxplot\nax2.boxplot(data, patch_artist=True, medianprops=dict(color='black'), boxprops=dict(facecolor='#1f77b4', color='black'), whiskerprops=dict(color='black'), capprops=dict(color='black'))\n\n# Customize the subplot\nax2.set_title('Innovation Gaps Across Different Sectors in Technology')\nax2.set_xticklabels(['Big Tech', 'Startups', 'Academia', 'Government'])\nax2.set_ylabel('Innovation Gap (%)')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_18", "width": 8.0, "height": 10.0}
{"file": "hist_12", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\ndata1 = np.random.normal(5, 1, 1000)\ndata2 = np.random.normal(5, 1, 1000)\ndata3 = np.random.normal(5, 1, 1000)\ndata4 = np.random.normal(5, 1, 1000)\n\n# Create a figure with a specific size\nfig, axs = plt.subplots(4, 2, figsize=(7.0, 8.0))\n\n# Define colors for each subplot\ncolors = ['blue', 'red', 'purple', 'orange']\n\n# Define titles for each subplot\ntitles = ['MATHWELL', 'Llama-2', 'LLEMMMA', 'MAmmoTH']\n\n# Plot the histograms\nfor i in range(4):\n    axs[i, 0].hist(data1, bins=30, color=colors[i], alpha=0.7, density=True)\n    axs[i, 0].axvline(data1.mean(), color='k', linestyle='dashed', linewidth=1)\n    axs[i, 0].set_title(titles[i])\n    axs[i, 0].set_xlabel('FKGL')\n    axs[i, 0].set_ylabel('Density')\n    \n    axs[i, 1].hist(data2, bins=30, color=colors[i], alpha=0.7, density=True)\n    axs[i, 1].axvline(data2.mean(), color='k', linestyle='dashed', linewidth=1)\n    axs[i, 1].set_title(titles[i] + ' MaC')\n    axs[i, 1].set_xlabel('FKGL')\n    axs[i, 1].set_ylabel('Density')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "hist_12", "width": 7.0, "height": 8.0}
{"file": "HR_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 6.0))\n\n# Generate theta values\ntheta = np.linspace(0, 2*np.pi, 100)\n\n# Calculate the radius\nr = np.abs(np.cos(theta))\n\n# Convert polar coordinates to Cartesian coordinates\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Plot the points with varying alpha values\nfor i in range(len(x)):\n    plt.scatter(x[i], y[i], color='blue', alpha=1 - i/len(x))\n\n# Set the aspect of the plot to be equal\nplt.gca().set_aspect('equal')\n\n# Remove the ticks\nplt.xticks([])\nplt.yticks([])\n\n# Show the plot\nplt.show()", "idx": "HR_5", "width": 6.0, "height": 6.0}
{"file": "CB_19", "code": "import matplotlib.pyplot as plt\n\n# Data points\nx = [25, 50, 75, 100, 150]\ny = [51.49, 54.18, 68.46, 74.55, 79.64]\nlabels = ['Carbon Lite', 'Carbon Attn', 'Carbon FFN', 'Carbon', 'Carbon Large']\n\n# Plotting the line\nplt.figure(figsize=(7.0, 7.0))\nplt.plot(x, y, color='red', marker='o', linestyle='-', linewidth=2, markersize=8, label='LLaMA 7B')\n\n# Adding the star marker for the last point\nplt.scatter(x[-1], y[-1], color='blue', marker='*', s=100, label='LLaMA 13B')\n\n# Annotating the points\nfor i, label in enumerate(labels):\n    plt.annotate(f'{y[i]}\\n{label}', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Setting the axis labels\nplt.xlabel('Trainable Parameter Size (M)')\nplt.ylabel('EM (%)')\n\n# Adding the legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "CB_19", "width": 7.0, "height": 7.0}
{"file": "CB_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 8.0))\n\n# Generate random data for demonstration purposes\nnp.random.seed(0)\nx = np.random.normal(35, 5, 300)\ny = np.random.normal(1, 1, 300)\nspecies = np.random.choice([40, 80, 120], 300)\n\n# Create a scatter plot\nscatter = plt.scatter(x, y, c=species, cmap='viridis', alpha=0.6)\n\n# Create a legend for species\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Species\")\nplt.gca().add_artist(legend1)\n\n# Create density plots on the top and right of the scatter plot\nsns.kdeplot(x, ax=plt.gca(), fill=True, color='red', alpha=0.3, vertical=False)\nsns.kdeplot(y, ax=plt.gca(), fill=True, color='blue', alpha=0.3, vertical=True)\n\n# Set labels for the axes\nplt.xlabel('Relative Cluster Size')\nplt.ylabel('Average Norm of Difference Vectors')\n\n# Show the plot\nplt.show()", "idx": "CB_6", "width": 10.0, "height": 8.0}
{"file": "line_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nN = np.array([4, 6, 8, 10, 20, 30])\nstandard = np.array([1e-2, 1e-4, 1e-6, 1e-6, 1e-8, 1e-8])\nconstrained = np.array([1e-12, 1e-12, 1e-12, 1e-12, 1e-10, 1e-10])\n\n# Plotting the data\nplt.figure(figsize=(9.0, 6.0))\nplt.loglog(N, standard, 'o-', label='Standard', color='blue')\nplt.loglog(N, constrained, 'x-', label='Constrained', color='orange')\n\n# Adding labels and title\nplt.xlabel('N')\nplt.ylabel('Error')\nplt.title('Error vs. N')\n\n# Adding legend\nplt.legend()\n\n# Show grid\nplt.grid(True, which=\"both\", ls=\"--\")\n\n# Show the plot\nplt.show()", "idx": "line_9", "width": 9.0, "height": 6.0}
{"file": "line_31", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndigit_length = np.array([6, 7, 8, 9])\ndirect_100 = np.array([1.0, 0.9, 0.8, 0.7])\nrfft_100 = np.array([0.9, 0.8, 0.7, 0.6])\nscratchpad_100 = np.array([0.7, 0.6, 0.5, 0.4])\nscratchpad_5000 = np.array([0.6, 0.7, 0.8, 0.9])\n\n# Error bars\ndirect_100_err = np.array([0.05, 0.05, 0.05, 0.05])\nrfft_100_err = np.array([0.05, 0.05, 0.05, 0.05])\nscratchpad_100_err = np.array([0.05, 0.05, 0.05, 0.05])\nscratchpad_5000_err = np.array([0.05, 0.05, 0.05, 0.05])\n\n# Plot\nplt.figure(figsize=(8.0, 6.0))\nplt.errorbar(digit_length, direct_100, yerr=direct_100_err, fmt='o-', color='blue', label='Direct (100 samples)')\nplt.errorbar(digit_length, rfft_100, yerr=rfft_100_err, fmt='s-', color='green', label='RFFT (100 samples)')\nplt.errorbar(digit_length, scratchpad_100, yerr=scratchpad_100_err, fmt='^-', color='orange', label='Scratchpad (100 samples)')\nplt.errorbar(digit_length, scratchpad_5000, yerr=scratchpad_5000_err, fmt='d-', color='red', label='Scratchpad (5000 samples)')\n\n# Customizing the plot\nplt.xlabel('Digit Length')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs Digit Length')\nplt.legend()\nplt.grid(True)\nplt.ylim(0.3, 1.1)\n\n# Show plot\nplt.show()", "idx": "line_31", "width": 8.0, "height": 6.0}
{"file": "multidiff_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figsize as required\nplt.figure(figsize=(7.0, 9.0))\n\n# Top Bar Chart\nplt.subplot(2, 1, 1)\ncategories = ['Random', 'Sobol', 'HCube', 'No Context', 'Partial Context', 'Full Context']\nvalues = [0.8, 0.6, 0.7, 0.5, 0.4, 0.3]\nplt.barh(categories[::-1], values[::-1], color='blue')\nplt.xlabel('Generalized Variance')\nplt.xlim(0, 1)\n\n# Bottom Line Chart\nplt.subplot(2, 1, 2)\ntrials = np.arange(0, 26)\n# Assuming some random data for the line chart as the actual data is not provided\nrandom_data = np.random.rand(26)\nsobol_data = np.random.rand(26)\nhcube_data = np.random.rand(26)\nno_context_data = np.random.rand(26)\npartial_context_data = np.random.rand(26)\nfull_context_data = np.random.rand(26)\n\nplt.plot(trials, random_data, label='Random', color='blue')\nplt.plot(trials, sobol_data, label='Sobol', color='green')\nplt.plot(trials, hcube_data, label='HCube', color='red')\nplt.plot(trials, no_context_data, label='No Context', color='purple', linestyle=':')\nplt.plot(trials, partial_context_data, label='Partial Context', color='orange', linestyle='--')\nplt.plot(trials, full_context_data, label='Full Context', color='brown', linestyle='-')\nplt.xlabel('Trials')\nplt.ylabel('Avg Regret')\nplt.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_8", "width": 7.0, "height": 9.0}
{"file": "pie_7", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [20, 35, 25, 10, 10]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice (Youtube)\n\n# Plot\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.title('Social Media Usage')\nplt.legend(labels, loc=\"best\")\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()", "idx": "pie_7", "width": 8.0, "height": 6.0}
{"file": "line_77", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.arange(1, 11)\nconfig_a_llama = np.random.uniform(75, 95, 10)\nconfig_b_llama = np.random.uniform(75, 95, 10)\nconfig_c_llama = np.random.uniform(75, 95, 10)\n\nconfig_a_falcon = np.random.uniform(55, 72, 10)\nconfig_b_falcon = np.random.uniform(55, 72, 10)\nconfig_c_falcon = np.random.uniform(55, 72, 10)\n\nconfig_a_qwen = np.random.uniform(65, 85, 10)\nconfig_b_qwen = np.random.uniform(65, 85, 10)\nconfig_c_qwen = np.random.uniform(65, 85, 10)\n\n# Create subplots\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Plot for Llama\naxs[0].plot(iterations, config_a_llama, 'o-', color='magenta', label='Config A - Llama')\naxs[0].plot(iterations, config_b_llama, 'o-', color='green', label='Config B - Llama')\naxs[0].plot(iterations, config_c_llama, 'o-', color='blue', label='Config C - Llama')\naxs[0].set_title('Performance of Llama')\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\naxs[0].legend()\n\n# Plot for Falcon\naxs[1].plot(iterations, config_a_falcon, 'o-', color='magenta', label='Config A - Falcon')\naxs[1].plot(iterations, config_b_falcon, 'o-', color='green', label='Config B - Falcon')\naxs[1].plot(iterations, config_c_falcon, 'o-', color='blue', label='Config C - Falcon')\naxs[1].set_title('Performance of Falcon')\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\naxs[1].legend()\n\n# Plot for Qwen\naxs[2].plot(iterations, config_a_qwen, 'o-', color='magenta', label='Config A - Qwen')\naxs[2].plot(iterations, config_b_qwen, 'o-', color='green', label='Config B - Qwen')\naxs[2].plot(iterations, config_c_qwen, 'o-', color='blue', label='Config C - Qwen')\naxs[2].set_title('Performance of Qwen')\naxs[2].set_xlabel('Iteration')\naxs[2].set_ylabel('Score')\naxs[2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_77", "width": 8.0, "height": 12.0}
{"file": "bar_63", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Notre-Dame de Paris', 'Demi-Gods and Semi-Devils', 'The Count of Monte Cristo', 'Game of Thrones', 'Attack on Titan']\nscores_time_0 = [0.2, 0.3, 0.4, 0.5, 0.6]\nscores_time_20 = [0.15, 0.25, 0.35, 0.45, 0.55]\nscores_time_40 = [0.1, 0.2, 0.3, 0.4, 0.5]\nscores_time_60 = [0.05, 0.15, 0.25, 0.35, 0.45]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\nax.barh(categories, scores_time_0, color='lightblue', edgecolor='black', label='Score at Time 0')\nax.barh(categories, scores_time_20, color='royalblue', edgecolor='black', label='Score at Time 20')\nax.barh(categories, scores_time_40, color='blue', edgecolor='black', label='Score at Time 40')\nax.barh(categories, scores_time_60, color='navy', edgecolor='black', label='Score at Time 60')\n\nax.set_xlabel('Scores')\nax.set_title('Scores by Category Over Time')\nax.legend()\n\nplt.show()", "idx": "bar_63", "width": 10.0, "height": 8.0}
{"file": "errorbar_28", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\nfactors = ['Sunlight', 'Water Quality', 'Soil pH', 'Fertilizer', 'Temperature', 'Pesticides', 'CO2 Levels', 'Plant Variety', 'Planting Density', 'Watering Frequency']\nimpact = [0.05, 0.1, 0.15, 0.2, 0.1, 0.05, 0.15, 0.2, 0.25, 0.2]\nerrors = [0.01, 0.02, 0.03, 0.04, 0.02, 0.01, 0.03, 0.04, 0.05, 0.04]\n\n# Create the bar chart\nplt.figure(figsize=(10.0, 8.0))\nplt.barh(factors, impact, xerr=errors, color='green', capsize=5)\n\n# Set the labels and title\nplt.xlabel('Impact on Plant Growth (\u0394 to control)')\nplt.ylabel('Environmental Factors')\nplt.title('Impact of Environmental Factors on Plant Growth')\n\n# Customize the grid and layout\nplt.grid(axis='x', linestyle='--', linewidth=0.5)\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "errorbar_28", "width": 10.0, "height": 8.0}
{"file": "line_74", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for PNA + ours\nx_pna = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny_pna = np.array([0.85, 0.83, 0.78, 0.74, 0.70, 0.65, 0.60, 0.55, 0.50])\nyerr_pna = np.array([0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03])\n\n# Data for GIN + ours\nx_gin = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny_gin = np.array([0.80, 0.78, 0.75, 0.70, 0.65, 0.60, 0.55, 0.50, 0.45])\nyerr_gin = np.array([0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03])\n\n# Plotting the data\nplt.figure(figsize=(10.0, 6.0))\nplt.errorbar(x_pna, y_pna, yerr=yerr_pna, fmt='o-', color='blue', label='PNA + ours', capsize=5)\nplt.errorbar(x_gin, y_gin, yerr=yerr_gin, fmt='o-', color='red', label='GIN + ours', capsize=5)\n\n# Setting the title and labels\nplt.title('Dynamic Model Performance')\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\n\n# Adding a legend\nplt.legend()\n\n# Showing the plot\nplt.show()", "idx": "line_74", "width": 10.0, "height": 6.0}
{"file": "HR_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Ellipse\n\n# Data for plotting\nx = np.linspace(0, 25, 100)\ny = 0.1 * x**2\nerror = 0.1 * x\n\n# Points for Mean-Taylor\nmean_taylor_x = np.linspace(0, 25, 10)\nmean_taylor_y = 0.1 * mean_taylor_x**2\n\n# Monte Carlo line\nplt.plot(x, y, color='red', label='Monte Carlo')\n\n# Error ellipses\nfor i in range(len(mean_taylor_x)):\n    ellipse = Ellipse((mean_taylor_x[i], mean_taylor_y[i]), width=error[i]*2, height=error[i]*2, edgecolor='black', facecolor='none', linestyle='--')\n    plt.gca().add_patch(ellipse)\n\n# Mean-Taylor points\nplt.scatter(mean_taylor_x, mean_taylor_y, color='blue', label='Mean-Taylor')\n\n# Labels and title\nplt.xlabel('x(m)')\nplt.ylabel('y(m)')\nplt.title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Legend\nplt.legend()\n\n# Set image size\nplt.gcf().set_size_inches(8.0, 6.0)\n\n# Show plot\nplt.show()", "idx": "HR_4", "width": 8.0, "height": 6.0}
{"file": "violin_1", "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Sample data - replace with your actual data\nnp.random.seed(10)\ndata = [np.random.normal(0, std, 100) for std in range(1, 6)]\n\n# Create a figure with specified size\nplt.figure(figsize=(8.0, 7.0))\n\n# Create a violin plot\nsns.violinplot(data=data, inner=\"quartile\", palette=[\"blue\", \"orange\"])\n\n# Customize the plot to match the provided picture\nplt.xlabel('Number of examples')\nplt.ylabel('logP_IC50 - logP_noIC50')\nplt.title('')\n\n# Create custom legend\nlegend_labels = ['Llama2', 'Llama2 (In-Chat)']\ncolors = ['blue', 'orange']\ncustom_lines = [plt.Line2D([0], [0], color=color, lw=4) for color in colors]\nplt.legend(custom_lines, legend_labels)\n\n# Show the plot\nplt.show()", "idx": "violin_1", "width": 8.0, "height": 7.0}
{"file": "heatmap_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the correlation coefficients in the picture\ndata = np.array([\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.68, 0.71, 0.82],\n    [0.90, 1.00, 0.93, 0.92, 0.67, 0.69, 0.72, 0.75, 0.82],\n    [0.89, 0.93, 1.00, 0.95, 0.66, 0.68, 0.70, 0.74, 0.81],\n    [0.88, 0.92, 0.95, 1.00, 0.68, 0.69, 0.72, 0.75, 0.82],\n    [0.64, 0.67, 0.66, 0.68, 1.00, 0.85, 0.90, 0.83, 0.77],\n    [0.65, 0.69, 0.68, 0.69, 0.85, 1.00, 0.89, 0.86, 0.75],\n    [0.68, 0.72, 0.70, 0.72, 0.90, 0.89, 1.00, 0.86, 0.79],\n    [0.71, 0.75, 0.74, 0.75, 0.83, 0.86, 0.86, 1.00, 0.80],\n    [0.82, 0.82, 0.81, 0.82, 0.77, 0.75, 0.79, 0.80, 1.00]\n])\n\nlabels = ['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi', 'ar', 'zh']\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add colorbar\ncbar = fig.colorbar(cax, ticks=[0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00])\ncbar.ax.set_yticklabels(['0.65', '0.70', '0.75', '0.80', '0.85', '0.90', '0.95', '1.00'])\n\n# Set axis labels\nax.set_xticks(np.arange(len(labels)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(labels)\nax.set_yticklabels(labels)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(labels)):\n    for j in range(len(labels)):\n        text = ax.text(j, i, f'{data[i, j]:.2f}',\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title('Correlation Coefficients')\nplt.show()", "idx": "heatmap_7", "width": 10.0, "height": 8.0}
{"file": "3d_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = np.array([2010, 2012, 2014, 2016, 2018])\npublic_schools = np.array([0.7, 0.65, 0.6, 0.55, 0.5])\nprivate_schools = np.array([0.4, 0.35, 0.3, 0.25, 0.2])\n\n# Create a 3D figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Bar width\nwidth = 0.4\n\n# Positions for the bars\nxpos_public = years - width/2\nxpos_private = years + width/2\n\n# Plotting the bars\nax.bar(xpos_public, public_schools, width, zdir='y', color='skyblue', label='Public Schools')\nax.bar(xpos_private, private_schools, width, zdir='y', color='orange', label='Private Schools')\n\n# Setting the x, y, z axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\n# Setting the y-ticks to correspond to the type of schools\nax.set_yticks([2012, 2016])  # Centering the ticks between the bars\nax.set_yticklabels(['Public Schools', 'Private Schools'])\n\n# Setting the x-ticks to correspond to the years\nax.set_xticks(years)\n\n# Setting the z-axis limit\nax.set_zlim(0, 0.8)\n\n# Adding a legend\nax.legend()\n\n# Display the plot\nplt.show()", "idx": "3d_13", "width": 8.0, "height": 6.0}
{"file": "scatter_18", "code": "import matplotlib.pyplot as plt\n\n# Sample data for Day 1 and Day 2\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [110, 108, 105, 103, 100, 98, 95, 93, 90, 88]\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [85, 87, 89, 91, 94, 96, 99, 101, 104, 106]\n\n# Create the plot with the specified figure size\nplt.figure(figsize=(6.0, 6.0))\n\n# Plot the data for Day 1 and Day 2\nplt.scatter(x1, y1, color='blue', label='Day 1')\nplt.scatter(x2, y2, color='orange', label='Day 2')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "scatter_18", "width": 6.0, "height": 6.0}
{"file": "bar_10", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [35, 25, 45, 55, 50, 50, 55, 50, 55, 40]\n\n# Create the bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, values, color='skyblue')\n\n# Set the title and labels\nplt.title('Accuracy (%)')\nplt.xlabel('Categories')\nplt.ylabel('Accuracy (%)')\n\n# Show the plot\nplt.show()", "idx": "bar_10", "width": 8.0, "height": 6.0}
{"file": "HR_19", "code": "import matplotlib.pyplot as plt\n\n# Data for Player A and Player B\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\ngames = ['I', 'II', 'III', 'IV', 'V']\n\n# Set the figure size as specified\nplt.figure(figsize=(7.0, 5.0))\n\n# Width of a bar\nbar_width = 0.35\n\n# Positions of the bars on the x-axis\nr1 = range(len(player_a_scores))\nr2 = [x + bar_width for x in r1]\n\n# Plotting the bars\nplt.bar(r1, player_a_scores, width=bar_width, color='lightgrey', edgecolor='black', label='Player A')\nplt.bar(r2, player_b_scores, width=bar_width, color='green', edgecolor='black', label='Player B')\n\n# Adding the text on top of the bars\nfor i in range(len(r1)):\n    plt.text(r1[i], player_a_scores[i] + 1, str(player_a_scores[i]), ha='center')\n    plt.text(r2[i], player_b_scores[i] + 1, str(player_b_scores[i]), ha='center')\n\n# General layout\nplt.xticks([r + bar_width/2 for r in range(len(player_a_scores))], games)\nplt.ylabel('Score')\nplt.title('Scores by number of game and players')\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "HR_19", "width": 7.0, "height": 5.0}
{"file": "errorbar_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Best-of-Three', 'Initial Distribution', '0.125 Parameter-Valued Distribution', \n              'Final Distribution with GPT-3.5-Turbo', 'Final Distribution with GPT-4-Turbo']\nmeans = [0.15, 0.35, 0.45, 0.55, 0.65]\nerrors = [0.05, 0.1, 0.1, 0.1, 0.1]\n\n# Plotting the bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.barh(categories, means, xerr=errors, align='center', color='skyblue', ecolor='black', capsize=5)\n\n# Adding the vertical line\nax.axvline(x=0.675, color='red', linestyle='--', label='ToT (0.675)')\n\n# Setting labels and title\nax.set_xlabel('Objective Value')\nax.set_title('Mini Crosswords Performance')\n\n# Adding the legend\nax.legend()\n\n# Inverting the y-axis to have the first category at the bottom\nax.invert_yaxis()\n\n# Show the plot\nplt.show()", "idx": "errorbar_7", "width": 10.0, "height": 6.0}
{"file": "CB_27", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [np.random.normal(80, 10, 100), np.random.normal(85, 15, 100),\n                  np.random.normal(90, 20, 100), np.random.normal(70, 5, 100)]\nmedian_time = [np.median(data) for data in time_to_market]\n\n# Create the boxplot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbp = ax.boxplot(time_to_market, patch_artist=True, medianprops=dict(color='magenta', linewidth=2))\n\n# Set colors for each box\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Plot median time to market\nax.plot(brands, median_time, color='black', marker='*', markersize=12, label='Median Time to Market')\n\n# Customize the plot\nax.set_title('Time to Market (days)')\nax.set_ylabel('Time to Market (days)')\nax.set_xticklabels(brands)\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "CB_27", "width": 10.0, "height": 6.0}
{"file": "errorbar_14", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\nvalues = [0.15, 0.17, 0.12, 0.10, 0.07, 0.03, -0.02, -0.01]\nerrors = [0.05, 0.04, 0.03, 0.03, 0.02, 0.02, 0.01, 0.01]\ncolors = ['#1f77b4', '#1f77b4', '#ff7f0e', '#2ca02c', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5)\n\n# Labels and Title\nax.set_ylabel('Posterior accuracy (\u0394 to prompting)')\nax.set_ylim(-0.05, 0.20)\n\n# Show the plot\nplt.show()", "idx": "errorbar_14", "width": 8.0, "height": 6.0}
{"file": "bar_57", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Corporate Profits', 'Real Estate Prices', 'Exchange Rate', 'NASDAQ', 'Inflation Rate', 'Unemployment Rate', 'GDP Growth']\nUS = [20, 35, 30, 35, 27, 32, 40]\nChina = [25, 32, 34, 20, 25, 30, 45]\nBrazil = [15, 20, 25, 10, 22, 28, 30]\nEU = [10, 15, 20, 5, 12, 18, 25]\nIndia = [30, 40, 45, 50, 35, 40, 55]\n\nbarWidth = 0.15\nr1 = np.arange(len(US))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\nr5 = [x + barWidth for x in r4]\n\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.barh(r1, US, color='red', height=barWidth, edgecolor='grey', label='US')\nax.barh(r2, China, color='green', height=barWidth, edgecolor='grey', label='China')\nax.barh(r3, Brazil, color='blue', height=barWidth, edgecolor='grey', label='Brazil')\nax.barh(r4, EU, color='orange', height=barWidth, edgecolor='grey', label='EU')\nax.barh(r5, India, color='lightgreen', height=barWidth, edgecolor='grey', label='India')\n\n# Add the category names as y-axis labels\nax.set_yticks([r + barWidth for r in range(len(US))])\nax.set_yticklabels(categories)\n\n# Add x-axis label\nax.set_xlabel('Values', fontweight='bold')\n\n# Create legend & Show graphic\nax.legend()\nplt.show()", "idx": "bar_57", "width": 8.0, "height": 5.0}
{"file": "3d_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data\n_x = np.arange(4)\n_y = np.arange(3)\n_xx, _yy = np.meshgrid(_x, _y)\nx, y = _xx.ravel(), _yy.ravel()\ntop = x + y\nbottom = np.zeros_like(top)\nwidth = depth = 1\n\n# Plot\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Color mapping\ncolors = plt.cm.viridis(top / max(top))\n\n# Bar chart\nax.bar3d(x, y, bottom, width, depth, top, shade=True, color=colors)\n\n# Color bar\nmappable = plt.cm.ScalarMappable(cmap='viridis')\nmappable.set_array(top)\nplt.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('X axis')\nax.set_ylabel('Y axis')\nax.set_zlabel('Z axis')\n\nplt.show()", "idx": "3d_7", "width": 8.0, "height": 8.0}
{"file": "density_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Generate random data for demonstration purposes\nnp.random.seed(0)\ndata = np.random.randn(1000)\n\n# Create a KDE plot\nplt.figure(figsize=(8.0, 4.0))\nsns.kdeplot(data, shade=True, color=\"teal\", alpha=0.5)\n\n# Set the title and labels\nplt.title('KDE Plot of Spearman Coefficient Distribution')\nplt.xlabel('Spearman Coefficient')\nplt.ylabel('Density')\n\n# Show the plot\nplt.show()", "idx": "density_3", "width": 8.0, "height": 4.0}
{"file": "radar_16", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for each company\nlabels=np.array(['USA', 'Brazil', 'India', 'China', 'Europe'])\napple_data = np.array([86.4, 80.9, 85.2, 78.7, 85.3])\nsamsung_data = np.array([76.1, 74.9, 71.9, 66.1, 66.4])\nhuawei_data = np.array([54.5, 69.9, 64.1, 69.7, 50.8])\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\napple_data = np.concatenate((apple_data,[apple_data[0]]))\nsamsung_data = np.concatenate((samsung_data,[samsung_data[0]]))\nhuawei_data = np.concatenate((huawei_data,[huawei_data[0]]))\nangles += angles[:1]\n\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([20, 40, 60, 80], [\"20\", \"40\", \"60\", \"80\"], color=\"grey\", size=7)\nplt.ylim(0,100)\n\n# Plot data\nax.plot(angles, apple_data, color='orange', linewidth=2, linestyle='solid', label='Apple')\nax.fill(angles, apple_data, color='orange', alpha=0.25)\n\nax.plot(angles, samsung_data, color='blue', linewidth=2, linestyle='solid', label='Samsung')\nax.fill(angles, samsung_data, color='blue', alpha=0.25)\n\nax.plot(angles, huawei_data, color='green', linewidth=2, linestyle='solid', label='Huawei')\nax.fill(angles, huawei_data, color='green', alpha=0.25)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Add data labels\nfor angle, apple, samsung, huawei in zip(angles, apple_data, samsung_data, huawei_data):\n    ax.text(angle, apple, str(apple), horizontalalignment='left', size=8, color='orange')\n    ax.text(angle, samsung, str(samsung), horizontalalignment='left', size=8, color='blue')\n    ax.text(angle, huawei, str(huawei), horizontalalignment='left', size=8, color='green')\n\nplt.show()", "idx": "radar_16", "width": 8.0, "height": 7.0}
{"file": "bar_59", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Parameter', 'Method Declaration', 'Variable Declaration', 'Conditional Statement', 'Loop', 'Argument', 'External Class']\ndifferences = [-50, -30, -10, 5, 20, 60, 80]\ncolors = ['red' if x < 0 else 'green' for x in differences]\n\n# Create figure and plot\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nbars = ax.barh(categories, differences, color=colors)\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    label_x_pos = bar.get_width() - 5 if width < 0 else bar.get_width() + 5\n    ax.text(label_x_pos, bar.get_y() + bar.get_height()/2, f'{width}%', va='center', ha='right' if width < 0 else 'left')\n\n# Set labels and title\nax.set_xlabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Create twin axis for positive and negative differences\nax_pos = ax.twinx()\nax_neg = ax.twinx()\n\n# Set the limits for the twin axes\nax_pos.set_ylim(0, 80)\nax_neg.set_ylim(-80, 0)\n\n# Set the labels for the twin axes\nax_pos.set_ylabel('Positive Differences')\nax_neg.set_ylabel('Negative Differences')\n\n# Adjust the position of the negative axis\nax_neg.spines['right'].set_position(('outward', 60))\n\n# Remove the default ticks and labels for the twin axes\nax_pos.set_yticks([])\nax_neg.set_yticks([])\n\n# Show grid\nax.grid(True)\n\nplt.show()", "idx": "bar_59", "width": 10.0, "height": 5.0}
{"file": "bar_79", "code": "import matplotlib.pyplot as plt\n\n# Data for each question\nstrongly_disagree = [26, 13, 19, 33, 40]\ndisagree = [32, 10, 12, 15, 14]\nneither = [17, 29, 15, 9, 13]\nagree = [15, 22, 37, 11, 29]\nstrongly_agree = [10, 22, 35, 32, 21]\n\n# Positions of the bars on the x-axis\nind = range(len(strongly_disagree))\n\n# Size of the figure\nplt.figure(figsize=(10.0, 6.0))\n\n# Plotting\nplt.bar(ind, strongly_disagree, color='blue', edgecolor='black', label='Strongly disagree')\nplt.bar(ind, disagree, bottom=strongly_disagree, color='green', edgecolor='black', label='Disagree')\nplt.bar(ind, neither, bottom=[i+j for i,j in zip(strongly_disagree, disagree)], color='grey', edgecolor='black', label='Neither agree nor disagree')\nplt.bar(ind, agree, bottom=[i+j+k for i,j,k in zip(strongly_disagree, disagree, neither)], color='orange', edgecolor='black', label='Agree')\nplt.bar(ind, strongly_agree, bottom=[i+j+k+l for i,j,k,l in zip(strongly_disagree, disagree, neither, agree)], color='pink', edgecolor='black', label='Strongly agree')\n\n# Adding the text labels on the bars\nfor i in range(len(ind)):\n    plt.text(i, strongly_disagree[i]/2, f\"{strongly_disagree[i]}%\", ha='center', va='center')\n    plt.text(i, strongly_disagree[i] + disagree[i]/2, f\"{disagree[i]}%\", ha='center', va='center')\n    plt.text(i, strongly_disagree[i] + disagree[i] + neither[i]/2, f\"{neither[i]}%\", ha='center', va='center')\n    plt.text(i, strongly_disagree[i] + disagree[i] + neither[i] + agree[i]/2, f\"{agree[i]}%\", ha='center', va='center')\n    plt.text(i, strongly_disagree[i] + disagree[i] + neither[i] + agree[i] + strongly_agree[i]/2, f\"{strongly_agree[i]}%\", ha='center', va='center')\n\n# Customizing the plot\nplt.ylabel('Responses')\nplt.title('Survey Responses by Question')\nplt.xticks(ind, ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5'])\nplt.yticks(range(0, 91, 10))\nplt.axhline(0, color='grey', linewidth=0.8)\nplt.legend(loc='upper left', bbox_to_anchor=(1,1), title='Responses')\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_79", "width": 10.0, "height": 6.0}
{"file": "line_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nn = np.array([0, 0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent = np.array([0, 1, 2, 6, 4, 2, 1, 0])\norganization = np.array([0, 1, 2, 3, 2, 1, 0.5, 0.25])\nlanguage = np.array([0, 0.5, 1, 2, 3, 2, 1, 0.5])\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(n, content, label='Content', color='blue')\nax.plot(n, organization, label='Organization', color='orange')\nax.plot(n, language, label='Language', color='green')\n\n# Set the labels and title\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Performance Gain by Category')\n\n# Set the x-axis to be logarithmic\nax.set_xscale('log')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "line_10", "width": 8.0, "height": 6.0}
{"file": "bar_42", "code": "import matplotlib.pyplot as plt\n\n# Data\ndatasets = ['AI2-SciStories', 'PROST', 'ARC-easy', 'COMET (Task A)', 'COPA', 'OpenBookQA', 'SciQ', 'NumSense', 'CoQA', 'CommonsenseQA', 'ComQA', 'QuARTz', 'CycIC', 'Winogrande', 'CODAH', 'WSC', 'ARC-Challenge', 'SocialIQA', 'CommonsenseQA', 'HellaSWAG-wikiHow', 'AI2-SciStories', 'Winogrande', 'PIQA', 'QuaRel', 'SCT', 'alphaNLI', 'SWAG', 'HellaSWAG-actnet']\ndelta_acc = [-7, -6, -5, -4, -3, -2, -1, -0.5, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# Colors based on delta_acc values\ncolors = ['blue' if x < -1 else 'orange' if -1 <= x <= 1 else 'green' for x in delta_acc]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.barh(datasets, delta_acc, color=colors)\n\n# Labels and Title\nax.set_xlabel('\u0394Acc (with Stories) - \u0394Acc (without Rules)')\nax.set_title('Model = Vicuna')\n\n# Custom legend\nlegend_elements = [plt.Rectangle((0,0),1,1, color='blue', label='\u0394Acc < -1'),\n                   plt.Rectangle((0,0),1,1, color='orange', label='-1 <= \u0394Acc <= 1'),\n                   plt.Rectangle((0,0),1,1, color='green', label='\u0394Acc > 1')]\nax.legend(handles=legend_elements, loc='lower right')\n\n# Show plot\nplt.show()", "idx": "bar_42", "width": 8.0, "height": 5.0}
{"file": "multidiff_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for histogram\nreturns = np.random.normal(0, 0.1, 1000)\ngains = returns[returns >= 0]\nlosses = returns[returns < 0]\n\n# Sample data for scatter plot\ntech_stocks = np.random.rand(50, 2)\nenergy_stocks = np.random.rand(50, 2) - 1\n\n# Create figure with specific size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Create histogram subplot\nax1 = fig.add_subplot(1, 2, 1)\nax1.hist(gains, bins=30, color='green', alpha=0.5, label='Gains')\nax1.hist(losses, bins=30, color='red', alpha=0.5, label='Losses')\nax1.set_title('Histogram of Stock Returns')\nax1.set_xlabel('Returns')\nax1.set_ylabel('Frequency')\nax1.legend()\n\n# Create scatter plot subplot\nax2 = fig.add_subplot(1, 2, 2)\nax2.scatter(tech_stocks[:, 0], tech_stocks[:, 1], color='yellow', label='Tech Stocks')\nax2.scatter(energy_stocks[:, 0], energy_stocks[:, 1], color='blue', label='Energy Stocks')\nax2.set_title('Investment Clusters')\nax2.set_xlabel('X-axis')\nax2.set_ylabel('Y-axis')\nax2.legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "multidiff_3", "width": 10.0, "height": 5.0}
{"file": "bar_38", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ncorrect = [20, 30, 40, 80, 70, 50]\ncounterfeit_passing = [10, 20, 30, 60, 50, 40]\ncounterfeit_failing = [5, 10, 15, 30, 25, 20]\ncounterfeit_confused = [2, 5, 7, 15, 12, 10]\n\n# X-axis positions\nx = np.arange(len(categories))\n\n# Bar width\nbar_width = 0.2\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nrects1 = ax.bar(x - bar_width*1.5, correct, bar_width, label='Correct')\nrects2 = ax.bar(x - bar_width/2, counterfeit_passing, bar_width, label='Counterfeit (Test-Passing)')\nrects3 = ax.bar(x + bar_width/2, counterfeit_failing, bar_width, label='Counterfeit (Test-Failing)')\nrects4 = ax.bar(x + bar_width*1.5, counterfeit_confused, bar_width, label='Counterfeit (Test-Failing), Confused')\n\n# Labels, title and custom x-axis tick labels\nax.set_ylabel('Accuracy')\nax.set_title('LeetCode, DS-6.7b')\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.legend()\n\n# Display the plot\nplt.show()", "idx": "bar_38", "width": 7.0, "height": 5.0}
{"file": "scatter_11", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nnames = ['AR', 'LSTMAD-\u03b2', 'LSTMAD-\u03b1', 'AE', 'FITS', 'Donut']\nx = [5, 15, 25, 35, 45, 55]\ny = [0.87, 0.8, 0.73, 0.7, 0.65, 0.6]\nsizes = [300, 400, 500, 600, 700, 800]\ncolors = ['purple', 'blue', 'green', 'yellow', 'orange', 'red']\n\n# Create the figure and plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nscatter = ax.scatter(x, y, s=sizes, c=colors, alpha=0.5)\n\n# Add labels to the points\nfor i, name in enumerate(names):\n    ax.annotate(name, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the title and labels\nax.set_title('Model Comparison')\nax.set_xlabel('Inference Time (seconds)')\nax.set_ylabel('Average Score')\n\n# Set the x and y axis limits\nax.set_xlim(0, 60)\nax.set_ylim(0.5, 0.9)\n\n# Show grid\nax.grid(True)\n\n# Show the plot\nplt.show()", "idx": "scatter_11", "width": 8.0, "height": 6.0}
{"file": "pie_12", "code": "import matplotlib.pyplot as plt\n\n# Data for the two pie charts\nsizes_lora = [15.7, 19.9, 33.0, 31.4]\nsizes_qlora = [10.5, 6.3, 28.4, 54.8]\nlabels = ['Model', 'Optimizer', 'Gradient', 'Unused']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0.1, 0.1, 0.1)  # explode all slices\n\n# Create a figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# First pie chart for LoRA\nax1.pie(sizes_lora, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax1.set_title('LoRA')\n\n# Second pie chart for QLoRA\nax2.pie(sizes_qlora, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax2.set_title('QLoRA')\n\n# Adjust layout to make room for the title\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "pie_12", "width": 10.0, "height": 4.0}
{"file": "HR_24", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\n\n# Create a mesh of points in polar coordinates\nr = np.linspace(0.1, 1.0, 100)\ntheta = np.linspace(0, 2*np.pi, 100)\nr, theta = np.meshgrid(r, theta)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Create a Delaunay triangulation of these points\ntriang = tri.Triangulation(x.flatten(), y.flatten())\n\n# Create a function to map (x, y) to a scalar value\nz = np.sin(4*theta) * r\n\n# Plot the triangulation with flat shading\nplt.figure(figsize=(8.0, 6.0))\nplt.tripcolor(triang, z.flatten(), shading='flat', cmap='viridis')\n\n# Add a colorbar\nplt.colorbar()\n\n# Set the title\nplt.title('tricolor of Delaunay triangulation, flat shading')\n\n# Show the plot\nplt.show()", "idx": "HR_24", "width": 8.0, "height": 6.0}
{"file": "errorbar_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nnumber_of_experts = [1, 2, 4, 8]\nbaseline_scores = [6, 6, 6, 6]\nsoftmoe_unchanged_scores = [5.5, 6.5, 7, 6.5]\nsoftmoe_numexperts_scores = [6, 6.5, 6.5, 6]\n\n# Error bars\nbaseline_errors = [0.5, 0.5, 0.5, 0.5]\nsoftmoe_unchanged_errors = [0.5, 0.5, 0.5, 0.5]\nsoftmoe_numexperts_errors = [0.5, 0.5, 0.5, 0.5]\n\n# Bar width\nbar_width = 0.3\n\n# Positions of the bars on the x-axis\nr1 = np.arange(len(number_of_experts))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Plotting the bars\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nplt.bar(r1, softmoe_unchanged_scores, color='green', width=bar_width, edgecolor='black', yerr=softmoe_unchanged_errors, capsize=7, label='SoftMoE (unchanged)')\nplt.bar(r2, softmoe_numexperts_scores, color='purple', width=bar_width, edgecolor='black', yerr=softmoe_numexperts_errors, capsize=7, label='SoftMoE (\u00b1 NumExperts)')\n\n# Plotting the baseline\nplt.plot([-0.5, max(r3)+0.5], [baseline_scores[0], baseline_scores[0]], color='blue', linestyle='dashed', linewidth=2, label='Baseline')\n\n# General layout\nplt.xticks([r + bar_width for r in range(len(number_of_experts))], number_of_experts)\nplt.ylabel('IQM Human Normalized Score')\nplt.xlabel('Number of experts')\nplt.legend()\nplt.title('Expert dimension')\n\n# Show the plot\nplt.show()", "idx": "errorbar_10", "width": 8.0, "height": 6.0}
{"file": "line_35", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nquantization_error = np.array([1e-7, 1e-6, 1e-5, 1e-4])\nsearch_window_ratio_empirical = np.array([1, 2, 3, 6])\nsearch_window_ratio_MLVQ_4x8_10 = np.array([1, 2, 3, 6])\nsearch_window_ratio_MLVQ_4x8_100 = np.array([1, 2, 3, 6])\nsearch_window_ratio_MLVQ_4x8_256 = np.array([1, 2, 3, 6])\nsearch_window_ratio_MLVQ_4x8 = np.array([1, 2, 3, 6])\n\n# Plotting the data\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(quantization_error, search_window_ratio_empirical, 'o-', label='empirical relat. (B2=8.0)', color='blue')\nplt.plot(quantization_error, search_window_ratio_MLVQ_4x8_10, 's--', label='M-LVQ-4x8-10', color='orange')\nplt.plot(quantization_error, search_window_ratio_MLVQ_4x8_100, 's--', label='M-LVQ-4x8-100', color='green')\nplt.plot(quantization_error, search_window_ratio_MLVQ_4x8_256, 's--', label='M-LVQ-4x8-256', color='red')\nplt.plot(quantization_error, search_window_ratio_MLVQ_4x8, 's--', label='M-LVQ-4x8', color='purple')\n\n# Setting the x-axis to log scale\nplt.xscale('log')\n\n# Adding labels and title\nplt.xlabel('Quantization error')\nplt.ylabel('Search window size ratio')\nplt.title('Search Window Size Ratio vs Quantization Error')\n\n# Adding legend\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "line_35", "width": 6.0, "height": 4.0}
{"file": "line_4", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\nx = [224, 128, 64, 32]\ny1 = [70, 50, 40, 30]\ny2 = [60, 40, 30, 20]\ny3 = [80, 60, 50, 40]\ny4 = [70, 50, 40, 30]\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9.0, 4.0))\n\n# First subplot - Serial\nax1.plot(x, y1, 'o-', color='orange', label='ImageNet-1k')\nax1.plot(x, y2, 'o--', color='orange', label='ImageNet-C/P (Fog)')\nax1.set_title('Serial (n=8, m=1)')\nax1.set_xlabel('Resolution')\nax1.set_ylabel('Top-1 Acc. (%)')\nax1.legend(loc='lower left')\nax1.annotate('39.1%', xy=(224, 70), xytext=(200, 55), arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Second subplot - Parallel\nax2.plot(x, y3, 'o-', color='blue', label='ImageNet-1k')\nax2.plot(x, y4, 'o--', color='blue', label='ImageNet-C/P (Fog)')\nax2.set_title('Parallel (n=2, m=4)')\nax2.set_xlabel('Resolution')\nax2.set_ylabel('Top-1 Acc. (%)')\nax2.legend(loc='lower left')\nax2.annotate('22.9%', xy=(224, 80), xytext=(200, 65), arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "line_4", "width": 9.0, "height": 4.0}
{"file": "bar_64", "code": "import matplotlib.pyplot as plt\n\n# Data\nregions = ['West', 'East', 'South', 'North']\nco2 = [11.59, 17.38, 26.15, 22.89]\npm = [40.44, 25.36, 39.63, 32.84]\nso2 = [54.46, 56.03, 48.23, 65.49]\nno2 = [100.45, 92.15, 37.12, 32.19]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Bar positions\nbar_positions = range(len(regions))\n\n# Bar widths\nbar_width = 0.2\n\n# Plotting the bars\nax.barh(bar_positions, co2, color='skyblue', edgecolor='black', height=bar_width, label='CO2 (ppm)')\nax.barh([p + bar_width for p in bar_positions], pm, color='salmon', edgecolor='black', height=bar_width, label='PM (\u00b5g/m3)')\nax.barh([p + 2*bar_width for p in bar_positions], so2, color='purple', edgecolor='black', height=bar_width, label='SO2 (\u00b5g/m3)')\nax.barh([p + 3*bar_width for p in bar_positions], no2, color='teal', edgecolor='black', height=bar_width, label='NO2 (\u00b5g/m3)', hatch='/')\n\n# Adding the values on top of the bars\nfor i in range(len(regions)):\n    ax.text(co2[i] + 1, i, str(co2[i]), va='center', ha='center', color='black', fontsize=10)\n    ax.text(pm[i] + 1, i + bar_width, str(pm[i]), va='center', ha='center', color='black', fontsize=10)\n    ax.text(so2[i] + 1, i + 2*bar_width, str(so2[i]), va='center', ha='center', color='black', fontsize=10)\n    ax.text(no2[i] + 1, i + 3*bar_width, str(no2[i]), va='center', ha='center', color='black', fontsize=10)\n\n# Setting the y-axis labels\nax.set_yticks([p + 1.5*bar_width for p in bar_positions])\nax.set_yticklabels(regions)\n\n# Setting the x-axis label\nax.set_xlabel('Concentration')\n\n# Setting the title\nax.set_title('Air Quality Metrics by Region')\n\n# Adding the legend\nax.legend(loc='upper right')\n\n# Inverting the y-axis to have the first region at the top\nax.invert_yaxis()\n\n# Display the plot\nplt.show()", "idx": "bar_64", "width": 10.0, "height": 7.0}
{"file": "bar_95", "code": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['BactrianX_EN', 'LimaxX_DE', 'BactrianX_FR', 'LimaxX_IT', 'BactrianX_ES']\nimprovements = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovements2 = [-1.0, 0.3, 3.4, -3.3, -2.7]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nhatches = ['/', '\\\\', '|', '-', '+']\n\n# Plot\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10.0, 6.0))\nax1.bar(models, improvements, color=colors, hatch=hatches)\nax2.bar(models, improvements2, color=colors, hatch=hatches)\n\n# Add data labels\nfor i, v in enumerate(improvements):\n    ax1.text(i, v + 0.1, str(v), color='black', ha='center')\nfor i, v in enumerate(improvements2):\n    ax2.text(i, v - 0.3, str(v), color='black', ha='center')\n\n# Set titles and labels\nax1.set_title('Model Performance Improvement by Language')\nax1.set_ylabel('Improvement [%]')\nax2.set_ylabel('Improvement [%]')\nax2.set_xlabel('Model with Language')\n\n# Customize ticks and spines\nax1.set_xticks(range(len(models)))\nax1.set_xticklabels([])\nax2.set_xticks(range(len(models)))\nax2.set_xticklabels(models, rotation=45, ha='right')\n\n# Add legend\nax1.legend(['EN', 'DE', 'FR', 'IT', 'ES'], title='Language', bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_95", "width": 10.0, "height": 6.0}
{"file": "errorbar_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nroles = ['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\nduration_means = [84.97, 102.67, 67.17, 78.22, 85.17]\nduration_std = [20, 15, 10, 15, 10]\ntokens_means = [449.33, 780.67, 547.39, 612.99, 618.52]\ntokens_std = [100, 150, 100, 100, 100]\n\n# Set the figure size\nplt.figure(figsize=(10.0, 4.0))\n\n# Subplot for duration\nplt.subplot(1, 2, 1)\nplt.bar(roles, duration_means, yerr=duration_std, color=['lightgreen', 'lightblue', 'lightblue', 'lightblue', 'lightblue'], capsize=5)\nplt.ylabel('Duration (s)')\nplt.title('(a) Speak duration of roles')\nfor i, v in enumerate(duration_means):\n    plt.text(i, v + 5, str(v), color='black', ha='center')\n\n# Subplot for tokens\nplt.subplot(1, 2, 2)\nplt.bar(roles, tokens_means, yerr=tokens_std, color=['lightgreen', 'lightblue', 'lightblue', 'lightblue', 'lightblue'], capsize=5)\nplt.ylabel('Tokens')\nplt.title('(b) Speak tokens of roles')\nfor i, v in enumerate(tokens_means):\n    plt.text(i, v + 20, str(v), color='black', ha='center')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "errorbar_4", "width": 10.0, "height": 4.0}
{"file": "bar_40", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Parameter', 'Method Declaration', 'Variable Declaration', 'Conditional Statement', 'Loop', 'Conditional Block', 'Argument', 'External Class', 'Variable', 'Return', 'External Variable/Method', 'Method Call', 'Exception Handling', 'Operation', 'Comment', 'Operator', 'Assignment', 'Literal']\nvalues = [-40, -30, -20, -10, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\n\n# Colors for the bars\ncolors = ['red' if v < 0 else 'teal' for v in values]\n\n# Create horizontal bar chart\nplt.figure(figsize=(10.0, 5.0))\nbars = plt.barh(categories, values, color=colors)\n\n# Add title and labels\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nplt.xlabel('Difference (%)')\nplt.ylabel('Semantic Category')\n\n# Invert y-axis to have the first category at the top\nplt.gca().invert_yaxis()\n\n# Show grid\nplt.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()", "idx": "bar_40", "width": 10.0, "height": 5.0}
{"file": "errorbar_19", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar charts\ncategories = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\ncity_a = [50, 70, 80, 60]\ncity_b = [60, 65, 75, 55]\ncity_c = [55, 75, 85, 65]\nerror = [5, 5, 5, 5]\n\n# Colors for the bars\ncolors = ['purple', 'blue', 'red', 'yellow']\n\n# Create subplots with shared y-axis\nfig, axs = plt.subplots(3, 1, figsize=(10.0, 9.0), sharey=True)\n\n# Plot for City A\naxs[0].bar(categories, city_a, color=colors, yerr=error, capsize=5)\naxs[0].set_title('(a) City A')\n\n# Plot for City B\naxs[1].bar(categories, city_b, color=colors, yerr=error, capsize=5)\naxs[1].set_title('(b) City B')\n\n# Plot for City C\naxs[2].bar(categories, city_c, color=colors, yerr=error, capsize=5)\naxs[2].set_title('(c) City C')\n\n# Set the y-axis label\nfor ax in axs:\n    ax.set_ylabel('Percentage')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "errorbar_19", "width": 10.0, "height": 9.0}
{"file": "quiver_3", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\n# Create a meshgrid for the background vector field\nY, X = np.mgrid[0:0.7:100j, 0:0.7:100j]\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\n\n# Create some sample data for the lines\nx = np.linspace(0, 0.6, 100)\ny_train = np.sqrt(1 - (1 - x**2))\ny_test = np.sqrt(1 - (1 - x**2)) - 0.1\ny_sindy_train = np.sqrt(1 - (1 - x**2)) + 0.05\ny_sindy_test = np.sqrt(1 - (1 - x**2)) - 0.15\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the vector field\ncolor = np.log(np.sqrt(U**2 + V**2))\nax.streamplot(X, Y, U, V, color=color, linewidth=1, cmap='autumn', density=2, arrowstyle='->', arrowsize=1.5)\n\n# Plot the sample data lines\nax.plot(x, y_train, label='Train Sample', color='orange')\nax.plot(x, y_test, label='Test Sample', color='green')\nax.plot(x, y_sindy_train, label='SINDy Train', color='blue')\nax.plot(x, y_sindy_test, label='SINDy Test', color='black')\n\n# Create a custom legend\ncustom_lines = [plt.Line2D([0], [0], color='red', lw=4),\n                plt.Line2D([0], [0], color='purple', lw=4),\n                plt.Line2D([0], [0], color='orange', lw=4),\n                plt.Line2D([0], [0], color='green', lw=4),\n                plt.Line2D([0], [0], color='blue', lw=4),\n                plt.Line2D([0], [0], color='black', lw=4)]\nax.legend(custom_lines, ['True Field', 'SINDy Learned Field', 'Train Sample', 'Test Sample', 'SINDy Train', 'SINDy Test'])\n\n# Set labels\nax.set_xlabel('X1')\nax.set_ylabel('X2')\n\n# Show the plot\nplt.show()", "idx": "quiver_3", "width": 8.0, "height": 6.0}
{"file": "line_67", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nnum_microphones = [2, 3, 4, 5, 6, 7, 8]\nwer_ihm = [8, 7, 6.5, 6, 5.5, 5, 4.5]\nwer_sdm = [7, 6, 5.5, 5, 4.5, 4, 3.5]\nami_wer_ihm = [28, 26, 25, 24, 23, 22, 21]\nami_wer_sdm = [26, 24, 23, 22, 21, 20, 19]\n\n# Create figure and axis objects\nfig, ax1 = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot WER data\nax1.plot(num_microphones, wer_ihm, 'o--', color='blue', label='IHM')\nax1.plot(num_microphones, wer_sdm, 'o-', color='orange', label='SDM')\n\n# Set axis labels and title\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER(%)', color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Create a second y-axis for the AMI WER data\nax2 = ax1.twinx()\nax2.plot(num_microphones, ami_wer_ihm, 'o--', color='blue', alpha=0.3)  # Lighter color for secondary axis\nax2.plot(num_microphones, ami_wer_sdm, 'o-', color='orange', alpha=0.3)  # Lighter color for secondary axis\nax2.set_ylabel('AMI WER(%)', color='orange')\nax2.tick_params(axis='y', labelcolor='orange')\n\n# Add a legend\nax1.legend(loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "line_67", "width": 6.0, "height": 5.0}
{"file": "errorbar_9", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Syntax: Tagging, Chunking and Parsing', 'Discourse and Pragmatics', 'Information Extraction', 'Machine Learning for NLP', 'Information Retrieval and Text Mining', 'Phonology, Morphology and Word Segmentation', 'Computational Social Science and Social Media']\nvalues = [-3.0, -2.5, -2.0, -2.75, -3.25, -2.25, -1.75]\nerrors = [0.25, 0.15, 0.2, 0.1, 0.3, 0.2, 0.15]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.barh(categories, values, xerr=errors, align='center', color='purple', ecolor='black', capsize=5)\nax.set_xlabel('A')\nax.set_title('Your Chart Title Here')\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(-3.5, -1.5)\n\nplt.show()", "idx": "errorbar_9", "width": 8.0, "height": 8.0}
{"file": "violin_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\ndata1 = [np.random.normal(0, std, 100) for std in range(1, 6)]\ndata2 = [np.random.normal(0, std, 100) for std in range(1, 6)]\n\n# Create a figure with two subplots and set the size\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 4.0))\n\n# First subplot - Scoring Evaluation\naxs[0].violinplot(data1)\naxs[0].set_title('Scoring Evaluation')\naxs[0].set_ylabel('Length Distribution')\naxs[0].set_xticks([1, 2, 3, 4, 5])\naxs[0].set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Second subplot - Pair Comparison\naxs[1].violinplot(data2)\naxs[1].set_title('Pair Comparison')\naxs[1].set_ylabel('Length Distribution')\naxs[1].set_xticks([1, 2, 3])\naxs[1].set_xticklabels(['Winner', 'Losser Preference', 'Tie'])\n\n# Custom legend\nimport matplotlib.patches as mpatches\ngreen_patch = mpatches.Patch(color='green', label='GPT-4V(Vision)')\norange_patch = mpatches.Patch(color='orange', label='Gemini')\nfig.legend(handles=[green_patch, orange_patch], loc='lower center', ncol=2)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "violin_3", "width": 8.0, "height": 4.0}
{"file": "line_66", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.array([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000])\nmodel1_series1 = np.random.uniform(0.2, 1.0, len(iterations))\nmodel1_series2 = np.random.uniform(0.2, 1.0, len(iterations))\nmodel2_series1 = np.random.uniform(0.2, 1.0, len(iterations))\nmodel2_series2 = np.random.uniform(0.2, 1.0, len(iterations))\nmodel3_series1 = np.random.uniform(0.2, 1.0, len(iterations))\nmodel3_series2 = np.random.uniform(0.2, 1.0, len(iterations))\nmodel4_series1 = np.random.uniform(0.2, 1.0, len(iterations))\nmodel4_series2 = np.random.uniform(0.2, 1.0, len(iterations))\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(9.0, 7.0))\n\n# Plot data for each model\naxs[0, 0].plot(iterations, model1_series1, marker='o', color='blue', label='model1 Series 1')\naxs[0, 0].plot(iterations, model1_series2, marker='o', color='magenta', label='model1 Series 2')\naxs[0, 1].plot(iterations, model2_series1, marker='o', color='blue', label='model2 Series 1')\naxs[0, 1].plot(iterations, model2_series2, marker='o', color='magenta', label='model2 Series 2')\naxs[1, 0].plot(iterations, model3_series1, marker='o', color='blue', label='model3 Series 1')\naxs[1, 0].plot(iterations, model3_series2, marker='o', color='magenta', label='model3 Series 2')\naxs[1, 1].plot(iterations, model4_series1, marker='o', color='blue', label='model4 Series 1')\naxs[1, 1].plot(iterations, model4_series2, marker='o', color='magenta', label='model4 Series 2')\n\n# Set titles and labels\naxs[0, 0].set_title('model1 Performance')\naxs[0, 1].set_title('model2 Performance')\naxs[1, 0].set_title('model3 Performance')\naxs[1, 1].set_title('model4 Performance')\nfor ax in axs.flat:\n    ax.set(xlabel='Iterations', ylabel='Success Rate')\n\n# Add legends\naxs[0, 0].legend()\naxs[0, 1].legend()\naxs[1, 0].legend()\naxs[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_66", "width": 9.0, "height": 7.0}
{"file": "pie_9", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Android', 'iOS', 'Web', 'Desktop', 'Other']\nsizes = [41.7, 29.2, 20.0, 6.7, 3.3]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n \n# Plot\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\nplt.title('Platform Usage - Company vs. Project')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()", "idx": "pie_9", "width": 6.0, "height": 6.0}
{"file": "heatmap_25", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the image size\nplt.figure(figsize=(8.0, 6.0))\n\n# Data for the heatmaps\nharvest_data = np.array([\n    [-0.8, 2.4, 2.5, 3.9, 4.0, 4.0],\n    [-2.4, 0.0, 4.0, 1.0, 2.7, 0.0],\n    [-1.1, 2.4, 0.8, 4.3, 1.9, 4.4],\n    [-0.6, 0.0, 0.3, 0.0, 3.1, 0.0],\n    [-0.7, 1.7, 0.6, 2.6, 2.2, 6.2],\n    [-1.3, 1.2, 0.0, 0.0, 0.3, 5.1],\n    [-0.1, 2.0, 0.0, 1.4, 0.9, 6.3]\n])\n\nweekly_sold_data = np.array([\n    [46, 49, 66, 69, 69, 11, 85],\n    [23, 38, 89, 72, 90, 90, 14],\n    [60, 67, 41, 89, 48, 90, 83],\n    [39, 27, 79, 74, 11, 22, 82],\n    [71, 81, 49, 66, 84, 90, 51],\n    [31, 21, 21, 16, 41, 34, 67],\n    [11, 59, 34, 33, 76, 25, 37]\n])\n\ncorrelation_data = np.array([\n    [1.0, -0.23, 0.81, -0.56, 0.65, 0.21, -0.21],\n    [-0.23, 1.0, -0.38, 0.48, -0.38, -0.66, -0.71],\n    [0.81, -0.38, 1.0, -0.15, 0.86, 0.23, -0.25],\n    [-0.56, 0.48, -0.15, 1.0, -0.04, -0.41, -0.44],\n    [0.65, -0.38, 0.86, -0.04, 1.0, 0.05, -0.16],\n    [0.21, -0.66, 0.23, -0.41, 0.05, 1.0, 0.87],\n    [-0.21, -0.71, -0.25, -0.44, -0.16, 0.87, 1.0]\n])\n\n# Create the heatmaps\nplt.subplot(2, 2, 1)\nplt.imshow(harvest_data, cmap='YlOrRd', interpolation='nearest')\nplt.colorbar()\n\nplt.subplot(2, 2, 2)\nplt.imshow(weekly_sold_data, cmap='Purples', interpolation='nearest')\nplt.colorbar()\n\nplt.subplot(2, 2, 3)\nplt.imshow(correlation_data, cmap='coolwarm', interpolation='nearest')\nplt.colorbar()\n\n# Add labels, titles, etc. as needed to match the original picture\n# ...\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "heatmap_25", "width": 8.0, "height": 6.0}
{"file": "bar_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntime = np.arange(0, 50, 10)\ntrot = np.array([0.4, 0.5, 0.6, 0.7, 0.8])\npace = np.array([0.2, 0.15, 0.1, 0.05, 0])\nbound = np.array([0.1, 0.1, 0.1, 0.1, 0.1])\npronk = np.array([0.1, 0.1, 0.1, 0.1, 0.1])\ntransition = np.array([0.2, 0.15, 0.1, 0.05, 0])\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.bar(time, trot, width=5, label='trot', color='green')\nax.bar(time, pace, width=5, bottom=trot, label='pace', color='red')\nax.bar(time, bound, width=5, bottom=trot+pace, label='bound', color='purple')\nax.bar(time, pronk, width=5, bottom=trot+pace+bound, label='pronk', color='brown')\nax.bar(time, transition, width=5, bottom=trot+pace+bound+pronk, label='transition', color='grey')\n\n# Customizing the plot\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.set_xticks(time)\nax.set_yticks(np.arange(0, 1.1, 0.1))\nax.legend()\n\n# Show plot\nplt.show()", "idx": "bar_2", "width": 6.0, "height": 3.0}
{"file": "line_43", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for ogbl-collab\ncollab_categories = ['All', 'MLP', 'GCN', 'NCN', 'NCMC', 'NeoGINN-BUDDY', 'SEAL', 'Node2vec']\ncollab_2022 = [75, 70, 68, 72, 65, 60, 62, 64]\ncollab_2023 = [73, 68, 66, 70, 63, 58, 60, 62]\ncollab_2022_err = [5, 4, 3, 4, 5, 6, 5, 4]\ncollab_2023_err = [4, 3, 2, 3, 4, 5, 4, 3]\n\n# Data for ogbl-ppa\nppa_categories = ['All', 'MLP', 'GCN', 'NCN', 'NCMC', 'NeoGINN-BUDDY', 'SEAL', 'Node2vec']\nppa_2022 = [65, 60, 58, 62, 55, 50, 52, 54]\nppa_2023 = [63, 58, 56, 60, 53, 48, 50, 52]\nppa_2022_err = [5, 4, 3, 4, 5, 6, 5, 4]\nppa_2023_err = [4, 3, 2, 3, 4, 5, 4, 3]\n\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 5.0))\n\n# Plot ogbl-collab results\nax1.errorbar(collab_categories, collab_2022, yerr=collab_2022_err, fmt='o-', color='blue', label='ogbl-collab 2022')\nax1.errorbar(collab_categories, collab_2023, yerr=collab_2023_err, fmt='o-', color='cyan', label='ogbl-collab 2023')\nax1.set_title('ogbl-collab Results')\nax1.set_ylabel('Hits@50')\nax1.legend()\n\n# Plot ogbl-ppa results\nax2.errorbar(ppa_categories, ppa_2022, yerr=ppa_2022_err, fmt='o--', color='orange', label='ogbl-ppa 2022')\nax2.errorbar(ppa_categories, ppa_2023, yerr=ppa_2023_err, fmt='o-', color='gold', label='ogbl-ppa 2023')\nax2.set_title('ogbl-ppa Results')\nax2.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_43", "width": 12.0, "height": 5.0}
{"file": "scatter_15", "code": "import matplotlib.pyplot as plt\n\n# Data for the left plot (Accuracy vs Token Cost)\nleft_x = [50, 40, 30, 20, 10, 0]\nleft_y = [62, 64, 66, 68, 70, 72]\nleft_labels = ['Self-refine', 'CoT(maj@1)', 'DefInt', 'CoT(maj@5)', 'ToT', 'MAD+judge']\nleft_colors = ['green', 'blue', 'pink', 'orange', 'red', 'brown']\n\n# Data for the right plot (Accuracy vs TFLOPS)\nright_x = [3.0, 2.5, 2.0, 1.5, 1.0, 0.5]\nright_y = [62, 64, 66, 68, 70, 72]\nright_labels = ['Self-refine', 'CoT(maj@1)', 'DefInt', 'CoT(maj@5)', 'ToT', 'MAD+judge']\nright_colors = ['green', 'blue', 'pink', 'orange', 'red', 'brown']\n\n# Create subplots with specified figsize\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Left plot\nax1.scatter(left_x, left_y, c=left_colors)\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\nax1.set_xlabel('Token cost($)')\nax1.set_ylabel('Accuracy(%)')\nax1.set_xlim(55, -5)\nax1.set_ylim(60, 70)\nfor i, label in enumerate(left_labels):\n    ax1.annotate(label, (left_x[i], left_y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Right plot\nax2.scatter(right_x, right_y, c=right_colors)\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\nax2.set_xlabel('TFLOPS')\nax2.set_ylabel('Accuracy(%)')\nax2.set_xlim(3.5, -0.5)\nax2.set_ylim(60, 70)\nfor i, label in enumerate(right_labels):\n    ax2.annotate(label, (right_x[i], right_y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "scatter_15", "width": 10.0, "height": 4.0}
{"file": "bar_56", "code": "import matplotlib.pyplot as plt\n\n# Data\nprofessions = ['Gardening', 'Cleaning/Laundry', 'Crafting/Knitting', 'Baker', 'Carpenter', 'Making Bricks']\nnumber_of_videos = [8500, 7000, 5500, 4000, 2500, 1000]\ncolors = ['#1f77b4', '#17becf', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd']\n\n# Create horizontal bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.barh(professions, number_of_videos, color=colors)\n\n# Set labels and title\nplt.xlabel('Number of Videos')\nplt.ylabel('Profession')\nplt.title('Number of Videos by Profession')\n\n# Invert y-axis to have the highest value on top\nplt.gca().invert_yaxis()\n\n# Show grid\nplt.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()", "idx": "bar_56", "width": 12.0, "height": 8.0}
{"file": "hist_14", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random data\nnp.random.seed(0)\nuniform_data = np.random.uniform(0, 10, 1000)\nnormal_data = np.random.normal(5, 2, 1000)\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot histograms\nplt.hist(uniform_data, bins=30, alpha=0.5, label='Uniform data', color='red')\nplt.hist(normal_data, bins=30, alpha=0.5, label='Normal data', color='blue')\n\n# Add title and labels\nplt.title('Comparison of Uniform and Normal Distributions')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "hist_14", "width": 6.0, "height": 4.0}
{"file": "heatmap_22", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmaps\nLLaMA_data = np.array([[17, 24, 23], [3, 8, 17], [13, 10, 3], [5, 4, 10]])\nGPT_data = np.array([[5, 17, 1], [17, 5, 23], [11, 24, 9], [24, 1, 15]])\n\n# Create a figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(6.0, 3.0))\n\n# Create the heatmap for LLaMA\ncmap_llama = plt.get_cmap('Oranges')\nheatmap_llama = axes[0].imshow(LLaMA_data, cmap=cmap_llama)\naxes[0].set_title('LLaMA')\naxes[0].set_xticks(np.arange(3))\naxes[0].set_yticks(np.arange(4))\naxes[0].set_xticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\naxes[0].set_yticklabels(np.arange(4))\naxes[0].set_ylabel('Rank')\n\n# Annotate the heatmap with text\nfor i in range(4):\n    for j in range(3):\n        text = axes[0].text(j, i, f'#{LLaMA_data[i, j]}', ha='center', va='center', color='black')\n\n# Create the heatmap for GPT\ncmap_gpt = plt.get_cmap('Blues')\nheatmap_gpt = axes[1].imshow(GPT_data, cmap=cmap_gpt)\naxes[1].set_title('GPT')\naxes[1].set_xticks(np.arange(3))\naxes[1].set_yticks(np.arange(4))\naxes[1].set_xticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\naxes[1].set_yticklabels([])  # Hide y-tick labels for the second plot\n\n# Annotate the heatmap with text\nfor i in range(4):\n    for j in range(3):\n        text = axes[1].text(j, i, f'#{GPT_data[i, j]}', ha='center', va='center', color='white')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "heatmap_22", "width": 6.0, "height": 3.0}
{"file": "density_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Set the figure size as required\nplt.figure(figsize=(9.0, 6.0))\n\n# Generate sample data for the distributions\nnp.random.seed(0)\nrandom_bundle = np.random.normal(10, 1, 1000)\nincrease_price = np.random.normal(11, 1, 1000)\nstrategic_ours = np.random.normal(9, 1, 1000)\n\n# Plot the distributions using seaborn's kdeplot for Kernel Density Estimate\nsns.kdeplot(random_bundle, shade=True, color=\"red\", alpha=0.3, label=\"Random Bundle\")\nsns.kdeplot(increase_price, shade=True, color=\"green\", alpha=0.3, label=\"Increase Price\")\nsns.kdeplot(strategic_ours, shade=True, color=\"blue\", alpha=0.3, label=\"Strategic (Ours)\")\n\n# Add a vertical line for the reserved price\nplt.axvline(x=9, color='red', linestyle='--', label='Reserved price p_l')\n\n# Label the axes\nplt.xlabel('p')\nplt.ylabel('Shape Density')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "density_4", "width": 9.0, "height": 6.0}
{"file": "bar_73", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nquarters = [1, 2, 3, 4, 5]\ndow_jones_changes = [0.5, 2.2, 1.0, 0.4, -0.8]\nnasdaq_changes = [1.5, -0.6, 3.9, 4.6, -1.2]\n\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(quarters, dow_jones_changes, width=0.4, label='Dow Jones Index', color='green', align='center')\nax.bar(quarters, nasdaq_changes, width=0.4, label='Nasdaq Index', color='orange', align='edge')\n\n# Add data labels\nfor i in range(len(quarters)):\n    ax.text(quarters[i], dow_jones_changes[i] + (0.1 if dow_jones_changes[i] >= 0 else -0.3), str(dow_jones_changes[i]), ha='center')\n    ax.text(quarters[i] + 0.4, nasdaq_changes[i] + (0.1 if nasdaq_changes[i] >= 0 else -0.3), str(nasdaq_changes[i]), ha='center')\n\n# Set the labels and title\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\nax.set_title('Index Changes by Fiscal Quarter')\n\n# Set x-axis ticks\nax.set_xticks(quarters)\nax.set_xticklabels(quarters)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "bar_73", "width": 10.0, "height": 5.0}
{"file": "pie_11", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Food', 'Transport', 'Utilities', 'Entertainment', 'Others']\nsizes_company = [29.2, 37.5, 16.7, 10.0, 6.7]\nsizes_project = [25.0, 41.7, 20.0, 10.0, 3.3]\ncolors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#D1BBFF']\npatterns = ['*', 'o', 'x', '+', '//']\n\n# Create a figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the first donut chart (Company)\nwedges1, texts1, autotexts1 = ax.pie(sizes_company, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors, radius=1.0, wedgeprops=dict(width=0.3, edgecolor='w', linewidth=2, linestyle='-', hatch=''))\n\n# Add patterns to the wedges\nfor wedge, pattern in zip(wedges1, patterns):\n    wedge.set_hatch(pattern)\n\n# Plot the second donut chart (Project)\nwedges2, texts2, autotexts2 = ax.pie(sizes_project, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors, radius=0.7, wedgeprops=dict(width=0.3, edgecolor='w', linewidth=2, linestyle='-', hatch=''))\n\n# Add patterns to the wedges\nfor wedge, pattern in zip(wedges2, patterns):\n    wedge.set_hatch(pattern)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')\n\n# Set the title of the chart\nplt.title('Expenses - Company vs. Project')\n\n# Show the plot\nplt.show()", "idx": "pie_11", "width": 8.0, "height": 8.0}
{"file": "3d_8", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data\nnp.random.seed(0)\nage = np.random.uniform(15, 40, 30)\nincome = np.random.uniform(10, 90, 30)\ndebt = np.random.uniform(-50, -20, 30)\n\n# Create a new figure with the specified size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nscatter1 = ax.scatter(age[:10], income[:10], debt[:10], c='r', marker='o')\nscatter2 = ax.scatter(age[10:20], income[10:20], debt[10:20], c='b', marker='^')\nscatter3 = ax.scatter(age[20:], income[20:], debt[20:], c='orange', marker='s')\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()", "idx": "3d_8", "width": 8.0, "height": 6.0}
{"file": "bar_19", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['DLMA-7B VS. LLAMa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', \n              'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMa-13B', 'DLMA-13B VS. CD-13B', \n              'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ndlma_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 36.3, 38.7]\ndlma_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 14.5, 30.5]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plotting\nbar_width = 0.5\ny_pos = range(len(categories))\n\nbars1 = plt.barh(y_pos, dlma_win, bar_width, color='green', label='DLMA win')\nbars2 = plt.barh(y_pos, tie, bar_width, left=dlma_win, color='blue', label='Tie')\nbars3 = plt.barh(y_pos, dlma_lose, bar_width, left=[i+j for i,j in zip(dlma_win, tie)], color='red', label='DLMA lose')\n\n# Adding percentages on bars\nfor bar in bars1:\n    width = bar.get_width()\n    label_x_pos = bar.get_x() + width / 2\n    plt.text(label_x_pos, bar.get_y(), f'{width}%', va='center')\n\nfor bar in bars2:\n    width = bar.get_width()\n    label_x_pos = bar.get_x() + width / 2\n    plt.text(label_x_pos, bar.get_y(), f'{width}%', va='center')\n\nfor bar in bars3:\n    width = bar.get_width()\n    label_x_pos = bar.get_x() + width / 2\n    plt.text(label_x_pos, bar.get_y(), f'{width}%', va='center')\n\n# Set labels and title\nax.set_yticks(y_pos)\nax.set_yticklabels(categories)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Percentage')\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\n\n# Add legend\nplt.legend(loc='upper right')\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "bar_19", "width": 8.0, "height": 6.0}
{"file": "scatter_3", "code": "import matplotlib.pyplot as plt\n\n# Data for the top plot\ntop_names = ['CoT', 'DefInt', 'SPP', 'Self-refine', 'MAD+judge', 'ToT']\ntop_diversity = [1.2, 1.8, 1.5, 2.0, 2.2, 1.6]\ntop_accuracy = [50, 70, 40, 60, 80, 30]\ntop_sizes = [100, 250, 1000, 2500]\n\n# Data for the bottom plot\nbottom_names = ['CoT', 'DefInt', 'SPP', 'Self-refine', 'MAD+judge', 'ToT']\nbottom_diversity = [4.0, 4.8, 5.0, 6.0, 5.5, 4.5]\nbottom_accuracy = [20, 80, 60, 90, 70, 40]\nbottom_sizes = [20000, 100000, 400000, 1600000]\n\n# Create the figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Top plot\nfor i, name in enumerate(top_names):\n    ax1.scatter(top_diversity[i], top_accuracy[i], s=top_sizes[i//2], label=name, alpha=0.5)\nax1.set_xlabel('Diversity')\nax1.set_ylabel('Accuracy (%)')\nax1.legend(title='Token cost($)', loc='upper right')\n\n# Bottom plot\nfor i, name in enumerate(bottom_names):\n    ax2.scatter(bottom_diversity[i], bottom_accuracy[i], s=bottom_sizes[i//2], label=name, alpha=0.5)\nax2.set_xlabel('Diversity')\nax2.set_ylabel('Accuracy (%)')\nax2.legend(title='TFLOPS', loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "scatter_3", "width": 6.0, "height": 6.0}
{"file": "bar_84", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\ntitles = ['Notre-Dame de Paris', 'Demi-Gods and Semi-Devils', 'The Count of Monte Cristo', 'Game of Thrones', 'Attack on Titan']\nscore_time_0 = [0.2, 0.3, 0.55, 0.6, 0.65]\nscore_time_20 = [0.25, 0.35, 0.6, 0.65, 0.7]\nscore_time_40 = [0.3, 0.4, 0.65, 0.7, 0.75]\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 6.0))\n\n# Create the barh plot\nplt.barh(titles, score_time_0, color='lightblue', label='Score at Time 0')\nplt.barh(titles, score_time_20, left=score_time_0, color='sandybrown', label='Score at Time 20')\nplt.barh(titles, score_time_40, left=[i+j for i,j in zip(score_time_0, score_time_20)], color='salmon', label='Score at Time 40')\n\n# Add the legend\nplt.legend()\n\n# Add titles for the subplots\nplt.text(-0.1, 4.5, '1st Experiment', fontsize=12, fontweight='bold', ha='center')\nplt.text(0.3, 4.5, '2nd Experiment', fontsize=12, fontweight='bold', ha='center')\nplt.text(0.7, 4.5, '3rd Experiment', fontsize=12, fontweight='bold', ha='center')\n\n# Display the plot\nplt.show()", "idx": "bar_84", "width": 10.0, "height": 6.0}
{"file": "CB_23", "code": "import matplotlib.pyplot as plt\n\n# Data points for Llama 2 7B (red line and dots)\nx_7b = [0, 25, 50, 100]\ny_7b = [1.30, 1.27, 1.28, 1.29]\nlabels_7b = ['LlaSMol Lite', 'LlaSMol FFN', 'LlaSMol', 'LlaSMol Plus']\n\n# Data points for Llama 2 13B (blue star)\nx_13b = [150]\ny_13b = [1.19]\nlabels_13b = ['LlaSMol Large']\n\n# Create the plot with the specified figure size\nplt.figure(figsize=(6.0, 8.0))\n\n# Plot Llama 2 7B data\nplt.plot(x_7b, y_7b, '-o', color='red', label='Llama 2 7B')\nfor i, txt in enumerate(labels_7b):\n    plt.annotate(txt, (x_7b[i], y_7b[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Plot Llama 2 13B data\nplt.scatter(x_13b, y_13b, color='blue', marker='*', s=100, label='Llama 2 13B')\nfor i, txt in enumerate(labels_13b):\n    plt.annotate(txt, (x_13b[i], y_13b[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the labels for the axes\nplt.xlabel('Trainable Parameter Size (M)')\nplt.ylabel('RMSE')\n\n# Set the title and legend of the plot\nplt.title('Model Performance Comparison')\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "CB_23", "width": 6.0, "height": 8.0}
{"file": "line_51", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nt = np.linspace(0, 10, 100)\nsin_wave = np.sin(t)\ncos_wave = np.cos(t)\nexp_decay = np.exp(-t) * np.cos(10*t)\nlog_growth = np.log1p(t)\n\n# Create figure with specific size\nfig, axs = plt.subplots(4, 1, figsize=(6.0, 12.0))\n\n# Sinusoidal Pattern\naxs[0].plot(t, sin_wave, 'm-', label='Sin Wave')\naxs[0].set_title('Sinusoidal Pattern')\naxs[0].set_xlabel('Time')\naxs[0].set_ylabel('Amplitude')\naxs[0].legend()\n\n# Cosine Pattern\naxs[1].plot(t, cos_wave, 'g-', label='Cos Wave')\naxs[1].set_title('Cosine Pattern')\naxs[1].set_xlabel('Time')\naxs[1].set_ylabel('Amplitude')\naxs[1].legend()\n\n# Exponential Decay\naxs[2].plot(t, exp_decay, 'b-', label='Exp Decay')\naxs[2].set_title('Exponential Decay')\naxs[2].set_xlabel('Time')\naxs[2].set_ylabel('Value')\naxs[2].legend()\n\n# Logarithmic Growth\naxs[3].plot(t, log_growth, 'r-', label='Log Growth')\naxs[3].set_title('Logarithmic Growth')\naxs[3].set_xlabel('Time')\naxs[3].set_ylabel('Value')\naxs[3].legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_51", "width": 6.0, "height": 12.0}
{"file": "CB_17", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nrecall_scores = [0.6364, 0.8008, 0.8427, 0.9011]\nf1_scores = [0.75, 0.8720, 0.9012, 0.9389]\n\n# Create subplots with specified figsize\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for Average Recall Scores\nax1.bar(methods, recall_scores, color='skyblue')\nax1.plot(methods, recall_scores, color='blue', marker='o')\nfor i, score in enumerate(recall_scores):\n    ax1.text(i, score, f'{score:.2%}', ha='center', va='bottom')\nax1.set_title('Average Recall Scores by Method')\nax1.set_ylim(0.6, 1.0)\nax1.set_ylabel('Scores')\n\n# Plot for Average F1 Scores\nax2.bar(methods, f1_scores, color='skyblue')\nax2.plot(methods, f1_scores, color='red', marker='o')\nfor i, score in enumerate(f1_scores):\n    ax2.text(i, score, f'{score:.2%}', ha='center', va='bottom')\nax2.set_title('Average F1 Scores by Method')\nax2.set_ylim(0.6, 1.0)\nax2.set_ylabel('Scores')\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "CB_17", "width": 10.0, "height": 4.0}
{"file": "line_27", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ncompression_rate = [1, 12, 18, 30]\ncnn_error_rate = [26.0, 30.2, 34.4, 55.0]\ncif_error_rate = [24.7, 28.6, 30.2, 36.8]\nstar_error_rate = [15.8, 17.9, 19.8, 22.6]\n\n# Create the plot\nplt.figure(figsize=(6.0, 6.0))\nplt.plot(compression_rate, cnn_error_rate, 'o-', label='CNN', color='salmon')\nplt.plot(compression_rate, cif_error_rate, 's-', label='CIF', color='purple')\nplt.plot(compression_rate, star_error_rate, '*-', label='STAR', color='black')\n\n# Annotate data points\nfor i, txt in enumerate(cnn_error_rate):\n    plt.annotate(txt, (compression_rate[i], cnn_error_rate[i]), textcoords=\"offset points\", xytext=(0,5), ha='center')\nfor i, txt in enumerate(cif_error_rate):\n    plt.annotate(txt, (compression_rate[i], cif_error_rate[i]), textcoords=\"offset points\", xytext=(0,5), ha='center')\nfor i, txt in enumerate(star_error_rate):\n    plt.annotate(txt, (compression_rate[i], star_error_rate[i]), textcoords=\"offset points\", xytext=(0,5), ha='center')\n\n# Set the labels and title\nplt.xlabel('Compression Rate')\nplt.ylabel('Word Error Rate (%)')\nplt.title('Word Error Rate vs. Compression Rate')\n\n# Add a legend\nplt.legend()\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "line_27", "width": 6.0, "height": 6.0}
{"file": "multidiff_4", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 10.0))\n\n# Create the first subplot for the 2D line plot\nax1 = plt.subplot(2, 1, 1)\nrelative_year = np.linspace(0, 5, 100)\nenergy_consumption = np.sin(relative_year) * np.exp(-relative_year/3)\nax1.plot(relative_year, energy_consumption, 'bo-', linewidth=2, markersize=5)\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.grid(True)\n\n# Create the second subplot for the 3D surface plot\nax2 = plt.subplot(2, 1, 2, projection='3d')\nX = np.linspace(-5, 5, 100)\nY = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(X, Y)\nZ = np.sin(np.sqrt(X**2 + Y**2)) * np.exp(-np.sqrt(X**2 + Y**2)/3)\nax2.plot_surface(X, Y, Z, cmap='viridis')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plots\nplt.show()", "idx": "multidiff_4", "width": 8.0, "height": 10.0}
{"file": "line_22", "code": "import matplotlib.pyplot as plt\n\n# Data\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [7.5, 7.0, 6.5, 6.0, 5.75, 5.5, 5.25]\nbits = [\"2.91 bit\", \"3.11 bit\", \"32 bit\", \"3.53 bit\", \"3.63 bit\", \"3.74 bit\", \"3.94 bit\"]\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, marker='o', color='blue', label='APTQ')\n\n# Annotate the bits\nfor i, txt in enumerate(bits):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Horizontal lines for reference\nax.axhline(y=5.22, color='magenta', linestyle='--', label='LLaMa-7B (FP16): 5.22')\nax.axhline(y=5.56, color='orange', linestyle='--', label='OWQ-4bit: 5.56')\nax.axhline(y=5.62, color='green', linestyle='--', label='GPTQ-4bit: 5.62')\nax.axhline(y=7.4, color='red', linestyle='--', label='LLM-QAT-4bit: 7.4')\n\n# Labels and title\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Legend\nax.legend(loc='upper right')\n\n# Grid\nax.grid(True)\n\n# Show the plot\nplt.show()", "idx": "line_22", "width": 5.0, "height": 4.0}
{"file": "3d_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data for the left plot\nyears = np.array([2010, 2012, 2014, 2016, 2018])\nai_investments = np.array([1, 3, 5, 7, 9])\ncs_investments = np.array([2, 4, 6, 8, 10])\nsectors = ['AI', 'CS']\n\n# Data for the right plot\ntime_since_intro = np.linspace(0, 10, 100)\ntech_levels = np.linspace(1, 3, 100)\nadoption_rates = np.exp(-time_since_intro / 10) * np.sin(tech_levels)\n\n# Create a figure with two subplots\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Left plot\nax1 = fig.add_subplot(121, projection='3d')\nax1.bar(years, ai_investments, zdir='y', color='b', alpha=0.8, label='AI')\nax1.bar(years, cs_investments, zdir='y', color='g', alpha=0.8, label='CS')\nax1.set_xlabel('Year')\nax1.set_ylabel('Sector')\nax1.set_zlabel('Investment (Billion USD)')\nax1.set_yticks([1, 2])\nax1.set_yticklabels(sectors)\nax1.legend()\n\n# Right plot\nax2 = fig.add_subplot(122, projection='3d')\nX, Y = np.meshgrid(time_since_intro, tech_levels)\nZ = np.exp(-X / 10) * np.sin(Y)\nax2.plot_surface(X, Y, Z, cmap='viridis', alpha=0.6)\nax2.set_xlabel('Time Since Introduction (years)')\nax2.set_ylabel('Technology Level')\nax2.set_zlabel('Adoption Rate')\n\nplt.show()", "idx": "3d_15", "width": 10.0, "height": 8.0}
{"file": "errorpoint_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(1, 5)\ny1 = np.array([15.49, 17.15, 16.03, 16.46])\ny2 = np.array([19.38, 23.92, 24.64, 22.92])\ny3 = np.array([5, 10, 15, 20])\nerrors1 = np.array([1.75, 1.5, 1.55, 1.6])\nerrors2 = np.array([[1.5, 2.5, 2.0, 1.7], [2.0, 3.0, 2.5, 2.2]])\nerrors3 = np.array([2.5, 2.0, 1.5, 1.0])\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(3, 1, figsize=(6.0, 9.0))\n\n# First subplot\naxs[0].errorbar(x, y1, yerr=errors1, fmt='o', ecolor=['blue', 'orange', 'green', 'yellow'], capsize=5)\naxs[0].set_title('Variable, Symmetric Error')\naxs[0].axhline(y=14.24, color='blue', linestyle='--', label='Mean')\naxs[0].legend()\n\n# Second subplot\naxs[1].errorbar(x, y2, yerr=errors2, fmt='o', ecolor=['red', 'green', 'blue', 'grey'], capsize=5)\naxs[1].set_title('Variable, Asymmetric Error')\naxs[1].axvline(x=2.5, color='green', linestyle='--', label='Median')\naxs[1].legend()\n\n# Third subplot\naxs[2].errorbar(x, y3, yerr=errors3, fmt='o', ecolor='blue', capsize=5)\naxs[2].set_title('Variable, Symmetric Error')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "errorpoint_10", "width": 6.0, "height": 9.0}
{"file": "HR_16", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Retrieve.KV', 'Retrieve.Number', 'Retrieve.PassKey', 'En.Sum', 'En.QA']\nsizes = [215, 130, 245, 210, 100]\ncolors = ['#8bc34a', '#cddc39', '#ffc107', '#03a9f4', '#9c27b0']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\n# Plot\nplt.figure(figsize=(8.0, 8.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.show()", "idx": "HR_16", "width": 8.0, "height": 8.0}
{"file": "line_15", "code": "import matplotlib.pyplot as plt\n\n# Sample data\ntasks = list(range(1, 21))\nBaCE = [95, 93, 92, 90, 89, 88, 87, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73]\nLWF = [70, 72, 71, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53]\nEWC = [45, 47, 46, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28]\nSEQ = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(tasks, BaCE, marker='s', color='blue', label='BaCE')\nplt.plot(tasks, LWF, marker='^', color='red', label='LWF')\nplt.plot(tasks, EWC, marker='D', color='purple', label='EWC')\nplt.plot(tasks, SEQ, marker='o', color='pink', label='SEQ')\n\n# Adding labels and title\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.title('Average Accuracy vs. Task')\n\n# Adding legend\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "line_15", "width": 8.0, "height": 6.0}
{"file": "bar_31", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['LLM-based vs. TPLM-based', 'LLM-based vs. Template', 'LLM-based vs. Markdown',\n              'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create stacked bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.barh(categories, win, color='blue', label='Win')\nax.barh(categories, tie, left=win, color='green', label='Tie')\nax.barh(categories, loss, left=[i+j for i,j in zip(win, tie)], color='red', label='Loss')\n\n# Add percentages on bars\nfor i in range(len(categories)):\n    ax.text(win[i]/2, i, f'{win[i]}%', ha='center', va='center', color='white')\n    ax.text(win[i]+tie[i]/2, i, f'{tie[i]}%', ha='center', va='center', color='white')\n    ax.text(win[i]+tie[i]+loss[i]/2, i, f'{loss[i]}%', ha='center', va='center', color='white')\n\n# Set labels and title\nax.set_xlabel('Percentage')\nax.set_yticklabels(categories)\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()", "idx": "bar_31", "width": 10.0, "height": 6.0}
{"file": "multidiff_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.30]\n\n# Data for heatmap\nheatmap_data = np.array([\n    [-0.40, 0.14, 0.22, 0.13],\n    [-0.13, -0.03, 0.17, 0.12],\n    [-0.24, 0.05, 0.31, 0.17]\n])\nheatmap_labels = np.array([\n    ['-0.40', '0.14', '0.22', '0.13'],\n    ['-0.13', '-0.03', '0.17', '0.12'],\n    ['-0.24', '0.05', '0.31', '0.17']\n])\nheatmap_x_labels = ['Unchanged Correct', 'Unfixed Mistake', 'New Correct', 'New Mistake']\nheatmap_y_labels = ['Sentiment', 'Toxicity', 'News']\n\n# Create figure with specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Bar chart\nax1.bar(categories, values, color='blue')\nax1.set_ylabel('Correlation')\nax1.set_ylim(0, 0.40)\n\n# Heatmap\nim = ax2.imshow(heatmap_data, cmap='coolwarm', vmin=-1, vmax=1)\n\n# We want to show all ticks and label them with the respective list entries\nax2.set_xticks(np.arange(len(heatmap_x_labels)))\nax2.set_yticks(np.arange(len(heatmap_y_labels)))\nax2.set_xticklabels(heatmap_x_labels)\nax2.set_yticklabels(heatmap_y_labels)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax2.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(heatmap_y_labels)):\n    for j in range(len(heatmap_x_labels)):\n        text = ax2.text(j, i, heatmap_labels[i, j], ha=\"center\", va=\"center\", color=\"black\")\n\n# Create colorbar\ncbar = ax2.figure.colorbar(im, ax=ax2)\ncbar.ax.set_ylabel('', rotation=-90, va=\"bottom\")\n\nplt.tight_layout()\nplt.show()", "idx": "multidiff_15", "width": 10.0, "height": 4.0}
{"file": "heatmap_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [np.nan, np.nan, 1.0],\n    [4.0, 8.0, 16.0, 7.0],\n    [np.nan, np.nan, 12.0, 28.0],\n    [3.0, 4.0, 16.0, 22.0]\n])\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create the heatmap\ncmap = plt.cm.coolwarm\ncmap.set_bad('grey', 1.)\nheatmap = ax.imshow(data, cmap=cmap, interpolation='nearest')\n\n# Add text annotations\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        if not np.isnan(data[i, j]):\n            text = ax.text(j, i, f'{data[i, j]:.1f}%', ha='center', va='center', color='black')\n\n# Set the tick labels\nax.set_xticks(np.arange(data.shape[1]))\nax.set_yticks(np.arange(data.shape[0]))\nax.set_xticklabels(['D\\'2', 'D\\'1', 'D\\'0', '='])\nax.set_yticklabels(['LOH0', 'LOH1', 'LOH2', 'LOMLP'])\n\n# Set the aspect of the plot to be equal\nax.set_aspect('equal')\n\n# Turn off the gridlines\nax.grid(False)\n\n# Turn off the ticks\nax.tick_params(top=False, bottom=False, left=False, right=False)\n\n# Show the plot\nplt.show()", "idx": "heatmap_13", "width": 6.0, "height": 6.0}
{"file": "hist_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\ncenter_data = np.random.normal(2, 1.5, 1000)\nrandom_data = np.random.normal(5, 2, 1000)\n\n# Create the figure and axis with the specified figsize\nplt.figure(figsize=(5.0, 3.0))\n\n# Plot the histograms\nplt.hist(center_data, bins=30, alpha=0.5, color='orange', edgecolor='red', label='Center')\nplt.hist(random_data, bins=30, alpha=0.5, color='blue', edgecolor='red', label='Random')\n\n# Add labels and title\nplt.xlabel('Distance Difference (Random vs. Center)')\nplt.ylabel('Number of Examples')\nplt.title('Histogram Comparison')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "hist_4", "width": 5.0, "height": 3.0}
{"file": "HR_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nsample_numbers = np.arange(1, 7)\nthermal_conductivity = [2.5, 3.5, 3.0, 2.0, 4.0, 3.5]\nerror = [1.0, 0.5, 0.75, 1.25, 0.5, 0.75]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nax.bar(sample_numbers, thermal_conductivity, yerr=error, align='center', alpha=0.5, ecolor='black', capsize=10, color='red')\nax.set_ylabel('Thermal Conductivity (W/m\u00b7K)')\nax.set_xlabel('Sample Number')\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\nax.set_xticks(sample_numbers)\nax.set_ylim(1.5, 4.5)\nax.yaxis.grid(True)\n\n# Save the figure and show\nplt.tight_layout()\nplt.savefig('thermal_conductivity.png')\nplt.show()", "idx": "HR_18", "width": 7.0, "height": 5.0}
{"file": "line_49", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plots\ntime = np.linspace(0, 10, 20)\ngrowth = np.exp(-time/3) + np.random.normal(0, 0.1, len(time))\ndecay = np.exp(-time) + np.random.normal(0, 0.1, len(time))\noscillation = np.sin(time) + np.random.normal(0, 0.1, len(time))\n\n# Create a figure with three subplots, each having the same x-axis\nfig, axs = plt.subplots(3, 1, figsize=(6.0, 9.0), sharex=True)\n\n# Plot exponential growth\naxs[0].plot(time, growth, 'o-', color='green', label='Growth')\naxs[0].set_title('Exponential Growth Over Time')\naxs[0].set_ylabel('Value')\naxs[0].legend()\n\n# Plot exponential decay\naxs[1].plot(time, decay, 'x-', color='red', label='Decay')\naxs[1].set_title('Exponential Decay Over Time')\naxs[1].set_ylabel('Value')\naxs[1].legend()\n\n# Plot oscillatory behavior\naxs[2].plot(time, oscillation, 's-', color='blue', label='Oscillation')\naxs[2].set_title('Oscillatory Behavior Over Time')\naxs[2].set_xlabel('Time')\naxs[2].set_ylabel('Value')\naxs[2].legend()\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_49", "width": 6.0, "height": 9.0}
{"file": "errorbar_24", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [90, 95, 85, 80, 75, 98, 85, 90, 88, 96]\nhigher_education_enrollment = [70, 75, 65, 60, 55, 78, 65, 70, 68, 76]\ngraduation_err = [10, 8, 12, 10, 15, 5, 12, 10, 9, 7]\nenrollment_err = [8, 7, 10, 9, 12, 4, 10, 9, 8, 6]\n\n# Bar positions\nx = np.arange(len(regions))\nwidth = 0.35\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars1 = ax.bar(x - width/2, high_school_graduation, width, label='High School Graduation', color='lightgreen', yerr=graduation_err, capsize=5)\nbars2 = ax.bar(x + width/2, higher_education_enrollment, width, label='Higher Education Enrollment', color='sandybrown', yerr=enrollment_err, capsize=5)\n\n# Labels and Title\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\nax.set_xticks(x)\nax.set_xticklabels(regions)\nax.legend()\n\n# Rotate x-axis labels\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.tight_layout()\nplt.show()", "idx": "errorbar_24", "width": 10.0, "height": 6.0}
{"file": "pie_8", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['ACL', 'EMNLP', 'NAACL', 'EACL', 'COLING']\nsizes = [34.7, 25.4, 20.3, 12.2, 7.4]\ncolors = ['#FFA07A', '#20B2AA', '#778899', '#9370DB', '#FFD700']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plot\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.title('NLP Conference Influence')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()", "idx": "pie_8", "width": 6.0, "height": 6.0}
{"file": "bar_36", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nclusters = [100, 1000]\nuniform = [49.98, 49.63]\nclusterclip = [51.05, 50.74]\nrandom_sampling_value = 49\n\n# Plotting the bars\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = ax.bar(clusters, uniform, bar_width, alpha=opacity, color='b', label='Uniform')\nrects2 = ax.bar([x + bar_width for x in clusters], clusterclip, bar_width, alpha=opacity, color='orange', label='ClusterClip')\n\n# Adding the random sampling line\nax.axhline(y=random_sampling_value, color='g', linestyle='--', label='Random Sampling')\n\n# Adding the text on top of the bars\nfor i, v in enumerate(uniform):\n    ax.text(clusters[i] - bar_width/2, v + 0.1, str(v), color='black', ha='center')\nfor i, v in enumerate(clusterclip):\n    ax.text(clusters[i] + bar_width/2, v + 0.1, str(v), color='black', ha='center')\n\n# Setting the labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\nax.set_title('MMLU by number of clusters and sampling method')\nax.set_xticks([x + bar_width/2 for x in clusters])\nax.set_xticklabels(clusters)\n\n# Adding a legend\nax.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_36", "width": 6.61, "height": 5.23}
{"file": "line_16", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nthresholds = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\noesense_accuracy = [1.0, 0.99, 0.97, 0.96, 0.96, 0.96]\nkws_accuracy = [0.96, 0.95, 0.94, 0.93, 0.94, 0.95]\necg5000_accuracy = [0.93, 0.92, 0.91, 0.9, 0.89, 0.87]\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(thresholds, oesense_accuracy, marker='o', color='b', label='Oesense')\nplt.plot(thresholds, kws_accuracy, marker='D', color='r', label='KWS')\nplt.plot(thresholds, ecg5000_accuracy, marker='^', color='g', label='ECG5000')\n\n# Adding labels and title\nplt.xlabel('Uncertainty threshold')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs Uncertainty threshold')\n\n# Adding legend\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "line_16", "width": 8.0, "height": 6.0}
{"file": "multidiff_12", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for bar plots\nvgg16_data = [0.551, 0.195]\nresnet101_data = [0.744, 0.477]\nbar_labels = ['Cartesian', 'Retinotopic']\n\n# Data for line plot\nrotation_angles = np.arange(0, 181, 30)\nvgg16_cartesian = np.random.uniform(0.4, 0.6, len(rotation_angles))\nvgg16_retinotopic = np.random.uniform(0.1, 0.3, len(rotation_angles))\nresnet101_cartesian = np.random.uniform(0.6, 0.8, len(rotation_angles))\nresnet101_polar = np.random.uniform(0.3, 0.5, len(rotation_angles))\n\n# Create figure with specific size\nfig = plt.figure(figsize=(10.0, 4.0))\n\n# Bar plot for VGG 16\nax1 = fig.add_subplot(131)\nax1.bar(bar_labels, vgg16_data, color=['#d62728', '#ff7f0e'])\nax1.set_title('(A) VGG 16')\nax1.set_ylim(0, 1)\nax1.set_ylabel('Accuracy')\nfor i, v in enumerate(vgg16_data):\n    ax1.text(i, v + 0.02, str(v), color='black', ha='center')\n\n# Bar plot for Resnet 101\nax2 = fig.add_subplot(132)\nax2.bar(bar_labels, resnet101_data, color=['#1f77b4', '#aec7e8'])\nax2.set_title('(B) Resnet 101')\nax2.set_ylim(0, 1)\nfor i, v in enumerate(resnet101_data):\n    ax2.text(i, v + 0.02, str(v), color='black', ha='center')\n\n# Line plot for Rotation invariance\nax3 = fig.add_subplot(133)\nax3.plot(rotation_angles, vgg16_cartesian, 'r-x', label='VGG16 Cartesian')\nax3.plot(rotation_angles, vgg16_retinotopic, 'y-x', label='VGG16 Retinotopic')\nax3.plot(rotation_angles, resnet101_cartesian, 'b-o', label='Resnet101 Cartesian')\nax3.plot(rotation_angles, resnet101_polar, 'c-o', label='Resnet101 Polar')\nax3.set_title('(C) Rotation invariance')\nax3.set_xlabel('Rotation angle (\u00b0)')\nax3.set_ylabel('Accuracy')\nax3.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "multidiff_12", "width": 10.0, "height": 4.0}
{"file": "area_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = [10**4, 5*10**4, 10**6, 5*10**6, 10**7]\ny1 = [10, 15, 20, 25, 30]\ny2 = [12, 17, 22, 27, 32]\ny3 = [8, 13, 18, 23, 28]\ny4 = [6, 11, 16, 21, 26]\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\nax.fill_between(x, y1, color=\"skyblue\", alpha=0.4)\nax.fill_between(x, y2, color=\"sandybrown\", alpha=0.5)\nax.fill_between(x, y3, color=\"lightcoral\", alpha=0.5)\nax.fill_between(x, y4, color=\"lightgrey\", alpha=0.5)\n\nax.plot(x, y1, color=\"skyblue\", marker=\"o\", label=\"ActivityNet mIoU\")\nax.plot(x, y2, color=\"sandybrown\", marker=\"o\", label=\"Breakfast MoF\")\nax.plot(x, y3, color=\"lightcoral\", marker=\"o\", label=\"ActivityNet CIDEr\")\nax.plot(x, y4, color=\"grey\", marker=\"o\", label=\"QVHighlights mAP\")\n\n# Custom x-axis labels\nax.set_xscale('log')\nax.set_xticks(x)\nax.set_xticklabels(['10k', '50K', '1M', '5M', '10M'])\n\n# Custom y-axis range\nax.set_ylim(0, 34)\n\n# Legend\nax.legend(loc=\"upper left\")\n\n# Show plot\nplt.show()", "idx": "area_1", "width": 9.0, "height": 8.0}
{"file": "box_21", "code": "import matplotlib.pyplot as plt\n\n# Sample data for the boxplots\ndata = {\n    'BG': [70, 75, 72, 68, 74, 73],\n    'IBP': [60, 65, 63, 59, 64, 62],\n    'SSP': [80, 85, 82, 78, 84, 83],\n    'NBP': [50, 55, 52, 48, 54, 53]\n}\n\n# Colors for the boxplots\ncolors = ['#8B4513', '#228B22', '#0000FF', '#800080']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Create the boxplots\nbp = ax.boxplot(data.values(), patch_artist=True)\n\n# Set the colors for each boxplot\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the x-axis labels\nax.set_xticklabels(data.keys())\n\n# Set the y-axis labels\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.5, len(data) + 0.5)\nax.set_ylim(0, 100)\n\n# Set the title and labels\nax.set_title('Methods')\nax.set_xlabel('Prediction Accuracy $\\\\nu_{D1}$')\nax.set_ylabel('')\n\n# Show the plot\nplt.show()", "idx": "box_21", "width": 9.0, "height": 5.0}
{"file": "bar_97", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nN = 6\nscore_type1 = np.array([20, 35, 30, 35, 27, 25])\nscore_type2 = np.array([25, 32, 34, 20, 25, 30])\nscore_type3 = np.array([30, 25, 27, 35, 32, 20])\nscore_type4 = np.array([35, 30, 25, 27, 20, 35])\nscore_type5 = np.array([40, 28, 34, 33, 26, 40])\n\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\nfor i, ax in enumerate(axs.flat):\n    ax.bar(ind, score_type1, width, label='Score Type 1', color='red')\n    ax.bar(ind, score_type2, width, bottom=score_type1, label='Score Type 2', color='blue')\n    ax.bar(ind, score_type3, width, bottom=score_type1+score_type2, label='Score Type 3', color='green')\n    ax.bar(ind, score_type4, width, bottom=score_type1+score_type2+score_type3, label='Score Type 4', color='orange')\n    ax.bar(ind, score_type5, width, bottom=score_type1+score_type2+score_type3+score_type4, label='Score Type 5', color='purple')\n\n    ax.set_xlabel('Human Annotator')\n    ax.set_ylabel('Scores')\n    ax.set_title(f'Human Labeling and Agreement Bias Checking Set {i+1}')\n    ax.set_xticks(ind)\n    ax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n    ax.set_yticks(np.arange(0, 61, 10))\n    ax.legend(title=\"Scores\")\n\nplt.tight_layout()\nplt.show()", "idx": "bar_97", "width": 10.0, "height": 8.0}
{"file": "line_40", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nsnr = np.array([5, 10, 15, 20, 25])\njpeg_ldpc = np.array([50, 60, 70, 80, 90])\ndeepjscc_wo_ofdm = np.array([60, 70, 80, 90, 100])\ndeepjscc_w_ofdm = np.array([70, 80, 90, 100, 110])\nours = np.array([80, 90, 100, 110, 120])\n\n# Error range (for illustration purposes, using arbitrary values)\nerror = np.array([5, 5, 5, 5, 5])\n\n# Plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(snr, jpeg_ldpc, marker='o', color='blue', label='JPEG+LDPC')\nplt.fill_between(snr, jpeg_ldpc-error, jpeg_ldpc+error, color='blue', alpha=0.2)\n\nplt.plot(snr, deepjscc_wo_ofdm, marker='x', color='green', label='DEEPJSCC w/o OFDM')\nplt.fill_between(snr, deepjscc_wo_ofdm-error, deepjscc_wo_ofdm+error, color='green', alpha=0.2)\n\nplt.plot(snr, deepjscc_w_ofdm, marker='*', color='red', label='DEEPJSCC w/ OFDM')\nplt.fill_between(snr, deepjscc_w_ofdm-error, deepjscc_w_ofdm+error, color='red', alpha=0.2)\n\nplt.plot(snr, ours, marker='s', color='orange', label='OURS')\nplt.fill_between(snr, ours-error, ours+error, color='orange', alpha=0.2)\n\n# Labels and Title\nplt.xlabel('SNR')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Classification Accuracy vs SNR')\n\n# Legend\nplt.legend()\n\n# Show plot\nplt.show()", "idx": "line_40", "width": 8.0, "height": 6.0}
{"file": "line_24", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\niterations = np.arange(0, 9)\naverage = np.array([750, 730, 710, 690, 670, 650, 640, 630, 620])\nstd_dev = np.array([50, 45, 40, 35, 30, 25, 20, 15, 10])\n\n# Plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(iterations, average, marker='o', label='Average')\nplt.fill_between(iterations, average - std_dev, average + std_dev, color='blue', alpha=0.2, label='Standard Deviation')\n\n# Labels and Title\nplt.xlabel('Iterations')\nplt.ylabel('N-ELBO')\nplt.title('N-ELBO vs Iterations')\n\n# Legend\nplt.legend()\n\n# Show plot\nplt.show()", "idx": "line_24", "width": 6.0, "height": 4.0}
{"file": "box_19", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata1 = np.random.normal(0.7, 0.15, 30)\ndata2 = np.random.normal(0.6, 0.2, 30)\ndata3 = np.random.normal(0.8, 0.1, 30)\n\n# Set the figure size as specified\nplt.figure(figsize=(10.0, 4.0))\n\n# Create subplots for each category\nfor i, category in enumerate(['EME sentences', 'Neutral sentences', 'ME sentences']):\n    plt.subplot(1, 3, i+1)\n    \n    # Create boxplots for each model within the category\n    plt.boxplot([data1, data2, data3], patch_artist=True,\n                boxprops=dict(facecolor='lightblue', color='black'),\n                medianprops=dict(color='black'),\n                whiskerprops=dict(color='black'),\n                capprops=dict(color='black'),\n                flierprops=dict(marker='o', color='black', markersize=5))\n    \n    # Add scatter points on top of the boxplots\n    for j, data in enumerate([data1, data2, data3]):\n        x = np.random.normal(j+1, 0.04, size=len(data))\n        plt.scatter(x, data, color='black', alpha=0.7)\n    \n    # Set the x-axis labels\n    plt.xticks([1, 2, 3], ['BERT Base', 'MacBERT', 'English HLM'])\n    \n    # Set the y-axis label for the first subplot only\n    if i == 0:\n        plt.ylabel('$\\delta$ (m/s)')\n    \n    # Set the title for each subplot\n    plt.title(category)\n\n# Adjust the layout to prevent overlapping\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "box_19", "width": 10.0, "height": 4.0}
{"file": "line_54", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\ndry = [1.4, 1.2, 1.0, 0.8]\nrain = [1.3, 1.1, 0.9, 0.7]\nsnow = [1.2, 1.0, 0.8, 0.6]\nfog = [1.1, 0.9, 0.7, 0.5]\n\n# Error bars (just for illustration, you should replace with actual data)\nerror = [0.1, 0.1, 0.1, 0.1]\n\n# Create subplots with specified figure size\nfig, axs = plt.subplots(1, 3, figsize=(12.0, 4.0))\n\n# Dry vs Rain\naxs[0].errorbar(driving_styles, dry, yerr=error, fmt='-o', color='black', label='Dry')\naxs[0].errorbar(driving_styles, rain, yerr=error, fmt='-s', color='red', label='Rain')\naxs[0].set_title('Dry vs Rain')\naxs[0].set_ylabel('Relaxation Level')\naxs[0].legend()\n\n# Snow vs Fog\naxs[1].errorbar(driving_styles, snow, yerr=error, fmt='-o', color='blue', label='Snow')\naxs[1].errorbar(driving_styles, fog, yerr=error, fmt='-s', color='green', label='Fog')\naxs[1].set_title('Snow vs Fog')\naxs[1].set_ylabel('Relaxation Level')\naxs[1].legend()\n\n# Rain vs Snow\naxs[2].errorbar(driving_styles, rain, yerr=error, fmt='-o', color='red', label='Rain')\naxs[2].errorbar(driving_styles, snow, yerr=error, fmt='-s', color='blue', label='Snow')\naxs[2].set_title('Rain vs Snow')\naxs[2].set_ylabel('Relaxation Level')\naxs[2].legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "line_54", "width": 12.0, "height": 4.0}
{"file": "scatter_12", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nnames = ['SeViLA', 'LongViViT', 'ImageViT', 'ShortViViT', 'Bard + ImageViT', 'Bard + ShortViViT', 'Bard + PALI', 'MC-ViT-B', 'MC-ViT-L']\nx = [23, 27, 30, 33, 35, 37, 42, 45, 48]\ny = [38, 42, 47, 45, 50, 52, 53, 55, 40]\nsizes = [203, 424, 1000, 4000, 4000, 4000, 4000, 4000, 4000]  # Parameter sizes in millions\ncolors = ['blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'red', 'red']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Scatter plot\nscatter = ax.scatter(x, y, s=sizes, c=colors, alpha=0.5)\n\n# Add text labels\nfor i, name in enumerate(names):\n    ax.text(x[i], y[i], name, ha='center', va='center')\n\n# Add parameter size legend\nfor size in [203, 424, 1000, 4000]:\n    ax.scatter([], [], s=size, c='grey', alpha=0.5, label=str(size) + 'M')\nax.legend(scatterpoints=1, frameon=False, labelspacing=1, title='Number of parameters')\n\n# Set labels and title\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\nax.set_title('Model Comparison')\n\n# Show plot\nplt.show()", "idx": "scatter_12", "width": 8.0, "height": 6.0}
{"file": "box_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the boxplots\ndata_one_by_one = [\n    np.random.normal(0.8, 0.1, 100),\n    np.random.normal(0.7, 0.1, 100),\n    np.random.normal(0.6, 0.1, 100),\n    np.random.normal(0.5, 0.1, 100),\n    np.random.normal(0.4, 0.1, 100),\n    np.random.normal(0.3, 0.1, 100),\n    np.random.normal(0.2, 0.1, 100),\n    np.random.normal(0.1, 0.1, 100),\n    np.random.normal(0.05, 0.05, 100)\n]\n\ndata_all_in_one = [\n    np.random.normal(0.8, 0.1, 100),\n    np.random.normal(0.7, 0.1, 100),\n    np.random.normal(0.6, 0.1, 100),\n    np.random.normal(0.5, 0.1, 100),\n    np.random.normal(0.4, 0.1, 100),\n    np.random.normal(0.3, 0.1, 100),\n    np.random.normal(0.2, 0.1, 100),\n    np.random.normal(0.1, 0.1, 100),\n    np.random.normal(0.05, 0.05, 100)\n]\n\nlabels = ['AR', 'LSTMDalpha', 'LSTMDbeta', 'AE', 'EncDecAD', 'SRCNN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Boxplot for \"one by one\"\nbplot1 = ax1.boxplot(data_one_by_one, vert=False, patch_artist=True, labels=labels)\nax1.set_title('one by one')\n\n# Boxplot for \"all in one\"\nbplot2 = ax2.boxplot(data_all_in_one, vert=False, patch_artist=True, labels=labels)\nax2.set_title('all in one')\n\n# Customize boxplot colors\ncolors = ['#FFCCCC', '#FFCC99', '#FFFF99', '#CCFF99', '#99FFCC', '#99FFFF', '#99CCFF', '#CC99FF', '#FF99FF']\nfor bplot in (bplot1, bplot2):\n    for patch, color in zip(bplot['boxes'], colors):\n        patch.set_facecolor(color)\n\n# Display the plot\nplt.show()", "idx": "box_18", "width": 10.0, "height": 5.0}
{"file": "hist_19", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Simulated data\nnp.random.seed(0)\nmnist_non_defective = np.random.normal(0.05, 0.02, 1000)\nmnist_defective = np.random.normal(0.1, 0.02, 1000)\nfashionmnist_non_defective = np.random.normal(0.1, 0.03, 1000)\nfashionmnist_defective = np.random.normal(0.15, 0.03, 1000)\n\n# Set up the figure with two subplots\nfig, axs = plt.subplots(2, 1, figsize=(10.0, 7.0))\n\n# MNIST histogram\naxs[0].hist(mnist_non_defective, bins=50, alpha=0.5, label='Non-defective', color='blue')\naxs[0].hist(mnist_defective, bins=50, alpha=0.5, label='Defective', color='orange')\naxs[0].set_title('MNIST - Defect Detection')\naxs[0].legend()\n\n# FashionMNIST histogram\naxs[1].hist(fashionmnist_non_defective, bins=50, alpha=0.5, label='Non-defective', color='green')\naxs[1].hist(fashionmnist_defective, bins=50, alpha=0.5, label='Defective', color='red')\naxs[1].set_title('FashionMNIST - Defect Detection')\naxs[1].legend()\n\n# Set common labels\nfor ax in axs:\n    ax.set_xlabel('Defect Score')\n    ax.set_ylabel('Frequency')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "hist_19", "width": 10.0, "height": 7.0}
{"file": "box_22", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\nsearch_depth = [50, 100, 150, 200, 350]\nreward_data = [\n    np.random.normal(0.01, 0.02, 100),\n    np.random.normal(0.03, 0.02, 100),\n    np.random.normal(0.02, 0.01, 100),\n    np.random.normal(0.025, 0.015, 100),\n    np.random.normal(0.04, 0.02, 100)\n]\n\n# Create the boxplot\nplt.figure(figsize=(6.0, 5.0))\nplt.boxplot(reward_data, positions=search_depth, widths=20)\n\n# Set the labels and title\nplt.xlabel('Search depth')\nplt.ylabel('Reward')\n\n# Set the x-axis limits and ticks\nplt.xlim(0, 400)\nplt.xticks(search_depth)\n\n# Set the y-axis limits\nplt.ylim(-0.06, 0.06)\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "box_22", "width": 6.0, "height": 5.0}
{"file": "scatter_19", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([3, 5, 7, 9, 11, 13, 15])\ny = np.array([110, 105, 100, 95, 90, 85, 80])\ncolors = np.array([100, 80, 60, 40, 20, 10, 0])\n\n# Create the scatter plot\nplt.figure(figsize=(6.0, 6.0))\nsc = plt.scatter(x, y, c=colors, cmap='viridis')\n\n# Add colorbar\nplt.colorbar(sc)\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set grid\nplt.grid(True)\n\n# Show the plot\nplt.show()", "idx": "scatter_19", "width": 6.0, "height": 6.0}
{"file": "line_57", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nparameter_rate = [0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2]\nerror_rate_64 = [0.18, 0.16, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09]\nerror_rate_128 = [0.17, 0.15, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08]\naccuracy_64 = [0.8, 0.82, 0.84, 0.85, 0.84, 0.83, 0.82, 0.81]\naccuracy_128 = [0.81, 0.83, 0.85, 0.86, 0.85, 0.84, 0.83, 0.82]\n\n# Colors and markers\ncolors = ['blue', 'red', 'purple', 'orange']\nmarkers = ['o', 's', 'v', 'X']\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(12.0, 9.0))\n\n# Plot Error Rate vs. Learning Rate\nfor i, (batch_size, color, marker) in enumerate(zip([64, 128], colors[:2], markers[:2])):\n    axs[0, 0].plot(parameter_rate, error_rate_64 if batch_size == 64 else error_rate_128, \n                    label=f'Error Rate vs. Learning Rate (Batch Size={batch_size})', \n                    color=color, marker=marker)\n    axs[1, 0].plot(parameter_rate, error_rate_64 if batch_size == 64 else error_rate_128, \n                    label=f'Error Rate vs. Learning Rate (Batch Size={batch_size})', \n                    color=color, marker=marker)\n\n# Plot Accuracy vs. Dropout\nfor i, (batch_size, color, marker) in enumerate(zip([64, 128], colors[2:], markers[2:])):\n    axs[0, 1].plot(parameter_rate, accuracy_64 if batch_size == 64 else accuracy_128, \n                    label=f'Accuracy vs. Dropout (Batch Size={batch_size})', \n                    color=color, marker=marker)\n    axs[1, 1].plot(parameter_rate, accuracy_64 if batch_size == 64 else accuracy_128, \n                    label=f'Accuracy vs. Dropout (Batch Size={batch_size})', \n                    color=color, marker=marker)\n\n# Set titles, labels, and legends\nfor ax in axs.flat:\n    ax.set(xlabel='Parameter Rate', ylabel='Metric')\n    ax.label_outer()\n    ax.legend()\n\naxs[0, 0].set_title('Error Rate vs. Learning Rate')\naxs[0, 1].set_title('Accuracy vs. Dropout')\naxs[1, 0].set_title('Error Rate vs. Learning Rate')\naxs[1, 1].set_title('Accuracy vs. Dropout')\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "line_57", "width": 12.0, "height": 9.0}
{"file": "quiver_4", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Set the figure size as requested\nplt.figure(figsize=(5.0, 4.0))\n\n# Define the grid of points\nx, y = np.meshgrid(np.linspace(-1, 1, 20), np.linspace(-1, 1, 20))\n\n# Define the vector field function\n# Note: You need to replace the following functions with the actual functions used in the STEM paper\n# Here I'm using a placeholder function for demonstration purposes\ndef vector_field(x, y):\n    # Replace these with the actual vector field functions from the paper\n    u = -y\n    v = x\n    return u, v\n\n# Calculate the vector field\nu, v = vector_field(x, y)\n\n# Plot the vector field\nplt.quiver(x, y, u, v, color='blue')\n\n# Set the title and labels\nplt.title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Set the x and y axis limits\nplt.xlim(-1, 1)\nplt.ylim(-1, 1)\n\n# Show the plot\nplt.show()", "idx": "quiver_4", "width": 5.0, "height": 4.0}
{"file": "errorbar_29", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar charts\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nvalues = {'New York': [225, 200, 175],\n          'Los Angeles': [175, 150, 125],\n          'Chicago': [150, 175, 200]}\nerrors = {'New York': [20, 15, 20],\n          'Los Angeles': [15, 10, 20],\n          'Chicago': [20, 10, 15]}\n\n# Colors for the bars\ncolors = ['green', 'blue', 'red']\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Loop through each city to create individual bar charts\nfor i, city in enumerate(cities):\n    ax = axs[i]\n    y_pos = np.arange(len(metrics))\n    ax.bar(y_pos, values[city], yerr=errors[city], color=colors, capsize=5)\n    ax.set_xticks(y_pos)\n    ax.set_xticklabels(metrics)\n    ax.set_title(city)\n    ax.set_ylim(100, 275)\n\n    # Annotate the error values on top of the bars\n    for j, val in enumerate(values[city]):\n        ax.text(j, val + errors[city][j] + 5, f'+{errors[city][j]}', ha='center', color='black')\n        ax.text(j, val - errors[city][j] - 15, f'-{errors[city][j]}', ha='center', color='black')\n\n# Set the y-axis label\naxs[0].set_ylabel('Metric Values')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "errorbar_29", "width": 10.0, "height": 4.0}
{"file": "radar_2", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each line\nvalues1 = [85.0, 78.7, 66.1, 85.8, 76.1, 50.2]\nvalues2 = [71.9, 66.1, 59.7, 66.4, 56.5, 59.3]\nvalues3 = [64.1, 59.7, 50.8, 58.4, 50.8, 52.8]\nvalues4 = [80.9, 69.9, 59.9, 69.9, 79.2, 69.9]\n\n# Number of variables\nnum_vars = len(values1)\n\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\nvalues4 += values4[:1]\nangles += angles[:1]\n\n# Initialise the radar plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], ['VQA-v2', 'GQA', 'MM-Vet', 'TextVQA', 'VQA-I', 'POPE'])\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([20, 40, 60, 80], [\"20\", \"40\", \"60\", \"80\"], color=\"grey\", size=7)\nplt.ylim(0, 100)\n\n# Plot data and fill area\nax.plot(angles, values1, 'r-', linewidth=2, label='LLaVA-W')\nax.fill(angles, values1, 'r', alpha=0.1)\n\nax.plot(angles, values2, 'b-', linewidth=2, label='TinyLaMA')\nax.fill(angles, values2, 'b', alpha=0.1)\n\nax.plot(angles, values3, 'g-', linewidth=2, label='StableLM')\nax.fill(angles, values3, 'g', alpha=0.1)\n\nax.plot(angles, values4, 'm-', linewidth=2, label='Phi-2')\nax.fill(angles, values4, 'm', alpha=0.1)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_2", "width": 8.0, "height": 7.0}
{"file": "CB_29", "code": "import matplotlib.pyplot as plt\n\n# Data for 2013 and 2022\nfields = ['AI', 'Blockchain', 'Cloud Computing', 'IoT', 'Robotics', 'Biotech', 'VR', 'Cybersecurity', 'Quantum Computing', 'Nanotechnology']\npatents_2013 = [120, 50, 80, 90, 70, 60, 30, 40, 10, 20]\npatents_2022 = [500, 200, 300, 400, 250, 180, 100, 150, 50, 90]\n\n# Create subplots with shared y-axis\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Bar chart for 2013\nax1.barh(fields, patents_2013, color='skyblue')\nax1.set_title('Patent Filings in 2013')\nax1.set_xlabel('Number of Patents')\nax1.invert_xaxis()  # labels read top-to-bottom\nfor i, v in enumerate(patents_2013):\n    ax1.text(v + 3, i, str(v), color='orange', va='center')\n\n# Bar chart for 2022\nax2.barh(fields, patents_2022, color='salmon')\nax2.set_title('Patent Filings in 2022')\nax2.set_xlabel('Number of Patents')\nfor i, v in enumerate(patents_2022):\n    ax2.text(v + 3, i, str(v), color='orange', va='center')\n\n# Remove y-axis labels for the second plot\nax2.yaxis.set_visible(False)\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "CB_29", "width": 10.0, "height": 5.0}
{"file": "bar_39", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['LIMA', 'SInstruct', 'WizardLM', 'Koala', 'Vicuna']\nrecost_wins = [179, 99, 116, 80, 53]\ntie = [23, 50, 49, 33, 6]\nalpaca_wins = [98, 103, 53, 67, 21]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plotting the bars\nbar_width = 0.5\nindex = range(len(categories))\n\nbar1 = plt.barh(index, recost_wins, bar_width, color='orange', label='Recost (1%) wins')\nbar2 = plt.barh(index, tie, bar_width, left=recost_wins, color='yellow', label='Tie')\nbar3 = plt.barh(index, alpaca_wins, bar_width, left=[i+j for i,j in zip(recost_wins, tie)], color='blue', label='Alpaca wins')\n\n# Adding the text labels on the bars\nfor i in range(len(categories)):\n    plt.text(recost_wins[i]/2, i, str(recost_wins[i]), ha='center', va='center', color='black')\n    plt.text(recost_wins[i] + tie[i]/2, i, str(tie[i]), ha='center', va='center', color='black')\n    plt.text(recost_wins[i] + tie[i] + alpaca_wins[i]/2, i, str(alpaca_wins[i]), ha='center', va='center', color='black')\n\n# Set the y-axis labels\nax.set_yticks(index)\nax.set_yticklabels(categories)\n\n# Add legend\nplt.legend()\n\n# Invert y-axis to have the first entry at the top\nax.invert_yaxis()\n\n# Show the plot\nplt.show()", "idx": "bar_39", "width": 8.0, "height": 5.0}
{"file": "box_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata1 = [np.random.normal(0, std, 100) for std in range(1, 8)]\ndata2 = [np.random.normal(0, std, 100) for std in range(1, 8)]\ndata3 = [np.random.normal(0, std, 100) for std in range(1, 8)]\n\nlabels = ['Dayg', 'PTOxMIN', 'PTOxOLS', 'PTOx', 'SAA', 'SAAxMIN', 'CSAA', 'RSAA', 'PAA']\n\nfig, axs = plt.subplots(1, 3, figsize=(25.0, 8.0))\n\n# Linear travel times\naxs[0].boxplot(data1, patch_artist=True)\naxs[0].set_title('Linear travel times')\naxs[0].set_xticklabels(labels, rotation=45, ha='right')\naxs[0].set_ylabel('Full information gap (%)')\n\n# Exponential travel times\naxs[1].boxplot(data2, patch_artist=True)\naxs[1].set_title('Exponential travel times')\naxs[1].set_xticklabels(labels, rotation=45, ha='right')\n\n# Sigmoidal travel times\naxs[2].boxplot(data3, patch_artist=True)\naxs[2].set_title('Sigmoidal travel times')\naxs[2].set_xticklabels(labels, rotation=45, ha='right')\n\n# Customizing the boxplot colors\ncolors = ['#0000FF', '#FF00FF']\nfor ax in axs:\n    for patch, color in zip(ax.artists, colors * len(ax.artists)):\n        patch.set_facecolor(color)\n\nplt.tight_layout()\nplt.show()", "idx": "box_7", "width": 25.0, "height": 8.0}
{"file": "bar_21", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for Eye Movement\neye_movement_data = {\n    'Benefits': [14.8, 29.6, 29.6, 18.5, 8.4],\n    'Reliability': [9.4, 24.1, 40.7, 27.8, 9.0],\n    'Security': [8.3, 14.8, 40.7, 33.3, 9.3],\n    'Privacy': [24.1, 29.6, 20.4, 16.7, 9.3]\n}\n\n# Data for Brainwave\nbrainwave_data = {\n    'Benefits': [19.0, 26.2, 35.7, 9.5, 9.5],\n    'Reliability': [9.5, 26.2, 45.2, 23.8, 14.0],\n    'Security': [12.0, 14.3, 38.1, 38.1, 9.5],\n    'Privacy': [11.9, 19.0, 33.3, 14.3, 21.4]\n}\n\ncategories = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\ncolors = ['#d62728', '#ff7f0e', '#c7c7c7', '#1f77b4', '#2ca02c']\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\ndef create_stacked_bar(ax, data, title):\n    bottom = np.zeros(len(data))\n    for i, category in enumerate(categories):\n        values = [data[key][i] for key in data]\n        ax.barh(list(data.keys()), values, left=bottom, color=colors[i], label=category)\n        bottom += np.array(values)\n    ax.set_xlim(0, 60)\n    ax.set_title(title)\n    ax.set_xlabel('Percentage')\n    ax.invert_yaxis()\n    for i in ax.patches:\n        ax.text(i.get_width()+1, i.get_y()+0.5, \n                str(round((i.get_width()), 1))+'%', \n                fontsize=10, color='black')\n\ncreate_stacked_bar(ax1, eye_movement_data, 'Eye Movement')\ncreate_stacked_bar(ax2, brainwave_data, 'Brainwave')\n\nhandles, labels = ax1.get_legend_handles_labels()\nfig.legend(handles, labels, loc='upper center', ncol=len(categories), bbox_to_anchor=(0.5, 1.05))\n\nplt.tight_layout()\nplt.show()", "idx": "bar_21", "width": 10.0, "height": 6.0}
{"file": "radar_13", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the radar chart\nlabels=np.array(['novel', 'video game', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event', 'landscape', 'city', 'movie', 'general', 'mythology'])\nstats=np.array([0.6, 0.8, 0.5, 0.9, 0.7, 0.6, 0.4, 0.3, 0.5, 0.2, 0.4, 0.3, 0.5])\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nstats=np.concatenate((stats,[stats[0]]))\nangles+=angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\nax.plot(angles, stats, color='blue', linewidth=2, marker='o')\nax.fill(angles, stats, color='blue', alpha=0.25)\n\n# Set the labels for each of the axes\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\n\n# Add a legend and title\nax.legend(['Llama-2-70B'], loc='lower right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_13", "width": 6.0, "height": 6.0}
{"file": "graph_4", "code": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a graph\nG = nx.Graph()\n\n# Add nodes\nG.add_node(0, pos=(0, 0))\nG.add_node(1, pos=(1, 0))\nG.add_node(2, pos=(0, 1))\nG.add_node(3, pos=(1, 1))\nG.add_node(4, pos=(0.5, 1.5))\n\n# Add edges\nG.add_edges_from([(0, 1), (0, 2), (1, 3), (2, 3), (2, 4), (3, 4)])\n\n# Define node positions\npos = nx.get_node_attributes(G, 'pos')\n\n# Define node colors\nnode_colors = ['#1f78b4', '#1f78b4', '#1f78b4', '#1f78b4', '#e31a1c']\n\n# Draw the graph\nplt.figure(figsize=(10.0, 8.0))\nnx.draw(G, pos, with_labels=True, node_color=node_colors, node_size=2000, font_size=16, font_color='black', edge_color='#b2b2b2', width=2)\n\n# Show the plot\nplt.show()", "idx": "graph_4", "width": 10.0, "height": 8.0}
{"file": "radar_12", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each axis\nlabels=np.array(['\u03bcAUC', '\u03bcR', '\u03bcTrain', 'NTP', 'NeffTP'])\nstats=np.array([0.33, 0.496, 0.44, 0.5, 0.46])\nstats2=np.array([0.24, 0.37, 0.36, 0.4, 0.29])\nstats3=np.array([0.28, 0.284, 0.22, 0.5, 0.24])\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is made circular, so we need to \"complete the loop\" and append the start to the end.\nstats=np.concatenate((stats,[stats[0]]))\nstats2=np.concatenate((stats2,[stats2[0]]))\nstats3=np.concatenate((stats3,[stats3[0]]))\nangles+=angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0), subplot_kw=dict(polar=True))\nax.fill(angles, stats, color='blue', alpha=0.25)\nax.fill(angles, stats2, color='orange', alpha=0.25)\nax.fill(angles, stats3, color='green', alpha=0.25)\n\n# Draw the lines for each plot\nax.plot(angles, stats, color='blue', linewidth=2, linestyle='dotted', label='GNNk=1')\nax.plot(angles, stats2, color='orange', linewidth=2, linestyle='dotted', label='GNNk=2')\nax.plot(angles, stats3, color='green', linewidth=2, linestyle='dotted', label='GNN\u2191')\n\n# Add labels for each point on the radar\nfor label, angle, stat in zip(labels, angles, stats):\n    ax.text(angle, stat, str(stat), horizontalalignment='center', verticalalignment='center')\n\n# Set the labels for each axis\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\n\n# Add a legend and title\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_12", "width": 8.0, "height": 6.0}
{"file": "3d_11", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Set the size of the figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the radius of the sphere\nr = 10\n\n# Create a grid of points\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = r * np.outer(np.cos(u), np.sin(v))\ny = r * np.outer(np.sin(u), np.sin(v))\nz = r * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the surface\nax.plot_surface(x, y, z, color='b')\n\n# Set the limits of the axes\nax.set_xlim([-r, r])\nax.set_ylim([-r, r])\nax.set_zlim([-r, r])\n\n# Set the labels of the axes\nax.set_xlabel('X axis')\nax.set_ylabel('Y axis')\nax.set_zlabel('Z axis')\n\n# Show the plot\nplt.show()", "idx": "3d_11", "width": 8.0, "height": 6.0}
{"file": "bar_55", "code": "import matplotlib.pyplot as plt\n\n# Data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create horizontal bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.barh(emotions, frequencies, color='salmon')\n\n# Add data labels\nfor bar in bars:\n    plt.text(bar.get_width() - 0.5, bar.get_y() + bar.get_height()/2, f'{bar.get_width()}%', \n             va='center', ha='right', color='white', fontsize=10)\n\n# Set labels and title\nplt.xlabel('Frequency (%)')\nplt.ylabel('Emotion')\nplt.title('')\n\n# Remove spines\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_55", "width": 8.0, "height": 8.0}
{"file": "scatter_21", "code": "import matplotlib.pyplot as plt\n\n# Data for the left plot\nmic_numbers_1 = [2, 3, 4, 5, 6, 7, 8]\nlibricss_wer = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nadditional_data_1 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.9, 0.9]\n\n# Data for the right plot\nmic_numbers_2 = [2, 3, 4, 5, 6, 7, 8]\nami_wer = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nadditional_data_2 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.9, 0.9]\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the left subplot\nax1.plot(mic_numbers_1, libricss_wer, 'o', label='LibriCSS WER', color='cyan')\nax1.plot(mic_numbers_1, additional_data_1, 's', label='Additional Data 1', color='blue')\nax1.set_title('LibriCSS vs Additional Data 1')\nax1.set_xlabel('Number of Microphones')\nax1.set_ylabel('WER(%)')\nax1.legend()\n\n# Plot the right subplot\nax2.plot(mic_numbers_2, ami_wer, '^', label='AMI WER', color='purple')\nax2.plot(mic_numbers_2, additional_data_2, 'D', label='Additional Data 2', color='red')\nax2.set_title('AMI vs Additional Data 2')\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('WER(%)')\nax2.legend()\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()", "idx": "scatter_21", "width": 10.0, "height": 5.0}
{"file": "radar_5", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['[1] Heteroatom alkylation and arylation', '[2] Acylation and related processes',\n              '[3] C-C bond formation', '[4] Heterocycle formation', '[5] Protections',\n              '[6] Deprotections', '[7] Reductions', '[8] Oxidations',\n              '[9] Functional group interconversion, FGI', '[10] Functional group addition, FGA']\nN = len(categories)\n\nbaseline_values = [80, 70, 85, 90, 75, 80, 85, 70, 75, 80]\nretrosyn2_values = [65, 60, 70, 75, 55, 65, 70, 60, 65, 70]\n\n# We need to repeat the first value to close the circular graph:\nbaseline_values += baseline_values[:1]\nretrosyn2_values += retrosyn2_values[:1]\n\n# Compute angle for each category\nangles = [n / float(N) * 2 * np.pi for n in range(N)]\nangles += angles[:1]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable + add labels\nplt.xticks(angles[:-1], categories, color='black', size=10)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([20, 40, 60, 80], [\"20\", \"40\", \"60\", \"80\"], color=\"grey\", size=7)\nplt.ylim(0, 90)\n\n# Plot data\nax.plot(angles, baseline_values, linewidth=2, linestyle='solid', label='Baseline')\nax.fill(angles, baseline_values, 'b', alpha=0.1)\n\nax.plot(angles, retrosyn2_values, linewidth=2, linestyle='solid', label='Retro(Syn)2')\nax.fill(angles, retrosyn2_values, 'r', alpha=0.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_5", "width": 8.0, "height": 8.0}
{"file": "violin_5", "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Sample data\nnp.random.seed(10)\ndata = [np.random.normal(0, std, 100) for std in range(1, 5)]\nlabels = ['A2', 'B1', 'B2', 'C1', 'C2']\n\n# Create a figure with specified size\nplt.figure(figsize=(6.0, 6.0))\n\n# Create a violin plot\nsns.violinplot(data=data, inner=None, palette=\"Set3\")\n\n# Overlay the mean values as stars\nmeans = [np.mean(d) for d in data]\nplt.scatter(range(len(means)), means, color='yellow', s=100, marker='*', zorder=3)\n\n# Customize the plot\nplt.xticks(range(len(labels)), labels)\nplt.legend(['Teacher-Style', 'Standardize'], loc='upper left')\n\n# Show the plot\nplt.show()", "idx": "violin_5", "width": 6.0, "height": 6.0}
{"file": "box_16", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the boxplot in the image\ndata = [\n    np.random.normal(2, 0.5, 100),\n    np.random.normal(2.2, 0.4, 100),\n    np.random.normal(2.4, 0.6, 100),\n    np.random.normal(1.8, 0.3, 100),\n    np.random.normal(1.5, 0.2, 100),\n    np.random.normal(2.7, 0.5, 100)\n]\n\n# Labels for the y-axis\nlabels = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\n\n# Create the boxplot\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nbplot = ax.boxplot(data, vert=False, patch_artist=True, labels=labels)\n\n# Customizing the boxplot colors\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd', '#8c564b']\nfor patch, color in zip(bplot['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the x-axis label\nax.set_xlabel('Mean')\n\n# Set the y-axis tick labels font size\nax.tick_params(axis='y', labelsize=8)\n\n# Set the x-axis limits to match the image\nax.set_xlim(1, 3)\n\n# Display the plot\nplt.show()", "idx": "box_16", "width": 5.0, "height": 5.0}
{"file": "line_68", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nnumber_of_microphones = [2, 3, 4, 5, 6, 7, 8]\nwer_libricss = [8, 7, 6, 5.5, 5, 4.5, 4]\nami_wer = [28, 26, 24, 23, 22, 21, 20]\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\n\n# Plotting the LibriCSS (test) data\nax1.plot(number_of_microphones, wer_libricss, 'o-', color='blue', label='LibriCSS (test)')\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER(%)', color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Create a second y-axis for the AMI (dev) data\nax2 = ax1.twinx()\nax2.plot(number_of_microphones, ami_wer, '^-', color='orange', label='AMI (dev)')\nax2.set_ylabel('AMI WER(%)', color='orange')\nax2.tick_params(axis='y', labelcolor='orange')\n\n# Trends\nax1.plot(number_of_microphones, [3]*len(number_of_microphones), ':', color='green', label='IHM Trend')\nax2.plot(number_of_microphones, [25]*len(number_of_microphones), '--', color='purple', label='SDM Trend')\n\n# Legends\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "line_68", "width": 8.0, "height": 7.0}
{"file": "bar_46", "code": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\npercentages = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create the bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(models, percentages, color='skyblue')\n\n# Add the percentage labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\n\n# Show grid and set the y-axis limit\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.ylim(0, 90)\n\n# Show the plot\nplt.show()", "idx": "bar_46", "width": 10.0, "height": 6.0}
{"file": "bar_45", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nnum_constraint_words = [3, 5, 7, 10]\nllama_default = [-0.5, -1.0, -1.5, -2.0]\nllama_hag = [-1.0, -1.5, -2.0, -2.5]\nvicuna_default = [-0.75, -1.25, -1.75, -2.25]\nvicuna_hag = [-1.25, -1.75, -2.25, -2.75]\n\n# Bar width\nbar_width = 0.2\n\n# Set figure size\nplt.figure(figsize=(10, 7))\n\n# Set position of bar on X axis\nr1 = np.arange(len(llama_default))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Make the plot\nplt.bar(r1, llama_default, color='#FFC0CB', width=bar_width, edgecolor='grey', label='LLAMA-Default')\nplt.bar(r2, llama_hag, color='#FF6347', width=bar_width, edgecolor='grey', label='LLAMA-HAG')\nplt.bar(r3, vicuna_default, color='#ADD8E6', width=bar_width, edgecolor='grey', label='Vicuna-Default')\nplt.bar(r4, vicuna_hag, color='#4682B4', width=bar_width, edgecolor='grey', label='Vicuna-HAG')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Num of Constraint Words', fontweight='bold')\nplt.xticks([r + bar_width for r in range(len(llama_default))], num_constraint_words)\n\n# Create legend & Show graphic\nplt.legend()\nplt.title('Taboo')\nplt.ylabel('Score')\n\n# Show the plot\nplt.show()", "idx": "bar_45", "width": 10.0, "height": 7.0}
{"file": "PIP_3", "code": "import matplotlib.pyplot as plt\n\n# Data\ndata_types = ['BFloat16', 'INT8', 'INT4', 'INT2']\nqwen_7b_chat = [2, 6, 8, 9]\nllama2_7b_chat = [3, 7, 8.5, 9.1]\nmpt_7b_chat = [4, 6.5, 8, 9]\ncodelama_7b_instruct = [1, 5.9, 7.5, 8.8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot(data_types, qwen_7b_chat, marker='o', linestyle='-', color='r', label='Qwen-7B-Chat')\nax.plot(data_types, llama2_7b_chat, marker='^', linestyle='-', color='b', label='Llama2-7B-Chat')\nax.plot(data_types, mpt_7b_chat, marker='s', linestyle='--', color='g', label='MPT-7B-Chat')\nax.plot(data_types, codelama_7b_instruct, marker='d', linestyle='-.', color='y', label='CodeLlama-7B-Instruct')\n\n# Inset for INT8\nax_inset_int8 = ax.inset_axes([0.2, 0.2, 0.15, 0.15])\nax_inset_int8.plot(data_types[1], qwen_7b_chat[1], marker='o', linestyle='-', color='r')\nax_inset_int8.plot(data_types[1], llama2_7b_chat[1], marker='^', linestyle='-', color='b')\nax_inset_int8.plot(data_types[1], mpt_7b_chat[1], marker='s', linestyle='--', color='g')\nax_inset_int8.plot(data_types[1], codelama_7b_instruct[1], marker='d', linestyle='-.', color='y')\nax_inset_int8.set_xlim('INT8', 'INT8')\nax_inset_int8.set_ylim(5.9, 7)\nax_inset_int8.set_xticklabels([])\nax_inset_int8.set_yticklabels([])\n\n# Inset for INT2\nax_inset_int2 = ax.inset_axes([0.7, 0.7, 0.15, 0.15])\nax_inset_int2.plot(data_types[3], qwen_7b_chat[3], marker='o', linestyle='-', color='r')\nax_inset_int2.plot(data_types[3], llama2_7b_chat[3], marker='^', linestyle='-', color='b')\nax_inset_int2.plot(data_types[3], mpt_7b_chat[3], marker='s', linestyle='--', color='g')\nax_inset_int2.plot(data_types[3], codelama_7b_instruct[3], marker='d', linestyle='-.', color='y')\nax_inset_int2.set_xlim('INT2', 'INT2')\nax_inset_int2.set_ylim(8.8, 9.2)\nax_inset_int2.set_xticklabels([])\nax_inset_int2.set_yticklabels([])\n\n# Annotations\nax.annotate('', xy=(1, 6), xytext=(1, 7.5), arrowprops=dict(arrowstyle='->', color='black'))\nax.annotate('', xy=(3, 9), xytext=(3, 8.5), arrowprops=dict(arrowstyle='->', color='black'))\n\n# Title and labels\nax.set_title('Bias Score by Data Type and Model')\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()", "idx": "PIP_3", "width": 10.0, "height": 6.0}
{"file": "box_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata1 = [np.random.normal(9, 1, 100), np.random.normal(10, 1, 100), np.random.normal(11, 1, 100)]\ndata2 = [np.random.normal(9, 1.5, 100), np.random.normal(10, 1.5, 100), np.random.normal(11, 1.5, 100)]\ndata3 = [np.random.normal(9, 2, 100), np.random.normal(10, 2, 100), np.random.normal(11, 2, 100)]\n\n# Combine data into a list of lists\ndata = [data1, data2, data3]\n\n# Set the figure size as specified\nplt.figure(figsize=(8.0, 6.0))\n\n# Create the boxplot\nbp = plt.boxplot(data, positions=[1, 2, 3, 5, 6, 7, 9, 10, 11], widths=0.6, patch_artist=True)\n\n# Set colors for each box\ncolors = ['#d62728', '#1f77b4', '#2ca02c']\nfor i, box in enumerate(bp['boxes']):\n    box.set_facecolor(colors[i % 3])\n\n# Set x-axis labels\nplt.xticks([2, 6, 10], ['Perfect', '-10dB', '0dB'])\n\n# Set y-axis label\nplt.ylabel('SE (bps/Hz)')\n\n# Create legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['GMML (25%-75%)', 'GML (25%-75%)', 'AO (25%-75%)'], loc='upper right', title='Method')\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "box_6", "width": 8.0, "height": 6.0}
{"file": "line_55", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nn_aug = [0, 0.125, 0.25, 0.5, 1, 2, 4, 8]\ncontent = [2, 4, 6, 8, 6, 4, 2, 1]\norganization = [1, 2, 3, 4, 3, 2, 1, 0.5]\nlanguage = [0.5, 1, 1.5, 2, 1.5, 1, 0.5, 0.25]\n\n# Plotting the data\nplt.figure(figsize=(8.0, 3.0))\nplt.plot(n_aug, content, marker='o', color='blue', label='Content')\nplt.plot(n_aug, organization, marker='s', linestyle='--', color='red', label='Organization')\nplt.plot(n_aug, language, marker='^', linestyle=':', color='green', label='Language')\n\n# Adding title and labels\nplt.title('Dynamic Performance Gain Across Different $n_{aug}$ Levels')\nplt.xlabel('$n_{aug}$')\nplt.ylabel('Performance Gain (%)')\n\n# Adding grid and legend\nplt.grid(True)\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_55", "width": 8.0, "height": 3.0}
{"file": "3d_12", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Data points\ntemperature = np.array([-4, -2, 0, 2, 4])\npressure = np.array([-4, -2, 0, 2, 4])\nvolume = np.array([-20, -10, 0, 10, 20])\n\n# Fit line (assuming linear relationship for simplicity)\ncoefficients = np.polyfit(temperature, volume, 1)\npolynomial = np.poly1d(coefficients)\nvolume_fit = polynomial(temperature)\n\n# Plotting\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Scatter plot for discrete points\nax.scatter(temperature, pressure, volume, color='r', label='Discrete Points')\n\n# Line plot for the fit line\nax.plot(temperature, pressure, volume_fit, color='b', label='Fit Line')\n\n# Labels and title\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()", "idx": "3d_12", "width": 8.0, "height": 6.0}
{"file": "radar_10", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for each model\ndata = {\n    'DeeBERT': [60, 70, 80, 75, 65, 70, 80, 85, 90, 75, 80, 70, 65, 60, 55],\n    'PABEE': [50, 60, 70, 65, 55, 60, 70, 75, 80, 65, 70, 60, 55, 50, 45],\n    'CascadeL': [40, 50, 60, 55, 45, 50, 60, 65, 70, 55, 60, 50, 45, 40, 35]\n}\n\n# Define the categories and number of variables\ncategories = ['en', 'fr', 'es', 'de', 'el', 'bg', 'ru', 'tr', 'ar', 'vi', 'th', 'zh', 'hi', 'sw', 'ur']\nN = len(categories)\n\n# Compute angle for each category\nangles = [n / float(N) * 2 * np.pi for n in range(N)]\nangles += angles[:1]  # Complete the loop\n\n# Initialize the radar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Plot each model's data\nfor model, values in data.items():\n    values += values[:1]  # Complete the loop\n    ax.plot(angles, values, label=model)\n\n# Fill the area under the curves\nfor model, values in data.items():\n    values += values[:1]  # Complete the loop\n    ax.fill(angles, values, alpha=0.1)\n\n# Add labels for each category\nplt.xticks(angles[:-1], categories)\n\n# Set the title and the speed-up ratio note\nplt.title('XNLI\\n(speed-up ratio: 4)', size=20, color='black', y=1.1)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_10", "width": 5.0, "height": 5.0}
{"file": "bar_30", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nzero_shot = [6.11, 44.44, 42.78]\none_shot = [28.33, 56.11, 60.56]\nds_agent = [31.11, 85.0, 99.44]\n\n# X-axis positions\nx = np.arange(len(models))\n\n# Bar width\nbar_width = 0.25\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nrects1 = ax.bar(x - bar_width, zero_shot, bar_width, label='Zero-shot', color='salmon')\nrects2 = ax.bar(x, one_shot, bar_width, label='One-shot', color='skyblue')\nrects3 = ax.bar(x + bar_width, ds_agent, bar_width, label='DS-Agent', color='plum')\n\n# Adding text labels\ndef add_labels(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nadd_labels(rects1)\nadd_labels(rects2)\nadd_labels(rects3)\n\n# Axes labels and title\nax.set_ylabel('One pass rate (%)')\nax.set_xticks(x)\nax.set_xticklabels(models)\nax.set_ylim(0, 110)\n\n# Legend\nax.legend()\n\n# Grid\nax.yaxis.grid(True)\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "bar_30", "width": 6.0, "height": 4.0}
{"file": "multidiff_14", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(5.0, 6.0))\n\n# Create a subplot for the first graph (Token rarity)\nplt.subplot(2, 1, 1)\n\n# Data for the first graph\nx1 = np.array([0, 10000, 20000, 30000, 40000, 50000])\ny1 = np.array([-8.0, -8.5, -9.0, -9.5, -10.0, -10.5])\nplt.plot(x1, y1, marker='o', color='black', label='Token rarity')\nplt.fill_between(x1, y1, alpha=0.1, color='gray')\nplt.xticks([0, 10000, 20000, 30000, 40000, 50000], ['0', '10k', '20k', '30k', '40k', '50k'])\nplt.ylabel('Loss')\nplt.title('(a) Token rarity')\nplt.grid(True)\n\n# Create a subplot for the second graph (Length = 20)\nplt.subplot(2, 1, 2)\n\n# Data for the second graph (dummy data for boxplot)\nnp.random.seed(10)\ndata = [np.random.normal(loc=6, scale=1, size=100) for _ in range(5)]\n\nplt.boxplot(data, positions=[0, 10000, 20000, 30000, 40000], widths=5000)\nplt.scatter([0, 10000, 20000, 30000, 40000], [3, 3, 3, 3, 3], marker='^', color='gray')\nplt.xticks([0, 10000, 20000, 30000, 40000], ['0', '10k', '20k', '30k', '40k'])\nplt.ylabel('Loss')\nplt.title('(b) Length = 20')\nplt.grid(True)\n\n# Adjust the layout to prevent overlapping\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_14", "width": 5.0, "height": 6.0}
{"file": "line_78", "code": "import matplotlib.pyplot as plt\n\n# Data for each brand\nquarters = ['Q1', 'Q2', 'Q3', 'Q4', 'Q1_2', 'Q2_2', 'Q3_2', 'Q4_2']\nbrand_a_growth = [1.0, 1.2, 1.5, 1.7, 2.0, 2.2, 2.4, 2.6]\nbrand_b_growth = [1.4, 1.6, 1.8, 2.0, 1.5, 1.7, 2.2, 2.4]\nbrand_c_growth = [0.5, 0.7, 1.0, 1.2, 1.5, 1.7, 2.0, 2.2]\nbrand_d_growth = [1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.5]\nbrand_e_growth = [1.0, 1.3, 1.6, 1.9, 2.1, 2.3, 2.5, 2.7]\nbrand_f_growth = [1.2, 1.0, 1.4, 1.6, 1.8, 1.5, 2.0, 2.2]\n\n# Create subplots\nfig, axs = plt.subplots(3, 2, figsize=(10.0, 10.0))\n\n# Plot data for each brand\naxs[0, 0].plot(quarters, brand_a_growth, marker='o', color='red', linestyle='-', label='Brand A Sales Growth')\naxs[0, 1].plot(quarters, brand_b_growth, marker='s', color='cyan', linestyle='--', label='Brand B Sales Growth')\naxs[1, 0].plot(quarters, brand_c_growth, marker='d', color='magenta', linestyle='-.', label='Brand C Sales Growth')\naxs[1, 1].plot(quarters, brand_d_growth, marker='^', color='blue', linestyle=':', label='Brand D Sales Growth')\naxs[2, 0].plot(quarters, brand_e_growth, marker='*', color='purple', linestyle='-', label='Brand E Sales Growth')\naxs[2, 1].plot(quarters, brand_f_growth, marker='x', color='orange', linestyle='--', label='Brand F Sales Growth')\n\n# Set titles and labels\naxs[0, 0].set_title('Brand A')\naxs[0, 1].set_title('Brand B')\naxs[1, 0].set_title('Brand C')\naxs[1, 1].set_title('Brand D')\naxs[2, 0].set_title('Brand E')\naxs[2, 1].set_title('Brand F')\n\nfor ax in axs.flat:\n    ax.set(xlabel='Quarter', ylabel='Sales Growth')\n    ax.label_outer()\n    ax.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_78", "width": 10.0, "height": 10.0}
{"file": "line_60", "code": "import matplotlib.pyplot as plt\n\n# Sample data\nweeks = list(range(1, 28))\nperformance = [0.9, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, -0.1, -0.5, -1.0, -1.2, -1.1, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 0.7, 0.9, 1.0]\nefficiency = [-0.9, -1.1, -1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.1, 0.9, 0.7, 0.5, 0.3, 0.1, -0.1, -0.3, -0.5, -0.7, -0.9, -1.0, -1.1]\n\n# Create figure and axis objects\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot performance data\ncolor = 'tab:blue'\nax1.set_xlabel('Weeks')\nax1.set_ylabel('Performance', color=color)\nax1.plot(weeks, performance, marker='o', color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the efficiency data\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Efficiency', color=color)\nax2.plot(weeks, efficiency, marker='x', linestyle='--', color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set the title\nplt.title('Performance and Efficiency Over Weeks')\n\n# Show the legend\nax1.legend(['Performance'], loc='upper left')\nax2.legend(['Efficiency'], loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "line_60", "width": 8.0, "height": 6.0}
{"file": "errorbar_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'Llama2']\nground_truth = [55, 60, 50, 65, 45, 40, 70, 60, 50]\nweak_labels = [45, 50, 40, 55, 35, 30, 60, 50, 40]\nerror = [5, 5, 5, 5, 5, 5, 5, 5, 5]\n\n# Bar positions\nx = np.arange(len(models))\nwidth = 0.35\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nrects1 = ax.bar(x - width/2, ground_truth, width, label='Ground-truth labels', color='salmon', yerr=error, capsize=5)\nrects2 = ax.bar(x + width/2, weak_labels, width, label='Weak labels', color='skyblue', yerr=error, capsize=5)\n\n# Labels and Title\nax.set_ylabel('Accuracy')\nax.set_xticks(x)\nax.set_xticklabels(models)\nax.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.show()", "idx": "errorbar_8", "width": 10.0, "height": 3.0}
{"file": "bar_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Notre-Dame de Paris', 'Demi-Gods and Semi-Devils', 'The Count of Monte Cristo', 'Game of Thrones', 'Attack on Titan']\nscores = [0.7, 0.6, 0.5, 0.4, 0.3]\nx = np.arange(len(categories))\n\n# Plot\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nbar_width = 0.15\n\nax.bar(x - 2*bar_width, scores, bar_width, label=categories[0])\nax.bar(x - bar_width, scores, bar_width, label=categories[1])\nax.bar(x, scores, bar_width, label=categories[2])\nax.bar(x + bar_width, scores, bar_width, label=categories[3])\nax.bar(x + 2*bar_width, scores, bar_width, label=categories[4])\n\n# Labels, title and legend\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\nax.set_title('Scores by category')\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show plot\nplt.show()", "idx": "bar_1", "width": 7.0, "height": 5.0}
{"file": "bar_53", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'specific', 'substantial', 'tiny', 'very', 'single', 'slight', 'relatively', 'moderate', 'handful', 'low']\nhuman_dist = [0.25, 0.20, 0.27, 0.15, 0.18, 0.22, 0.10, 0.15, 0.12, 0.17, 0.25, 0.08, 0.13, 0.07, 0.05, 0.10, 0.15, 0.03, 0.02]\nmodel_dist = [0.20, 0.15, 0.22, 0.10, 0.13, 0.17, 0.05, 0.10, 0.07, 0.12, 0.20, 0.03, 0.08, 0.02, 0.03, 0.05, 0.10, 0.01, 0.01]\n\nx = np.arange(len(words))  # the label locations\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbar_width = 0.35  # the width of the bars\nrects1 = ax.bar(x - bar_width/2, human_dist, bar_width, label='Human Distribution (Prob. mass shown:1.00)', hatch='/', color='orange', edgecolor='black')\nrects2 = ax.bar(x + bar_width/2, model_dist, bar_width, label='Model Distribution (Prob. mass shown:0.70)', hatch='.', color='skyblue', edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Word')\nax.set_ylabel('Probability')\nax.set_title('Context: The human body can tolerate only a')\nax.set_xticks(x)\nax.set_xticklabels(words, rotation=45, ha='right')\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_53", "width": 10.0, "height": 8.0}
{"file": "multidiff_6", "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Data for the scatter plot\nbrands = ['Prada', 'Gucci', 'Chanel', 'Louis Vuitton', 'Dior']\nprices = [1100, 1500, 1700, 1900, 1300]\npopularity = [7.5, 8.5, 9.0, 9.25, 8.0]\ncolors = ['blue', 'purple', 'green', 'teal', 'yellow']\n\n# Data for the violin plot\nsatisfaction_data = {\n    'Gucci': np.random.normal(7, 1, 200),\n    'Prada': np.random.normal(6, 1.5, 200),\n    'Louis Vuitton': np.random.normal(8, 1, 200),\n    'Chanel': np.random.normal(7.5, 1, 200),\n    'Dior': np.random.normal(6.5, 1.5, 200)\n}\n\n# Create a figure with custom size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Scatter plot for brand popularity vs price\nfor i in range(len(brands)):\n    ax1.scatter(prices[i], popularity[i], color=colors[i], label=brands[i], s=100)\nax1.set_title('Luxury Brand Popularity vs Price')\nax1.set_xlabel('Average Price ($)')\nax1.set_ylabel('Popularity Index')\nax1.legend()\n\n# Violin plot for customer satisfaction distribution across brands\nsns.violinplot(data=satisfaction_data, ax=ax2, palette='cool')\nax2.set_title('Customer Satisfaction Distribution Across Brands')\nax2.set_ylabel('Customer Satisfaction')\nax2.set_xlabel('Brands')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()", "idx": "multidiff_6", "width": 10.0, "height": 6.0}
{"file": "errorbar_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nhyperparameters = ['128 / 0.1 / 0.0001', '128 / 0.1 / 0.001', '128 / 0.3 / 0.0001', '128 / 0.3 / 0.001',\n                   '128 / 0.5 / 0.0001', '128 / 0.5 / 0.001', '256 / 0.1 / 0.0001', '256 / 0.1 / 0.001',\n                   '256 / 0.3 / 0.0001', '256 / 0.3 / 0.001', '256 / 0.5 / 0.0001', '256 / 0.5 / 0.001',\n                   '64 / 0.1 / 0.0001', '64 / 0.1 / 0.001', '64 / 0.3 / 0.0001', '64 / 0.3 / 0.001',\n                   '64 / 0.5 / 0.0001', '64 / 0.5 / 0.001']\nmetric_means = np.random.rand(18)\nmetric_std = np.random.rand(18) * 0.1\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\ny_pos = np.arange(len(hyperparameters))\n\nax.barh(y_pos, metric_means, xerr=metric_std, align='center', color='orange', hatch='/', edgecolor='black', capsize=5)\nax.set_yticks(y_pos)\nax.set_yticklabels(hyperparameters)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Metric')\nax.set_title('FashionMNIST (NEURAL)')\n\nplt.show()", "idx": "errorbar_3", "width": 10.0, "height": 10.0}
{"file": "bar_61", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Internet Penetration', 'Smartphone Usage', 'Research Investment', 'Patents Filed']\nvalues = [3000, 2000, 1500, 1000]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nbar_width = 0.35\nindex = np.arange(len(categories))\nbar1 = ax.barh(index, values, bar_width, color='red', hatch='*', label='Internet Penetration (%)')\nbar2 = ax.barh(index + bar_width, values, bar_width, color='green', hatch='/', label='Smartphone Usage (%)')\nbar3 = ax.barh(index + 2*bar_width, values, bar_width, color='blue', hatch='\\\\', label='Research Investment (% of GDP)')\n\n# Set the y-axis labels\nax.set_yticks(index + bar_width)\nax.set_yticklabels(categories)\n\n# Set the x-axis limits\nax.set_xlim(0, 3250)\n\n# Add grid lines\nax.grid(True, which='both', axis='x', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper right', bbox_to_anchor=(1.0, 1.15))\n\n# Show the plot\nplt.show()", "idx": "bar_61", "width": 8.0, "height": 5.0}
{"file": "line_58", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.arange(0, 201)\nbase_model_metric1 = np.random.uniform(0.2, 0.7, size=201)\nour_model_metric1 = np.random.uniform(0.2, 0.5, size=201)\nbase_model_metric2 = np.random.uniform(0.2, 0.7, size=201)\nour_model_metric2 = np.random.uniform(0.2, 0.5, size=201)\n\n# Create subplots with specified figsize\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot Metric 1\nax1.plot(iterations, base_model_metric1, label='Base Model', color='blue')\nax1.plot(iterations, our_model_metric1, label='Our Model', color='orange')\nax1.set_title('Metric 1')\nax1.set_xlabel('Training Iterations')\nax1.set_ylabel('Metric Value')\nax1.legend()\n\n# Plot Metric 2\nax2.plot(iterations, base_model_metric2, label='Base Model', color='blue')\nax2.plot(iterations, our_model_metric2, label='Our Model', color='orange')\nax2.set_title('Metric 2')\nax2.set_xlabel('Training Iterations')\nax2.set_ylabel('Metric Value')\nax2.legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "line_58", "width": 10.0, "height": 4.0}
{"file": "hist_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the histogram\nrecord_of_the_year = np.random.randint(0, 300, 100)\nalbum_of_the_year = np.random.randint(0, 300, 100)\nsong_of_the_year = np.random.randint(0, 300, 100)\nbest_new_artist = np.random.randint(0, 300, 100)\nbest_pop_solo_performance = np.random.randint(0, 300, 100)\n\n# Set the figure size as specified\nplt.figure(figsize=(12.0, 8.0))\n\n# Plot the histograms with transparency (alpha) for overlapping\nplt.hist(record_of_the_year, bins=30, alpha=0.5, label='Record of the Year', color='salmon')\nplt.hist(album_of_the_year, bins=30, alpha=0.5, label='Album of the Year', color='orange')\nplt.hist(song_of_the_year, bins=30, alpha=0.5, label='Song of the Year', color='gold')\nplt.hist(best_new_artist, bins=30, alpha=0.5, label='Best New Artist', color='yellow')\nplt.hist(best_pop_solo_performance, bins=30, alpha=0.5, label='Best Pop Solo Performance', color='khaki')\n\n# Add title and labels\nplt.title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\nplt.xlabel('Number of Nominations')\nplt.ylabel('Frequency')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "hist_18", "width": 12.0, "height": 8.0}
{"file": "box_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the boxplots\ndata_ST_CVRP = np.random.normal(35, 10, 100)\ndata_ST_VRPTW = np.random.normal(45, 15, 100)\ndata_ST_All = np.random.normal(40, 20, 100)\ndata_Ours = np.random.normal(5, 5, 100)\n\ndata = [data_ST_CVRP, data_ST_VRPTW, data_ST_All, data_Ours]\n\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create the boxplot\nbp = ax.boxplot(data, patch_artist=True)\n\n# Set colors for each box\ncolors = ['#1f77b4', '#9467bd', '#ff7f0e', '#d62728']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the x-axis labels\nax.set_xticklabels(['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'])\n\n# Set the y-axis label\nax.set_ylabel('Performance Gap (%)')\n\n# Add a legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3]], \n          ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'], loc='upper right')\n\nplt.show()", "idx": "box_3", "width": 8.0, "height": 6.0}
{"file": "scatter_24", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([70, 75, 80, 85, 90])\ny1 = np.array([30, 35, 40, 35, 45])\ny2 = np.array([15, 20, 25, 20, 30])\ny3 = np.array([5, 10, 15, 10, 20])\n\n# Set the figure size\nplt.figure(figsize=(15.0, 5.0))\n\n# First subplot\nplt.subplot(1, 3, 1)\nplt.scatter(x, y1, c=x, cmap='Blues', edgecolor='black', linewidth=1, alpha=0.75)\nplt.plot(x, y1, linestyle='--', color='deepskyblue')\nplt.colorbar(label='Color scale for X')\nplt.title('Scatter Plot - deepskyblue')\nplt.xlabel('X Values')\nplt.ylabel('Y Values')\n\n# Second subplot\nplt.subplot(1, 3, 2)\nplt.scatter(x, y2, c=x, cmap='Purples', edgecolor='black', linewidth=1, alpha=0.75)\nplt.plot(x, y2, linestyle='--', color='magenta')\nplt.colorbar(label='Color scale for X')\nplt.title('Scatter Plot - magenta')\nplt.xlabel('X Values')\nplt.ylabel('Y Values')\n\n# Third subplot\nplt.subplot(1, 3, 3)\nplt.scatter(x, y3, c=x, cmap='Greens', edgecolor='black', linewidth=1, alpha=0.75)\nplt.plot(x, y3, linestyle='--', color='limegreen')\nplt.colorbar(label='Color scale for X')\nplt.title('Scatter Plot - limegreen')\nplt.xlabel('X Values')\nplt.ylabel('Y Values')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "scatter_24", "width": 15.0, "height": 5.0}
{"file": "heatmap_29", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = np.array([[17, 79, 4, 42],\n                 [36, 53, 5, 38],\n                 [28, 34, 0, 0],\n                 [23, 35, 75, 55]])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Display the data as an image\ncax = ax.matshow(data, cmap='Blues')\n\n# Add colorbar\ncbar = plt.colorbar(cax, ticks=[0, 50, 100], orientation='vertical')\ncbar.ax.set_yticklabels(['Low', 'Medium', 'High'])\n\n# Add text annotations\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        c = 'green' if data[i, j] > 50 else 'black'\n        ax.text(j, i, str(data[i, j]), va='center', ha='center', color=c)\n\n# Set title\nax.set_title('Degree of acceptance of a product', pad=20)\n\n# Hide the axes ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Show the plot\nplt.show()", "idx": "heatmap_29", "width": 5.0, "height": 4.0}
{"file": "HR_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar charts\nbits = np.arange(10)\nrecall_sum_flickr30k = [100, 150, 200, 250, 300, 350, 400, 450, 500, 550]\nrecall_sum_mscoco = [100, 150, 200, 250, 300, 350, 400, 450, 500, 550]\n\n# Colors for the bars\ncolors = ['green', 'orange', 'brown', 'purple'] + ['blue'] * 6\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# First subplot for Flickr30k\nax1.bar(bits, recall_sum_flickr30k, color=colors)\nax1.set_title('Flickr30k')\nax1.set_xlabel('Number of bits')\nax1.set_ylabel('Recall sum')\nax1.set_ylim(0, 600)\n\n# Second subplot for MS-COCO\nax2.bar(bits, recall_sum_mscoco, color=colors)\nax2.set_title('MS-COCO')\nax2.set_xlabel('Number of bits')\nax2.set_ylabel('Recall sum')\nax2.set_ylim(0, 600)\n\n# Adjust the layout and show the plot\nplt.tight_layout()\nplt.show()", "idx": "HR_3", "width": 10.0, "height": 4.0}
{"file": "multidiff_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data for demonstration\ndebater_categories = ['bo32', 'bo4c8', 'c16', 'bo16', 'bo32', 'bo4c8', 'c16', 'bo16', 'bo32', 'bo4c8', 'c16', 'bo16']\nelo_ratings = np.random.randint(50, 400, size=len(debater_categories))\ncorrect_incorrect = ['Correct' if i % 2 == 0 else 'Incorrect' for i in range(len(debater_categories))]\n\naggregate_elo = np.linspace(-200, 200, 10)\ncorrect_rating = np.random.randint(50, 300, size=10)\njudge_accuracy = np.random.randint(30, 100, size=10)\nerror = np.random.randint(5, 20, size=10)\n\n# Create figure with specified figsize\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# First subplot\nfor i, category in enumerate(debater_categories):\n    if correct_incorrect[i] == 'Correct':\n        axs[0].scatter(elo_ratings[i], category, color='black')\n    else:\n        axs[0].scatter(elo_ratings[i], category, facecolors='none', edgecolors='black')\naxs[0].set_xlabel('Elo Rating')\naxs[0].set_ylabel('Debater')\naxs[0].legend(['Assignment', 'Correct', 'Incorrect'], loc='lower right')\n\n# Second subplot\naxs[1].errorbar(aggregate_elo, correct_rating, yerr=error, fmt='o', color='orange', ecolor='orange', capsize=5)\naxs[1].set_xlabel('Aggregate Elo Rating')\naxs[1].set_ylabel('Correct Rating - Incorrect Rating')\n\n# Third subplot\naxs[2].errorbar(aggregate_elo, judge_accuracy, yerr=error, fmt='o', color='blue', ecolor='blue', capsize=5)\naxs[2].plot(aggregate_elo, judge_accuracy, color='black')  # Placeholder for trend line\naxs[2].set_xlabel('Aggregate Elo Rating')\naxs[2].set_ylabel('Judge Accuracy (%)')\naxs[2].text(0, 35, 'Judge: GPT-4-Turbo', color='blue')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "multidiff_9", "width": 10.0, "height": 4.0}
{"file": "bar_26", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\nemotions = ['Ang', 'Cnt', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative = [500, 300, 400, 200, 0, 0, 600, 0]\npositive = [0, 0, 0, 0, 3500, 0, 0, 0]\nnone = [0, 0, 0, 0, 0, 3700, 0, 0]\nmixed = [0, 0, 0, 0, 0, 0, 0, 500]\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the bar chart\nbar_width = 0.2\nindex = range(len(emotions))\n\nplt.bar(index, negative, bar_width, color='red', label='negative')\nplt.bar([i + bar_width for i in index], positive, bar_width, color='green', label='positive')\nplt.bar([i + 2*bar_width for i in index], none, bar_width, color='grey', label='none')\nplt.bar([i + 3*bar_width for i in index], mixed, bar_width, color='orange', label='mixed')\n\n# Add labels and title\nplt.xlabel('Emotions')\nplt.ylabel('Frequency')\nplt.title('Emotion Frequencies by Sentiment')\n\n# Add x-axis tick labels\nplt.xticks([i + 1.5*bar_width for i in index], emotions)\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "bar_26", "width": 6.0, "height": 4.0}
{"file": "bar_50", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nvalues1 = [40, 35, 34]\nvalues2 = [30, 28, 30]\nvalues3 = [22, 22, 22]\nvalues4 = [-6, -12, -14]\nvalues5 = [-16, -14, -16]\nvalues6 = [-20, -30, -35]\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 5.0))\n\n# Plotting the bars\nbar_width = 0.15\nindex = range(len(categories))\n\nplt.bar(index, values1, bar_width, label='Value 1', color='pink', edgecolor='black')\nplt.bar([i + bar_width for i in index], values2, bar_width, label='Value 2', color='lightblue', edgecolor='black')\nplt.bar([i + 2*bar_width for i in index], values3, bar_width, label='Value 3', color='lightgreen', edgecolor='black')\nplt.bar([i + 3*bar_width for i in index], values4, bar_width, label='Value 4', color='lightcoral', edgecolor='black')\nplt.bar([i + 4*bar_width for i in index], values5, bar_width, label='Value 5', color='paleturquoise', edgecolor='black')\nplt.bar([i + 5*bar_width for i in index], values6, bar_width, label='Value 6', color='peachpuff', edgecolor='black')\n\n# Adding the text on top of the bars\nfor i in index:\n    plt.text(i, values1[i] + 1, str(values1[i]), ha='center')\n    plt.text(i + bar_width, values2[i] + 1, str(values2[i]), ha='center')\n    plt.text(i + 2*bar_width, values3[i] + 1, str(values3[i]), ha='center')\n    plt.text(i + 3*bar_width, values4[i] - 3, str(values4[i]), ha='center', color='white')\n    plt.text(i + 4*bar_width, values5[i] - 3, str(values5[i]), ha='center', color='white')\n    plt.text(i + 5*bar_width, values6[i] - 3, str(values6[i]), ha='center', color='white')\n\n# Setting the x-axis labels\nplt.xticks([i + 2.5*bar_width for i in index], categories)\n\n# Adding labels and title\nplt.xlabel('Categories')\nplt.ylabel('Reward Values')\nplt.title('Bar Chart with Multiple Values')\n\n# Display the legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "bar_50", "width": 6.0, "height": 5.0}
{"file": "area_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntime_steps = np.linspace(0, 4, 100)\ngt = time_steps**2\ndrs = 5*np.log(time_steps+1)\npr_based = np.sqrt(time_steps)*2\n\n# Create figure and axes with specified figsize\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10))\n\n# Plot the first graph\nax1.plot(time_steps, gt, 'g-o', label='GT')\nax1.plot(time_steps, drs, 'b-s', label='DRS')\nax1.plot(time_steps, pr_based, 'r-^', label='PR-based')\nax1.fill_between(time_steps, gt, drs, color='green', alpha=0.1)\nax1.fill_between(time_steps, drs, pr_based, color='blue', alpha=0.1)\nax1.set_ylabel('RSA')\nax1.legend()\n\n# Plot the second graph\nax2.plot(time_steps, gt, 'g-o', label='GT')\nax2.plot(time_steps, drs, 'b-s', label='DRS')\nax2.plot(time_steps, pr_based, 'r-^', label='PR-based')\nax2.fill_between(time_steps, gt, drs, color='green', alpha=0.1)\nax2.fill_between(time_steps, drs, pr_based, color='blue', alpha=0.1)\nax2.set_ylabel('CR')\nax2.set_xlabel('time step')\nax2.legend()\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "area_2", "width": 10.0, "height": 10.0}
{"file": "line_53", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for each subplot\nx1 = np.array([0.7, 0.75, 0.8, 0.85, 0.9])\ny1 = np.array([82, 84, 80, 78, 79])\ne1 = np.array([1, 2, 1, 2, 1])\n\nx2 = np.array([0.1, 0.2, 0.3, 0.4])\ny2 = np.array([76, 78, 81, 79])\ne2 = np.array([2, 1, 2, 1])\n\nx3 = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\ny3 = np.array([70, 75, 80, 85, 65, 75])\ne3 = np.array([3, 2, 3, 2, 3, 2])\n\nx4 = np.array([400, 600, 800, 1000, 1200])\ny4 = np.array([82, 80, 72, 68, 65])\ne4 = np.array([2, 3, 2, 3, 2])\n\nx5 = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ny5 = np.array([60, 65, 70, 55, 65])\ne5 = np.array([4, 3, 4, 3, 4])\n\nx6 = np.array([300, 500, 700, 900, 1100])\ny6 = np.array([85, 80, 75, 70, 68])\ne6 = np.array([1, 2, 1, 2, 1])\n\n# Create subplots\nfig, axs = plt.subplots(2, 3, figsize=(12.0, 8.0))\n\n# Plot data with error bars\naxs[0, 0].errorbar(x1, y1, yerr=e1, fmt='o-', color='red', label='Positive Bound')\naxs[0, 1].errorbar(x2, y2, yerr=e2, fmt='o-', color='green', label='Negative Bound')\naxs[0, 2].errorbar(x3, y3, yerr=e3, fmt='o-', color='blue', label='Contrastive Loss Weight')\naxs[1, 0].errorbar(x4, y4, yerr=e4, fmt='o-', color='purple', label='Fuzzy Coefficient')\naxs[1, 1].errorbar(x5, y5, yerr=e5, fmt='o-', color='magenta', label='Additional Metric 1')\naxs[1, 2].errorbar(x6, y6, yerr=e6, fmt='o-', color='cyan', label='Additional Metric 2')\n\n# Set titles and labels\naxs[0, 0].set_title('Positive Bound')\naxs[0, 1].set_title('Negative Bound')\naxs[0, 2].set_title('Contrastive Loss Weight')\naxs[1, 0].set_title('Fuzzy Coefficient')\naxs[1, 1].set_title('Additional Metric 1')\naxs[1, 2].set_title('Additional Metric 2')\n\naxs[1, 0].set_xlabel('Fuzzy Coefficient')\naxs[1, 1].set_xlabel('Additional Metric 1')\naxs[1, 2].set_xlabel('Additional Metric 2')\n\n# Add legends\naxs[0, 0].legend()\naxs[0, 1].legend()\naxs[0, 2].legend()\naxs[1, 0].legend()\naxs[1, 1].legend()\naxs[1, 2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_53", "width": 12.0, "height": 8.0}
{"file": "errorbar_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\njudges = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\nprotocols = ['Expert', 'Blind', 'Consultancy', 'Debate', 'Interactive Consultancy', 'Interactive Debate']\naccuracy_means = [\n    [60, 70, 80, 90, 100, 110],  # GPT-3.5-Turbo\n    [65, 75, 85, 95, 105, 115],  # Claude 2.1\n    [70, 80, 90, 100, 110, 120],  # GPT-4-Turbo\n    [75, 85, 95, 105, 115, 125]   # Human\n]\naccuracy_std = [\n    [5, 5, 5, 5, 5, 5],  # GPT-3.5-Turbo\n    [5, 5, 5, 5, 5, 5],  # Claude 2.1\n    [5, 5, 5, 5, 5, 5],  # GPT-4-Turbo\n    [5, 5, 5, 5, 5, 5]   # Human\n]\n\n# Set up the figure and axes\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Bar width\nbar_width = 0.1\n\n# Set position of bar on X axis\nr = np.arange(len(judges))\nfor i in range(len(protocols)):\n    r = [x + bar_width for x in r]\n\n    # Make the plot\n    ax.bar(r, [row[i] for row in accuracy_means], color=plt.cm.Paired(i / len(protocols)), width=bar_width, edgecolor='grey', label=protocols[i], yerr=[row[i] for row in accuracy_std], capsize=5)\n\n# Add xticks on the middle of the group bars\nax.set_xlabel('Judge', fontweight='bold')\nax.set_xticks([r + bar_width for r in range(len(judges))])\nax.set_xticklabels(judges)\n\n# Create legend & Show graphic\nax.legend()\n\n# Set y-axis label\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set chart title\nax.set_title('Protocol')\n\n# Show the plot\nplt.show()", "idx": "errorbar_2", "width": 10.0, "height": 6.0}
{"file": "multidiff_5", "code": "import matplotlib.pyplot as plt\n\n# Data for pie chart\nlabels = 'Modern Records', 'Ancient Scripts', 'Medieval Texts', 'Renaissance Literature'\nsizes = [35, 15, 30, 20]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Data for scatter plot\nperiods = ['Ancient', 'Medieval', 'Renaissance', 'Modern']\nyears = [500, 1000, 1500, 2000]\ndocument_counts = [150, 250, 200, 350]\nsizes_scatter = [100, 200, 150, 300]\n\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Pie chart\nax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax1.set_title('Historical Document Types in Library')\n\n# Scatter plot\nax2.scatter(years, document_counts, s=sizes_scatter, alpha=0.5, color='purple')\nax2.set_xlabel('Year')\nax2.set_ylabel('Number of Documents')\nax2.set_title('Document Count Over Historical Periods')\nax2.grid(True)\n\n# Annotate scatter plot points\nfor i, txt in enumerate(periods):\n    ax2.annotate(txt, (years[i], document_counts[i]))\n\nplt.tight_layout()\nplt.show()", "idx": "multidiff_5", "width": 10.0, "height": 5.0}
{"file": "bar_80", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nnum_of_constraint_words = [3, 5, 7, 10]\nllama_default = [0.5, 1.5, -0.5, 1.5]\nllama_hag = [0.3, 1.3, -0.7, 1.3]\nvicuna_default = [0.4, 1.4, -0.6, 1.4]\nvicuna_hag = [0.2, 1.2, -0.8, 1.2]\n\n# Error data (for demonstration purposes, using random values)\nerror = np.random.rand(4) * 0.2\n\n# Bar width\nbar_width = 0.2\n\n# Set figure size\nplt.figure(figsize=(10.0, 5.0))\n\n# Plotting\nplt.bar(np.array(num_of_constraint_words) - bar_width*1.5, llama_default, bar_width, label='LLAMA-Default', color='lightblue', yerr=error, capsize=5, hatch='//')\nplt.bar(np.array(num_of_constraint_words) - bar_width/2, llama_hag, bar_width, label='LLAMA-HAG', color='peachpuff', yerr=error, capsize=5, hatch='//')\nplt.bar(np.array(num_of_constraint_words) + bar_width/2, vicuna_default, bar_width, label='Vicuna-Default', color='lightgreen', yerr=error, capsize=5, hatch='//')\nplt.bar(np.array(num_of_constraint_words) + bar_width*1.5, vicuna_hag, bar_width, label='Vicuna-HAG', color='wheat', yerr=error, capsize=5, hatch='//')\n\n# Labels and Title\nplt.xlabel('Num of Constraint Words')\nplt.ylabel('Score')\nplt.title('Taboo')\n\n# Adding x-ticks\nplt.xticks(num_of_constraint_words)\n\n# Adding legend\nplt.legend()\n\n# Show grid\nplt.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Show plot\nplt.show()", "idx": "bar_80", "width": 10.0, "height": 5.0}
{"file": "3d_3", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Data\nK = np.array([1, 2, 3, 4, 5, 6])\ntau = np.array([1.0, 1.2, 1.4, 1.6, 1.8, 2.0])\naccuracy = np.array([\n    [82, 84, 86, 88, 90, 92],\n    [83, 85, 87, 89, 91, 93],\n    [84, 86, 88, 90, 92, 94],\n    [85, 87, 89, 91, 93, 95],\n    [86, 88, 90, 92, 94, 96],\n    [87, 89, 91, 93, 95, 97]\n])\n\nK, tau = np.meshgrid(K, tau)\n\n# Plot\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot a 3D surface\nsurf = ax.plot_surface(K, tau, accuracy, cmap='viridis')\n\n# Customization\nax.set_xlabel('K')\nax.set_ylabel('tau')\nax.set_zlabel('Accuracy (%)')\nax.set_title('CIFAR10 Spiking ResNet18\\nT = 6')\n\n# Show plot\nplt.show()", "idx": "3d_3", "width": 10.0, "height": 6.0}
{"file": "box_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\nmethods = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nmean_scores = [np.random.rand(10) + 0.5 for _ in methods]\nmedian_scores = [np.random.rand(10) + 0.3 for _ in methods]\niqr_mean_scores = [np.random.rand(10) + 0.4 for _ in methods]\noptimality_gap_scores = [np.random.rand(10) + 0.2 for _ in methods]\n\n# Create a figure with specified size\nfig, axs = plt.subplots(1, 4, figsize=(12.0, 3.0), sharey=True)\n\n# Define a function to create boxplots\ndef create_boxplot(ax, data, title):\n    ax.boxplot(data, vert=False, patch_artist=True)\n    ax.set_title(title)\n    ax.set_yticklabels(methods)\n    ax.set_xlabel('Human Normalized Score')\n    ax.grid(True)\n\n# Create boxplots for each score type\ncreate_boxplot(axs[0], mean_scores, 'Mean (\u2191)')\ncreate_boxplot(axs[1], median_scores, 'Median (\u2191)')\ncreate_boxplot(axs[2], iqr_mean_scores, 'Interquartile Mean (\u2191)')\ncreate_boxplot(axs[3], optimality_gap_scores, 'Optimality Gap (\u2193)')\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "box_4", "width": 12.0, "height": 3.0}
{"file": "bar_49", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nresolutions = ['224', '128', '64', '32']\nimagenet_1k = [75, 65, 50, 30]\nimagenet_f = [70, 60, 45, 25]\npac_fno = [80, 70, 55, 35]\npac_fno_f = [85, 75, 60, 40]\n\n# X-axis positions\nx = np.arange(len(resolutions))\n\n# Bar width\nbar_width = 0.2\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nrects1 = ax.bar(x - bar_width/2, imagenet_1k, bar_width, label='ImageNet-1k', color='lightblue')\nrects2 = ax.bar(x + bar_width/2, imagenet_f, bar_width, label='ImageNet (F)', color='orange')\nrects3 = ax.bar(x - 3*bar_width/2, pac_fno, bar_width, label='PAC-FNO', color='blue')\nrects4 = ax.bar(x + 3*bar_width/2, pac_fno_f, bar_width, label='PAC-FNO (F)', color='brown')\n\n# Adding text labels\ndef add_labels(rects, labels):\n    for rect, label in zip(rects, labels):\n        height = rect.get_height()\n        ax.annotate('{}'.format(label),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nadd_labels(rects1, ['29%', '', '', ''])\nadd_labels(rects4, ['', '', '', '180%'])\n\n# Arrows\nax.annotate('', xy=(x[0], imagenet_1k[0]), xytext=(x[0], pac_fno[0]),\n            arrowprops=dict(facecolor='black', shrink=0.05))\nax.annotate('', xy=(x[-1], imagenet_f[-1]), xytext=(x[-1], pac_fno_f[-1]),\n            arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Horizontal line\nax.axhline(y=80, color='blue', linestyle='--')\n\n# Set labels and title\nax.set_ylabel('Top-1 Acc. (%)')\nax.set_xlabel('Resolutions')\nax.set_title('Top-1 Accuracy by Resolution and Method')\nax.set_xticks(x)\nax.set_xticklabels(resolutions)\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()", "idx": "bar_49", "width": 8.0, "height": 6.0}
{"file": "PIP_1", "code": "import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Sample data for plotting\nx1 = [-35, -30, -25, -20, -15, -10, -5, 0]\ny1 = [5, 10, 15, 20, 25, 30, 35, 40]\nx2 = [-8, -7, -6, -5, -4, -3, -2, -1, 0]\ny2 = [0, 1, 2, 3, 4, 5, 6]\nx3 = [-3, -2, -1, 0]\ny3 = [-2, -1, 0, 1]\n\n# Create a figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the data on the first subplot\nax1.scatter(x1, y1, color='green', marker='^')\nax1.set_xlim(-40, 5)\nax1.set_ylim(-5, 40)\nax1.set_xlabel('\u0394 Robust Accuracy (%)')\nax1.set_ylabel('\u0394 RNFR (%)')\nax1.set_facecolor('#FFCCCC')  # Light red background color\nax1.grid(True)\n\n# Plot the data on the second subplot\nax2.scatter(x2, y2, color='green', marker='^')\nax2.scatter(x3, y3, color='orange', marker='D')\nax2.set_xlim(-8, 1)\nax2.set_ylim(-3, 6)\nax2.set_xlabel('\u0394 Robust Accuracy (%)')\nax2.set_ylabel('\u0394 RNFR (%)')\nax2.set_facecolor('#FFCCCC')  # Light red background color\nax2.grid(True)\n\n# Add a rectangle patch to highlight a specific area in both subplots\nrect1 = patches.Rectangle((-5, -1), 10, 7, linewidth=1, edgecolor='black', facecolor='none')\nrect2 = patches.Rectangle((-5, -1), 10, 7, linewidth=1, edgecolor='black', facecolor='none')\nax1.add_patch(rect1)\nax2.add_patch(rect2)\n\n# Add a zoomed-in effect between the two subplots\nfrom mpl_toolkits.axes_grid1.inset_locator import mark_inset\nmark_inset(ax1, ax2, loc1=2, loc2=4, fc=\"none\", ec=\"0.5\")\n\nplt.tight_layout()\nplt.show()", "idx": "PIP_1", "width": 10.0, "height": 5.0}
{"file": "CB_15", "code": "import matplotlib.pyplot as plt\n\n# Data for pie chart\npie_labels = ['Same', 'Different', 'Incomparable']\npie_sizes = [32, 4, 99]\npie_colors = ['#1f77b4', '#ff7f0e', '#2ca02c']\npie_explode = (0, 0.1, 0)  # only \"explode\" the 2nd slice (i.e. 'Different')\n\n# Data for bar chart\nbar_labels = ['No trend for both', 'No trend for German', 'No trend for English']\nbar_sizes = [44, 44, 11]\nbar_colors = ['#2ca02c', '#98df8a', '#c7e9c0']\n\n# Create figure with specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 4.0))\n\n# Pie chart\nax1.pie(pie_sizes, explode=pie_explode, labels=pie_labels, colors=pie_colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Bar chart\ny_pos = range(len(bar_labels))\nax2.barh(y_pos, bar_sizes, color=bar_colors)\nax2.set_yticks(y_pos)\nax2.set_yticklabels(bar_labels)\nax2.invert_yaxis()  # labels read top-to-bottom\nax2.set_xlim(0, 100)  # set x-axis limit to match the percentage scale\n\n# Add data labels to bar chart\nfor i, v in enumerate(bar_sizes):\n    ax2.text(v + 1, i, f\"{v/100:.1%} ({v})\", color='black', va='center')\n\n# Add legend to bar chart\nax2.legend(bar_labels, loc='upper right', bbox_to_anchor=(1.15, 1))\n\nplt.tight_layout()\nplt.show()", "idx": "CB_15", "width": 8.0, "height": 4.0}
{"file": "3d_6", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create a grid of points\nX = np.linspace(-5, 5, 100)\nY = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(X, Y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create the figure and 3D axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with a colormap\nsurf = ax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Add color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Z')\n\n# Show the plot\nplt.show()", "idx": "3d_6", "width": 8.0, "height": 8.0}
{"file": "line_29", "code": "import matplotlib.pyplot as plt\n\n# Data for xLLM\nsteps = list(range(1, 21))\nfidelity_xLLM = [0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\n\n# Data for Single-Pass LLM (constant line)\nfidelity_single_pass = [0.1] * 20\n\n# Plotting the data\nplt.figure(figsize=(4.0, 3.0))\nplt.plot(steps, fidelity_xLLM, 'o-', label='xLLM', color='blue')\nplt.plot(steps, fidelity_single_pass, '-', label='Single-Pass LLM', color='red')\n\n# Adding labels and title\nplt.xlabel('# of Steps')\nplt.ylabel('Avg. Fidelity')\nplt.title('')\n\n# Adding legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_29", "width": 4.0, "height": 3.0}
{"file": "bar_8", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\nsuperfamilies = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\naccuracies = [0.9, 0.85, 0.87, 0.84, 0.75, 0.82, 0.83, 0.85, 0.88, 0.91]\n\n# Create the bar chart\nplt.figure(figsize=(10.0, 6.0))\nplt.bar(superfamilies, accuracies, color='skyblue')\n\n# Add a horizontal line for the average accuracy\naverage_accuracy = sum(accuracies) / len(accuracies)\nplt.axhline(y=average_accuracy, color='red', linestyle='--')\n\n# Set the labels and title\nplt.xlabel('Top-10 superfamilies in training dataset')\nplt.ylabel('Accuracy')\nplt.title('Bar Chart of Accuracies for Top-10 Superfamilies')\n\n# Show the plot\nplt.show()", "idx": "bar_8", "width": 10.0, "height": 6.0}
{"file": "bar_92", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nroles = ['human', 'gpt4', 'gpt4-cot']\ncounts_s1 = [800, 600, 400]\ncounts_s2 = [700, 500, 300]\ncounts_s3 = [600, 400, 200]\n\n# Colors for the bars\ncolors_s1 = ['#1f77b4', '#ff7f0e', '#2ca02c']\ncolors_s2 = ['#aec7e8', '#ffbb78', '#98df8a']\ncolors_s3 = ['#d62728', '#9467bd', '#c5b0d5']\n\n# Create subplots\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 6.0))\n\n# Plot for s1\naxs[0].barh(roles, counts_s1, color=colors_s1)\naxs[0].set_xlim(0, 800)\naxs[0].set_title('Resonance Preference Plot for rich_context')\naxs[0].set_xlabel('Count')\naxs[0].set_ylabel('Role')\n\n# Plot for s2\naxs[1].barh(roles, counts_s2, color=colors_s2)\naxs[1].set_xlim(0, 800)\naxs[1].set_xlabel('Count')\naxs[1].set_ylabel('Role')\n\n# Plot for s3\naxs[2].barh(roles, counts_s3, color=colors_s3)\naxs[2].set_xlim(0, 800)\naxs[2].set_xlabel('Count')\naxs[2].set_ylabel('Role')\n\n# Add legend\naxs[0].legend(['O1', 'T1', 'P1'], loc='upper right')\naxs[1].legend(['O2', 'T2', 'P2'], loc='upper right')\naxs[2].legend(['O3', 'T3', 'P3'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_92", "width": 8.0, "height": 6.0}
{"file": "CB_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnp.random.seed(0)\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Create a figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Create main axes\nax = fig.add_subplot(111)\n# Scatter plot on main axes\nax.scatter(x, y)\n\n# Create a new axes on the right for the vertical histogram\nax_histy = fig.add_axes(ax.get_position(), sharey=ax, frameon=False)\nax_histy.hist(y, bins=20, orientation='horizontal', color='blue')\nax_histy.yaxis.tick_right()\nax_histy.yaxis.set_label_position('right')\nax_histy.set_xticks([])\n\n# Create a new axes on the top for the horizontal histogram\nax_histx = fig.add_axes(ax.get_position(), sharex=ax, frameon=False)\nax_histx.hist(x, bins=20, orientation='vertical', color='blue')\nax_histx.xaxis.tick_top()\nax_histx.xaxis.set_label_position('top')\nax_histx.set_yticks([])\n\n# Set labels\nax.set_xlabel('TM-score')\nax.set_ylabel('Seq-ident')\n\n# Adjust layout to prevent overlap\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n\n# Show the plot\nplt.show()", "idx": "CB_5", "width": 6.0, "height": 6.0}
{"file": "bar_88", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\ngroups = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = {\n    '3 Constraint Words': [-1.8, -2.3, -3.3, -3.2],\n    '5 Constraint Words': [-1.9, -1.6, -2.2, -1.9],\n    '7 Constraint Words': [-0.6, -0.7, -1.1, -0.8],\n    '10 Constraint Words': [-2.2, -1.4, -1.7, -2.2]\n}\n\n# Colors for each constraint word count\ncolors = ['red', 'green', 'blue', 'purple']\n\n# Create a figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nfor i, (label, data) in enumerate(scores.items()):\n    ax.barh(groups, data, color=colors[i], label=label)\n\n# Add the data labels on the bars\nfor i in range(len(groups)):\n    for j, (label, data) in enumerate(scores.items()):\n        ax.text(data[i], i, f'{data[i]:.1f}', color='black', va='center')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Score')\nax.set_yticks(range(len(groups)))\nax.set_yticklabels(groups)\n\n# Add a legend\nax.legend(title='Constraint Words')\n\n# Show the plot\nplt.show()", "idx": "bar_88", "width": 10.0, "height": 8.0}
{"file": "heatmap_27", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create some data\ndata = np.random.rand(6, 10)\n\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 4.0))\n\n# First subplot: default with no edges\naxs[0].imshow(data, interpolation='none')\naxs[0].set_title('default: no edges')\n\n# Second subplot: with thick edges\naxs[1].imshow(data, interpolation='none', edgecolor='black', linewidth=2)\naxs[1].set_title('thick edges')\n\n# Set the spacing between subplots\nplt.subplots_adjust(hspace=0.5)\n\nplt.show()", "idx": "heatmap_27", "width": 6.0, "height": 4.0}
{"file": "bar_75", "code": "import matplotlib.pyplot as plt\n\n# Data\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34, 43.7, 20]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Bar positions\nbar_positions = range(len(truthful_recall))\n\n# Plot bars\nax.bar(bar_positions, truthful_recall, color='grey', label='Truthful Recall')\nax.bar(bar_positions, misleading_recall, color='pink', label='Misleading Recall', bottom=truthful_recall)\n\n# Add text labels\nfor i, (tr, mr) in enumerate(zip(truthful_recall, misleading_recall)):\n    ax.text(i, tr/2, f'{tr}%', ha='center', va='center', color='white')\n    ax.text(i, tr + mr/2, f'{mr}%', ha='center', va='center', color='black')\n\n# Set x-axis labels\nax.set_xticks(bar_positions)\nax.set_xticklabels(['', '', '', ''])\n\n# Set y-axis labels\nax.set_ylabel('Truthful Recall')\nax.set_yticks(range(0, 61, 20))\nax.set_yticklabels(['0', '20', '40', '60'])\n\n# Secondary y-axis for misleading recall\nax2 = ax.twinx()\nax2.set_ylabel('Misleading Recall')\nax2.set_yticks(range(0, 41, 20))\nax2.set_yticklabels(['0', '20', '40'])\n\n# Title and legend\nax.set_title('Truthful:Misleading = 2:0')\nax.legend(loc='upper left')\n\n# Show plot\nplt.show()", "idx": "bar_75", "width": 6.0, "height": 4.0}
{"file": "pie_15", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology']\nsizes = [31.2, 28.6, 21.4, 18.8]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\n \n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nplt.axis('equal')  \n\n# Add title\nplt.title('Market Share by Sector - External vs. Internal')\n\n# Add legend\nplt.legend(loc='upper right')\n\nplt.show()", "idx": "pie_15", "width": 8.0, "height": 6.0}
{"file": "HR_23", "code": "import matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\n\n# Data for the waterfall chart\ndata = [350, -50, 200, -120, -100, 75, 50, -135, 25, -300]\nindex = range(len(data))\n\n# Colors for the bars\ncolors = ['green' if x > 0 else 'red' for x in data]\n\n# Cumulative sum for the bar heights\ncumulative = [0] + [sum(data[:i+1]) for i in range(len(data))]\n\n# Plotting the bars\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(index, data, color=colors, edgecolor='black')\n\n# Adding the line\nax.plot(index, cumulative, color='black', linestyle='--', marker='o')\n\n# Adding the values on top of the bars\nfor i, value in enumerate(data):\n    ax.text(i, cumulative[i] + (10 if value > 0 else -25), str(value), ha='center', color='black')\n\n# Formatting the y-axis to show currency\nformatter = FuncFormatter(lambda y, _: f'${int(y)}')\nax.yaxis.set_major_formatter(formatter)\n\n# Setting the title\nax.set_title('Waterfall Chart')\n\n# Removing x-axis labels\nax.set_xticks([])\n\n# Setting the y-axis limits\nax.set_ylim(min(cumulative) - 100, max(cumulative) + 100)\n\n# Display the plot\nplt.show()", "idx": "HR_23", "width": 8.0, "height": 5.0}
{"file": "bar_77", "code": "import matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 18, 20, 19, 16]\n\n# Create the bar chart\nplt.figure(figsize=(8.0, 4.0))\nplt.bar(cities, temperatures, color='skyblue')\n\n# Add labels and title\nplt.xlabel('City')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.title('Average City Temperatures')\n\n# Show the plot\nplt.show()", "idx": "bar_77", "width": 8.0, "height": 4.0}
{"file": "line_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([0, 50, 100, 150, 200])\ny1 = np.array([0.5, 1.0, 1.5, 1.0, 2.0])\ny2 = np.array([1.0, 1.5, 1.0, 0.5, 1.0])\ny3 = np.array([1.5, 1.0, 0.5, 1.0, 0.5])\ny4 = np.array([2.0, 1.5, 1.0, 1.5, 0.0])\n\n# Error (for demonstration, using arbitrary values)\nerror = np.array([0.2, 0.3, 0.2, 0.3, 0.2])\n\n# Plot\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot lines with error bands\nax.errorbar(x, y1, yerr=error, fmt='-o', color='blue', ecolor='lightblue', capsize=5, label='Line 1')\nax.errorbar(x, y2, yerr=error, fmt='-o', color='orange', ecolor='moccasin', capsize=5, label='Line 2')\nax.errorbar(x, y3, yerr=error, fmt='-o', color='green', ecolor='lightgreen', capsize=5, label='Line 3')\nax.errorbar(x, y4, yerr=error, fmt='-o', color='purple', ecolor='lavender', capsize=5, label='Line 4')\n\n# Customizing the plot\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\nax.set_title('Errorbar Plot with Multiple Lines')\nax.legend()\nax.grid(True)\n\n# Show plot\nplt.show()", "idx": "line_2", "width": 4.0, "height": 3.0}
{"file": "heatmap_14", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the heatmap in the picture\ndata = np.array([\n    [0.8, -0.6, 0.2, -0.1, 0.9],\n    [0.4, -0.2, 0.6, -0.3, 0.7],\n    [0.5, -0.7, 0.3, -0.4, 0.8],\n    [0.1, -0.1, 0.9, -0.2, 0.6],\n    [-0.3, 0.7, -0.5, 0.4, -0.8],\n    [0.2, -0.3, 0.8, -0.6, 0.9],\n    [-0.4, 0.6, -0.7, 0.5, -0.9],\n    [0.3, -0.5, 0.7, -0.8, 0.6],\n    [-0.2, 0.8, -0.6, 0.9, -0.7],\n    [0.9, -0.4, 0.1, -0.7, 0.2]\n])\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 10.0))\n\n# Create the heatmap\nplt.imshow(data, cmap='coolwarm', aspect='auto')\n\n# Set the x-axis labels\nx_labels = ['LLVA', 'BakLLVA', 'GeminiProVision', 'GPT4LV', 'CODI']\nplt.xticks(np.arange(len(x_labels)), x_labels)\n\n# Set the y-axis labels\ny_labels = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nplt.yticks(np.arange(len(y_labels)), y_labels)\n\n# Add a colorbar\nplt.colorbar()\n\n# Show the plot\nplt.show()", "idx": "heatmap_14", "width": 6.0, "height": 10.0}
{"file": "box_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the boxplots\ndata1 = [np.random.normal(22.7, 0.2, 100), np.random.normal(22.9, 0.15, 100), np.random.normal(23.1, 0.1, 100)]\ndata2 = [np.random.normal(19.1, 0.2, 100), np.random.normal(19.3, 0.15, 100), np.random.normal(19.5, 0.1, 100)]\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# First subplot\nax1.boxplot(data1, patch_artist=True, medianprops=dict(color='orange'))\nax1.set_title('0.25 HIAR')\nax1.set_ylabel('PSNR (dB)')\nax1.set_xticklabels(['Vanilla DIP', 'SGLD DIP', 'Ours'])\n\n# Second subplot\nax2.boxplot(data2, patch_artist=True, medianprops=dict(color='orange'))\nax2.set_title('0.1 HIAR')\nax2.set_ylabel('PSNR (dB)')\nax2.set_xticklabels(['Vanilla DIP', 'SGLD DIP', 'Ours'])\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "box_9", "width": 10.0, "height": 5.0}
{"file": "hist_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the histogram in the picture\nnp.random.seed(0)\ndata = np.random.exponential(scale=2.0, size=10000)\n\n# Create the histogram\nplt.figure(figsize=(4.0, 3.0))\nplt.hist(data, bins=30, color='orange', edgecolor='black')\n\n# Set the title and labels\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\n\n# Show the plot\nplt.show()", "idx": "hist_5", "width": 4.0, "height": 3.0}
{"file": "errorpoint_5", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT']\nmeans = [0.22, 0.18, 0.15, 0.12, 0.08]\nerrors = [0.03, 0.04, 0.05, 0.06, 0.07]\ndataset_mean = 0.2\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.errorbar(categories, means, yerr=errors, fmt='o', color='blue', ecolor='blue', capsize=5, label='Mean')\nplt.axhline(y=dataset_mean, color='gray', linestyle='--', label='Dataset mean')\n\n# Customizing the plot\nplt.ylabel('Female presence (fraction of videos)')\nplt.ylim(0.05, 0.25)\nplt.legend(loc='upper right')\n\n# Display the plot\nplt.show()", "idx": "errorpoint_5", "width": 8.0, "height": 6.0}
{"file": "heatmap_19", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bubble chart\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 28.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 15.5, 14.3],\n    [49.2, 11.2, 0.6, 7.8, 17.3, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 13.4, 16.3],\n    [31.5, 4.3, 17.4, 27.1, 17.3, np.nan],\n    [35.3, 2.2, 4.0, 32.5, 26.0, 0.8],\n    [38.6, 2.2, 0.8, 5.3, 3.1, 1.0],\n    [44.4, 10.0, 7.8, 22.9, 25.0, 2.0],\n    [61.5, 2.0, 8.7, 14.9, 13.0, 4.0]\n])\n\n# Create the figure and axes\nfig, ax = plt.subplots(1, 2, figsize=(20.0, 8.0))\n\n# Create the bubble chart for the left side\nfor i in range(5):\n    for j in range(6):\n        size = data[i, j]\n        if not np.isnan(size):\n            ax[0].scatter(j, i, s=size**2.5, alpha=0.5, c='blue')\n            ax[0].text(j, i, f'{size}%', ha='center', va='center', color='white')\n\n# Create the bubble chart for the right side\nfor i in range(5, 10):\n    for j in range(6):\n        size = data[i, j]\n        if not np.isnan(size):\n            ax[1].scatter(j, i-5, s=size**2.5, alpha=0.5, c='blue')\n            ax[1].text(j, i-5, f'{size}%', ha='center', va='center', color='white')\n\n# Set the labels and titles\nroles = ['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain']\nax[0].set_title('(a) Role voting in the Werewolf game')\nax[1].set_title('(b) Final state of roles')\nax[0].set_yticks(range(5))\nax[0].set_yticklabels(roles)\nax[1].set_yticks(range(5))\nax[1].set_yticklabels(roles)\nax[0].set_xticks(range(6))\nax[0].set_xticklabels(roles)\nax[1].set_xticks(range(6))\nax[1].set_xticklabels(roles)\n\n# Add color bar\nsm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = plt.colorbar(sm, ax=ax, orientation='vertical', fraction=0.05, pad=0.02)\ncbar.set_label('Percentage')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "heatmap_19", "width": 20.0, "height": 8.0}
{"file": "tree_1", "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# Define the size of the figure\nplt.figure(figsize=(12.0, 8.0))\n\n# Define the data and labels\nsizes = [30.6, 18.42, 14.21, 10.91, 8.54, 6.26, 6.15, 4.91]\nlabels = ['stackexchange.com', 'physicsforums.com', 'mathhelpforum.com', 'mathoverflow.net', 'proofwiki.org', 'gmatclub.com', 'mathhelpboards.com', 'mathworks.com']\ncolors = ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5']\n\n# Create a treemap\nsquarify.plot(sizes=sizes, label=labels, color=colors, alpha=0.7)\n\n# Remove the axes\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "tree_1", "width": 12.0, "height": 8.0}
{"file": "bar_22", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data\nbrightness = np.linspace(0.5, 1.5, 20)\nscale = np.linspace(0.75, 1.25, 20)\nrotation = np.linspace(-150, 150, 20)\n\n# Placeholder rate of gain change values\ngain_change_brightness = np.random.uniform(-30, 0, 20)\ngain_change_scale = np.random.uniform(-50, 10, 20)\ngain_change_rotation = np.random.uniform(-20, 40, 20)\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 10.0))\n\n# Subplot for Brightness\nplt.subplot(3, 1, 1)\nplt.bar(brightness, gain_change_brightness, color='blue', label='Ours', alpha=0.7)\nplt.bar(brightness, gain_change_brightness, color='lightblue', label='Saliency-based Sampling', alpha=0.7)\nplt.xlabel('Brightness')\nplt.ylabel('Rate of Gain Change[%]')\nplt.legend()\n\n# Subplot for Scale\nplt.subplot(3, 1, 2)\nplt.bar(scale, gain_change_scale, color='blue', alpha=0.7)\nplt.bar(scale, gain_change_scale, color='lightblue', alpha=0.7)\nplt.xlabel('Scale')\nplt.ylabel('Rate of Gain Change[%]')\n\n# Subplot for Rotation Angle\nplt.subplot(3, 1, 3)\nplt.bar(rotation, gain_change_rotation, color='blue', alpha=0.7)\nplt.bar(rotation, gain_change_rotation, color='lightblue', alpha=0.7)\nplt.xlabel('Rotation Angle [\u00b0]')\nplt.ylabel('Rate of Gain Change[%]')\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "bar_22", "width": 6.0, "height": 10.0}
{"file": "graph_3", "code": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a circular graph with 12 nodes\nG = nx.cycle_graph(12)\n\n# Define the positions of each node in a circular layout\npos = nx.circular_layout(G)\n\n# Draw the nodes with specific options\nnx.draw_networkx_nodes(G, pos, node_color='salmon', node_size=700)\n\n# Draw the edges with specific options\nnx.draw_networkx_edges(G, pos, width=2)\n\n# Draw the labels for nodes and edges\nnx.draw_networkx_labels(G, pos, font_size=12, font_weight='bold')\nnx.draw_networkx_edge_labels(G, pos, edge_labels={(i, (i+1)%12): i+1 for i in range(12)}, font_size=10)\n\n# Set the figure size as required\nplt.gcf().set_size_inches(10.0, 8.0)\n\n# Remove the axis\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "graph_3", "width": 10.0, "height": 8.0}
{"file": "radar_14", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each model\nvalues = [\n    [0.8, 0.6, 0.9, 0.7, 0.8, 0.85, 0.9],  # GPT-J-6B\n    [0.7, 0.55, 0.8, 0.65, 0.7, 0.75, 0.8],  # TinyLLaMA-1.1B\n    [0.75, 0.65, 0.85, 0.7, 0.75, 0.8, 0.85],  # OpenLLaMA-3B\n    [0.85, 0.7, 0.95, 0.8, 0.85, 0.9, 0.95]  # OpenMoE-8B/32E\n]\nmodels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\ncategories = ['Roleplay', 'Writing', 'Humanities', 'STEM', 'Extraction', 'Coding', 'Math']\nN = len(categories)\n\n# Compute angle for each category\nangles = [n / float(N) * 2 * pi for n in range(N)]\nvalues += [values[0]]  # Complete the loop\nangles += [angles[0]]\n\n# Initialize the spider plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable + add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([0.2, 0.4, 0.6, 0.8], [\"0.2\", \"0.4\", \"0.6\", \"0.8\"], color=\"grey\", size=7)\nplt.ylim(0, 1)\n\n# Plot data and fill area for each model\nfor i in range(len(models)):\n    ax.plot(angles, values[i], linewidth=2, linestyle='solid', label=models[i])\n    ax.fill(angles, values[i], alpha=0.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_14", "width": 6.0, "height": 6.0}
{"file": "line_12", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nsample_ratio = [0.25, 0.50, 0.75, 1.00]\nstd_acc_512 = [0.07, 0.06, 0.03, 0.08]\nstd_acc_1024 = [0.06, 0.05, 0.02, 0.07]\nstd_acc_2048 = [0.03, 0.02, 0.01, 0.04]\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(sample_ratio, std_acc_512, marker='*', color='g', label='MAXN=512')\nplt.plot(sample_ratio, std_acc_1024, marker='^', color='r', label='MAXN=1024')\nplt.plot(sample_ratio, std_acc_2048, marker='o', color='b', label='MAXN=2048')\n\n# Adding labels and title\nplt.xlabel('Sample Ratio')\nplt.ylabel('Std of ACC')\nplt.title('Std of ACC vs Sample Ratio')\n\n# Adding legend\nplt.legend()\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "line_12", "width": 8.0, "height": 6.0}
{"file": "line_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nN = np.array([10, 20, 30, 40, 50, 60])\nstandard = np.array([0.1, 0.01, 0.001, 0.0001, 0.00001, 0.000001])\nconstrained = np.array([1e-12, 1e-12, 1e-12, 1e-12, 1e-12, 1e-12])\n\n# Plotting the data\nplt.figure(figsize=(9.0, 6.0))\nplt.loglog(N, standard, 'o-', label='Standard', color='blue')\nplt.loglog(N, constrained, 'x-', label='Constrained', color='orange')\n\n# Adding legend\nplt.legend()\n\n# Adding labels and title\nplt.xlabel('N')\nplt.ylabel('Error')\n\n# Setting the axis limits\nplt.xlim(10, 60)\nplt.ylim(1e-13, 1e-1)\n\n# Adding grid\nplt.grid(which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()", "idx": "line_6", "width": 9.0, "height": 6.0}
{"file": "bar_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the stacked bar chart (assuming each column represents a score for a human annotator)\nscores = {\n    '1': [10, 10, 10, 10, 10],\n    '2': [10, 10, 10, 10, 10],\n    '3': [10, 10, 10, 10, 10],\n    '4': [10, 10, 10, 10, 10],\n    '5': [10, 10, 10, 10, 10],\n    '6': [10, 10, 10, 10, 10]\n}\n\n# Colors for each score level\ncolors = ['#d73027', '#fc8d59', '#fee08b', '#d9ef8b', '#91bfdb']\n\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# The position of the bars on the x-axis\nr = np.arange(len(scores))\n\n# Stacked bar chart\nbottom = np.zeros(len(scores))\nfor i, color in enumerate(colors):\n    values = [score[i] for score in scores.values()]\n    ax.bar(r, values, bottom=bottom, color=color, edgecolor='white', width=0.85)\n    bottom += np.array(values)\n\n# Customizing the plot\nax.set_xlabel('Human Annotator', fontweight='bold')\nax.set_ylabel('Scores', fontweight='bold')\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xticks(r)\nax.set_xticklabels(scores.keys())\n\n# Adding a legend\nlegend_labels = ['5', '4', '3', '2', '1']\nax.legend(legend_labels, title='Scores', bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_15", "width": 8.0, "height": 5.0}
{"file": "scatter_22", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hf_falcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nmeta_cognition = [0.5, 0.6, 0.4, 0.7, 0.8, 0.9, 0.85, 0.75, 0.65]\nmodel_basedness = [1.5, 1.6, 1.4, 1.7, 1.8, 1.9, 1.85, 1.75, 1.65]\nexploration = [0.3, 0.35, 0.25, 0.4, 0.45, 0.5, 0.48, 0.42, 0.38]\nrisk_taking = [0.7, 0.75, 0.65, 0.8, 0.85, 0.9, 0.88, 0.82, 0.78]\n\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 6.0))\n\n# Plot the first subplot\nax1.scatter(meta_cognition, models, color='orange', label='Meta-Cognition')\nax1.scatter(model_basedness, models, color='blue', label='Model-Basedness')\nax1.set_xlabel('Value')\nax1.set_ylabel('Models')\nax1.set_title('Performance Comparison')\nax1.legend()\n\n# Plot the second subplot\nax2.scatter(exploration, models, color='green', label='Exploration')\nax2.scatter(risk_taking, models, color='red', label='Risk Taking')\nax2.set_xlabel('Value')\nax2.set_title('Strategic Traits')\nax2.legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "scatter_22", "width": 12.0, "height": 6.0}
{"file": "errorpoint_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.arange(1, 21, 4)\ny = np.random.randint(14, 20, size=len(x))\nxerr = np.random.uniform(1.0, 3.0, size=len(x))\nyerr = [np.random.uniform(1.0, 3.0, size=len(x)), np.random.uniform(1.0, 3.0, size=len(x))]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.errorbar(x, y, xerr=xerr, yerr=yerr, fmt='o', color='purple', ecolor='purple', capsize=5, label='errorbar')\n\n# Customization\nfor i in range(len(x)):\n    ax.text(x[i] - xerr[i] - 0.5, y[i], f'-{xerr[i]:.1f}', ha='center', va='center', color='purple')\n    ax.text(x[i] + xerr[i] + 0.5, y[i], f'+{xerr[i]:.1f}', ha='center', va='center', color='purple')\n    ax.text(x[i], y[i] - yerr[0][i] - 0.5, f'-{yerr[0][i]:.1f}', ha='center', va='center', color='purple')\n    ax.text(x[i], y[i] + yerr[1][i] + 0.5, f'+{yerr[1][i]:.1f}', ha='center', va='center', color='purple')\n\nax.set_title('variable, asymmetric error', fontsize=14)\nax.legend(loc='upper left')\n\nplt.show()", "idx": "errorpoint_9", "width": 10.0, "height": 7.0}
{"file": "scatter_9", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\nx_values_DE = [0.8, 0.85, 0.9, 0.95]\ny_values_DE = [0.1, 0.11, 0.12, 0.13]\ncolors_DE = ['orange', 'green', 'cyan', 'red']\n\nx_values_PJIM = [0.7, 0.75, 0.8, 0.85]\ny_values_PJIM = [0.45, 0.5, 0.55, 0.6]\ncolors_PJIM = ['green', 'green', 'orange', 'red']\n\n# Create the figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(7.0, 10.0))\n\n# DE plot\nax1.scatter(x_values_DE, y_values_DE, c=colors_DE, s=100)\nax1.set_title('DE')\nax1.set_xlabel('CKA Similarity')\nax1.set_ylabel('MSE')\nax1.set_xlim(0.6, 1.1)\nax1.set_ylim(0.09, 0.13)\n\n# PJIM plot\nax2.scatter(x_values_PJIM, y_values_PJIM, c=colors_PJIM, s=100)\nax2.set_title('PJIM')\nax2.set_xlabel('CKA Similarity')\nax2.set_ylabel('MSE')\nax2.set_xlim(0.5, 1.0)\nax2.set_ylim(0.4, 0.6)\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "scatter_9", "width": 7.0, "height": 10.0}
{"file": "bar_52", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plotting the horizontal bar chart\nax.barh(categories, synthetic_data, color='skyblue', edgecolor='black', label='synthetic data')\nax.barh(categories, human_data, color='salmon', edgecolor='black', left=synthetic_data, label='human-authored data')\n\n# Adding data labels\nfor i, (syn_val, hum_val) in enumerate(zip(synthetic_data, human_data)):\n    ax.text(syn_val / 2, i, f'{syn_val}%', va='center', ha='center', color='black')\n    ax.text(syn_val + hum_val / 2, i, f'{hum_val}%', va='center', ha='center', color='black')\n\n# Set labels and title\nax.set_xlabel('Percentage')\nax.set_yticklabels(categories)\nax.set_title('Comparison of Synthetic and Human-Authored Data')\n\n# Remove spines\nfor spine in ax.spines.values():\n    spine.set_visible(False)\n\n# Show grid\nax.xaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Legend\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "bar_52", "width": 6.0, "height": 6.0}
{"file": "errorpoint_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.arange(1, 11)\ny = np.random.normal(25, 2, size=x.size)\nyerr = np.random.normal(2, 0.5, size=x.size)\nyerr_lower = yerr * np.random.uniform(0.5, 1, size=yerr.size)\nyerr_upper = yerr * np.random.uniform(1, 1.5, size=yerr.size)\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.errorbar(x, y, yerr=[yerr_lower, yerr_upper], fmt='o', ecolor='green', capsize=5, label='errorbar')\n\n# Customization\nax.set_title('variable, asymmetric error')\nax.axhline(y=25, color='yellow', linestyle='--')\nfor i in range(len(x)):\n    ax.text(x[i], y[i]+yerr_upper[i]+0.5, f'+{yerr_upper[i]:.3f}', ha='center')\n    ax.text(x[i], y[i]-yerr_lower[i]-1.5, f'-{yerr_lower[i]:.3f}', ha='center')\nax.legend()\n\nplt.show()", "idx": "errorpoint_8", "width": 10.0, "height": 7.0}
{"file": "line_61", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nweeks = np.arange(0, 30, 1)\nperformance = np.sin(weeks * 0.3) + np.random.normal(0, 0.1, len(weeks))\nefficiency = np.cos(weeks * 0.3) + np.random.normal(0, 0.1, len(weeks))\n\n# Create the plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(weeks, performance, marker='o', color='blue', linestyle='-', label='Performance')\nplt.plot(weeks, efficiency, marker='x', color='red', linestyle='--', label='Efficiency')\n\n# Add fill between lines with transparency\nplt.fill_between(weeks, performance, efficiency, color='skyblue', alpha=0.3)\n\n# Add title and labels\nplt.title('Performance and Efficiency Analysis')\nplt.xlabel('Weeks')\nplt.ylabel('Values')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_61", "width": 6.0, "height": 4.0}
{"file": "multidiff_16", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for bar chart\nbar_labels = ['c1355', 'c1908', 'c2670', 'c3540']\nbar_values = [40, 60, 50, 30]\nbar_index = np.arange(len(bar_labels))\n\n# Data for boxplot\nbox_data = np.random.rand(10, 4) * 0.3 + 0.4  # Random data for demonstration\n\n# Create figure with specific size\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Bar chart\nax1.bar(bar_index, bar_values, color='blue', hatch='/', edgecolor='black')\nax1.set_xticks(bar_index)\nax1.set_xticklabels(bar_labels)\nax1.set_ylabel('# successful adv. circuits')\n\n# Boxplot\nax2.boxplot(box_data, positions=bar_index, widths=0.6)\nax2.set_xticks(bar_index)\nax2.set_xticklabels(bar_labels)\nax2.set_ylabel('OMLA KPA')\n\n# Add success threshold lines\nupper_threshold = 0.65\nlower_threshold = 0.35\nax2.axhline(upper_threshold, color='red', linestyle='--', label='Upper success threshold')\nax2.axhline(lower_threshold, color='red', linestyle='--', label='Lower success threshold')\nax2.legend(loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "multidiff_16", "width": 6.0, "height": 6.0}
{"file": "scatter_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the clusters in the picture\nnp.random.seed(0)\nar = np.random.normal(loc=[0.3, 0.2], scale=0.02, size=(100, 2))\nde = np.random.normal(loc=[-0.1, -0.1], scale=0.02, size=(100, 2))\nfr = np.random.normal(loc=[0.1, 0.0], scale=0.02, size=(100, 2))\nhe = np.random.normal(loc=[-0.3, 0.1], scale=0.02, size=(100, 2))\n\n# Plotting the clusters\nplt.figure(figsize=(8.0, 8.0))\nplt.scatter(ar[:, 0], ar[:, 1], c='blue', label='ar')\nplt.scatter(de[:, 0], de[:, 1], c='yellow', label='de')\nplt.scatter(fr[:, 0], fr[:, 1], c='green', label='fr')\nplt.scatter(he[:, 0], he[:, 1], c='magenta', label='he')\n\n# Setting labels and title\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.title('Legend')\n\n# Adding the legend\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "scatter_8", "width": 8.0, "height": 8.0}
{"file": "line_33", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nx = [20, 40, 60, 80, 100]\ncnn = [0.5, 0.6, 0.65, 0.7, 0.75]\ncnn_hmm = [0.55, 0.63, 0.68, 0.72, 0.74]\nrf = [0.45, 0.57, 0.62, 0.66, 0.7]\nrf_hmm = [0.48, 0.6, 0.64, 0.68, 0.72]\n\n# Plotting the data\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, cnn, marker='^', color='orange', label='CNN')\nplt.plot(x, cnn_hmm, marker='>', color='red', label='CNN+HMM')\nplt.plot(x, rf, marker='s', color='blue', label='RF')\nplt.plot(x, rf_hmm, marker='o', color='darkblue', label='RF+HMM')\n\n# Adding vertical dotted line\nplt.axvline(x=20, color='blue', linestyle=':', linewidth=1)\n\n# Adding labels and title\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('Model Performance')\n\n# Adding legend\nplt.legend()\n\n# Show plot\nplt.show()", "idx": "line_33", "width": 6.0, "height": 4.0}
{"file": "tree_5", "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\n# Set the figure size\nplt.figure(figsize=(6.0, 6.0))\n\n# Define the grid layout\ngs = gridspec.GridSpec(3, 3)\n\n# Define the colors and labels for each subplot\ncolors = ['#FFFF00', '#800080', '#FFC0CB', '#00FFFF', '#0000FF', '#00FF00']\nlabels = ['European\\n15%', 'Australian\\n18%', 'Asian\\n25%', 'South American\\n10%', 'African\\n12%', 'North American\\n20%']\n\n# Create subplots\nax1 = plt.subplot(gs[0, :2], facecolor=colors[0])\nax2 = plt.subplot(gs[0, 2], facecolor=colors[1])\nax3 = plt.subplot(gs[1, :1], facecolor=colors[2])\nax4 = plt.subplot(gs[1, 1:], facecolor=colors[3])\nax5 = plt.subplot(gs[2, 1], facecolor=colors[4])\nax6 = plt.subplot(gs[2, 2], facecolor=colors[5])\n\n# Set the labels for each subplot\nax1.text(0.5, 0.5, labels[0], ha='center', va='center', fontsize=12)\nax2.text(0.5, 0.5, labels[1], ha='center', va='center', fontsize=12)\nax3.text(0.5, 0.5, labels[2], ha='center', va='center', fontsize=12)\nax4.text(0.5, 0.5, labels[3], ha='center', va='center', fontsize=12)\nax5.text(0.5, 0.5, labels[4], ha='center', va='center', fontsize=12)\nax6.text(0.5, 0.5, labels[5], ha='center', va='center', fontsize=12)\n\n# Remove the axis for each subplot\nfor ax in [ax1, ax2, ax3, ax4, ax5, ax6]:\n    ax.axis('off')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "tree_5", "width": 6.0, "height": 6.0}
{"file": "density_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 4.0))\n\n# Define the x range\nx = np.linspace(0, 10, 1000)\n\n# Define the upper and lower boundaries of the filled area\ny_upper = np.exp(-x)\ny_lower = -np.exp(-x)\n\n# Fill the area between the curves\nplt.fill_between(x, y_upper, y_lower, color='pink', alpha=0.5)\n\n# Set the limits of the plot\nplt.xlim(0, 10)\nplt.ylim(-1, 1)\n\n# Remove the ticks and labels\nplt.xticks([])\nplt.yticks([])\n\n# Remove the top and right spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\n\n# Thicken the left spine\nplt.gca().spines['left'].set_linewidth(2)\n\n# Show the plot\nplt.show()", "idx": "density_2", "width": 8.0, "height": 4.0}
{"file": "PIP_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 6.0))\n\n# Generate some data to simulate the curves in the picture\nx = np.linspace(0, 10000, 100)\ny1 = 35000 + (1 - np.exp(-x / 2000)) * 32000\ny2 = 35000 + (1 - np.exp(-x / 1800)) * 34000\ny3 = 35000 + (1 - np.exp(-x / 1600)) * 36000\ny4 = 35000 + (1 - np.exp(-x / 1400)) * 38000\n\n# Plot the curves with the corresponding colors\nplt.plot(x, y1, 'r', label='WI')\nplt.plot(x, y2, 'g', label='ISQ')\nplt.plot(x, y3, 'm', label='WIQL')\nplt.plot(x, y4, 'b', label='Greedy')\n\n# Set the labels and title\nplt.xlabel('Time Steps')\nplt.ylabel('Discounted cumulative reward')\nplt.title('')\n\n# Create the legend\nplt.legend()\n\n# Create the inset with the zoomed-in section\nax_inset = plt.axes([0.5, 0.2, 0.4, 0.3])\nax_inset.plot(x, y1, 'r')\nax_inset.plot(x, y2, 'g')\nax_inset.plot(x, y3, 'm')\nax_inset.plot(x, y4, 'b')\nax_inset.set_xlim(9600, 10000)\nax_inset.set_ylim(67000, 71000)\nax_inset.set_xticks([9600, 9800, 10000])\nax_inset.set_yticks([67000, 69000, 71000])\n\n# Show the plot\nplt.show()", "idx": "PIP_6", "width": 8.0, "height": 6.0}
{"file": "CB_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\ndata_in = np.random.normal(loc=5, scale=2, size=1000)\ndata_out = np.random.normal(loc=-5, scale=2, size=1000)\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 8.0))\n\n# Plot histograms\nsns.histplot(data_in, color='red', label='In', kde=True, stat='density', bins=30)\nsns.histplot(data_out, color='blue', label='Out', kde=True, stat='density', bins=30)\n\n# Add vertical dashed lines at the mean of each distribution\nplt.axvline(np.mean(data_in), color='black', linestyle='dashed', linewidth=1)\nplt.axvline(np.mean(data_out), color='black', linestyle='dashed', linewidth=1)\n\n# Annotate the vertical lines with text\nplt.text(np.mean(data_in), 0.11, r'$m^*$', ha='center', va='bottom', fontsize=12)\nplt.text(np.mean(data_out), 0.11, r'$-\\frac{m^*}{2}$', ha='center', va='bottom', fontsize=12)\n\n# Set labels and title\nplt.xlabel('LR Test')\nplt.ylabel('Density')\nplt.title('Histogram of In and Out Data')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "CB_1", "width": 10.0, "height": 8.0}
{"file": "CB_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 10B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple = [0, 16, 20, 26, 20, 22]\ncomplex = [0, 12, 8, 18, 12, 4]\ncode = [0, 0, 4, 12, 10, 4]\nsimple_trend = [0, 6, 12, 18, 24, 56]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.25\nindex = np.arange(len(models))\n\nbar1 = ax.bar(index, simple, bar_width, label='Simple', color='salmon')\nbar2 = ax.bar(index + bar_width, complex, bar_width, label='Complex', color='peachpuff')\nbar3 = ax.bar(index + 2*bar_width, code, bar_width, label='Code', color='lightgrey')\n\n# Trend line\ntrend_line, = ax.plot(index + bar_width, simple_trend, label='Simple Trend', color='magenta', linestyle='--', marker='o')\n\n# Adding percentages on top of the bars\nfor i, rect in enumerate(bar1 + bar2 + bar3):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()/2., height, f'{height}%', ha='center', va='bottom')\n\n# Axes labels, title, and legend\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(models)\nax.legend()\n\n# Show plot\nplt.show()", "idx": "CB_2", "width": 8.0, "height": 5.0}
{"file": "pie_2", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Frogs', 'Hogs', 'Dogs', 'Logs']\nsizes = [15, 30, 45, 10]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0.1, 0.1, 0.1)  # explode all slices\n\n# Plot\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()", "idx": "pie_2", "width": 6.0, "height": 6.0}
{"file": "errorbar_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Medium', 'Medium-replay', 'Medium-expert']\nperformance = [[60, 70, 80], [65, 75, 85], [70, 80, 90]]\nerrors = [[10, 10, 10], [10, 10, 10], [10, 10, 10]]\nbar_width = 0.25\ncolors = ['#FFA07A', '#FFD700', '#4169E1', '#00008B']\nlabels = ['AUG', 'TEstimation', 'Qualification', 'DiffStitch']\n\n# Plotting\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 3.0))\n\nfor i, ax in enumerate(axes):\n    index = np.arange(len(categories))\n    for j in range(len(performance[i])):\n        ax.bar(index[j] * bar_width, performance[i][j], bar_width, yerr=errors[i][j],\n               color=colors[j], label=labels[j] if i == 0 else \"\")\n    ax.set_title(f'({chr(97+i)}) {categories[i]}')\n    ax.set_ylim(40, 90)\n    ax.set_ylabel('Performance')\n    ax.set_xticks(index * bar_width)\n    ax.set_xticklabels(labels)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\nplt.tight_layout()\nplt.show()", "idx": "errorbar_15", "width": 10.0, "height": 3.0}
{"file": "scatter_14", "code": "import matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\nmajority_accuracy = [0.9, 0.7, 0.75, 0.65, 0.8, 0.7, 0.85, 0.9]\nminority_accuracy = [0.1, 0.3, 0.25, 0.35, 0.2, 0.3, 0.15, 0.1]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.scatter(classes, majority_accuracy, color='blue', label='Majority')\nax.scatter(classes, minority_accuracy, color='red', label='Minority')\n\n# Customizing the plot\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracy')\nax.set_ylim(0, 1)\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\nax.legend(loc='upper right', bbox_to_anchor=(1.15, 1))\n\n# Display the plot\nplt.tight_layout()\nplt.show()", "idx": "scatter_14", "width": 6.0, "height": 3.0}
{"file": "pie_10", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['225 g flour', '100 ml milk', '1/2 package of yeast', '90 g sugar', '60 g butter', '1 egg']\nsizes = [225, 100, 0.5, 90, 60, 1]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nwedges, texts = ax.pie(sizes, colors=colors, startangle=140, wedgeprops=dict(width=0.3))\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Add title\nplt.title('Matplotlib bakery: A donut')\n\n# Annotate wedges with labels\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"white\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"), bbox=bbox_props, zorder=0, va=\"center\")\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(labels[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n\nplt.show()", "idx": "pie_10", "width": 6.0, "height": 4.0}
{"file": "line_36", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nratio = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\npna_performance = np.array([0.6, 0.65, 0.7, 0.75, 0.8, 0.82, 0.83, 0.83, 0.82, 0.8])\ngin_performance = np.array([0.5, 0.55, 0.6, 0.62, 0.63, 0.63, 0.62, 0.6, 0.58, 0.55])\npna_std = np.array([0.05]*10)\ngin_std = np.array([0.04]*10)\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Titles for subplots\ntitles = ['SPMotif-0.5', 'SPMotif-0.7', 'SPMotif-0.9']\n\nfor i, ax in enumerate(axs):\n    # Plot PNA + ours\n    ax.errorbar(ratio, pna_performance, yerr=pna_std, label='PNA + ours', color='purple', marker='s', linestyle='-')\n    ax.fill_between(ratio, pna_performance - pna_std, pna_performance + pna_std, color='purple', alpha=0.2)\n    \n    # Plot GIN + ours\n    ax.errorbar(ratio, gin_performance, yerr=gin_std, label='GIN + ours', color='orange', marker='s', linestyle='-')\n    ax.fill_between(ratio, gin_performance - gin_std, gin_performance + gin_std, color='orange', alpha=0.2)\n    \n    # Set title, labels, and legend\n    ax.set_title(titles[i])\n    ax.set_xlabel('Ratio r')\n    ax.set_ylabel('Performance')\n    ax.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_36", "width": 15.0, "height": 5.0}
{"file": "multidiff_11", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nmodels = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nrobust_error = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\n\n# Data for the heatmap\nrnfs = np.array([\n    [0.00, 6.20, 4.90, 4.25, 5.40, 3.65, 3.25],\n    [6.65, 0.00, 5.15, 2.80, 5.25, 2.85, 2.50],\n    [7.75, 7.70, 0.00, 5.35, 6.30, 4.80, 4.15],\n    [7.85, 5.90, 6.25, 0.00, 5.45, 3.85, 2.95],\n    [9.15, 8.75, 7.25, 5.75, 0.00, 5.25, 4.95],\n    [8.65, 7.40, 6.95, 5.25, 6.45, 0.00, 4.00],\n    [10.90, 9.90, 9.15, 7.15, 8.95, 6.85, 0.00]\n])\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Bar chart\ny_pos = np.arange(len(models))\nax1.barh(y_pos, robust_error, color='green', edgecolor='black')\nax1.set_yticks(y_pos)\nax1.set_yticklabels(models)\nax1.set_xlabel('Robust Error (%)')\nax1.set_title('Robust Error (%)')\nax1.invert_yaxis()  # labels read top-to-bottom\n\n# Heatmap\nim = ax2.imshow(rnfs, cmap='Greens', aspect='auto')\n\n# We want to show all ticks...\nax2.set_xticks(np.arange(len(models)))\nax2.set_yticks(np.arange(len(models)))\n# ... and label them with the respective list entries\nax2.set_xticklabels(models)\nax2.set_yticklabels(models)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax2.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(models)):\n    for j in range(len(models)):\n        text = ax2.text(j, i, rnfs[i, j], ha=\"center\", va=\"center\", color=\"black\")\n\nax2.set_title('RNFs (%)')\n\nfig.tight_layout()\nplt.show()", "idx": "multidiff_11", "width": 10.0, "height": 6.0}
{"file": "CB_12", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\nbadnets_data = np.random.beta(a=2, b=5, size=1000)\nbenign_data = np.random.beta(a=5, b=2, size=1000)\n\n# Create the figure and axis with the specified figsize\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the histograms\nsns.histplot(badnets_data, color='salmon', kde=True, label='BadNets', stat='density', bins=30, alpha=0.5, edgecolor='none')\nsns.histplot(benign_data, color='palegreen', kde=True, label='Benign', stat='density', bins=30, alpha=0.5, edgecolor='none')\n\n# Plot the KDEs\nsns.kdeplot(badnets_data, color='darkred', linestyle='--', label='BadNets KDE')\nsns.kdeplot(benign_data, color='darkgreen', linestyle='--', label='Benign KDE')\n\n# Add text for the T-test p-value\nplt.text(0.5, 4.5, 'T-test p-value = 0.0000', fontsize=10, ha='center')\n\n# Set the labels and title\nplt.xlabel('Avg. Top-5 Persistence of 1D Diagram')\nplt.ylabel('Density')\nplt.title('Comparison of BadNets and Benign Data')\n\n# Add the legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "CB_12", "width": 8.0, "height": 6.0}
{"file": "radar_17", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each radar chart\nvalues1 = [4, 3, 2, 5, 4]\nvalues2 = [3, 2, 3, 4, 3]\nvalues3 = [4, 4, 3, 4, 5]\n\n# Number of variables\nnum_vars = len(values1)\n\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\nangles += angles[:1]\n\n# Initialize the spider plot\nfig, axs = plt.subplots(1, 3, subplot_kw=dict(polar=True), figsize=(10.0, 8.0))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], ['Extrusion', 'Injection', 'Blow Molding', 'Compression', 'Rotational'])\n\n# Draw ylabels\naxs[0].set_rlabel_position(0)\naxs[1].set_rlabel_position(0)\naxs[2].set_rlabel_position(0)\nplt.yticks([1, 2, 3, 4, 5], [\"1\", \"2\", \"3\", \"4\", \"5\"], color=\"grey\", size=7)\n\n# Plot data and fill with color for each radar chart\naxs[0].plot(angles, values1, 'o-', linewidth=2, color='red')\naxs[0].fill(angles, values1, alpha=0.25, color='red')\naxs[0].set_title('Extrusion', color='red', size=20)\n\naxs[1].plot(angles, values2, 'o-', linewidth=2, color='green')\naxs[1].fill(angles, values2, alpha=0.25, color='green')\naxs[1].set_title('Injection Molding', color='green', size=20)\n\naxs[2].plot(angles, values3, 'o-', linewidth=2, color='blue')\naxs[2].fill(angles, values3, alpha=0.25, color='blue')\naxs[2].set_title('Blow Molding', color='blue', size=20)\n\n# Show the plot\nplt.show()", "idx": "radar_17", "width": 10.0, "height": 8.0}
{"file": "quiver_5", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Set the figure size as requested\nplt.figure(figsize=(6.0, 5.0))\n\n# Create a grid of points\nY, X = np.mgrid[-2:2:20j, -2:2:20j]\n\n# Define the magnetic field components\nBx = -Y/(X**2 + Y**2)\nBy = X/(X**2 + Y**2)\n\n# Normalize the field vectors\nB_norm = np.sqrt(Bx**2 + By**2)\nBx_normalized = Bx/B_norm\nBy_normalized = By/B_norm\n\n# Plot the vector field using quiver\nplt.quiver(X, Y, Bx_normalized, By_normalized, B_norm, pivot='mid', cmap='viridis')\n\n# Set the title and labels\nplt.title('Magnetic Field $\\\\vec{B}$ in Tesla units')\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Show the plot\nplt.show()", "idx": "quiver_5", "width": 6.0, "height": 5.0}
{"file": "contour_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 8.0))\n\n# Define the mean and covariance for the two groups\nmean_female = [120, 80]\ncov_female = [[100, 0], [0, 100]]\n\nmean_male = [140, 90]\ncov_male = [[100, 0], [0, 100]]\n\n# Generate the data for the contour plots\nx_female, y_female = np.random.multivariate_normal(mean_female, cov_female, 5000).T\nx_male, y_male = np.random.multivariate_normal(mean_male, cov_male, 5000).T\n\n# Create the contour plots\nplt.contour(np.histogram2d(x_female, y_female, bins=40)[0], extent=[100,160,50,100], linewidths=2, colors='blue', label='Female')\nplt.contour(np.histogram2d(x_male, y_male, bins=40)[0], extent=[100,160,50,100], linewidths=2, colors='red', label='Male')\n\n# Set the labels and title\nplt.xlabel('SBP (mmHg)')\nplt.ylabel('DBP (mmHg)')\n\n# Create a custom legend\nplt.legend(['Female', 'Male'], loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "contour_3", "width": 8.0, "height": 8.0}
{"file": "density_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\n\n# Set the figure size as requested\nplt.figure(figsize=(10.0, 3.0))\n\n# Define the data for the overlapping normal distributions\nx = np.linspace(7, 16, 1000)\nmeans = [9, 10, 11, 12, 13]\nstddevs = [0.5, 0.5, 0.5, 0.5, 0.5]\ncolors = ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#d62728']\nalphas = [0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Plot the normal distributions with varying colors and alphas\nfor mean, stddev, color, alpha in zip(means, stddevs, colors, alphas):\n    y = norm.pdf(x, mean, stddev)\n    plt.fill_between(x, y, color=color, alpha=alpha)\n\n# Create a colorbar with the iteration values\nsm = plt.cm.ScalarMappable(cmap=plt.cm.coolwarm, norm=plt.Normalize(vmin=0, vmax=25))\nsm.set_array([])\ncbar = plt.colorbar(sm, ticks=[0, 5, 10, 15, 20, 25])\ncbar.set_label('Iteration')\n\n# Set the x-axis limits\nplt.xlim(8, 15)\n\n# Remove y-axis ticks\nplt.yticks([])\n\n# Show the plot\nplt.show()", "idx": "density_1", "width": 10.0, "height": 3.0}
{"file": "errorpoint_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.arange(1, 6)\ny = np.random.normal(1.5, 0.5, size=(5,))\nyerr = np.random.normal(0.2, 0.1, size=(5,))\n\n# Error bar styles\nstyles = ['standard', 'upper limits', 'lower limits', 'upper and lower limits', 'random']\ncolors = ['blue', 'red', 'green', 'orange', 'purple']\n\n# Plot\nplt.figure(figsize=(9.0, 6.0))\nfor i, style in enumerate(styles):\n    if style == 'standard':\n        plt.errorbar(x, y + i*0.5, yerr=yerr, fmt='o', color=colors[i], label=style)\n    elif style == 'upper limits':\n        plt.errorbar(x, y + i*0.5, yerr=[0.2, yerr], fmt='o', color=colors[i], uplims=True, label=style)\n    elif style == 'lower limits':\n        plt.errorbar(x, y + i*0.5, yerr=[yerr, 0.2], fmt='o', color=colors[i], lolims=True, label=style)\n    elif style == 'upper and lower limits':\n        plt.errorbar(x, y + i*0.5, yerr=[yerr, yerr], fmt='o', color=colors[i], uplims=True, lolims=True, label=style)\n    elif style == 'random':\n        upperlimits = np.random.choice([True, False], size=x.shape)\n        lowerlimits = np.random.choice([True, False], size=x.shape)\n        plt.errorbar(x, y + i*0.5, yerr=yerr, fmt='o', color=colors[i], uplims=upperlimits, lolims=lowerlimits, label=style)\n\n# Customizing the plot\nplt.title('Errorbar upper and lower limits')\nplt.legend()\nplt.grid(True)\nplt.show()", "idx": "errorpoint_6", "width": 9.0, "height": 6.0}
{"file": "bar_72", "code": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['BactrianX_EN', 'Limax_DE', 'BactrianX_FR', 'Limax_IT', 'BactrianX_ES']\nimprovements = [3.5, 2.3, 4.4, 1.3, -0.7]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\npatterns = ['/', '\\\\', '|', '-', '+']\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nbars = ax.bar(models, improvements, color=colors)\n\n# Add patterns to bars\nfor bar, pattern in zip(bars, patterns):\n    bar.set_hatch(pattern)\n\n# Add data labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom')\n\n# Set labels and title\nax.set_ylabel('Improvement [%]')\nax.set_xlabel('Model with Language')\nax.set_title('Model Performance Improvement by Language')\n\n# Create legend\nfrom matplotlib.patches import Patch\nlegend_elements = [Patch(facecolor=colors[i], hatch=patterns[i], label=models[i].split('_')[1]) for i in range(len(models))]\nax.legend(handles=legend_elements, title='Language')\n\n# Show plot\nplt.show()", "idx": "bar_72", "width": 10.0, "height": 6.0}
{"file": "bar_74", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nseries_labels = ['E16.6', 'L26.8', 'D19.7', 'L22.2', 'L22.2']\nvalues = [\n    [-17, 6, 9, 22],\n    [35, 12, 14, 0],\n    [34, 20, 20, 0]\n]\n\n# Colors for each category\ncolors = ['#FF9999', '#FFCC99', '#99FF99']\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Stacked bar chart\nbottoms = np.zeros(len(series_labels))\nfor i, (category, color) in enumerate(zip(categories, colors)):\n    ax.bar(series_labels, values[i], bottom=bottoms, color=color, label=category, edgecolor='white')\n    bottoms += np.array(values[i])\n\n# Adding value labels on top of each bar\nfor i, value_set in enumerate(values):\n    for j, value in enumerate(value_set):\n        if value != 0:\n            ax.text(j, bottoms[j] - value / 2, str(value), ha='center', va='center')\n\n# Customizing the plot\nax.set_ylabel('Reward Values')\nax.set_title('Stacked Bar Chart with Value Labels')\nax.legend(title='Categories')\n\n# Show plot\nplt.show()", "idx": "bar_74", "width": 10.0, "height": 5.0}
{"file": "box_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nour_model_ratings = np.random.normal(2.5, 0.1, 100)\nntm_cl_ratings = np.random.normal(2.5, 0.1, 100)\nour_model_intrusion = np.random.normal(0.7, 0.05, 100)\nntm_cl_intrusion = np.random.normal(0.7, 0.05, 100)\n\n# Create a figure with specified size\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Plot the boxplots for Ratings\naxs[0, 0].boxplot([our_model_ratings, ntm_cl_ratings], patch_artist=True, boxprops=dict(facecolor='pink'), medianprops=dict(color='black'))\naxs[0, 0].set_xticklabels(['Our Model', 'NTM+CL'])\naxs[0, 0].set_title('Ratings')\n\n# Plot the boxplots for Intrusion\naxs[0, 1].boxplot([our_model_intrusion, ntm_cl_intrusion], patch_artist=True, boxprops=dict(facecolor='lightblue'), medianprops=dict(color='black'))\naxs[0, 1].set_xticklabels(['Our Model', 'NTM+CL'])\naxs[0, 1].set_title('Intrusion')\n\n# Repeat the plots for the second row\naxs[1, 0].boxplot([our_model_ratings, ntm_cl_ratings], patch_artist=True, boxprops=dict(facecolor='pink'), medianprops=dict(color='black'))\naxs[1, 0].set_xticklabels(['Our Model', 'NTM+CL'])\naxs[1, 0].set_title('Ratings')\n\naxs[1, 1].boxplot([our_model_intrusion, ntm_cl_intrusion], patch_artist=True, boxprops=dict(facecolor='lightblue'), medianprops=dict(color='black'))\naxs[1, 1].set_xticklabels(['Our Model', 'NTM+CL'])\naxs[1, 1].set_title('Intrusion')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "box_2", "width": 8.0, "height": 6.0}
{"file": "HR_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bubble chart\ndata = [\n    {'title': 'IID-1 SDMT', 'values': [176]*16},\n    {'title': 'NIID-2 SDST', 'values': [176, 0, 0, 0]*4},\n    {'title': 'NIID-4 UBSDMT', 'values': [64, 136, 208, 280]*4},\n    {'title': 'NIID-5 UBSDST', 'values': [64, 0, 0, 0, 0, 136, 0, 0, 0, 0, 176, 0, 0, 0, 0, 176]}\n]\n\n# Colors for the bubbles\ncolors = ['salmon', 'olive', 'steelblue', 'lightblue']\n\n# Create subplots\nfig, axs = plt.subplots(1, 4, figsize=(10.0, 3.0))\n\n# Plot each bubble chart\nfor ax, dat in zip(axs, data):\n    ax.set_title(dat['title'])\n    ax.set_xticks(range(4))\n    ax.set_xticklabels(['0', '1', '2', '3'])\n    ax.set_xlabel('Client')\n    ax.set_yticks([])\n    ax.set_ylim(-0.5, 3.5)\n    ax.grid(False)\n    \n    for i, value in enumerate(dat['values']):\n        if value > 0:\n            ax.scatter(i % 4, 3 - i // 4, s=value*10, c=colors[i % 4], alpha=0.6, edgecolors='w', linewidth=0.5)\n            ax.text(i % 4, 3 - i // 4, str(value), color='black', ha='center', va='center')\n\n# Add legend\nlegend_labels = ['Depth', 'Edge', 'Normals', 'Semseg']\nlegend_bubbles = [plt.scatter([], [], s=100, c=color, alpha=0.6, edgecolors='w', linewidth=0.5) for color in colors]\nfig.legend(legend_bubbles, legend_labels, loc='lower center', ncol=4, bbox_to_anchor=(0.5, -0.05))\n\nplt.tight_layout()\nplt.show()", "idx": "HR_1", "width": 10.0, "height": 3.0}
{"file": "errorbar_22", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nappliances = ['Refrigerator', 'Washing Machine', 'Dishwasher']\nstandard_model = [0.15, -0.05, 0.05]\nadvanced_model = [0.25, 0.05, 0.15]\noptimal_model = [0.30, 0.05, 0.20]\nerrors = [0.05, 0.05, 0.05]\n\n# X-axis positions\nx = np.arange(len(appliances))\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.25\n\nrects1 = ax.bar(x - bar_width, standard_model, bar_width, label='Standard Model', color='red', yerr=errors, capsize=5)\nrects2 = ax.bar(x, advanced_model, bar_width, label='Advanced Model', color='green', hatch='/', yerr=errors, capsize=5)\nrects3 = ax.bar(x + bar_width, optimal_model, bar_width, label='Optimal Model', color='blue', yerr=errors, capsize=5)\n\n# Labels and Title\nax.set_ylabel('Energy Efficiency')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xticks(x)\nax.set_xticklabels(appliances)\nax.legend()\n\n# Text labels\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\n\n# Show plot\nplt.show()", "idx": "errorbar_22", "width": 8.0, "height": 5.0}
{"file": "box_17", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata = [np.random.normal(60, 10, 100) for _ in range(10)]\n\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create the boxplot\nbp = ax.boxplot(data, patch_artist=True)\n\n# Customize the boxplot appearance\nfor box in bp['boxes']:\n    box.set(facecolor='lightblue', linewidth=2)\n\nfor whisker in bp['whiskers']:\n    whisker.set(color='black', linewidth=2)\n\nfor cap in bp['caps']:\n    cap.set(color='black', linewidth=2)\n\nfor median in bp['medians']:\n    median.set(color='orange', linewidth=2)\n\nfor flier in bp['fliers']:\n    flier.set(marker='o', color='red', alpha=0.5)\n\n# Set the x-axis labels\nax.set_xticklabels([f'Run {i+1}' for i in range(10)])\n\n# Set the y-axis label\nax.set_ylabel('Number Choice')\n\n# Show the plot\nplt.show()", "idx": "box_17", "width": 8.0, "height": 4.0}
{"file": "hist_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for wind speed measurements\nnp.random.seed(0)\nwind_speed_data = np.random.normal(2, 1, 10000)\n\n# Calculate the median\nmedian_wind_speed = np.median(wind_speed_data)\n\n# Create the histogram\nplt.figure(figsize=(8.0, 6.0))\nplt.hist(wind_speed_data, bins=30, color='blue', alpha=0.7, edgecolor='black')\n\n# Add a vertical line for the median\nplt.axvline(median_wind_speed, color='purple', linestyle='dashed', linewidth=2)\n\n# Add text for the median\nplt.text(median_wind_speed + 0.1, 1000, f'Median: {median_wind_speed:.2f}', color='purple')\n\n# Set the title and labels\nplt.title('Histogram of Wind Speed Measurements')\nplt.xlabel('Wind Speed (km/h)')\nplt.ylabel('Number of Measurements')\n\n# Show the plot\nplt.show()", "idx": "hist_15", "width": 8.0, "height": 6.0}
{"file": "hist_17", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['XSum', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC']\nmodified_categories = ['Modified ' + cat for cat in categories]\nwinning_distances = np.linspace(0, 1, 10)\ndata = np.random.randint(20, 150, size=(len(categories), len(winning_distances)))\n\n# Create figure with specified size\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16.0, 7.0))\n\n# Plot the left chart\nfor i, category in enumerate(categories):\n    axes[0].bar(winning_distances, data[i], bottom=np.sum(data[:i], axis=0), label=category)\n\n# Plot the right chart with modified categories\nfor i, category in enumerate(modified_categories):\n    axes[1].bar(winning_distances, data[i], bottom=np.sum(data[:i], axis=0), label=category)\n\n# Set chart titles and labels\naxes[0].set_title('Original Data')\naxes[1].set_title('Modified Data')\nfor ax in axes:\n    ax.set_xlabel('Test Winning Distance')\n    ax.set_ylabel('Number of Pairs')\n    ax.legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "hist_17", "width": 16.0, "height": 7.0}
{"file": "line_52", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx1 = np.array([0.7, 0.75, 0.8, 0.85, 0.9])\ny1 = np.array([76, 79, 81, 79, 77])\nyerr1 = np.array([5, 3, 2, 3, 5])\n\nx2 = np.array([0.1, 0.2, 0.3, 0.4])\ny2 = np.array([71, 76, 78, 73])\nyerr2 = np.array([4, 3, 2, 4])\n\nx3 = np.array([400, 600, 800, 1000, 1200])\ny3 = np.array([82, 84, 83, 79, 75])\nyerr3 = np.array([3, 2, 2, 3, 4])\n\nx4 = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\ny4 = np.array([76, 78, 74, 69, 62, 55])\nyerr4 = np.array([3, 2, 3, 4, 5, 6])\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(9.0, 6.0))\n\n# Plot (a) Positive bound\naxs[0, 0].errorbar(x1, y1, yerr=yerr1, fmt='o-', color='blue', ecolor='red', capsize=5)\naxs[0, 0].set_title('(a) Positive bound')\naxs[0, 0].set_xlabel('Contrastive loss weight')\naxs[0, 0].set_ylabel('Accuracy')\n\n# Plot (b) Negative bound\naxs[0, 1].errorbar(x2, y2, yerr=yerr2, fmt='o-', color='blue', ecolor='red', capsize=5)\naxs[0, 1].set_title('(b) Negative bound')\naxs[0, 1].set_xlabel('Fuzzy coefficient')\n\n# Plot (c) Fuzzy coefficient\naxs[1, 0].errorbar(x3, y3, yerr=yerr3, fmt='o-', color='blue', ecolor='red', capsize=5)\naxs[1, 0].set_title('(c) Fuzzy coefficient')\naxs[1, 0].set_xlabel('Contrastive loss weight')\n\n# Plot (d) Contrastive loss weight\naxs[1, 1].errorbar(x4, y4, yerr=yerr4, fmt='o-', color='blue', ecolor='red', capsize=5)\naxs[1, 1].set_title('(d) Contrastive loss weight')\naxs[1, 1].set_xlabel('Fuzzy coefficient')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_52", "width": 9.0, "height": 6.0}
{"file": "CB_26", "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Sample data\nnp.random.seed(10)\ndata_seac = np.random.gamma(shape=2., scale=1.0, size=200)\ndata_ctco = np.random.gamma(shape=2., scale=1.0, size=200) + 1\n\n# Create a figure with specified size\nplt.figure(figsize=(7.0, 5.0))\n\n# Create a violin plot for SEAC\nsns.violinplot(data=data_seac, color='lightgreen', inner=None)\n# Overlay a swarm plot for SEAC\nsns.swarmplot(data=data_seac, color='green', edgecolor='black')\n\n# Create a violin plot for CTCO\nsns.violinplot(data=data_ctco, color='peachpuff', inner=None)\n# Overlay a swarm plot for CTCO\nsns.swarmplot(data=data_ctco, color='orange', edgecolor='black')\n\n# Set the x-axis labels\nplt.xticks([0, 1], ['SEAC', 'CTCO'])\n\n# Set the y-axis label\nplt.ylabel('Time Cost (Seconds)')\n\n# Set the title for the algorithms\nplt.xlabel('Algorithms')\n\n# Show the plot\nplt.show()", "idx": "CB_26", "width": 7.0, "height": 5.0}
{"file": "line_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.array([0, 500, 1000, 1500, 2000])\nsuccess_rate_7B = np.array([0.1, 0.5, 0.8, 0.9, 0.95])\nsuccess_rate_7B_fine_tuned = np.array([0.05, 0.4, 0.7, 0.85, 0.9])\n\n# Error ranges for the shaded areas\nerror_7B = success_rate_7B * 0.1\nerror_7B_fine_tuned = success_rate_7B_fine_tuned * 0.1\n\n# Create subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9.0, 4.0))\n\n# Plot for GPT-4 Evaluation\nax1.plot(iterations, success_rate_7B, marker='o', color='blue', label='7B')\nax1.fill_between(iterations, success_rate_7B-error_7B, success_rate_7B+error_7B, color='blue', alpha=0.2)\nax1.plot(iterations, success_rate_7B_fine_tuned, marker='o', color='magenta', label='7B (Fine-tuned)')\nax1.fill_between(iterations, success_rate_7B_fine_tuned-error_7B_fine_tuned, success_rate_7B_fine_tuned+error_7B_fine_tuned, color='magenta', alpha=0.2)\nax1.set_title('GPT-4 Evaluation')\nax1.set_xlabel('Iterations')\nax1.set_ylabel('Attack Success Rate')\nax1.legend()\n\n# Plot for Llama Guard Evaluation\nax2.plot(iterations, success_rate_7B, marker='o', color='blue', label='7B')\nax2.fill_between(iterations, success_rate_7B-error_7B, success_rate_7B+error_7B, color='blue', alpha=0.2)\nax2.plot(iterations, success_rate_7B_fine_tuned, marker='o', color='magenta', label='7B (Fine-tuned)')\nax2.fill_between(iterations, success_rate_7B_fine_tuned-error_7B_fine_tuned, success_rate_7B_fine_tuned+error_7B_fine_tuned, color='magenta', alpha=0.2)\nax2.set_title('Llama Guard Evaluation')\nax2.set_xlabel('Iterations')\nax2.set_ylabel('Attack Success Rate')\nax2.legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "line_18", "width": 9.0, "height": 4.0}
{"file": "line_25", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nnumber_of_experts = [1, 2, 3, 4, 5, 6, 7, 8]\nbaseline_don = [2.0, 2.5, 2.8, 3.0, 3.1, 3.2, 3.2, 3.3]\nsoftmoe_don = [2.2, 2.7, 3.0, 3.2, 3.3, 3.4, 3.4, 3.5]\ntop1moe_don = [2.1, 2.6, 2.9, 3.1, 3.2, 3.3, 3.3, 3.4]\n\nbaseline_iqm = [4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5]\nsoftmoe_iqm = [4.2, 4.7, 5.2, 5.7, 6.2, 6.7, 7.2, 7.7]\ntop1moe_iqm = [4.1, 4.6, 5.1, 5.6, 6.1, 6.6, 7.1, 7.6]\n\n# Create two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8.0, 6.0))\n\n# First subplot (DON)\nax1.plot(number_of_experts, baseline_don, marker='o', label='Baseline', color='blue')\nax1.plot(number_of_experts, softmoe_don, marker='o', label='SoftMoE', color='green')\nax1.plot(number_of_experts, top1moe_don, marker='o', label='Top1-MoE', color='magenta')\nax1.set_ylabel('DoN\\nHuman Normalized Score')\nax1.legend(loc='lower right')\nax1.grid(True)\n\n# Second subplot (IQM)\nax2.plot(number_of_experts, baseline_iqm, marker='o', label='Baseline', color='blue')\nax2.plot(number_of_experts, softmoe_iqm, marker='o', label='SoftMoE', color='green')\nax2.plot(number_of_experts, top1moe_iqm, marker='o', label='Top1-MoE', color='magenta')\nax2.set_xlabel('Number of experts')\nax2.set_ylabel('IQM\\nRainbow Human Normalized Score')\nax2.legend(loc='lower right')\nax2.grid(True)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_25", "width": 8.0, "height": 6.0}
{"file": "bar_47", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['HH', 'Reddit', 'IMDb', 'AVG']\nwin = [22, 25, 30, 26, 45, 50, 20, 38, 40, 30, 50, 40, 50, 55, 42, 50]\ntie = [50, 40, 60, 50, 20, 35, 50, 35, 30, 10, 30, 23, 20, 22, 20, 20]\nlose = [28, 35, 10, 24, 35, 15, 30, 27, 30, 60, 20, 37, 30, 22, 38, 30]\n\n# Positions for the bars on the x-axis\nind = np.arange(len(categories))\n\n# Size of the figure\nfig = plt.figure(figsize=(13.0, 6.0))\n\n# Create subplots\nfor i in range(4):\n    ax = fig.add_subplot(2, 2, i+1)\n    \n    # Plot data\n    ax.barh(ind, win[i*4:(i+1)*4], color='darkred', edgecolor='white', label='Win')\n    ax.barh(ind, tie[i*4:(i+1)*4], left=win[i*4:(i+1)*4], color='salmon', edgecolor='white', label='Tie')\n    ax.barh(ind, lose[i*4:(i+1)*4], left=np.array(win[i*4:(i+1)*4])+np.array(tie[i*4:(i+1)*4]), color='peachpuff', edgecolor='white', label='Lose')\n    \n    # Add text labels\n    for j in range(4):\n        ax.text(win[i*4+j] / 2, ind[j], f'{win[i*4+j]}%', ha='center', va='center', color='white', fontsize=10)\n        ax.text(win[i*4+j] + tie[i*4+j] / 2, ind[j], f'{tie[i*4+j]}%', ha='center', va='center', color='black', fontsize=10)\n        ax.text(win[i*4+j] + tie[i*4+j] + lose[i*4+j] / 2, ind[j], f'{lose[i*4+j]}%', ha='center', va='center', color='black', fontsize=10)\n    \n    # Set the y-axis labels\n    ax.set_yticks(ind)\n    ax.set_yticklabels(categories)\n    \n    # Set the title\n    if i == 0:\n        ax.set_title('COPR v.s. Golden (Human Eval)')\n    elif i == 1:\n        ax.set_title('COPR v.s. Golden (GPT-4 Eval)')\n    elif i == 2:\n        ax.set_title('COPR v.s. DPO-ER (Human Eval)')\n    else:\n        ax.set_title('COPR v.s. DPO-ER (GPT-4 Eval)')\n    \n    # Remove x-axis labels\n    ax.set_xticks([])\n\n# Add legend\nfig.legend(['Win', 'Tie', 'Lose'], loc='lower center', ncol=3)\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show plot\nplt.show()", "idx": "bar_47", "width": 13.0, "height": 6.0}
{"file": "PIP_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\nnp.random.seed(0)\nknown_data = np.random.beta(a=2, b=5, size=1000)\nunknown_data = np.random.beta(a=5, b=2, size=1000)\n\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the histograms for known and unknown data\nax.hist(known_data, bins=20, alpha=0.5, label='Known', color='green')\nax.hist(unknown_data, bins=20, alpha=0.5, label='Unknown', color='blue')\n\n# Add labels and title\nax.set_xlabel('maximum predicted probability')\nax.set_ylabel('number of examples')\nax.legend(loc='upper right')\n\n# Create an inset axis for the zoomed-in view\nax_inset = fig.add_axes([0.5, 0.5, 0.4, 0.4])\nax_inset.hist(known_data, bins=20, alpha=0.5, color='green')\nax_inset.hist(unknown_data, bins=20, alpha=0.5, color='blue')\nax_inset.set_xlim(0.3, 0.75)\nax_inset.set_ylim(0, 1500)\n\n# Connect the inset to the main plot with lines\nx1, x2, y1, y2 = 0.3, 0.75, 0, 1500\nax.plot([x1, x1], [y1, y2], color='grey', linestyle='--')\nax.plot([x2, x2], [y1, y2], color='grey', linestyle='--')\nax.plot([x1, x2], [y1, y1], color='grey', linestyle='--')\nax.plot([x1, x2], [y2, y2], color='grey', linestyle='--')\n\n# Show the plot\nplt.show()", "idx": "PIP_2", "width": 10.0, "height": 6.0}
{"file": "bar_87", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nbeauty_data = [-5, 6, 8, -5, 10]\nmovielens_data = [3.0, 5.1, 2.9, 3.1]\nyelp_data = [-0.5, -0.5, -0.7, 1.7, 4.8]\nmore_data = [-6, -10, -3, 4.8, 19.7]\n\n# Labels for the plots\nbeauty_labels = ['-5%', '6%', '8%', '-5%', '10%']\nmovielens_labels = ['3.0%', '5.1%', '2.9%', '3.1%']\nyelp_labels = ['-0.5%', '-0.5%', '-0.7%', '1.7%', '4.8%']\nmore_labels = ['-6%', '-10%', '-3%', '4.8%', '19.7%']\n\n# Colors for the plots\nbeauty_colors = ['black', 'black', 'black', 'black', 'black']\nmovielens_colors = ['black', 'black', 'black', 'black']\nyelp_colors = ['red', 'red', 'red', 'black', 'black']\nmore_colors = ['black', 'black', 'black', 'black', 'black']\n\n# Hatch patterns for the plots\nmore_hatches = ['', '', '/', '', '']\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Beauty subplot\naxs[0, 0].barh(range(len(beauty_data)), beauty_data, color=beauty_colors)\naxs[0, 0].set_title('Beauty')\naxs[0, 0].set_xlabel('\u0394 %')\nfor i, v in enumerate(beauty_data):\n    axs[0, 0].text(v, i, beauty_labels[i], color='black', va='center')\n\n# MovieLens-1M subplot\naxs[0, 1].barh(range(len(movielens_data)), movielens_data, color=movielens_colors)\naxs[0, 1].set_title('MovieLens-1M')\naxs[0, 1].set_xlabel('\u0394 %')\nfor i, v in enumerate(movielens_data):\n    axs[0, 1].text(v, i, movielens_labels[i], color='black', va='center')\n\n# Yelp subplot\naxs[1, 0].barh(range(len(yelp_data)), yelp_data, color=yelp_colors)\naxs[1, 0].set_title('Yelp')\naxs[1, 0].set_xlabel('\u0394 %')\nfor i, v in enumerate(yelp_data):\n    axs[1, 0].text(v, i, yelp_labels[i], color='black', va='center')\n\n# More subplot\naxs[1, 1].barh(range(len(more_data)), more_data, color=more_colors, hatch=more_hatches)\naxs[1, 1].set_title('More')\naxs[1, 1].set_xlabel('\u0394 %')\nfor i, v in enumerate(more_data):\n    axs[1, 1].text(v, i, more_labels[i], color='black', va='center')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_87", "width": 10.0, "height": 8.0}
{"file": "heatmap_12", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nlive_data = np.array([[30, 10], [15, 25]])\ncsiq_data = np.array([[25, 15], [10, 30]])\n\nfig, axes = plt.subplots(1, 2, figsize=(6.0, 5.0))\n\n# LIVE plot\nim1 = axes[0].imshow(live_data, cmap='Purples', interpolation='nearest')\naxes[0].set_title('LIVE')\naxes[0].set_xlabel('Predicted category')\naxes[0].set_ylabel('Labeling Function Similarity')\naxes[0].set_xticks([0, 1])\naxes[0].set_yticks([0, 1])\naxes[0].set_xticklabels(['0', '1'])\naxes[0].set_yticklabels(['0', '1'])\n\n# CSIQ plot\nim2 = axes[1].imshow(csiq_data, cmap='Purples', interpolation='nearest')\naxes[1].set_title('CSIQ')\naxes[1].set_xlabel('Predicted category')\naxes[1].set_ylabel('Labeling Function Similarity')\naxes[1].set_xticks([0, 1])\naxes[1].set_yticks([0, 1])\naxes[1].set_xticklabels(['0', '1'])\naxes[1].set_yticklabels(['0', '1'])\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "heatmap_12", "width": 6.0, "height": 5.0}
{"file": "bar_51", "code": "import matplotlib.pyplot as plt\n\n# Data\nprofessions = ['Farmer', 'Scooter mechanic', 'Household management', 'Construction/Renovation', 'Gardening', 'Making bricks', 'Carpenter', 'Baker', 'Crafting/knitting', 'Cleaning/laundry']\nnumber_of_videos = [2008, 2060, 2158, 2343, 2548, 2915, 3216, 3543, 4190, 5375]\n\n# Create horizontal bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.barh(professions, number_of_videos, color='blue')\n\n# Add data labels\nfor bar in bars:\n    plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2, f' {bar.get_width():.0f}', va='center')\n\n# Set labels and title\nplt.xlabel('Number of Videos')\nplt.ylabel('Profession')\nplt.title('Number of Videos by Profession')\n\n# Show the plot\nplt.show()", "idx": "bar_51", "width": 12.0, "height": 8.0}
{"file": "heatmap_28", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [1.5, 2.2, 1.8, 3.2, 0.5, 3.8, 0.3],\n    [2.8, 0.5, 3.6, 1.8, 2.2, 0.7, 0.6],\n    [1.0, 2.1, 0.9, 4.0, 1.5, 4.2, 0.4],\n    [0.7, 0.6, 0.4, 0.5, 3.4, 0.5, 0.6],\n    [0.9, 1.6, 0.7, 2.3, 2.0, 5.9, 0.5],\n    [1.2, 1.3, 0.5, 0.6, 0.7, 3.1, 4.8],\n    [0.3, 1.9, 0.6, 1.3, 0.8, 1.8, 5.9]\n])\n\n# Labels for rows and columns\nrow_labels = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\ncol_labels = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\n\n# Create the heatmap\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\ncax = ax.matshow(data, cmap='Reds')\n\n# Add color bar\nplt.colorbar(cax)\n\n# Set the labels for rows and columns\nax.set_xticklabels([''] + col_labels, rotation=45, ha='left')\nax.set_yticklabels([''] + row_labels)\n\n# Display the data values on the heatmap\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        ax.text(j, i, str(data[i, j]), va='center', ha='center')\n\n# Set the title\nplt.title('Sales of local vendors (in tons/year)', pad=20)\n\n# Show the plot\nplt.show()", "idx": "heatmap_28", "width": 8.0, "height": 6.0}
{"file": "graph_5", "code": "import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 8.0))\n\n# Define the positions of the nodes\nnodes = {\n    0: (3, 1),\n    1: (1, 3),\n    2: (1, 1)\n}\n\n# Draw the nodes and the edges\nfor i, (x, y) in nodes.items():\n    circle = plt.Circle((x, y), 0.1, color='black', fill=False)\n    plt.gca().add_patch(circle)\n    plt.text(x, y-0.2, str(i), color='red', fontsize=12, ha='center', va='center')\n    for j in nodes:\n        if i != j:\n            plt.plot([x, nodes[j][0]], [y, nodes[j][1]], color='black', linestyle='-', linewidth=1)\n\n# Set the limits and aspect of the plot\nplt.xlim(0, 4)\nplt.ylim(0, 4)\nplt.gca().set_aspect('equal', adjustable='box')\n\n# Remove the axes\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "graph_5", "width": 10.0, "height": 8.0}
{"file": "scatter_13", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ntest_case_index = [1, 2, 3, 4, 5]\nsingle_lstm_error = [0.08, 0.06, 0.05, 0.07, 0.08]\nensemble_lstm_error = [0.04, 0.03, 0.04, 0.03, 0.04]\ncae_reconstruction_error = [0.01, 0.02, 0.02, 0.02, 0.01]\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.scatter(test_case_index, single_lstm_error, label='Single LSTM', color='blue', marker='^', s=100)\nplt.scatter(test_case_index, ensemble_lstm_error, label='Ensemble LSTM', color='green', marker='s', s=100)\nplt.scatter(test_case_index, cae_reconstruction_error, label='CAE Reconstruction', color='black', marker='o', s=100)\n\n# Adding labels and title\nplt.xlabel('Test Case Index')\nplt.ylabel('Average Relative Error, u')\nplt.title('Average Relative Error, u')\n\n# Adding legend\nplt.legend()\n\n# Show grid\nplt.grid(True)\n\n# Show the plot\nplt.show()", "idx": "scatter_13", "width": 8.0, "height": 6.0}
{"file": "line_73", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for PNA + ours\npna_x = np.linspace(0.1, 1.0, 10)\npna_y = np.array([0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\npna_err = np.array([0.05] * 10)\n\n# Data for GIN + ours\ngin_x = np.linspace(0.1, 1.0, 10)\ngin_y = np.array([0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])\ngin_err = np.array([0.05] * 10)\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.errorbar(pna_x, pna_y, yerr=pna_err, fmt='o-', color='purple', label='PNA + ours', capsize=5)\nplt.errorbar(gin_x, gin_y, yerr=gin_err, fmt='o-', color='orange', label='GIN + ours', capsize=5)\n\n# Adding labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Modern Linear Performance Evaluation')\n\n# Adding legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_73", "width": 8.0, "height": 6.0}
{"file": "line_34", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nnum_microphones = [2, 3, 4, 5, 6, 7, 8]\nwer_libricss = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.34]\nwer_ami = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\nihm = [10] * len(num_microphones)\nsdm = [30] * len(num_microphones)\n\n# Create figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\n\n# Plotting the data\nax1.plot(num_microphones, wer_libricss, 'o-', label='LibriCSS (test)', color='blue')\nax1.plot(num_microphones, wer_ami, '^-', label='AMI (dev)', color='orange')\nax1.plot(num_microphones, ihm, ':', label='IHM', color='blue')\nax1.plot(num_microphones, sdm, '--', label='SDM', color='orange')\n\n# Annotating the data points\nfor i, txt in enumerate(wer_libricss):\n    ax1.annotate(f'{txt}%', (num_microphones[i], wer_libricss[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nfor i, txt in enumerate(wer_ami):\n    ax1.annotate(f'{txt}%', (num_microphones[i], wer_ami[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Setting the labels and title\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER(%)', color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Adding a second y-axis for the SDM data\nax2 = ax1.twinx()\nax2.set_ylabel('AMI WER(%)', color='orange')\nax2.tick_params(axis='y', labelcolor='orange')\n\n# Adding legend\nax1.legend(loc='upper right')\n\n# Show grid\nax1.grid(True)\n\n# Show the plot\nplt.show()", "idx": "line_34", "width": 8.0, "height": 7.0}
{"file": "line_26", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nvocabulary_sizes = [256, 512, 1024, 2048, 4096, 8192, 16384]\nbpe_values = [0.4, 0.6, 0.8, 0.9, 0.95, 0.97, 0.98]\nwordpunct_values = [0.3, 0.5, 0.7, 0.8, 0.85, 0.87, 0.88]\nwhitespace_values = [0.2, 0.4, 0.6, 0.7, 0.75, 0.77, 0.78]\n\n# Plotting the lines\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(vocabulary_sizes, bpe_values, 'o-', label='BPE', color='blue', linestyle='dashed')\nplt.plot(vocabulary_sizes, wordpunct_values, 'o-', label='Wordpunct', color='orange', linestyle='dashed')\nplt.plot(vocabulary_sizes, whitespace_values, 'o-', label='Whitespace', color='green', linestyle='dashed')\n\n# Adding title and labels\nplt.title('Test set TPR | FPR = 10^-4')\nplt.xlabel('Vocabulary Size')\nplt.ylabel('TPR')\n\n# Adding legend\nplt.legend()\n\n# Show grid\nplt.grid(True)\n\n# Show the plot\nplt.show()", "idx": "line_26", "width": 8.0, "height": 6.0}
{"file": "radar_3", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for PC1 and PC2\nvalues_pc1 = [0.8, 0.7, 0.6, 0.85, 0.9]\nvalues_pc2 = [0.6, 0.65, 0.7, 0.4, 0.5]\ncategories = ['A', 'B', 'C', 'D', 'E']\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nvalues_pc1 += values_pc1[:1]\nvalues_pc2 += values_pc2[:1]\nangles += angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([0.2, 0.4, 0.6, 0.8], [\"0.2\", \"0.4\", \"0.6\", \"0.8\"], color=\"grey\", size=10)\nplt.ylim(0, 1)\n\n# Plot data\nax.plot(angles, values_pc1, linewidth=2, linestyle='solid', label='Loadings PC1')\nax.fill(angles, values_pc1, 'b', alpha=0.1)\n\nax.plot(angles, values_pc2, linewidth=2, linestyle='solid', color='red', label='Loadings PC2')\nax.fill(angles, values_pc2, 'r', alpha=0.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()", "idx": "radar_3", "width": 8.0, "height": 8.0}
{"file": "multidiff_17", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the left plot (stacked area chart)\nx = np.arange(0, 6)\ny1 = np.array([10, 20, 30, 40, 50, 60])\ny2 = np.array([20, 30, 40, 50, 60, 70])\ny3 = np.array([30, 40, 50, 60, 70, 80])\n\n# Data for the right plot (bar chart)\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\npublications = [150, 100, 250, 120, 180, 200, 220]\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Left plot (stacked area chart)\nax1.stackplot(x, y1, y2, y3, labels=['Education', 'Law', 'Technology'], colors=['#1f77b4', '#ff7f0e', '#2ca02c'])\nax1.legend(loc='upper left')\nax1.set_title('Knowledge Increase by Subject Area')\nax1.set_xlabel('Study Level')\nax1.set_ylabel('Cumulative Knowledge (%)')\n\n# Right plot (bar chart)\nax2.bar(domains, publications, color='#1f77b4')\nax2.set_title('Number of Publications by Domain')\nax2.set_xlabel('Domain')\nax2.set_ylabel('Publications')\n\n# Adjust the layout and show the plot\nplt.tight_layout()\nplt.show()", "idx": "multidiff_17", "width": 10.0, "height": 4.0}
{"file": "bar_78", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [-180, -150, -160, -170]\nemissions_2021 = [-190, -160, -170, -180]\n\nx = np.arange(len(regions))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nrects1 = ax.bar(x - width/2, emissions_2020, width, label='2020 Emissions', hatch='/', edgecolor='black', color='red', alpha=0.5)\nrects2 = ax.bar(x + width/2, emissions_2021, width, label='2021 Emissions', hatch='\\\\', edgecolor='black', color='blue', alpha=0.5)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('2020 Pollution Emissions')\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xticks(x)\nax.set_xticklabels(regions)\nax.legend()\n\n# Adding the second y-axis label\nax2 = ax.twinx()\nax2.set_ylabel('2021 Pollution Emissions')\n\n# Function to attach a text label above each bar, displaying its height\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()", "idx": "bar_78", "width": 10.0, "height": 5.0}
{"file": "radar_4", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each radar chart\nvalues1 = [4, 3, 2, 5]\nvalues2 = [1, 2, 3, 4]\nvalues3 = [3, 4, 2, 1]\n\n# Number of variables we're plotting.\nnum_vars = len(values1)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is made circular, so we need to \"complete the loop\" and append the start to the end.\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\nangles += angles[:1]\n\n# Set up the subplot grid\nfig, axs = plt.subplots(figsize=(10.0, 6.0), nrows=1, ncols=3, subplot_kw=dict(polar=True))\n\n# Draw one radar chart for each set of values\nfor ax, values, color, title in zip(axs, [values1, values2, values3], ['green', 'purple', 'cyan'], ['PGM (\u03b5 = \u221e)', 'PrivSyn (\u03b5 = \u221e)', 'TVAE']):\n    ax.fill(angles, values, color=color, alpha=0.25)\n    ax.plot(angles, values, color=color, linewidth=2)  # Change the color here\n    ax.set_yticklabels([])\n    ax.set_xticks(angles[:-1])\n    ax.set_xticklabels(['Privacy', 'Query Error', 'Fidelity(D_train)', 'Fidelity(D_test)'])\n    ax.set_title(title, size=20, color=color, y=1.1)\n\n# Adjust layout to fit\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "radar_4", "width": 10.0, "height": 6.0}
{"file": "scatter_7", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nmodels = ['GPW-NO', 'LNO', 'GNO', 'InfGCN', 'DeepDFT2', 'FNO']\nparams = [0.6, 1.0, 2.0, 3.0, 10.0, 33.0]\nnmae = [0.7, 3.0, 10.0, 20.0, 2.0, 40.0]\ncolors = ['red', 'grey', 'brown', 'purple', 'green', 'purple']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nfor i in range(len(models)):\n    ax.scatter(params[i], nmae[i], label=models[i], color=colors[i])\n\n# Annotate the points\nfor i, txt in enumerate(models):\n    ax.annotate(txt, (params[i], nmae[i]), textcoords=\"offset points\", xytext=(0, 10), ha='center')\n\n# Set the scale of the axes\nax.set_xscale('log')\nax.set_yscale('log')\n\n# Set the axis labels\nax.set_xlabel('Number of parameters (M)')\nax.set_ylabel('NMAE (%)')\n\n# Set the title\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the grid\nax.grid(True, which=\"both\", ls=\"--\", linewidth=0.5)\n\n# Show the legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()", "idx": "scatter_7", "width": 6.0, "height": 3.0}
{"file": "contour_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the function to plot\ndef f(x, y):\n    return np.exp(-((x - 0.5)**2 + (y - 0.5)**2))\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\n# Create the contour plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\ncontour = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add colorbar\ncbar = plt.colorbar(contour)\ncbar.set_label(r'$\\lambda(x, z)$')\n\n# Set axis labels\nax.set_xlabel(r'$x_1$')\nax.set_ylabel(r'$x_2$')\n\n# Show the plot\nplt.show()", "idx": "contour_2", "width": 8.0, "height": 6.0}
{"file": "errorpoint_4", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_mean = [10, 5, 12, 14, 13, 15]\nunique_speaker_std = [2, 1, 2, 2, 2, 2]\nunique_shouter_mean = [5, 4, 6, 5, 4, 5]\nunique_shouter_std = [1, 1, 1, 1, 1, 1]\ndataset_mean = 6\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.errorbar(categories, unique_speaker_mean, yerr=unique_speaker_std, fmt='o', color='blue', label='Unique speaker count mean')\nax.errorbar(categories, unique_shouter_mean, yerr=unique_shouter_std, fmt='o', color='red', label='Unique shouter count mean')\nax.axhline(y=dataset_mean, color='gray', linestyle='--', label='Dataset unique shouter count mean')\n\n# Customizing the plot\nax.set_xlabel('')\nax.set_ylabel('Number of speakers')\nax.set_title('')\nax.legend()\n\n# Show plot\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "idx": "errorpoint_4", "width": 10.0, "height": 6.0}
{"file": "bar_99", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar charts\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ndataset1 = [150, 180, 75, 90, 80]\ndataset2 = [2.5, 2, 1.5, 2, 2.8]\ndataset3 = [60, 55, 70, 65, 72]\ndataset4 = [80, 75, 90, 85, 88]\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 8.0))\n\n# Plotting Dataset 1\nplt.subplot(2, 2, 1)\nplt.bar(categories, dataset1, color='salmon')\nplt.title('Dataset 1')\nfor i, v in enumerate(dataset1):\n    plt.text(i, v + 3, str(v), color='black', ha='center')\n\n# Plotting Dataset 2\nplt.subplot(2, 2, 2)\nplt.bar(categories, dataset2, color='lightblue')\nplt.title('Dataset 2')\nfor i, v in enumerate(dataset2):\n    plt.text(i, v + 0.1, str(v), color='black', ha='center')\n\n# Plotting Dataset 3\nplt.subplot(2, 2, 3)\nplt.bar(categories, dataset3, color='lightgreen')\nplt.title('Dataset 3')\nfor i, v in enumerate(dataset3):\n    plt.text(i, v + 3, str(v), color='black', ha='center')\n\n# Plotting Dataset 4\nplt.subplot(2, 2, 4)\nplt.bar(categories, dataset4, color='khaki')\nplt.title('Dataset 4')\nfor i, v in enumerate(dataset4):\n    plt.text(i, v + 3, str(v), color='black', ha='center')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_99", "width": 10.0, "height": 8.0}
{"file": "bar_85", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\ntotal_energy_consumption = [500, 700, 800, 900, 1000, 1100, 1200, 1500]\nrenewable_energy_ratio = [200, 300, 400, 500, 600, 700, 800, 900]\nelectricity_production = [1000, 1200, 1300, 1400, 1500, 1600, 1700, 2000]\nelectricity_consumption = [1500, 1700, 1800, 1900, 2000, 2100, 2200, 2500]\n\n# Set the figure size\nplt.figure(figsize=(8.0, 8.0))\n\n# Create the bar chart\nbar_width = 0.2\nindex = range(len(countries))\n\nplt.barh(index, total_energy_consumption, bar_width, color='red', label='Total Energy Consumption (10^2 PJ)')\nplt.barh([i + bar_width for i in index], renewable_energy_ratio, bar_width, color='orange', label='Renewable Energy Ratio (%)')\nplt.barh([i + 2*bar_width for i in index], electricity_production, bar_width, color='blue', label='Electricity Production (10^1 TWh)')\nplt.barh([i + 3*bar_width for i in index], electricity_consumption, bar_width, color='green', label='Electricity Consumption (10^1 TWh)')\n\n# Add labels and title\nplt.xlabel('Values')\nplt.ylabel('Countries')\nplt.yticks([i + 1.5*bar_width for i in index], countries)\nplt.title('Energy and Electricity Data by Country')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_85", "width": 8.0, "height": 8.0}
{"file": "violin_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nboys_grades = [np.random.normal(70, 10, 100), np.random.normal(65, 15, 100),\n               np.random.normal(75, 10, 100), np.random.normal(80, 12, 100)]\ngirls_grades = [np.random.normal(80, 12, 100), np.random.normal(70, 10, 100),\n                np.random.normal(85, 15, 100), np.random.normal(90, 10, 100)]\n\n# Set the figure size as required\nplt.figure(figsize=(12.0, 8.0))\n\n# Create subplots for each class\nfor i in range(4):\n    plt.subplot(2, 2, i+1)\n    plt.title(f'Distribution of Grades: Class {i+1}')\n    plt.boxplot([boys_grades[i], girls_grades[i]], patch_artist=True, boxprops=dict(facecolor='lightblue'))\n    plt.xticks([1, 2], ['Boys', 'Girls'])\n    plt.ylim(20, 120)  # Adjust the y-axis limits to match the picture\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "violin_9", "width": 12.0, "height": 8.0}
{"file": "multidiff_1", "code": "import matplotlib.pyplot as plt\n\n# Data for the treemap and pie chart\nregions = ['South', 'North', 'East', 'West', 'Central', 'Others']\nsizes = [25, 40, 15, 10, 5, 5]\ncolors_treemap = ['#FFFF99', '#99FF99', '#99CCFF', '#FF9999', '#FFCC99', '#CCCCCC']\ncolors_pie = ['#99CCFF', '#FF9999', '#FFCC99', '#FFFF99', '#CCCCCC', '#99FF99']\n\n# Create a figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Treemap\nax1.axis('off')\nax1.set_title('Treemap')\nax1.pie(sizes, labels=regions, colors=colors_treemap, startangle=90, counterclock=False)\nax1.text(-0.5, 0.5, 'South\\n25%', ha='center', va='center')\nax1.text(0.5, 0.5, 'Central\\n5%', ha='center', va='center')\nax1.text(0.5, -0.5, 'Others\\n5%', ha='center', va='center')\nax1.text(-0.5, 0, 'North\\n40%', ha='center', va='center')\nax1.text(-0.5, -0.5, 'East\\n15%', ha='center', va='center')\nax1.text(0, -0.5, 'West\\n10%', ha='center', va='center')\n\n# Pie chart\nax2.set_title('Literacy Rate by Region')\nax2.pie(sizes, labels=regions, colors=colors_pie, autopct='%1.1f%%', startangle=140)\nplt.subplots_adjust(wspace=0.5)\n\n# Show the plot\nplt.show()", "idx": "multidiff_1", "width": 10.0, "height": 5.0}
{"file": "line_64", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ntasks = range(1, 11)\nBaCE = [100, 95, 90, 85, 80, 75, 70, 65, 60, 55]\nLWF = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\nEWC = [50, 52, 54, 56, 58, 56, 54, 52, 50, 48]\nSEQ = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n\n# Plotting the data\nplt.figure(figsize=(12.0, 6.0))\nplt.plot(tasks, BaCE, marker='s', linestyle='--', color='blue', label='BaCE')\nplt.plot(tasks, LWF, marker='v', linestyle='--', color='cyan', label='LWF')\nplt.plot(tasks, EWC, marker='D', linestyle='--', color='green', label='EWC')\nplt.plot(tasks, SEQ, marker='o', linestyle='-', color='lime', label='SEQ')\n\n# Adding labels and title\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.title('Performance on Sequential Tasks')\n\n# Adding legend\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "line_64", "width": 12.0, "height": 6.0}
{"file": "quiver_1", "code": "import matplotlib.pyplot as plt\n\n# Data for the left plot\nleft_categories = ['English', 'French', 'German']\nleft_outgroup_bias = [-4.00, -3.22, -2.44]\nleft_ingroup_bias = [1.88, 2.88, 3.38]\n\n# Data for the right plot\nright_categories = ['Chinese', 'Korean', 'Japanese']\nright_outgroup_bias = [-4.00, -0.50, -4.75]\nright_ingroup_bias = [1.11, 0.25, 0.78]\n\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Left plot\nax1.hlines(left_categories, left_outgroup_bias, left_ingroup_bias, color='black')\nax1.scatter(left_outgroup_bias, left_categories, color='red', zorder=5)\nax1.scatter(left_ingroup_bias, left_categories, color='blue', zorder=5)\nax1.plot(left_outgroup_bias, left_categories, 'ro-', label='Out-group bias (Collectivism)')\nax1.plot(left_ingroup_bias, left_categories, 'bo-', label='In-group bias (Individualism)')\nax1.set_xlim(0, 10)\nax1.set_xlabel('Bias Score')\n\n# Right plot\nax2.hlines(right_categories, right_outgroup_bias, right_ingroup_bias, color='black')\nax2.scatter(right_outgroup_bias, right_categories, color='red', zorder=5)\nax2.scatter(right_ingroup_bias, right_categories, color='blue', zorder=5)\nax2.plot(right_outgroup_bias, right_categories, 'ro-', label='Out-group bias (Individualism)')\nax2.plot(right_ingroup_bias, right_categories, 'bo-', label='In-group bias (Collectivism)')\nax2.set_xlim(0, 10)\nax2.set_xlabel('Bias Score')\n\n# Add text annotations\nfor i, txt in enumerate(left_outgroup_bias):\n    ax1.annotate(f'{txt:.2f}', (left_outgroup_bias[i], left_categories[i]), textcoords=\"offset points\", xytext=(-15,0), ha='center', color='red')\nfor i, txt in enumerate(left_ingroup_bias):\n    ax1.annotate(f'{txt:.2f}', (left_ingroup_bias[i], left_categories[i]), textcoords=\"offset points\", xytext=(15,0), ha='center', color='blue')\n\nfor i, txt in enumerate(right_outgroup_bias):\n    ax2.annotate(f'{txt:.2f}', (right_outgroup_bias[i], right_categories[i]), textcoords=\"offset points\", xytext=(-15,0), ha='center', color='red')\nfor i, txt in enumerate(right_ingroup_bias):\n    ax2.annotate(f'{txt:.2f}', (right_ingroup_bias[i], right_categories[i]), textcoords=\"offset points\", xytext=(15,0), ha='center', color='blue')\n\n# Add legend\nax1.legend(loc='lower right')\nax2.legend(loc='lower right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "quiver_1", "width": 10.0, "height": 4.0}
{"file": "HR_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size\nplt.figure(figsize=(8.0, 4.0))\n\n# Create the left plot (Utility distribution per topic)\nplt.subplot(1, 2, 1)\n\n# Generate data for the utility curves\nx = np.linspace(0, 100, 100)\ny_left = -2 + (x/50)**2\ny_center_left = -1.5 + (x/50)**2\ny_center = -1 + (x/50)**2\ny_center_right = -0.5 + (x/50)**2\ny_right = (x/50)**2\n\n# Plot the utility curves\nplt.plot(x, y_left, label='Left', color='blue')\nplt.plot(x, y_center_left, label='Center Left', color='cyan')\nplt.plot(x, y_center, label='Center', color='green')\nplt.plot(x, y_center_right, label='Center Right', color='red')\nplt.plot(x, y_right, label='Right', color='brown')\n\n# Add labels, title, and legend\nplt.xlabel('Users (U)')\nplt.ylabel('Utility (f)')\nplt.title('Utility distribution per topic')\nplt.legend()\n\n# Create the right plot (User preference matrix)\nplt.subplot(1, 2, 2)\n\n# Generate data for the preference matrix\nnp.random.seed(0)\nmatrix_data = np.random.rand(100, 5)\n\n# Plot the preference matrix\ncolors = ['blue', 'cyan', 'green', 'red', 'brown']\nfor i in range(5):\n    plt.scatter(np.full(100, i), np.arange(100), color=colors[i], alpha=0.5)\n\n# Add labels and title\nplt.xlabel('Items(C)')\nplt.ylabel('Users(U)')\nplt.title('User preference matrix (M)')\n\n# Add custom x-axis labels\nplt.xticks(np.arange(5), ['L', 'CL', 'C', 'CR', 'R'])\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "HR_7", "width": 8.0, "height": 4.0}
{"file": "hist_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for Swiss and New Zealand chocolates\nnp.random.seed(0)\nswiss_milk = np.random.normal(2, 0.5, 1000)\nnz_milk = np.random.normal(2, 0.5, 1000)\nswiss_dark = np.random.normal(1.5, 0.4, 1000)\nnz_dark = np.random.normal(1.5, 0.4, 1000)\nswiss_white = np.random.normal(2.5, 0.7, 1000)\nnz_white = np.random.normal(2.5, 0.7, 1000)\nswiss_ruby = np.random.normal(1.8, 0.5, 1000)\nnz_ruby = np.random.normal(1.8, 0.5, 1000)\n\n# Set up the figure and axes\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Milk Chocolate\naxs[0, 0].hist(swiss_milk, bins=30, density=True, alpha=0.5, label='Swiss')\naxs[0, 0].hist(nz_milk, bins=30, density=True, alpha=0.5, label='New Zealand')\naxs[0, 0].set_title('(a) Milk Chocolate')\naxs[0, 0].set_xlabel('Sweetness')\naxs[0, 0].set_ylabel('Density')\naxs[0, 0].legend()\n\n# Dark Chocolate\naxs[0, 1].hist(swiss_dark, bins=30, density=True, alpha=0.5, label='Swiss')\naxs[0, 1].hist(nz_dark, bins=30, density=True, alpha=0.5, label='New Zealand')\naxs[0, 1].set_title('(b) Dark Chocolate')\naxs[0, 1].set_xlabel('Sweetness')\naxs[0, 1].set_ylabel('Density')\naxs[0, 1].legend()\n\n# White Chocolate\naxs[1, 0].hist(swiss_white, bins=30, density=True, alpha=0.5, label='Swiss')\naxs[1, 0].hist(nz_white, bins=30, density=True, alpha=0.5, label='New Zealand')\naxs[1, 0].set_title('(c) White Chocolate')\naxs[1, 0].set_xlabel('Sweetness')\naxs[1, 0].set_ylabel('Density')\naxs[1, 0].legend()\n\n# Ruby Chocolate\naxs[1, 1].hist(swiss_ruby, bins=30, density=True, alpha=0.5, label='Swiss')\naxs[1, 1].hist(nz_ruby, bins=30, density=True, alpha=0.5, label='New Zealand')\naxs[1, 1].set_title('(d) Ruby Chocolate')\naxs[1, 1].set_xlabel('Sweetness')\naxs[1, 1].set_ylabel('Density')\naxs[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\nplt.show()", "idx": "hist_20", "width": 10.0, "height": 8.0}
{"file": "hist_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data - replace with actual data\ndata = {\n    'XSum': np.random.rand(100),\n    'CNN/DailyMail': np.random.rand(100),\n    'NarrativeQA': np.random.rand(100),\n    'NaturalQuestions - Closed-book': np.random.rand(100),\n    'NaturalQuestions - Open-book': np.random.rand(100),\n    'QuAC': np.random.rand(100)\n}\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 7.0))\n\n# Create the histogram with stacked bars\nbins = np.linspace(0, 1, 20)  # Adjust the number of bins as needed\nfor label, values in data.items():\n    plt.hist(values, bins=bins, label=label, alpha=0.7, edgecolor='black', linewidth=0.5, stacked=True)\n\n# Add labels and title\nplt.xlabel('Test Winning Distance')\nplt.ylabel('Number of Pairs')\nplt.title('Histogram of Test Winning Distance')\n\n# Add legend\nplt.legend(loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "hist_1", "width": 8.0, "height": 7.0}
{"file": "errorbar_17", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\ncountries = ['United States', 'Germany', 'India', 'Brazil', 'Japan']\nenrollment_rate = [0.8, 0.6, 0.4, 0.2, 0.7]\nenrollment_error = [0.1, 0.1, 0.1, 0.1, 0.1]\nstudent_teacher_ratio = [30, 20, 10, 5, 25]\nratio_error = [5, 5, 5, 5, 5]\n\n# Create figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Plot the first subplot - Higher Education Enrollment Rate\nax1.barh(countries, enrollment_rate, xerr=enrollment_error, color=['#6aabd1', '#5f9ed1', '#55a868', '#c44e52', '#8172b3'], capsize=5)\nax1.set_title('Higher Education Enrollment Rate')\nax1.set_xlim(0, 1)\nax1.set_xlabel('Student-Teacher Ratio')\n\n# Plot the second subplot - Student-Teacher Ratio\nax2.barh(countries, student_teacher_ratio, xerr=ratio_error, color=['#6aabd1', '#5f9ed1', '#55a868', '#c44e52', '#8172b3'], capsize=5)\nax2.set_title('Student-Teacher Ratio')\nax2.set_xlim(0, 35)\nax2.set_xlabel('Number of Students per Teacher')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "errorbar_17", "width": 6.0, "height": 6.0}
{"file": "box_25", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nnp.random.seed(10)\ndata1 = [np.random.normal(0, std, 100) for std in range(6, 10)]\ndata2 = [np.random.normal(0, std, 100) for std in range(6, 10)]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plotting the boxplots\nbp1 = ax.boxplot(data1, positions=np.array(range(len(data1)))*2.0-0.4, sym='x', widths=0.6)\nbp2 = ax.boxplot(data2, positions=np.array(range(len(data2)))*2.0+0.4, sym='x', widths=0.6)\n\n# Customizing the boxplots\nplt.setp(bp1['boxes'], color='blue')\nplt.setp(bp1['medians'], color='green')\nplt.setp(bp2['boxes'], color='lightblue')\nplt.setp(bp2['medians'], color='green')\n\n# Adding dashed lines for theta max and theta min\nplt.axvline(x=20, color='red', linestyle='--', linewidth=1)\nplt.axvline(x=-20, color='blue', linestyle='--', linewidth=1)\n\n# Adding legend\nax.legend([bp1[\"boxes\"][0], bp2[\"boxes\"][0]], ['SOCP Learning (Proposed)', 'SOCP No Learning'], loc='upper right')\n\n# Setting labels and title\nax.set_xlabel('Thrust Angle [\u00b0]')\nax.set_ylabel('Angular Frequency [rad/s]')\nax.set_title('Comparison of SOCP Learning and No Learning')\n\n# Setting x-axis limits and ticks\nax.set_xlim(-40, 40)\nax.set_xticks(range(-40, 41, 10))\n\n# Setting y-axis limits and ticks\nax.set_ylim(2.0, 4.0)\nax.set_yticks(np.arange(2.0, 4.1, 0.5))\n\n# Adding grid\nax.yaxis.grid(True)\n\n# Show the plot\nplt.show()", "idx": "box_25", "width": 10.0, "height": 6.0}
{"file": "line_63", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nweeks = np.arange(1, 31)\ndata_series_1 = np.random.rand(30)\ndata_series_2 = np.random.rand(30)\ndata_series_3 = np.random.rand(30)\n\n# Create the plot with the specified figsize\nplt.figure(figsize=(12.0, 8.0))\n\n# Plot the data series\nplt.plot(weeks, data_series_1, label='Data Series 1', color='cyan')\nplt.plot(weeks, data_series_2, label='Data Series 2 with Gradient', color='green', linestyle='--')\nplt.plot(weeks, data_series_3, label='Data Series 3', color='magenta', linestyle=':')\n\n# Add title and labels\nplt.title('Dynamic Data Presentation Across Weeks')\nplt.xlabel('Weeks')\nplt.ylabel('Normalized Value')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_63", "width": 12.0, "height": 8.0}
{"file": "line_37", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nensemble_size = np.arange(5, 31, 1)\naccuracy_mean = np.array([75.2, 76.1, 76.8, 77.2, 77.4, 77.5, 77.6, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7, 77.7])\naccuracy_std = np.array([0.5, 0.4, 0.3, 0.2, 0.15, 0.1, 0.05, 0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01])\n\n# Plotting the mean accuracy with standard deviation as the shaded area\nplt.figure(figsize=(6.0, 5.0))\nplt.plot(ensemble_size, accuracy_mean, color='blue')\nplt.fill_between(ensemble_size, accuracy_mean - accuracy_std, accuracy_mean + accuracy_std, color='blue', alpha=0.2)\n\n# Setting the labels and title\nplt.xlabel('Ensemble Size')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs Ensemble Size')\n\n# Display the plot\nplt.show()", "idx": "line_37", "width": 6.0, "height": 5.0}
{"file": "CB_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([150, 200, 250, 300, 350, 400])\ny_low = np.array([-2, -2.5, -3, -3.5, -4, -4.5])\ny_middle = np.array([-3, -3.5, -4, -4.5, -5, -5.5])\ny_high = np.array([-4, -4.5, -5, -5.5, -6, -6.5])\nseverity_colors = ['blue', 'orange', 'green']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Scatter plot for each severity level\nax.scatter(x, y_low, color=severity_colors[0], label='Low')\nax.scatter(x, y_middle, color=severity_colors[1], label='Middle')\nax.scatter(x, y_high, color=severity_colors[2], label='High')\n\n# Fit a linear regression line to the data\nm, b = np.polyfit(x, np.concatenate((y_low, y_middle, y_high)), 1)\nax.plot(x, m*x + b, color='black')\n\n# Fill the confidence interval\nplt.fill_between(x, m*x + b - 0.5, m*x + b + 0.5, color='gray', alpha=0.5)\n\n# Add the correlation text\nplt.text(350, -5.5, 'Correlation: -0.47', fontsize=9)\n\n# Add legend\nplt.legend(title='Severity')\n\n# Set labels\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()", "idx": "CB_10", "width": 7.0, "height": 5.0}
{"file": "HR_2", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Create a custom colormap\ncolors = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]  # R -> G -> B\nn_bins = 100  # Discretizes the interpolation into bins\ncmap_name = 'my_list'\ncm = LinearSegmentedColormap.from_list(cmap_name, colors, N=n_bins)\n\n# Data for plotting\nx = np.linspace(-6.0, 6.0, 100)\ny = np.linspace(-6.0, 6.0, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\ncontour = ax.contour(X, Y, Z, levels=np.arange(-1, 1.1, 0.1), cmap=cm)\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Colorbar\ncbar = fig.colorbar(contour, ax=ax, orientation='vertical')\ncbar.set_label('Time')\n\nplt.show()", "idx": "HR_2", "width": 6.0, "height": 6.0}
{"file": "HR_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the image size\nplt.figure(figsize=(8.0, 7.0))\n\n# Create the data for the plot\nalpha = np.linspace(0, 2, 100)\nbeta = np.linspace(0, 0.5, 100)\nAlpha, Beta = np.meshgrid(alpha, beta)\nDelta_t = np.sin(Alpha) * np.cos(Beta)  # Replace with the actual function used in the paper\n\n# Create the heatmap\nplt.imshow(Delta_t, extent=[alpha.min(), alpha.max(), beta.min(), beta.max()], origin='lower', cmap='bwr', aspect='auto')\n\n# Add a colorbar\ncbar = plt.colorbar()\ncbar.set_label(r'$\\Delta t$')\n\n# Add a dashed green line\nplt.plot(alpha, alpha/4, 'g--')\n\n# Set the labels\nplt.xlabel(r'$\\alpha$')\nplt.ylabel(r'$\\beta$')\n\n# Show the plot\nplt.show()", "idx": "HR_6", "width": 8.0, "height": 7.0}
{"file": "bar_98", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_search_scores = [54.9, 71.5, 60.3, 56.8, 42.4, 7.1, 64.6, 2.0, 96.4]\nbeam_search_scores = [38.3, 79.2, 52.9, 54.5, 92.6, 8.7, 89.2, 43.8, 83.3]\n\nx = np.arange(len(models))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nrects1 = ax.bar(x - width/2, contrastive_search_scores, width, label='Contrastive Search', color='green')\nrects2 = ax.bar(x + width/2, beam_search_scores, width, label='Beam Search', color='orange', hatch='/')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Performance Comparison by Model')\nax.set_xticks(x)\nax.set_xticklabels(models)\nax.legend()\n\n# Add the text labels on top of the bars\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()", "idx": "bar_98", "width": 10.0, "height": 6.0}
{"file": "errorbar_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\ntemperature_spring = [15, 12, 18, 16]\ntemperature_autumn = [14, 11, 19, 17]\nrainfall_spring = [800, 700, 750, 600]\nrainfall_autumn = [850, 650, 800, 700]\nwind_speed_spring = [4, 3, 5, 4]\nwind_speed_autumn = [3, 2, 4, 3]\naqi_spring = [60, 50, 70, 40]\naqi_autumn = [55, 45, 65, 35]\n\n# Error bars\ntemperature_err = [1, 1, 1, 1]\nrainfall_err = [100, 100, 100, 100]\nwind_speed_err = [1, 1, 1, 1]\naqi_err = [10, 10, 10, 10]\n\n# Bar width\nbar_width = 0.35\nindex = np.arange(len(cities))\n\n# Plotting\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 5.0))\n\n# Temperature\naxs[0, 0].bar(index, temperature_spring, bar_width, color='pink', label='Spring', yerr=temperature_err, capsize=5)\naxs[0, 0].bar(index + bar_width, temperature_autumn, bar_width, color='blue', label='Autumn', yerr=temperature_err, capsize=5)\naxs[0, 0].set_title('Annual Average Temperature')\naxs[0, 0].set_xticks(index + bar_width / 2)\naxs[0, 0].set_xticklabels(cities)\naxs[0, 0].set_ylabel('Temperature (\u00b0C)')\naxs[0, 0].legend()\n\n# Rainfall\naxs[0, 1].bar(index, rainfall_spring, bar_width, color='green', label='Spring', yerr=rainfall_err, capsize=5)\naxs[0, 1].bar(index + bar_width, rainfall_autumn, bar_width, color='blue', label='Autumn', yerr=rainfall_err, capsize=5)\naxs[0, 1].set_title('Annual Rainfall')\naxs[0, 1].set_xticks(index + bar_width / 2)\naxs[0, 1].set_xticklabels(cities)\naxs[0, 1].set_ylabel('Rainfall (mm)')\naxs[0, 1].legend()\n\n# Wind Speed\naxs[1, 0].bar(index, wind_speed_spring, bar_width, color='pink', label='Spring', yerr=wind_speed_err, capsize=5)\naxs[1, 0].bar(index + bar_width, wind_speed_autumn, bar_width, color='red', label='Autumn', yerr=wind_speed_err, capsize=5)\naxs[1, 0].set_title('Wind Speed')\naxs[1, 0].set_xticks(index + bar_width / 2)\naxs[1, 0].set_xticklabels(cities)\naxs[1, 0].set_ylabel('Speed (m/s)')\naxs[1, 0].legend()\n\n# Air Quality Index\naxs[1, 1].bar(index, aqi_spring, bar_width, color='lightblue', label='Spring', yerr=aqi_err, capsize=5)\naxs[1, 1].bar(index + bar_width, aqi_autumn, bar_width, color='purple', label='Autumn', yerr=aqi_err, capsize=5)\naxs[1, 1].set_title('Air Quality Index')\naxs[1, 1].set_xticks(index + bar_width / 2)\naxs[1, 1].set_xticklabels(cities)\naxs[1, 1].set_ylabel('AQI')\naxs[1, 1].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "errorbar_20", "width": 10.0, "height": 5.0}
{"file": "bar_67", "code": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-4', 'OSCAR', 'LLaMA', 'BLIP-2', 'BLIP-1', 'VideoLLaMA', 'LaMDA']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\ncolors = ['#FF5A5F', '#FFB400', '#8CE071', '#34B6C6', '#34B6C6', '#9173E6', '#D3D3D3']\n\n# Create figure and bar chart\nplt.figure(figsize=(12.0, 8.0))\nbars = plt.bar(models, percentages, color=colors)\n\n# Add percentage labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval}%', ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\n\n# Set y-axis limit\nplt.ylim(0, 100)\n\n# Show grid\nplt.grid(axis='y', linestyle='--')\n\n# Display the plot\nplt.show()", "idx": "bar_67", "width": 12.0, "height": 8.0}
{"file": "box_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to illustrate the boxplot, replace with actual data\ndata = [np.random.normal(0, std, 100) for std in range(1, 6)]\n\n# Create a figure with the specified size\nplt.figure(figsize=(8.0, 5.0))\n\n# Create the boxplot\nbox = plt.boxplot(data, patch_artist=True)\n\n# Set colors for each box\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nfor patch, color in zip(box['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add a horizontal threshold line\nplt.axhline(y=5, color='r', linestyle='--', label='threshold')\n\n# Customize the x-axis labels\nplt.xticks([1, 2, 3, 4, 5], ['w/o att', 'w/o DP', '1xQ', '20xQ', '200xQ'])\n\n# Add y-axis label\nplt.ylabel('z-score')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "box_15", "width": 8.0, "height": 5.0}
{"file": "PIP_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the random seed for reproducibility\nnp.random.seed(0)\n\n# Generate random data for three categories\nx1 = np.random.normal(-2, 1, 100)\ny1 = np.random.normal(-2, 1, 100)\n\nx2 = np.random.normal(2, 1, 100)\ny2 = np.random.normal(2, 1, 100)\n\nx3 = np.random.normal(0, 1, 100)\ny3 = np.random.normal(0, 1, 100)\n\n# Create the main figure and axis with the specified figsize\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data points for each category with different colors and labels\nax.scatter(x1, y1, color='orange', label='Daytime Sunny')\nax.scatter(x2, y2, color='blue', label='Night Rainy')\nax.scatter(x3, y3, color='green', label='PGST')\n\n# Add a legend to the plot\nax.legend()\n\n# Create an inset axis with a different scale\nax_inset = fig.add_axes([0.2, 0.2, 0.25, 0.25])\nax_inset.scatter(x1, y1, color='orange')\nax_inset.scatter(x2, y2, color='blue')\nax_inset.scatter(x3, y3, color='green')\n\n# Set the limits for the inset axis\nax_inset.set_xlim(-1, 1)\nax_inset.set_ylim(-1, 1)\n\n# Display the plot\nplt.show()", "idx": "PIP_8", "width": 8.0, "height": 8.0}
{"file": "CB_30", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = np.array([[150, 200, 250, 300],\n                     [180, 220, 270, 320],\n                     [200, 240, 290, 340],\n                     [220, 260, 310, 360]])\nerrors = np.array([[20, 15, 10, 5],\n                   [18, 14, 9, 4],\n                   [15, 12, 8, 3],\n                   [10, 8, 5, 2]])\ngrowth = np.array([90, 70, 50, 30])\ngrowth_error = np.array([5, 4, 3, 2])\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Bar plot\nbar_width = 0.2\nindex = np.arange(len(quarters))\ncolors = ['green', 'orange', 'blue', 'purple']\n\nfor i in range(4):\n    ax1.bar(index + i*bar_width, earnings[i], bar_width, yerr=errors[i], color=colors[i], label=f'Company {i+1}')\n\n# Line plot\nax2 = ax1.twinx()\nax2.errorbar(index + 1.5*bar_width, growth, yerr=growth_error, color='red', marker='o', linestyle='-', label='Growth')\n\n# Labels and titles\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($1,000s)')\nax2.set_ylabel('Growth %')\nax1.set_xticks(index + 1.5*bar_width)\nax1.set_xticklabels(quarters)\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show plot\nplt.show()", "idx": "CB_30", "width": 8.0, "height": 6.0}
{"file": "line_69", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nnum_microphones = [2, 3, 4, 5, 6, 7, 8]\nlibri_css_wer = [0.2, 0.9, 0.3, 0.4, 0.5, 0.8, 0.3]\nami_wer = [1.0, 0.8, 0.6, 0.5, 0.4, 0.7, 1.0]\nthreshold = [0.7] * len(num_microphones)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(num_microphones, libri_css_wer, marker='o', color='orange', label='LibriCSS WER')\nax.plot(num_microphones, ami_wer, marker='s', linestyle='--', color='blue', label='AMI WER')\nax.plot(num_microphones, threshold, color='red', linestyle='-', label='Threshold')\n\n# Highlight specific points\nhighlights = {3: 'Highlight 3', 5: 'Highlight 5', 7: 'Highlight 7'}\nfor mic, label in highlights.items():\n    ax.annotate(label, (mic, libri_css_wer[mic-2]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n    ax.scatter(mic, libri_css_wer[mic-2], color='red')\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER(%)')\nax.set_title('WER vs. Number of Microphones')\n\n# Add legend\nax.legend()\n\n# Show grid\nax.grid(True)\n\n# Show the plot\nplt.show()", "idx": "line_69", "width": 8.0, "height": 5.0}
{"file": "bar_37", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbations = ['0%', '50%', '4:8', '75%', '6:8', '87.50%', '7:8']\nspeedup = np.array([\n    [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4],\n    [1.0, 1.9, 3.4, 5.2, 6.1, 8.7, 8.7],\n    [1.0, 1.6, 1.8, 2.7, 2.9, 3.9, 4.3]\n])\n\n# Bar width\nbar_width = 0.1\n\n# Set figure size\nplt.figure(figsize=(12.0, 4.0))\n\n# Create bars\nfor i, model in enumerate(models):\n    for j, perturbation in enumerate(perturbations):\n        plt.bar(i + j*bar_width, speedup[i][j], width=bar_width, label=perturbation if i == 0 else \"\")\n\n# Add text on top of the bars\nfor i, model in enumerate(models):\n    for j, perturbation in enumerate(perturbations):\n        plt.text(i + j*bar_width, speedup[i][j] + 0.1, str(speedup[i][j]), ha='center')\n\n# Set the position of the x ticks\nplt.xticks([r + bar_width*(len(perturbations)-1)/2 for r in range(len(models))], models)\n\n# Set labels and title\nplt.xlabel('Perturbation')\nplt.ylabel('Speedup')\nplt.title('Speedup by Model and Perturbation')\n\n# Create legend\nplt.legend(title='Perturbation', bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_37", "width": 12.0, "height": 4.0}
{"file": "hist_16", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for Baguette and Youtiao\nnp.random.seed(0)\nbaguette_data = np.random.normal(1, 0.5, 1000)\nyoutiao_data = np.random.normal(2, 0.5, 1000)\n\n# Create the plot with specified figure size\nplt.figure(figsize=(5.0, 4.0))\n\n# Plot histograms for both Baguette and Youtiao\nplt.hist(baguette_data, bins=30, alpha=0.5, label='Baguette', color='blue')\nplt.hist(youtiao_data, bins=30, alpha=0.5, label='Youtiao', color='orange')\n\n# Add title and labels\nplt.title('Baking Accuracy Analysis')\nplt.xlabel('Distance to Threshold')\nplt.ylabel('Frequency')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "hist_16", "width": 5.0, "height": 4.0}
{"file": "scatter_16", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nefficiency = [0.2, 0.35, 0.5, 0.65, 0.8]\nauroc_macro = [0.84, 0.82, 0.8, 0.78, 0.76]\ncolors = ['green', 'orange', 'cyan', 'purple', 'grey']\nlabels = ['BioBERT', 'BioDistilBERT', 'BioMobileBERT', 'TinyBioBERT', 'Llama-2-7b']\nmarker_styles = ['o', 'o', 'o', 'o', 'o']\n\n# Additional point with different style\nefficiency_extra = [0.7]\nauroc_macro_extra = [0.76]\ncolors_extra = ['red']\nlabels_extra = ['LORA']\nmarker_styles_extra = ['x']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nfor i in range(len(efficiency)):\n    ax.scatter(efficiency[i], auroc_macro[i], color=colors[i], label=labels[i], marker=marker_styles[i], s=100)\n\nfor i in range(len(efficiency_extra)):\n    ax.scatter(efficiency_extra[i], auroc_macro_extra[i], color=colors_extra[i], label=labels_extra[i], marker=marker_styles_extra[i], s=100)\n\n# Add legend\nlegend = ax.legend(title='Model name', loc='upper left', bbox_to_anchor=(1, 1))\n\n# Set labels and title\nax.set_xlabel('Efficiency')\nax.set_ylabel('AUROC macro')\n\n# Set limits\nax.set_xlim(0.1, 0.9)\nax.set_ylim(0.76, 0.84)\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "scatter_16", "width": 8.0, "height": 4.0}
{"file": "PIP_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the random seed for reproducibility\nnp.random.seed(0)\n\n# Generate random data for each cluster\ncluster1 = np.random.normal(loc=(-5, 0), scale=1, size=(50, 2))\ncluster2 = np.random.normal(loc=(0, 0), scale=1, size=(50, 2))\ncluster3 = np.random.normal(loc=(5, 0), scale=1, size=(50, 2))\ncluster4 = np.random.normal(loc=(0, -5), scale=1, size=(50, 2))\n\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot each cluster with different colors\nax.scatter(cluster1[:, 0], cluster1[:, 1], color='orange', alpha=0.6)\nax.scatter(cluster2[:, 0], cluster2[:, 1], color='red', alpha=0.6)\nax.scatter(cluster3[:, 0], cluster3[:, 1], color='blue', alpha=0.6)\nax.scatter(cluster4[:, 0], cluster4[:, 1], color='purple', alpha=0.6)\n\n# Create an inset axis with a zoomed-in view of a portion of cluster2\nax_inset = fig.add_axes([0.5, 0.7, 0.2, 0.2])\nax_inset.scatter(cluster2[:, 0], cluster2[:, 1], color='red', alpha=0.6)\nax_inset.scatter(cluster1[:, 0], cluster1[:, 1], color='green', alpha=0.6)\n\n# Set the limits for the inset axis\nax_inset.set_xlim(-2, 0)\nax_inset.set_ylim(-0.5, 1.5)\n\n# Draw a rectangle on the main axis to indicate the zoomed area\nrect = plt.Rectangle((-2, -0.5), 2, 2, fill=False, edgecolor='black', linewidth=1)\nax.add_patch(rect)\n\n# Draw an arrow from the rectangle to the inset axis\nax.annotate('', xy=(-1, 0), xytext=(-3, 3),\n            arrowprops=dict(facecolor='black', arrowstyle='->', linewidth=2))\n\n# Show the plot\nplt.show()", "idx": "PIP_9", "width": 6.0, "height": 6.0}
{"file": "multidiff_23", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 10.0))\n\n# Top histogram\nplt.subplot(3, 1, 1)\nmorning_traffic = [100, 150, 200, 250, 300, 350, 400]\nevening_traffic = [300, 350, 400, 450, 500, 550, 600]\nplt.hist([morning_traffic, evening_traffic], bins=7, color=['#a9a9a9', '#808080'], label=['Morning Traffic', 'Evening Traffic'])\nplt.title('Traffic Volume by Time of Day')\nplt.xlabel('Number of Vehicles')\nplt.ylabel('Frequency')\nplt.legend()\n\n# Middle violin plot\nplt.subplot(3, 1, 2)\nspeed_urban = np.random.normal(60, 10, 200)\nspeed_highway = np.random.normal(100, 20, 200)\nplt.violinplot([speed_urban, speed_highway], showmeans=True)\nplt.title('Speed Distribution at Different Locations')\nplt.xticks([1, 2], ['Urban', 'Highway'])\nplt.ylabel('Speed (km/h)')\n\n# Bottom area plot\nplt.subplot(3, 1, 3)\ndistance = np.linspace(0, 1000, 100)\nelevation = np.cumsum(np.random.rand(100) * 10)\nplt.fill_between(distance, elevation, color='purple', alpha=0.3)\nplt.title('Elevation Changes Along a Route')\nplt.xlabel('Distance (km)')\nplt.ylabel('Elevation (m)')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_23", "width": 10.0, "height": 10.0}
{"file": "line_71", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nratio_r = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\npna_performance = np.array([0.6, 0.65, 0.7, 0.72, 0.75, 0.77, 0.78, 0.79, 0.8, 0.81])\ngin_performance = np.array([0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.63, 0.65, 0.66])\npna_std = np.array([0.05] * 10)\ngin_std = np.array([0.04] * 10)\n\n# Create subplots with shared x-axis\nfig, axs = plt.subplots(3, 1, figsize=(6.0, 12.0), sharex=True)\n\n# Titles for subplots\ntitles = ['SPMotif-0.5', 'SPMotif-0.7', 'SPMotif-0.9']\n\nfor i, ax in enumerate(axs):\n    # Plot PNA performance with standard deviation\n    ax.errorbar(ratio_r, pna_performance, yerr=pna_std, fmt='o-', label='PNA', color='blue')\n    ax.fill_between(ratio_r, pna_performance - pna_std, pna_performance + pna_std, color='blue', alpha=0.2)\n    \n    # Plot GIN performance with standard deviation\n    ax.errorbar(ratio_r, gin_performance, yerr=gin_std, fmt='^-', label='GIN', color='green')\n    ax.fill_between(ratio_r, gin_performance - gin_std, gin_performance + gin_std, color='green', alpha=0.2)\n    \n    # Set title for each subplot\n    ax.set_title(titles[i])\n    ax.set_ylim(0.4, 0.9)\n    ax.grid(True)\n\n# Set common labels\naxs[1].set_ylabel('Performance')\naxs[2].set_xlabel('Ratio r')\n\n# Add legend to the last subplot\naxs[2].legend(loc='upper left')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_71", "width": 6.0, "height": 12.0}
{"file": "PIP_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Simulating data\nnp.random.seed(0)\ntime_steps = np.arange(0, 200)\nWI = np.cumsum(np.random.randn(200) * 0.1 + 0.45)\nISQ = np.cumsum(np.random.randn(200) * 0.1 + 0.35)\n\n# Main plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(time_steps, WI, label='WI', color='blue')\nax.plot(time_steps, ISQ, label='ISQ', color='orange')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted cumulative reward')\nax.legend()\n\n# Inset plot\nax_inset = fig.add_axes([0.5, 0.5, 0.3, 0.3])  # [left, bottom, width, height]\nax_inset.plot(time_steps[80:90], WI[80:90], color='blue')\nax_inset.plot(time_steps[80:90], ISQ[80:90], color='orange')\nax_inset.set_xlim(80, 90)\nax_inset.set_ylim(0.3, 0.45)\nax_inset.set_xticks(np.arange(80, 91, 5))\nax_inset.set_yticks(np.arange(0.3, 0.46, 0.05))\n\nplt.show()", "idx": "PIP_7", "width": 6.0, "height": 4.0}
{"file": "heatmap_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmaps\nautoformer_data = np.array([[0.55, 0.72, 0.60, 0.54],\n                            [0.42, 0.65, 0.44, 0.89],\n                            [0.96, 0.38, 0.79, 0.53],\n                            [0.57, 0.93, 0.07, 0.09]])\n\ninformer_data = np.array([[0.02, 0.83, 0.78, 0.87],\n                          [0.98, 0.80, 0.46, 0.78],\n                          [0.12, 0.64, 0.14, 0.94],\n                          [0.52, 0.41, 0.26, 0.77]])\n\nreformer_data = np.array([[0.46, 0.57, 0.02, 0.62],\n                          [0.61, 0.62, 0.94, 0.68],\n                          [0.36, 0.44, 0.70, 0.06],\n                          [0.67, 0.67, 0.21, 0.13]])\n\ntransformer_data = np.array([[0.32, 0.36, 0.57, 0.44],\n                             [0.99, 0.10, 0.21, 0.16],\n                             [0.65, 0.25, 0.47, 0.24],\n                             [0.16, 0.11, 0.66, 0.14]])\n\n# Create a figure with subplots\nfig, axs = plt.subplots(2, 2, figsize=(7.0, 6.0))\n\n# Define the heatmap function\ndef heatmap(data, ax, title):\n    im = ax.imshow(data, cmap='Oranges', vmin=-1, vmax=1)\n    ax.set_xticks(np.arange(data.shape[1]))\n    ax.set_yticks(np.arange(data.shape[0]))\n    ax.set_xticklabels(['96', '192', '336', '720'])\n    ax.set_yticklabels(['96', '192', '336', '720'])\n    ax.set_title(title)\n    # Loop over data dimensions and create text annotations.\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            text = ax.text(j, i, f'{data[i, j]:.2f}',\n                           ha=\"center\", va=\"center\", color=\"black\")\n\n# Plot the heatmaps\nheatmap(autoformer_data, axs[0, 0], 'Autoformer')\nheatmap(informer_data, axs[0, 1], 'Informer')\nheatmap(reformer_data, axs[1, 0], 'Reformer')\nheatmap(transformer_data, axs[1, 1], 'Transformer')\n\n# Set the overall title\nplt.suptitle('Weather', fontsize=16)\n\n# Add a colorbar\ncbar = fig.colorbar(im, ax=axs.ravel().tolist(), shrink=0.95)\ncbar.set_label('Correlation coefficient')\n\n# Adjust layout\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Show the plot\nplt.show()", "idx": "heatmap_18", "width": 7.0, "height": 6.0}
{"file": "violin_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the violin plots\ngroup_l0 = [np.random.triangular(50, 200, 700, 100) for _ in range(4)]\ngroup_agis = [np.random.triangular(50, 150, 700, 100) for _ in range(4)]\n\n# Data for the text labels\nlabels_l0 = ['163%', '201%', '176%', '159%', '153%']\nlabels_agis = ['97%', '95%', '109%', '115%', '97%']\n\n# Create a figure with two subplots and set the size\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 8.0))\n\n# First subplot\naxs[0].violinplot(group_l0, positions=[2, 4, 6, 8], showmeans=False, showmedians=True)\naxs[0].violinplot(group_agis, positions=[2, 4, 6, 8], showmeans=False, showmedians=True)\naxs[0].set_title('% Decrease in Test MSE vs. FLAM-GL')\naxs[0].set_ylim(0, 700)\naxs[0].set_xticks([2, 4, 6, 8])\naxs[0].set_xticklabels(['2', '4', '6', '8', '10'])\naxs[0].set_ylabel('% Decrease')\n\n# Add text labels\nfor i, txt in enumerate(labels_l0):\n    axs[0].text(i+2, 600, txt, ha='center')\nfor i, txt in enumerate(labels_agis):\n    axs[0].text(i+2, 100, txt, ha='center')\n\n# Second subplot\naxs[1].violinplot(group_l0, positions=[2, 4, 6, 8], showmeans=False, showmedians=True)\naxs[1].violinplot(group_agis, positions=[2, 4, 6, 8], showmeans=False, showmedians=True)\naxs[1].set_title('% Decrease in Test MSE vs. EBM-RS')\naxs[1].set_ylim(0, 700)\naxs[1].set_xticks([2, 4, 6, 8])\naxs[1].set_xticklabels(['2', '4', '6', '8', '10'])\naxs[1].set_ylabel('% Decrease')\n\n# Add text labels\nfor i, txt in enumerate(labels_l0):\n    axs[1].text(i+2, 600, txt, ha='center')\nfor i, txt in enumerate(labels_agis):\n    axs[1].text(i+2, 100, txt, ha='center')\n\n# Add legend\naxs[0].legend(['Group $l_0$', 'AGIS'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "violin_7", "width": 8.0, "height": 8.0}
{"file": "PIP_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for Line 3 (Random Noise)\nx1 = np.arange(0, 200)\ny1 = np.random.normal(1, 0.1, 200).cumsum()\n\n# Data for Line 4 (Exponential Focus)\nx2 = np.arange(0, 200)\ny2 = np.exp(0.05 * x2)\n\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot Line 3 (Random Noise)\nax.errorbar(x1, y1, yerr=0.2, fmt='-g', label='Line 3 (Random Noise)', marker='^')\n\n# Plot Line 4 (Exponential Focus)\nax.errorbar(x2, y2, yerr=y2*0.1, fmt='-r', label='Line 4 (Exponential Focus)', marker='*')\n\n# Set the y-axis to logarithmic scale\nax.set_yscale('log')\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Exponential Scale')\nax.set_title('Exponential Scale vs. Gradient Steps')\n\n# Add legend\nax.legend()\n\n# Inset plot\nax_inset = fig.add_axes([0.2, 0.5, 0.3, 0.3])\nax_inset.errorbar(x1[20:80], y1[20:80], yerr=0.2, fmt='-g', marker='^')\nax_inset.errorbar(x2[20:80], y2[20:80], yerr=y2[20:80]*0.1, fmt='-r', marker='*')\nax_inset.set_xlim(20, 80)\nax_inset.set_ylim(1, 2)\nax_inset.set_title('Zoomed In')\n\n# Add an arrow pointing to the inset plot\nax.annotate('', xy=(50, 3), xytext=(70, 1.5),\n            arrowprops=dict(facecolor='black', arrowstyle='simple'))\n\n# Show the plot\nplt.show()", "idx": "PIP_10", "width": 6.0, "height": 6.0}
{"file": "box_23", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the boxplots\nmusic_playtime = [30, 40, 50, 60, 70, 80]\nreading_duration = [35, 45, 55, 65, 75, 85]\nexercise_duration = [20, 30, 40, 50, 60, 70]\ngaming_duration = [25, 35, 45, 55, 65, 75]\n\ndata = [music_playtime, reading_duration, exercise_duration, gaming_duration]\nlabels = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\n\n# Create the boxplot\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\nbplot = ax.boxplot(data, patch_artist=True, labels=labels)\n\n# Set colors for each box\ncolors = ['#FFC0CB', '#FFD700', '#90EE90', '#ADD8E6']\nfor patch, color in zip(bplot['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add median value annotations\nmedians = [np.median(d) for d in data]\nfor median, label in zip(medians, labels):\n    ax.text(labels.index(label)+1, median+1, f'{median:.1f}', \n            horizontalalignment='center', color='black')\n\n# Customize the plot\nax.set_title('Daily Activity Durations')\nax.set_ylabel('Duration (minutes)')\nax.grid(True)\n\n# Show the plot\nplt.show()", "idx": "box_23", "width": 9.0, "height": 5.0}
{"file": "line_21", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nimbalance_ratios = ['1/20', '1/30', '1/60', '1/90', '1/120', '1/60', '1/30', '1']\nours_acc = [75, 80, 85, 90, 95, 90, 85, 80]\nacr_acc = [77.5, 82.5, 87.5, 92.5, 92.5, 87.5, 82.5, 77.5]\n\n# Plotting the data\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(imbalance_ratios, ours_acc, marker='o', linestyle='--', color='blue', label='Ours')\nplt.plot(imbalance_ratios, acr_acc, marker='s', linestyle='--', color='green', label='ACR')\n\n# Adding labels and title\nplt.xlabel('Imbalance Ratio of Unlabeled Data')\nplt.ylabel('Top-1 Acc (%)')\nplt.title('Comparison of Ours vs ACR')\n\n# Adding legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_21", "width": 9.0, "height": 6.0}
{"file": "hist_8", "code": "import matplotlib.pyplot as plt\n\n# Sample data to mimic the histogram in the picture\n# Note: You would replace this with the actual data from the STEM paper\ndata = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]\n\n# Create the histogram\nplt.figure(figsize=(6.0, 5.0))\nplt.hist(data, bins=10, color='blue', edgecolor='black')\n\n# Set the title and labels\nplt.xlabel('% images overlap')\nplt.ylabel('Number of queries')\n\n# Show the plot\nplt.show()", "idx": "hist_8", "width": 6.0, "height": 5.0}
{"file": "bar_17", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQA', 'Winogrande', 'Average']\nLLaMA_2_7B = [53.0, 46.6, 45.3, 73.1, 53.1]\nEvol_Instruct_70k = [51.2, 45.8, 44.5, 70.4, 54.5]\nEvol_Instruct_AlpaGasus_1k = [56.4, 48.0, 48.5, 73.2, 53.7]\nEvol_Instruct_1k_longest = [56.2, 46.7, 39.0, 72.8, 53.1]\nLIMA_1k = [50.4, 46.7, 50.1, 71.8, 53.9]\n\n# X-axis positions\nx = np.arange(len(tasks))\n\n# Bar width\nbar_width = 0.15\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nrects1 = ax.bar(x - 2*bar_width, LLaMA_2_7B, bar_width, label='LLaMA-2-7B')\nrects2 = ax.bar(x - bar_width, Evol_Instruct_70k, bar_width, label='Evol-Instruct-70k')\nrects3 = ax.bar(x, Evol_Instruct_AlpaGasus_1k, bar_width, label='Evol-Instruct-AlpaGasus-1k')\nrects4 = ax.bar(x + bar_width, Evol_Instruct_1k_longest, bar_width, label='Evol-Instruct-1k-longest')\nrects5 = ax.bar(x + 2*bar_width, LIMA_1k, bar_width, label='LIMA-1k')\n\n# Adding text labels\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\nautolabel(rects4)\nautolabel(rects5)\n\n# Axes labels and title\nax.set_ylabel('Accuracy (%)')\nax.set_title('Performance on Various Tasks')\nax.set_xticks(x)\nax.set_xticklabels(tasks)\nax.legend()\n\n# Display the plot\nplt.show()", "idx": "bar_17", "width": 10.0, "height": 4.0}
{"file": "CB_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\npredicted_probabilities = np.random.rand(100)\nfraction_of_positives = np.random.rand(100)\nbin_edges = np.linspace(0, 1, 20)\nhist_values = np.random.randint(5, 15, size=len(bin_edges)-1)\ncalibration_curve_x = np.linspace(0, 1, 100)\ncalibration_curve_y = np.sqrt(calibration_curve_x)\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the histogram\nax.hist(predicted_probabilities, bins=bin_edges, color='pink', alpha=0.7)\n\n# Plot the scatter points\nscatter = ax.scatter(predicted_probabilities, fraction_of_positives, c=fraction_of_positives, cmap='autumn')\n\n# Plot the calibration curve\nax.plot(calibration_curve_x, calibration_curve_y, 'k-', label='Calibration curve')\n\n# Add dashed lines for bin edges\nfor edge in bin_edges:\n    ax.axvline(edge, color='grey', linestyle='--', linewidth=0.5)\n\n# Add color bar\ncbar = plt.colorbar(scatter, ax=ax)\ncbar.set_label('Color intensity')\n\n# Add labels and legend\nax.set_xlabel('Predicted probability')\nax.set_ylabel('Fraction of positives')\nax.legend(loc='upper left', frameon=False)\n\n# Add grid\nax.grid(True, linestyle='--', linewidth=0.5, color='grey', alpha=0.5)\n\n# Show the plot\nplt.show()", "idx": "CB_3", "width": 6.0, "height": 6.0}
{"file": "bar_24", "code": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Vicuna33b', 'Mistral17b']\naccuracy = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.347, 0.364]\ncolors = ['blue', 'teal', 'green', 'green', 'limegreen', 'limegreen', 'yellowgreen', 'yellow']\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nbars = ax.bar(models, accuracy, color=colors)\n\n# Add data labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 3), ha='center', va='bottom')\n\n# Set labels and title\nax.set_ylabel('Accuracy')\nax.set_xlabel('Models')\nax.set_title('Model Accuracy Comparison')\n\n# Show plot\nplt.show()", "idx": "bar_24", "width": 8.0, "height": 4.0}
{"file": "multidiff_19", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the top bar chart\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.1, 2.9, 3.0, 2.8, 3.2, 3.1]\nerror = [0.2, 0.3, 0.25, 0.3, 0.2, 0.25]\n\n# Data for the bottom error bar chart\ncrime_types = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\noccurrences = [1.0, 1.1, 0.9, 0.8, 0.7]\nyerr = [0.1, 0.15, 0.1, 0.1, 0.1]\n\n# Create figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8.0, 10.0))\n\n# Top bar chart\nax1.bar(countries, crime_rates, yerr=error, color='orange', capsize=5)\nax1.set_title('Average Legal Crime Rates by Country')\nax1.set_ylabel('Crime rate per 10,000 inhabitants')\n\n# Bottom error bar chart\nax2.errorbar(crime_types, occurrences, yerr=yerr, fmt='o', color='teal', capsize=5)\nax2.axhline(y=1.0, color='gray', linestyle='--')\nax2.set_ylabel('Occurrences per 10,000 inhabitants')\nax2.set_title('Crime Occurrence Rates by Type')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_19", "width": 8.0, "height": 10.0}
{"file": "bar_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nlanguages = ['EN', 'FR', 'ES', 'DE', 'IT']\nimprovements = {\n    'Bactrian-X': [3.5, 3.5, 4.4, 4.4, 4.4],\n    'Lima-X': [1.5, 0.8, 2.3, 1.5, 1.3],\n    'Bactrian-X_2': [-0.7, -0.7, -0.9, -1.8, -3.9],\n    'Lima-X_2': [2.8, 1.3, 1.3, 1.3, 1.3]\n}\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.15\nindex = np.arange(len(models))\n\nfor i, lang in enumerate(languages):\n    ax.bar(index + i*bar_width, improvements[models[0]] + improvements[models[1]], bar_width,\n           color=colors[i], label=lang, hatch='/'*(i % 2))\n\n# Add text labels\nfor i, model in enumerate(models):\n    for j, lang in enumerate(languages):\n        height = improvements[model][j]\n        ax.text(i + j*bar_width, height if height > 0 else height - 0.3,\n                f'{height}', ha='center', va='bottom' if height > 0 else 'top')\n\n# Customization\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\nax.set_title('ENDEFRRITES sampled')\nax.set_xticks(index + bar_width * 2)\nax.set_xticklabels(models)\nax.legend(title='Fine-tuning Language', bbox_to_anchor=(1.05, 1), loc='upper left')\n\nplt.tight_layout()\nplt.show()", "idx": "bar_13", "width": 10.0, "height": 6.0}
{"file": "bar_69", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nproduct_A = [20, 35, 30, 35, 27, 25, 30]\nproduct_B = [25, 32, 34, 20, 25, 32, 34]\nproduct_C = [30, 25, 27, 35, 20, 25, 27]\nproduct_D = [35, 30, 25, 27, 35, 30, 25]\nproduct_E = [27, 35, 32, 25, 27, 35, 32]\nproduct_F = [25, 27, 35, 32, 25, 27, 35]\n\n# Stacked bar chart\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nbar_width = 0.5\nindex = np.arange(len(categories))\n\nbar_A = plt.bar(index, product_A, bar_width, label='Product A Sales', color='red', hatch='//')\nbar_B = plt.bar(index, product_B, bar_width, bottom=product_A, label='Product B Sales', color='orange', hatch='\\\\')\nbar_C = plt.bar(index, product_C, bar_width, bottom=np.array(product_A)+np.array(product_B), label='Product C Sales', color='yellow', hatch='--')\nbar_D = plt.bar(index, product_D, bar_width, bottom=np.array(product_A)+np.array(product_B)+np.array(product_C), label='Product D Sales', color='green', hatch='xx')\nbar_E = plt.bar(index, product_E, bar_width, bottom=np.array(product_A)+np.array(product_B)+np.array(product_C)+np.array(product_D), label='Product E Sales', color='blue', hatch='++')\nbar_F = plt.bar(index, product_F, bar_width, bottom=np.array(product_A)+np.array(product_B)+np.array(product_C)+np.array(product_D)+np.array(product_E), label='Product F Sales', color='purple', hatch='**')\n\n# Annotate values on bars\nfor bars in [bar_A, bar_B, bar_C, bar_D, bar_E, bar_F]:\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(bar.get_x() + bar.get_width() / 2, bar.get_y() + height / 2),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n# Labels and Title\nplt.xlabel('Product Categories')\nplt.ylabel('Sales Units')\nplt.title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\nplt.xticks(index, categories)\nplt.yticks(np.arange(0, 81, 10))\n\n# Legend\nplt.legend(title='Products', bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "bar_69", "width": 10.0, "height": 7.0}
{"file": "heatmap_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data for confusion matrices\ndata_live = np.array([[44, 12, 0, 0], [5, 42, 3, 0], [0, 8, 23, 9], [0, 0, 2, 44]])\ndata_csiq = np.array([[35, 8, 0, 0], [4, 24, 13, 1], [2, 8, 13, 18], [0, 0, 3, 31]])\n# Add more data arrays for other confusion matrices...\n\n# Titles for each subplot\ntitles = ['LIVE', 'CSIQ', 'TID2013', 'KADID', 'LIVE-C', 'KonIQ', 'LIVE-M', 'PIPAL']\n\nfig, axes = plt.subplots(nrows=2, ncols=4, figsize=(12.0, 6.0))\n\n# Flatten the axes array for easy iteration\naxes = axes.flatten()\n\n# List of data for each subplot\ndata_list = [data_live, data_csiq] # Add more data arrays here...\n\nfor i, ax in enumerate(axes):\n    # Use the data from the list for each subplot\n    data = data_list[i]\n    im = ax.imshow(data, cmap='viridis')\n    \n    # Add title and labels\n    ax.set_title(titles[i])\n    ax.set_xlabel('Predicted category')\n    ax.set_ylabel('Ground truth category')\n    \n    # Loop over data dimensions and create text annotations.\n    for j in range(data.shape[0]):\n        for k in range(data.shape[1]):\n            text = ax.text(k, j, data[j, k], ha=\"center\", va=\"center\", color=\"w\")\n    \n    # Create colorbar\n    cbar = ax.figure.colorbar(im, ax=ax)\n    cbar.ax.set_ylabel('Count', rotation=-90, va=\"bottom\")\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\nplt.show()", "idx": "heatmap_5", "width": 12.0, "height": 6.0}
{"file": "scatter_2", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nx = [70, 72, 74, 76, 78]\ny1 = [28, 30, 32, 34, 36]\ny2 = [30, 32, 34, 36, 38]\ny3 = [32, 34, 36, 38, 40]\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'o-', color='lightblue', linestyle='dashed', label='ViTPose (sc)')\nax.plot(x, y2, 'o-', color='salmon', linestyle='dashed', label='ViTPose (ft)')\nax.plot(x, y3, 'o-', color='grey', linestyle='dashed', label='VLPose')\n\n# Add a legend\nax.legend(title='Models', loc='upper left')\n\n# Set labels and title\nax.set_xlabel('Average Precision on MSCOCO (%)')\nax.set_ylabel('Average Precision on HumanArt (%)')\n\n# Set the limits\nax.set_xlim(70, 78)\nax.set_ylim(28, 42)\n\n# Show the plot\nplt.show()", "idx": "scatter_2", "width": 4.0, "height": 8.0}
{"file": "heatmap_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [np.nan, 0.19, np.nan, np.nan, np.nan, np.nan, np.nan],\n    [0.19, np.nan, 0.62, np.nan, np.nan, np.nan, np.nan],\n    [0.26, 0.53, 0.52, np.nan, np.nan, np.nan, np.nan],\n    [0.16, 0.39, 0.50, 0.39, np.nan, np.nan, np.nan],\n    [0.03, 0.24, 0.24, 0.34, 0.20, np.nan, np.nan],\n    [-0.03, 0.10, -0.03, 0.06, -0.10, 0.06, np.nan],\n    [0.07, 0.28, 0.26, 0.26, 0.20, 0.21, 0.05]\n])\n\n# Labels for the heatmap\nrows = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL']\ncolumns = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttn', 'PPL']\n\n# Create the figure and the heatmap\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\ncax = ax.matshow(data, cmap='Blues')\n\n# Add color bar\nplt.colorbar(cax)\n\n# Set axis labels\nax.set_xticklabels([''] + columns, rotation=45, ha='left')\nax.set_yticklabels([''] + rows)\n\n# Display the data values on the heatmap\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        if not np.isnan(data[i, j]):\n            ax.text(j, i, f'{data[i, j]:.2f}', va='center', ha='center')\n\n# Show the plot\nplt.show()", "idx": "heatmap_8", "width": 8.0, "height": 6.0}
{"file": "CB_9", "code": "import matplotlib.pyplot as plt\n\n# Data\nmodes = ['4211', '2411', '2141', '1124']\nsrcc_values = [0.9628, 0.9604, 0.9612, 0.9592]\nplcc_values = [0.9604, 0.9624, 0.9641, 0.9561]\nsum_values = [sum(x) for x in zip(srcc_values, plcc_values)]\n\n# Plotting the bar chart\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# First axis for SRCC and PLCC\nax1.bar(modes, srcc_values, label='SRCC', color='blue', width=0.4, align='center')\nax1.bar(modes, plcc_values, label='PLCC', color='green', width=0.4, align='edge')\nax1.set_xlabel('Modes')\nax1.set_ylabel('Values')\nax1.set_ylim(0.955, 0.965)\nax1.legend(loc='upper left')\n\n# Second axis for sum of SRCC and PLCC\nax2 = ax1.twinx()\nax2.plot(modes, sum_values, label='Sum (SRCC + PLCC)', color='red', marker='o')\nax2.set_ylabel('Sum Values')\nax2.set_ylim(1.915, 1.927)\nax2.legend(loc='upper right')\n\n# Annotate the sum values\nfor i, txt in enumerate(sum_values):\n    ax2.annotate(f'{txt:.4f}', (modes[i], sum_values[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', color='red')\n\n# Title\nplt.title('SRCC and PLCC values with their sum for different modes')\n\n# Show plot\nplt.show()", "idx": "CB_9", "width": 10.0, "height": 6.0}
{"file": "errorbar_16", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nhyperparameters = ['128 / 0.5 / 0.0001', '128 / 0.5 / 0.001', '256 / 0.1 / 0.0001', '256 / 0.1 / 0.001',\n                   '256 / 0.3 / 0.0001', '256 / 0.3 / 0.001', '256 / 0.5 / 0.0001', '256 / 0.5 / 0.001',\n                   '64 / 0.1 / 0.0001', '64 / 0.1 / 0.001', '64 / 0.3 / 0.0001', '64 / 0.3 / 0.001',\n                   '64 / 0.5 / 0.0001', '64 / 0.5 / 0.001']\nmean_values = np.random.rand(14)\nstd_dev = np.random.rand(14) * 0.1\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\ny_pos = np.arange(len(hyperparameters))\nax.barh(y_pos, mean_values, xerr=std_dev, align='center', color=['pink', 'lightblue']*7, ecolor='black', capsize=5)\nax.set_yticks(y_pos)\nax.set_yticklabels(hyperparameters)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Metric')\nax.set_title('FashionMNIST (NEURAL)')\n\nplt.show()", "idx": "errorbar_16", "width": 8.0, "height": 8.0}
{"file": "errorpoint_1", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama/Balakot', 'Politics']\nmeans = [0.12, 0.11, 0.09, 0.1, 0.13, 0.12]\nerrors = [(0.02, 0.04), (0.01, 0.03), (0.02, 0.02), (0.01, 0.03), (0.03, 0.05), (0.02, 0.04)]\ndataset_mean = 0.1\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.errorbar(categories, means, yerr=errors, fmt='o', color='blue', ecolor='blue', capsize=5, label='Mean')\nax.axhline(y=dataset_mean, color='gray', linestyle='--', label='Dataset mean')\n\n# Customizing the plot\nax.set_ylabel('Shouting Fraction (fraction of videos)')\nax.set_ylim(0, 0.18)\nax.set_xticks(categories)\nax.set_xticklabels(categories, rotation=45, ha='right')\nax.legend()\n\nplt.tight_layout()\nplt.show()", "idx": "errorpoint_1", "width": 8.0, "height": 5.0}
{"file": "bar_71", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['coreutils', 'gzip', 'scp', 'libq.', 'mcf', 'omnet.', 'perl.']\nRegOpt = [20, 40, 60, 80, 100, 20, 40]\nBIOpt = [20, 40, 60, 80, 100, 20, 40]\nLoopOpt = [60, 20, 20, 20, 0, 60, 20]\n\n# X-axis positions\nx = np.arange(len(categories))\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nbar_width = 0.25\n\n# Stacked bars\nax.bar(x, RegOpt, width=bar_width, label='RegOpt', color='green', hatch='//')\nax.bar(x, BIOpt, width=bar_width, bottom=RegOpt, label='BIOpt', color='yellow', hatch='\\\\')\nax.bar(x, LoopOpt, width=bar_width, bottom=np.array(RegOpt)+np.array(BIOpt), label='LoopOpt', color='blue', hatch='//')\n\n# Formatting\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.set_yticks(np.arange(0, 101, 20))\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\nax.legend()\n\n# Grid and labels\nax.grid(axis='y', linestyle='--')\nax.set_axisbelow(True)\nplt.xlabel('Categories')\nplt.ylabel('Percentage')\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "bar_71", "width": 8.0, "height": 4.0}
{"file": "errorpoint_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.arange(1, 5)\ny = np.exp(-x)\nyerr = 0.1 + 0.2*np.sqrt(x)\nxerr = 0.1 + yerr\n\n# Create subplots with specified figsize\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# First subplot with symmetric error bars\nax1.errorbar(x, y, yerr=yerr, fmt='o', color='purple', ecolor='purple', capsize=5)\nax1.set_title('variable, symmetric error')\nax1.set_yscale('linear')\n\n# Second subplot with asymmetric error bars\nlower_error = 0.4 * yerr\nupper_error = yerr\nasymmetric_error = [lower_error, upper_error]\nax2.errorbar(x, y, xerr=asymmetric_error, fmt='o', color='green', ecolor='green', capsize=5)\nax2.set_title('variable, asymmetric error')\nax2.set_yscale('log')\n\n# Show the plots\nplt.show()", "idx": "errorpoint_7", "width": 10.0, "height": 4.0}
{"file": "line_1", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nsnr = [5, 10, 15, 20]\njpeg_ldpc = [10, 30, 50, 70]\ndeepjscc_wo_ofdm = [20, 40, 60, 80]\ndeepjscc_w_ofdm = [30, 50, 70, 90]\nours = [40, 60, 80, 100]\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(snr, jpeg_ldpc, marker='o', label='JPEG+LDPC', color='blue')\nplt.plot(snr, deepjscc_wo_ofdm, marker='^', label='DEEPJSCC w/o ofdm', color='red')\nplt.plot(snr, deepjscc_w_ofdm, marker='x', label='DEEPJSCC w/ ofdm', color='green')\nplt.plot(snr, ours, marker='*', label='OURS', color='orange')\n\n# Adding labels and title\nplt.xlabel('SNR')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Classification Accuracy vs SNR')\n\n# Adding legend\nplt.legend()\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "line_1", "width": 8.0, "height": 6.0}
{"file": "CB_18", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nfew_shot_k = np.array([4, 8, 12, 16, 20, 24, 28, 32])\nmicro_f1 = np.array([85, 88, 90, 92, 93, 94, 95, 96])\nerror = np.array([2.5, 1.5, 1.0, 0.8, 0.6, 0.5, 0.4, 0.3])\n\n# Plot with error band\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(few_shot_k, micro_f1, marker='o', color='blue', label='Trained w/ Few-Shot Ex')\nplt.fill_between(few_shot_k, micro_f1-error, micro_f1+error, color='blue', alpha=0.2)\n\n# Highlight the first point with a different style\nplt.errorbar(few_shot_k[0], micro_f1[0], yerr=error[0], fmt='o', color='red', label='Def Deduce+Ex Gen')\n\n# Customizing the plot\nplt.xlabel('Few-Shot K')\nplt.ylabel('Micro F1')\nplt.title('Micro F1 vs Few-Shot K')\nplt.legend()\nplt.grid(True)\n\n# Show the plot\nplt.show()", "idx": "CB_18", "width": 6.0, "height": 4.0}
{"file": "box_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as requested\nplt.figure(figsize=(8.0, 6.0))\n\n# Generate some random data to simulate the boxplot data\nnp.random.seed(10)\ndata1 = [np.random.normal(0, std, 100) for std in range(1, 6)]\ndata2 = [np.random.normal(0, std, 100) for std in range(1, 6)]\ndata3 = [np.random.normal(0, std, 100) for std in range(1, 6)]\n\n# Combine the data into a list of lists for boxplot\ndata = [data1, data2, data3]\n\n# Define the positions for the boxplots\npositions = np.array(range(len(data1))) + 1\n\n# Create the boxplot with custom colors and labels\nbox1 = plt.boxplot(data1, positions=positions-0.2, widths=0.15, patch_artist=True, boxprops=dict(facecolor=\"blue\"), medianprops=dict(color=\"yellow\"))\nbox2 = plt.boxplot(data2, positions=positions, widths=0.15, patch_artist=True, boxprops=dict(facecolor=\"orange\"), medianprops=dict(color=\"red\"))\nbox3 = plt.boxplot(data3, positions=positions+0.2, widths=0.15, patch_artist=True, boxprops=dict(facecolor=\"red\"), medianprops=dict(color=\"black\"))\n\n# Add dashed lines to indicate thresholds\nplt.axhline(y=40, color='k', linestyle='--')\nplt.axhline(y=-40, color='k', linestyle='--')\n\n# Add x markers to indicate infeasible optimizations (randomly placed for illustration)\nfor pos in positions:\n    plt.scatter(pos, np.random.uniform(-45, -50), marker='x', color='k')\n\n# Set the x-axis and y-axis labels\nplt.xlabel('Angular Frequency [rad/s]')\nplt.ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits and ticks\nplt.xlim(1.5, 5.5)\nplt.xticks(positions, [f'{x:.1f}' for x in np.linspace(2.0, 5.0, len(positions))])\n\n# Add a legend to the plot\nplt.legend([box1[\"boxes\"][0], box2[\"boxes\"][0], box3[\"boxes\"][0]], ['SOCP Learning (Proposed)', 'SOCP No Learning', 'FMPC'], loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "box_5", "width": 8.0, "height": 6.0}
{"file": "graph_1", "code": "import matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a graph object\nG = nx.Graph()\n\n# Add nodes with their positions and colors\nG.add_node(0, pos=(0, 0), color='red')\nG.add_node(1, pos=(1, 0), color='blue')\nG.add_node(2, pos=(1, 1), color='olive')\nG.add_node(3, pos=(2, 1), color='green')\nG.add_node(4, pos=(2, 2), color='purple')\n\n# Add edges with labels\nG.add_edge(0, 1, label='1')\nG.add_edge(1, 2, label='0')\nG.add_edge(2, 3, label='1')\nG.add_edge(3, 4, label='0')\nG.add_edge(4, 0, label='1')\n\n# Get positions from node attributes\npos = nx.get_node_attributes(G, 'pos')\n\n# Draw the graph\nplt.figure(figsize=(8.0, 8.0))\nnx.draw(G, pos, with_labels=False, node_size=700, node_color=list(nx.get_node_attributes(G, 'color').values()))\n\n# Draw edge labels\nedge_labels = nx.get_edge_attributes(G, 'label')\nnx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\n\n# Remove axes\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "graph_1", "width": 8.0, "height": 8.0}
{"file": "bar_68", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\ncars = [70, 50, 30, 80]\nbuses = [30, 30, 40, 75]\nbikes = [15, 20, 20, 85]\npedestrians = [50, 20, 20, 90]\n\n# Stacked bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(categories, cars, label='Cars', color='#1f77b4')\nax.bar(categories, buses, bottom=cars, label='Buses', color='#ff7f0e')\nax.bar(categories, bikes, bottom=[i+j for i,j in zip(cars, buses)], label='Bikes', color='#2ca02c')\nax.bar(categories, pedestrians, bottom=[i+j+k for i,j,k in zip(cars, buses, bikes)], label='Pedestrians', color='#d62728')\n\n# Adding values on top of bars\nfor i, v in enumerate(cars):\n    ax.text(i, v/2, str(v), color='white', ha='center')\nfor i, v in enumerate(buses):\n    ax.text(i, v/2 + cars[i], str(v), color='white', ha='center')\nfor i, v in enumerate(bikes):\n    ax.text(i, v/2 + cars[i] + buses[i], str(v), color='white', ha='center')\nfor i, v in enumerate(pedestrians):\n    ax.text(i, v/2 + cars[i] + buses[i] + bikes[i], str(v), color='white', ha='center')\n\n# Labels and title\nax.set_ylabel('Values')\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.legend()\n\n# Show plot\nplt.show()", "idx": "bar_68", "width": 10.0, "height": 6.0}
{"file": "line_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Simulate random data for the plots\nnp.random.seed(0)\nx = np.arange(0, 200)\ny_base = np.random.uniform(0.1, 0.6, size=200).cumsum() / 100\ny_ours = np.random.uniform(0.1, 0.6, size=200).cumsum() / 100\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(4, 1, figsize=(8.0, 10.0))\n\n# Plot the first subplot\naxs[0].plot(x, y_base, label='base', color='blue')\naxs[0].plot(x, y_ours, label='ours', color='orange')\naxs[0].set_ylabel('FID (\u2193)')\naxs[0].legend()\n\n# Plot the second subplot\naxs[1].plot(x, y_base, label='base', color='blue')\naxs[1].plot(x, y_ours, label='ours', color='orange')\naxs[1].set_ylabel('IS (\u2191)')\naxs[1].legend()\n\n# Plot the third subplot\naxs[2].plot(x, y_base, label='base', color='blue')\naxs[2].plot(x, y_ours, label='ours', color='orange')\naxs[2].set_ylabel('CWFID (\u2193)')\naxs[2].legend()\n\n# Plot the fourth subplot\naxs[3].plot(x, y_base, label='base', color='blue')\naxs[3].plot(x, y_ours, label='ours', color='orange')\naxs[3].set_ylabel('CAS (\u2191)')\naxs[3].legend()\n\n# Set x-axis label for the last subplot\naxs[3].set_xlabel('Training iterations')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_13", "width": 8.0, "height": 10.0}
{"file": "bar_41", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nn_groups = 3\ntruthful_recall = (66.3, 61.9, 53.8, 49.3, 45.7, 41.6, 48.0, 42.6, 36.5, 43.8, 40.2, 30.6, 22.3, 25.9, 22.5)\nmisleading_recall = (-10.1, -13.6, -13.7, -36.3, -41.0, -31.5, -40.5, -49.6, -36.5, -49.5, -56.8, -42.8, -64.7, -59.6, -43.4)\nindex = np.arange(n_groups)\nbar_width = 0.35\n\n# Create subplots\nfig, axes = plt.subplots(1, 5, figsize=(14.0, 4.0))\n\n# Titles for subplots\ntitles = ['Truthful:Misleading = 2:0', 'Truthful:Misleading = 2:1', 'Truthful:Misleading = 2:2',\n          'Truthful:Misleading = 1:2', 'Truthful:Misleading = 0:2']\n\n# Plot each subplot\nfor i, ax in enumerate(axes):\n    bars1 = ax.bar(index, truthful_recall[i*3:(i+1)*3], bar_width, color='b', label='Truthful Recall')\n    bars2 = ax.bar(index + bar_width, misleading_recall[i*3:(i+1)*3], bar_width, color='r', label='Misleading Recall')\n    \n    # Add text for labels, title, and custom x-axis tick labels, etc.\n    ax.set_title(titles[i])\n    ax.set_xticks(index + bar_width / 2)\n    ax.set_xticklabels(('5', '10', '20'))\n    ax.axhline(0, color='black', linewidth=0.8)\n    ax.set_ylim([-80, 80])\n    \n    # Adding data labels\n    for bar in bars1 + bars2:\n        height = bar.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n# Add a legend outside of the last subplot\naxes[-1].legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_41", "width": 14.0, "height": 4.0}
{"file": "bar_48", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\naccuracy_values = [0.35, 0.33, 0.36]\nunfairness_values = [0.12, 0.10, 0.11]\nx = np.arange(len(accuracy_values))\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot for Movielens\naxs[0].bar(x - 0.2, accuracy_values, width=0.4, label='Accuracy', color=['blue', 'brown', 'yellow'])\naxs[0].bar(x + 0.2, unfairness_values, width=0.4, label='Unfairness', color=['purple', 'red', 'blue'])\naxs[0].set_title('(a) Movielens')\naxs[0].set_ylabel('NDCG@20')\naxs[0].set_xticks(x)\naxs[0].set_xticklabels(['Accuracy', 'Unfairness'])\naxs[0].set_ylim(0, 0.4)\n\n# Plot for Tenrec\naxs[1].bar(x - 0.2, accuracy_values, width=0.4, label='Accuracy', color=['blue', 'brown', 'yellow'])\naxs[1].bar(x + 0.2, unfairness_values, width=0.4, label='Unfairness', color=['purple', 'red', 'blue'])\naxs[1].set_title('(b) Tenrec')\naxs[1].set_ylabel('CV@20')\naxs[1].set_xticks(x)\naxs[1].set_xticklabels(['Accuracy', 'Unfairness'])\naxs[1].set_ylim(0, 0.2)\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "bar_48", "width": 5.0, "height": 6.0}
{"file": "line_56", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.array([0, 20, 40, 60, 80])\ncoco_10k = np.array([0.6, 0.65, 0.7, 0.72, 0.73])\nlaion_10k = np.array([0.55, 0.6, 0.63, 0.68, 0.71])\ncoco_5k = np.array([0.58, 0.62, 0.66, 0.69, 0.72])\nlaion_5k = np.array([0.56, 0.59, 0.62, 0.65, 0.68])\n\n# Create subplots with specified figure size\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# First subplot\naxs[0].plot(x, coco_10k, marker='o', color='red', linestyle='-', label='COCO (10k)')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].legend()\n\n# Second subplot\naxs[1].plot(x, laion_10k, marker='^', color='blue', linestyle='--', label='LAION (10k)')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].legend()\n\n# Third subplot\naxs[2].plot(x, coco_5k, marker='s', color='green', linestyle='-', label='COCO (5k)')\naxs[2].plot(x, laion_5k, marker='x', color='orange', linestyle='--', label='LAION (5k)')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_56", "width": 9.0, "height": 3.0}
{"file": "bar_66", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_2018 = [-0.4, -0.3, -0.5, -0.2]\ngdp_growth_2019 = [-0.2, -0.1, -0.3, -0.1]\ngdp_growth_2020 = [-0.9, -0.6, -0.8, -0.7]\ngdp_growth_2021 = [-0.1, -0.2, -0.1, -0.3]\n\n# Set the figure size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nbar_width = 0.4\ny_pos = range(len(countries))\n\nplt.barh(y_pos, gdp_growth_2018, bar_width, color='red', label='GDP_growth_2018', hatch='o')\nplt.barh(y_pos, gdp_growth_2019, bar_width, left=gdp_growth_2018, color='green', label='GDP_growth_2019', hatch='o')\nplt.barh(y_pos, gdp_growth_2020, bar_width, left=[i+j for i,j in zip(gdp_growth_2018, gdp_growth_2019)], color='blue', label='GDP_growth_2020', hatch='/')\nplt.barh(y_pos, gdp_growth_2021, bar_width, left=[i+j+k for i,j,k in zip(gdp_growth_2018, gdp_growth_2019, gdp_growth_2020)], color='purple', label='GDP_growth_2021', hatch='/')\n\n# Add labels and title\nplt.xlabel('GDP Growth Rate (%)')\nplt.title('Negative GDP Growth Rates by Country and Year')\nplt.yticks(y_pos, countries)\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "bar_66", "width": 10.0, "height": 6.0}
{"file": "box_12", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata1 = np.random.normal(5, 0.5, 100)\ndata2 = np.random.normal(4.5, 0.6, 100)\ndata3 = np.random.normal(4.8, 0.7, 100)\ndata4 = np.random.normal(5.2, 0.8, 100)\ndata5 = np.random.normal(5.0, 0.9, 100)\n\ndata = [data1, data2, data3, data4, data5]\n\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create the boxplot\nbp = ax.boxplot(data, patch_artist=True)\n\n# Customizing the boxplot colors\ncolors = ['#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Customizing the median line color\nfor median in bp['medians']:\n    median.set(color='orange', linewidth=2)\n\n# Customizing the whiskers and caps\nfor whisker in bp['whiskers']:\n    whisker.set(color='black', linewidth=1.5)\nfor cap in bp['caps']:\n    cap.set(color='black', linewidth=1.5)\n\n# Setting the x-axis labels\nax.set_xticklabels(['AlphaBeta', 'z+', 'Gamma(\u03b3 = 0.05)', 'Gamma(\u03b3 = 0.1)', 'Gamma(\u03b3 = 0.25)'])\n\n# Setting the y-axis label\nax.set_ylabel('f(\u03c4)/\u0394Af')\n\n# Display the plot\nplt.show()", "idx": "box_12", "width": 8.0, "height": 6.0}
{"file": "line_65", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\ntasks = range(1, 11)\nBaCE_accuracy = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]\nEWC_accuracy = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\nLWF_accuracy = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\nSEQ_accuracy = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# First subplot\nax1.plot(tasks, BaCE_accuracy, marker='s', color='blue', label='BaCE')\nax1.plot(tasks, EWC_accuracy, marker='D', color='lightblue', linestyle='--', label='EWC')\nax1.set_title('Performance Comparison: BaCE vs EWC')\nax1.set_xlabel('Task')\nax1.set_ylabel('Average Accuracy (%)')\nax1.set_ylim(0, 100)\nax1.legend()\n\n# Second subplot\nax2.plot(tasks, LWF_accuracy, marker='v', color='red', label='LWF')\nax2.plot(tasks, SEQ_accuracy, marker='o', color='pink', linestyle='--', label='SEQ')\nax2.set_title('Performance Comparison: LWF vs SEQ')\nax2.set_xlabel('Task')\nax2.set_ylabel('Average Accuracy (%)')\nax2.set_ylim(0, 100)\nax2.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_65", "width": 8.0, "height": 3.0}
{"file": "scatter_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the random seed for reproducibility\nnp.random.seed(0)\n\n# Generate random data for three categories\nx1 = np.random.normal(0, 1, 100)\ny1 = np.random.normal(0, 1, 100)\n\nx2 = np.random.normal(2, 1, 100)\ny2 = np.random.normal(2, 1, 100)\n\nx3 = np.random.normal(-2, 1, 100)\ny3 = np.random.normal(-2, 1, 100)\n\n# Create a figure with specified size\nplt.figure(figsize=(8.0, 8.0))\n\n# Plot the data with different colors and labels\nplt.scatter(x1, y1, c='orange', label='Daytime Sunny')\nplt.scatter(x2, y2, c='green', label='Night Rainy')\nplt.scatter(x3, y3, c='blue', label='PGST')\n\n# Add a legend to the plot\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "scatter_6", "width": 8.0, "height": 8.0}
{"file": "scatter_10", "code": "import matplotlib.pyplot as plt\n\n# Data points\nnames = ['MAE', 'iBOT', 'MoCo v3', 'D2V2', 'D2V2-Refined']\ngpu_hours = [800, 1600, 2400, 3200, 4000]\naccuracy = [77.5, 81.8, 82.5, 83.5, 85.0]\n\n# Plotting the points\nplt.figure(figsize=(8.0, 5.0))\nplt.scatter(gpu_hours, accuracy, color='black')\n\n# Annotating the points\nfor i, name in enumerate(names):\n    plt.annotate(name, (gpu_hours[i], accuracy[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Drawing the dashed lines\nplt.plot([gpu_hours[0], gpu_hours[1]], [accuracy[0], accuracy[1]], 'k--', label='5.3%')\nplt.plot([gpu_hours[3], gpu_hours[4]], [accuracy[3], accuracy[4]], 'k--', color='orange')\n\n# Annotating the percentage increase\nplt.annotate('5.3%', (gpu_hours[0]+(gpu_hours[1]-gpu_hours[0])/2, accuracy[0]+(accuracy[1]-accuracy[0])/2), \n             textcoords=\"offset points\", xytext=(0,10), ha='center', color='green')\n\n# Setting the title and labels\nplt.title('ImageNet-1K Linear Probing')\nplt.xlabel('Pre-training GPU Hours')\nplt.ylabel('Accuracy [%]')\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "scatter_10", "width": 8.0, "height": 5.0}
{"file": "bar_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlevels = ['Level 1', 'Level 2', 'Level 4']\ntent_pl_cotta = [50000, 50000, 50000]\neta = [30000, 28000, 22900]\ncetta = [22000, 20600, 16800]\n\n# X-axis positions for each group\nx = np.arange(len(levels))\nwidth = 0.25  # Width of the bars\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\nrects1 = ax.bar(x - width, tent_pl_cotta, width, label='Tent/PL/CoTTA', color='yellow')\nrects2 = ax.bar(x, eta, width, label='ETA', color='blue')\nrects3 = ax.bar(x + width, cetta, width, label='CETTA (ours)', color='red')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('# Avg. Uploaded Samples')\nax.set_xticks(x)\nax.set_xticklabels(levels)\nax.legend()\n\n# Function to attach a text label above each bar\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}.0k'.format(int(height/1000)),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n# Call the function to label the bars\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_5", "width": 8.0, "height": 3.0}
{"file": "heatmap_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\ndata = np.random.rand(10, 15)\n\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot the first heatmap\ncax1 = axs[0].imshow(data, cmap='Purples', aspect='auto')\naxs[0].set_title('pythia-1b')\naxs[0].set_yticks(range(10))\naxs[0].set_yticklabels(['<endoftext>', 'No', 'The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed'])\naxs[0].set_xticks(range(0, 15, 2))\n\n# Plot the second heatmap\ncax2 = axs[1].imshow(data, cmap='Purples', aspect='auto')\naxs[1].set_xlabel('Layers')\naxs[1].set_yticks(range(10))\naxs[1].set_yticklabels(['<endoftext>', 'No', 'The', 'athlete', 'that', 'loved', 'the', 'ministers', 'has', 'landed'])\naxs[1].set_xticks(range(0, 15, 5))\n\nplt.tight_layout()\nplt.show()", "idx": "heatmap_9", "width": 5.0, "height": 6.0}
{"file": "bar_32", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Combat Spider', 'Milk Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Create horizontal bar chart\nbars = ax.barh(categories, values, color='blue')\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    label_x_pos = width + 0.02\n    ax.text(label_x_pos, bar.get_y() + bar.get_height()/2, f'{width:.2f}', va='center')\n\n# Set labels and title\nax.set_xlabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Remove y-axis tick marks\nax.tick_params(axis='y', which='both', left=False)\n\n# Set x-axis limits\nax.set_xlim(0, 1)\n\n# Show the plot\nplt.show()", "idx": "bar_32", "width": 6.0, "height": 2.0}
{"file": "bar_35", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Random', 'Uniform', 'G2S', 'S2G', 'ClusterClip']\nllama2_scores = [5.52, 5.53, 5.54, 5.83, 5.84]\nmistral_scores = [6.57, 6.75, 6.81, 7.08, 6.9]\n\n# X-axis positions for the bars\nx = range(len(categories))\n\n# Plotting the bars\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.35\nax.bar(x, llama2_scores, width=bar_width, label='Llama2', color='purple')\nax.bar([p + bar_width for p in x], mistral_scores, width=bar_width, label='Mistral', color='brown')\n\n# Adding the scores on top of the bars\nfor i in range(len(categories)):\n    ax.text(i, llama2_scores[i] + 0.05, str(llama2_scores[i]), ha='center')\n    ax.text(i + bar_width, mistral_scores[i] + 0.05, str(mistral_scores[i]), ha='center')\n\n# Setting the x-axis labels and title\nax.set_xticks([p + bar_width/2 for p in x])\nax.set_xticklabels(categories)\nax.set_ylabel('MT-Bench Score')\nax.set_title('Comparison of MT-Bench Scores')\n\n# Adding the legend\nax.legend()\n\n# Display the plot\nplt.show()", "idx": "bar_35", "width": 8.0, "height": 5.0}
{"file": "heatmap_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 28.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 15.5, 14.3],\n    [49.2, 11.2, 0.6, 7.8, 17.3, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 13.4, 16.3]\n])\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a color map\ncmap = plt.cm.coolwarm\n\n# Normalize the data\nnorm = plt.Normalize(vmin=0.1, vmax=100)\n\n# Plot the matrix\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        size = data[i, j]\n        circle = plt.Circle((j, data.shape[0] - i - 1), np.sqrt(size) * 0.1, color=cmap(norm(size)))\n        ax.add_artist(circle)\n        ax.text(j, data.shape[0] - i - 1, f'{size}%', ha='center', va='center', color='black')\n\n# Set the axis labels\nax.set_xticks(np.arange(data.shape[1]))\nax.set_yticks(np.arange(data.shape[0]))\nax.set_xticklabels(['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain'])\nax.set_yticklabels(['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager'][::-1])\nax.set_xlabel('Votee')\nax.set_ylabel('Voter')\n\n# Add color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nplt.colorbar(sm, ax=ax, orientation='vertical', fraction=0.046, pad=0.04)\n\n# Show the plot\nplt.show()", "idx": "heatmap_10", "width": 10.0, "height": 8.0}
{"file": "multidiff_24", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Pie chart data\nlabels = ['Performing Arts', 'Visual Arts', 'Music', 'Dance', 'Literature']\nsizes = [30, 25, 20, 15, 10]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n\n# Radar chart data\ncategories = ['Technique', 'Creativity', 'Expression', 'Collaboration', 'Dedication']\nvalues = [0.8, 0.6, 0.9, 0.7, 0.8]\nN = len(categories)\n\n# Create a figure with custom size\nfig, ax = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Pie chart\nax[0].pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=90)\nax[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax[0].set_title('Distribution of Arts Education Programs')\n\n# Radar chart\nangles = [n / float(N) * 2 * np.pi for n in range(N)]\nvalues += values[:1]\nangles += angles[:1]\n\nax[1].set_theta_offset(np.pi / 2)\nax[1].set_theta_direction(-1)\n\nplt.xticks(angles[:-1], categories)\nax[1].fill(angles, values, 'b', alpha=0.1)\nax[1].plot(angles, values, 'b', linewidth=2)\nax[1].set_rlabel_position(0)\nax[1].set_title('Student Performance in Arts Education')\n\n# Show the plot\nplt.show()", "idx": "multidiff_24", "width": 10.0, "height": 5.0}
{"file": "3d_2", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create a figure with specified size\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# First subplot\nax1 = fig.add_subplot(121, projection='3d')\nX = np.linspace(-1, 1, 100)\nY = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(X, Y)\nZ = X**2 - Y**2\n\n# Plot the surface\nsurf1 = ax1.plot_surface(X, Y, Z, cmap='jet', edgecolor='none')\nax1.set_title('f(x)')\n\n# Second subplot\nax2 = fig.add_subplot(122, projection='3d')\nZ = np.exp(-X**2 - Y**2)\n\n# Plot the surface\nsurf2 = ax2.plot_surface(X, Y, Z, cmap='jet', edgecolor='none')\nax2.set_title('solution')\n\n# Show the plot\nplt.show()", "idx": "3d_2", "width": 10.0, "height": 7.0}
{"file": "line_70", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.85, 0.8, 0.35, 0.6, 0.75, 0.9]\ny2 = [0.3, 0.3, 0.3, 0.3, 0.8, 0.9, 0.3]\nthreshold = [0.7] * len(x)\nhighlight = [3, 5, 6]\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 5.0))\n\n# First subplot\nax1.plot(x, y1, marker='o', color='yellow', linestyle='-', label='LibriCSS WER')\nax1.axhline(y=0.7, color='red', linestyle='-', label='Threshold')\nfor i in highlight:\n    ax1.plot(x[i-2], y1[i-2], marker='o', color='red')\n    ax1.text(x[i-2], y1[i-2], f'Highlight {i}', color='black', fontsize=10)\nax1.set_xlabel('Number of Microphones')\nax1.set_ylabel('WER(%)')\nax1.legend(loc='lower right')\n\n# Second subplot\nax2.plot(x, y2, marker='s', color='green', linestyle='--', label='AMI WER')\nax2.axhline(y=0.7, color='red', linestyle='-', label='Threshold')\nfor i in highlight:\n    ax2.plot(x[i-2], y2[i-2], marker='o', color='red')\n    ax2.text(x[i-2], y2[i-2], f'Highlight {i}', color='black', fontsize=10)\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('WER(%)')\nax2.legend(loc='lower right')\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "line_70", "width": 12.0, "height": 5.0}
{"file": "box_11", "code": "import matplotlib.pyplot as plt\n\n# Data for the boxplots\ndata1 = [19, 20, 21, 22, 20, 21, 20, 19, 20, 21]\ndata2 = [20, 21, 22, 23, 21, 22, 21, 20, 21, 22]\n\n# Create a figure with specified size\nplt.figure(figsize=(6.0, 4.0))\n\n# Create boxplots\nbp1 = plt.boxplot(data1, positions=[1], widths=0.6, patch_artist=True, boxprops=dict(facecolor=\"none\", color=\"black\"), medianprops=dict(color=\"orange\"), whiskerprops=dict(color=\"black\"), capprops=dict(color=\"black\"))\nbp2 = plt.boxplot(data2, positions=[2], widths=0.6, patch_artist=True, boxprops=dict(facecolor=\"none\", color=\"black\"), medianprops=dict(color=\"orange\"), whiskerprops=dict(color=\"black\"), capprops=dict(color=\"black\"))\n\n# Set the y-axis label\nplt.ylabel('BLEU')\n\n# Set the x-axis tick labels\nplt.xticks([1, 2], ['Llama-70b\\n(T2TT)', 'Llama-70b\\n(S2TT)'])\n\n# Set the y-axis limits\nplt.ylim(16, 22)\n\n# Add a dashed horizontal line at y=20\nplt.axhline(y=20, color='gray', linestyle='--')\n\n# Add an annotation for the 1.0 BLEU difference\nplt.annotate('1.0 BLEU', xy=(1.5, 21), xytext=(1.5, 22), arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\"))\n\n# Show the plot\nplt.show()", "idx": "box_11", "width": 6.0, "height": 4.0}
{"file": "line_5", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ndigit_length = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\naccuracy_direct = [0.6, 0.65, 0.2, 0.3, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3]\naccuracy_scratchpad = [0.1, 0.2, 0.35, 0.25, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2]\naccuracy_rule_following = [0.65, 0.7, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25]\n\n# Plotting the data\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(digit_length, accuracy_direct, 'o--', color='blue', label='5-shot direct')\nplt.plot(digit_length, accuracy_scratchpad, 'o--', color='orange', label='5-shot scratchpad')\nplt.plot(digit_length, accuracy_rule_following, 'o--', color='green', label='5-shot rule-following')\n\n# Adding labels and title\nplt.xlabel('Digit Length')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs. Digit Length')\n\n# Adding legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_5", "width": 6.0, "height": 4.0}
{"file": "contour_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 6.0))\n\n# Generate data for Ground Truth and Generated plots\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-0.02*(X**2 + Y**2))\nZ2 = np.exp(-0.02*((X-50)**2 + (Y-50)**2))\n\n# Plot Ground Truth and Generated data\nplt.contourf(X, Y, Z1, levels=15, cmap='Reds', alpha=0.7)\nplt.contourf(X, Y, Z2, levels=15, cmap='Blues', alpha=0.7)\n\n# Add title and legend\nplt.title('T-SNE plot for the output variable Y3')\nplt.legend(['Ground Truth', 'Generated'], loc='upper right')\n\n# Show the plot\nplt.show()", "idx": "contour_1", "width": 10.0, "height": 6.0}
{"file": "contour_5", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a grid of points\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\n\n# Plot the contour map\nplt.figure(figsize=(6.0, 6.0))\ncontour = plt.contourf(X, Y, Z, levels=np.arange(0, 14, 2), cmap='viridis')\n\n# Add contour labels\nplt.clabel(contour, inline=True, fontsize=8)\n\n# Show the plot\nplt.show()", "idx": "contour_5", "width": 6.0, "height": 6.0}
{"file": "heatmap_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the heatmap in the picture\ndata = np.random.rand(6, 30)\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap='Greens')\n\n# Add colorbar\ncbar = fig.colorbar(cax, ax=ax, fraction=0.046, pad=0.04)\ncbar.set_label('')\n\n# Set the x-axis labels\nax.set_xticks(np.arange(0, 30, 4))\nax.set_xticklabels(np.arange(0, 30, 4))\n\n# Set the y-axis labels\nax.set_yticks(np.arange(data.shape[0]))\nax.set_yticklabels(['Last', 'Q Relation', 'Q Subject', 'C Attribute', 'C Relation', 'C Subject'])\n\n# Set axis labels\nax.set_xlabel('Count')\nax.set_ylabel('Categories')\n\n# Set the title\nax.set_title('')\n\n# Show the plot\nplt.show()", "idx": "heatmap_4", "width": 6.0, "height": 3.0}
{"file": "3d_14", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nfrom scipy.stats import norm\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 6.0))\n\n# Create a 3D axis\nax = plt.axes(projection='3d')\n\n# Data for age, vaccination number, and incidence rate\nage = np.linspace(0, 10, 100)\nvaccination_number = np.array([1, 2, 3])\nincidence_rate = [norm.pdf(age, loc=5, scale=1), norm.pdf(age, loc=5, scale=1.5), norm.pdf(age, loc=5, scale=2)]\n\n# Colors for the plots\ncolors = ['yellow', 'cyan', 'purple']\n\n# Plot each curve\nfor i, vacc_num in enumerate(vaccination_number):\n    ax.plot(age, [vacc_num] * len(age), incidence_rate[i], color=colors[i])\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Vaccination Number')\nax.set_zlabel('Incidence Rate')\n\n# Show the plot\nplt.show()", "idx": "3d_14", "width": 8.0, "height": 6.0}
{"file": "errorpoint_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nnames = ['This work*', 'Shah et al.', 'Shah et al.', 'Banerjee et al.', 'Favale et al.', 'Favale et al.', 'Gomez-Valent', 'Gomez-Valent', 'Benisty et al.', 'Benisty et al.']\nvalues = [-19.353, -19.257, -19.394, -19.404, -19.314, -19.344, -19.362, -19.374, -19.380, -19.220]\nerrors = [(0.073, 0.078), (0.028, 0.021), (0.118, 0.017), (0.099, 0.104), (0.058, 0.108), (0.116, 0.090), (0.078, 0.067), (0.080, 0.080), (0.200, 0.200), (0.200, 0.200)]\nlabels = ['CC+Pantheon+', '\u03b8BAO + rCMB + dPantheon', '\u03b1BAO + rCMB + dPantheon', 'CC+rBAO+Pantheon+ (\u03a9k \u2260 0)', 'CC+BAO+Pantheon+ (\u03a9k \u2260 0)', 'CC+Pantheon+ (\u03a9k \u2260 0)', 'CC+BAO+Pantheon (\u03a9k \u2260 0)', 'CC+BAO+Pantheon (\u03a9k \u2260 0)', '\u03b1BAO + rSH0ES + Pantheon', '\u03b1BAO + rCMB + dPantheon']\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\ny_pos = np.arange(len(names))\n\n# Error bars\nfor i in range(len(values)):\n    ax.errorbar(values[i], y_pos[i], xerr=np.array([errors[i]]).T, fmt='o', color='black', capsize=5)\n\n# Highlighted region\nax.axvspan(-19.3, -19.2, color='purple', alpha=0.3)\n\n# Dashed line\nax.axvline(x=-19.22, color='red', linestyle='--')\n\n# Text labels\nfor i, label in enumerate(labels):\n    ax.text(-19.1, y_pos[i], label, va='center')\n\n# Set y-axis\nax.set_yticks(y_pos)\nax.set_yticklabels(names)\nax.invert_yaxis()  # labels read top-to-bottom\n\n# Set x-axis\nax.set_xlabel('$M_B$')\nax.set_xlim(-19.6, -19.0)\n\n# Remove spines\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\n\n# Show grid\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "errorpoint_3", "width": 10.0, "height": 8.0}
{"file": "box_14", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\naccuracy_data = [0.88, 0.87, 0.83]\nerror_data = [6.91, 9.33, 9.00]\nlabels = ['DENSE (ref)', 'Joint Multimodal\\nFramework (ours)', 'Cine']\n\n# Create a figure with two subplots and set the size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the first subplot for Region Classification Accuracy\nbplot1 = ax1.boxplot(accuracy_data, patch_artist=True, labels=labels)\nax1.set_title('Region Classification Accuracy')\nax1.set_ylabel('LMA Region Classification Accuracy')\nax1.set_ylim(0.6, 1.0)\n\n# Customize the boxplot appearance\ncolors = ['lightblue', 'sandybrown', 'lightgreen']\nfor patch, color in zip(bplot1['boxes'], colors):\n    patch.set_facecolor(color)\nfor median in bplot1['medians']:\n    median.set(color='black', linewidth=1)\nfor flier in bplot1['fliers']:\n    flier.set(marker='D', color='black', alpha=0.5)\n\n# Add data labels\nfor i, value in enumerate(accuracy_data):\n    ax1.text(i+1, value, f'{value:.2f}', ha='center', va='center', color='black')\n\n# Plot the second subplot for Slice Mean Error\nbplot2 = ax2.boxplot(error_data, patch_artist=True, labels=labels)\nax2.set_title('Slice Mean Error (ms)')\nax2.set_ylabel('Slice Mean Error (ms)')\nax2.set_ylim(2.5, 22.5)\n\n# Customize the boxplot appearance\nfor patch, color in zip(bplot2['boxes'], colors):\n    patch.set_facecolor(color)\nfor median in bplot2['medians']:\n    median.set(color='black', linewidth=1)\nfor flier in bplot2['fliers']:\n    flier.set(marker='D', color='black', alpha=0.5)\n\n# Add data labels\nfor i, value in enumerate(error_data):\n    ax2.text(i+1, value, f'{value:.2f}', ha='center', va='center', color='black')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "box_14", "width": 10.0, "height": 5.0}
{"file": "HR_13", "code": "import matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 6.0))\n\n# Define the set sizes and the intersection size\nvenn = venn2(subsets=(24, 8, 45), set_labels=('CigaR', 'ChatRepair'))\n\n# Customize the colors of each set and the intersection\nvenn.get_patch_by_id('10').set_color('pink')\nvenn.get_patch_by_id('01').set_color('lightgreen')\nvenn.get_patch_by_id('11').set_color('orange')\n\n# Reduce the alpha value to make the colors more transparent\nvenn.get_patch_by_id('10').set_alpha(0.5)\nvenn.get_patch_by_id('01').set_alpha(0.5)\nvenn.get_patch_by_id('11').set_alpha(0.5)\n\n# Remove the border lines\nfor text in venn.set_labels:\n    text.set_fontsize(16)\nfor text in venn.subset_labels:\n    text.set_fontsize(16)\n\n# Display the plot\nplt.show()", "idx": "HR_13", "width": 8.0, "height": 6.0}
{"file": "CB_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntasks = ['snarks', 'navigate', 'question_selection', 'object_counting']\nscores = {\n    'APO-trend': [0.65, 0.68, 0.72, 0.75],\n    'APO-step1': [0.7, 0.73, 0.77, 0.8],\n    'APO-step1-APE': [0.75, 0.78, 0.82, 0.85],\n    'APO-step2': [0.78, 0.81, 0.85, 0.88],\n    'APO-step2-APE': [0.8, 0.83, 0.87, 0.9],\n    'APO-best': [0.82, 0.85, 0.89, 0.92],\n    'Iterative-APE-best': [0.83, 0.86, 0.9, 0.93],\n    'APO-Sum-best': [0.85, 0.88, 0.92, 0.95]\n}\n\n# Number of bars\nn_bars = len(scores)\n\n# Position of bars on x-axis\nind = np.arange(len(tasks))\n\n# Figure size\nplt.figure(figsize=(10.0, 4.0))\n\n# Width of a bar\nwidth = 0.1\n\n# Plotting\nfor i, (label, score) in enumerate(scores.items()):\n    plt.bar(ind + i * width, score, width, label=label)\n\n# Trend line\ntrend_scores = [np.mean(score) for score in scores.values()]\nplt.plot(ind + width * (n_bars / 2 - 0.5), trend_scores, 'o--', color='grey', label='APO-trend')\n\n# X-axis labels\nplt.xticks(ind + width * (n_bars / 2 - 0.5), tasks)\n\n# Y-axis label\nplt.ylabel('Scores')\n\n# Title\nplt.title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Legend\nplt.legend(loc='upper left', bbox_to_anchor=(1,1))\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "CB_13", "width": 10.0, "height": 4.0}
{"file": "bar_33", "code": "import matplotlib.pyplot as plt\n\n# Data\nsteps = ['0', '1', '2', '3', '4']\navg_following_rate = [1.0, 0.6, 0.3, 1.0, 0.917]\nfollowing_format_error_rate = [0.267, 0.833, 0.507, 0.634, 0.608]\nfollowing_related_error_rate = [0.277, 0.481, 0.298, 0.271, 0.385]\n\n# Bar width\nbar_width = 0.25\n\n# Set figure size\nplt.figure(figsize=(10.0, 5.0))\n\n# Set position of bar on X axis\nr1 = range(len(avg_following_rate))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Make the plot\nplt.bar(r1, avg_following_rate, color='grey', width=bar_width, edgecolor='grey', label='Avg. Following Rate')\nplt.bar(r2, following_format_error_rate, color='blue', width=bar_width, edgecolor='grey', label='Following-related Format Error Rate')\nplt.bar(r3, following_related_error_rate, color='green', width=bar_width, edgecolor='grey', label='Following-related Error Rate')\n\n# Add labels\nplt.xlabel('Steps', fontweight='bold')\nplt.ylabel('Scores', fontweight='bold')\nplt.xticks([r + bar_width for r in range(len(avg_following_rate))], steps)\n\n# Add percentages on top of the bars\nfor i in range(len(r1)):\n    plt.text(r1[i], avg_following_rate[i], f'{avg_following_rate[i]*100:.1f}%', ha='center', va='bottom')\n    plt.text(r2[i], following_format_error_rate[i], f'{following_format_error_rate[i]*100:.1f}%', ha='center', va='bottom')\n    plt.text(r3[i], following_related_error_rate[i], f'{following_related_error_rate[i]*100:.1f}%', ha='center', va='bottom')\n\n# Create legend & Show graphic\nplt.legend()\nplt.title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nplt.show()", "idx": "bar_33", "width": 10.0, "height": 5.0}
{"file": "bar_70", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nannotators = [1, 2, 3, 4, 5, 6]\nscores1 = [10, 10, 8, 15, 12, 10]\nscores2 = [12, 12, 12, 0, 0, 7]\nscores3 = [8, 8, 8, 6, 8, 0]\nscores4 = [11, 5, 10, 9, 15, 0]\nscores5 = [10, 8, 12, 6, 8, 0]\n\n# Stacking the scores\nbars1 = plt.bar(annotators, scores1, color='#006400', label='Score 1')\nbars2 = plt.bar(annotators, scores2, bottom=scores1, color='#228B22', label='Score 2')\nbars3 = plt.bar(annotators, scores3, bottom=[i+j for i,j in zip(scores1, scores2)], color='#32CD32', label='Score 3')\nbars4 = plt.bar(annotators, scores4, bottom=[i+j+k for i,j,k in zip(scores1, scores2, scores3)], color='#7CFC00', label='Score 4')\nbars5 = plt.bar(annotators, scores5, bottom=[i+j+k+l for i,j,k,l in zip(scores1, scores2, scores3, scores4)], color='#ADFF2F', label='Score 5')\n\n# Adding the text on top of the bars\nfor bars in [bars1, bars2, bars3, bars4, bars5]:\n    for bar in bars:\n        yval = bar.get_height()\n        if yval != 0:\n            plt.text(bar.get_x() + bar.get_width()/2, bar.get_y() + yval/2, yval, ha='center', va='center', color='black')\n\n# Setting the image size\nplt.figure(figsize=(8.0, 5.0))\n\n# Adding labels and title\nplt.xlabel('Human Annotator')\nplt.ylabel('Scores')\nplt.title('Human Labeling and Agreement Bias Checking')\n\n# Adding legend\nplt.legend(title='Scores')\n\n# Show the plot\nplt.show()", "idx": "bar_70", "width": 8.0, "height": 5.0}
{"file": "line_14", "code": "import matplotlib.pyplot as plt\n\n# Data\nweeks = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]\nauto_profiled = [0.1, 0.15, 0.2, 0.25, 0.9, 0.85, 0.3, 0.15, 0.1, 0.05]\nmanually_analyzed = [0.05, 0.1, 0.15, 0.2, 0.25, 0.2, 0.15, 0.1, 0.05, 0]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot lines\nax.plot(weeks, auto_profiled, 'r-x', label='Auto-profiled')\nax.plot(weeks, manually_analyzed, 'b-o', label='Manually-analyzed')\n\n# Highlight specific regions\nax.axvspan(10, 16, color='salmon', alpha=0.3)\nax.axvspan(19, 25, color='skyblue', alpha=0.3)\n\n# Annotations\nax.annotate('Realize the trend', xy=(13, 0.9), xytext=(10, 1.1),\n            arrowprops=dict(facecolor='yellow', shrink=0.05))\nax.annotate('Release new product', xy=(22, 0.85), xytext=(25, 1.1),\n            arrowprops=dict(facecolor='cyan', shrink=0.05))\n\n# Labels and title\nax.set_xlabel('Week')\nax.set_ylabel('Normalized value')\nax.set_title('Trend Analysis')\n\n# Legend\nax.legend(loc='upper right')\n\n# Show plot\nplt.show()", "idx": "line_14", "width": 6.0, "height": 4.0}
{"file": "HR_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata_story_vicuna = np.random.normal(0, 1, 100)\ndata_rule_vicuna = np.random.normal(1, 1.5, 100)\ndata_story_alpaca = np.random.normal(-1, 1, 100)\ndata_rule_alpaca = np.random.normal(0.5, 1.5, 100)\n\n# Create a figure with specified size\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the boxplots for Vicuna model\naxs[0].boxplot([data_story_vicuna, data_rule_vicuna], patch_artist=True, boxprops=dict(facecolor='lightblue'), medianprops=dict(color='blue'))\naxs[0].set_title('Model = Vicuna')\naxs[0].set_xticklabels(['story', 'rule'])\naxs[0].set_ylabel('Perplexity Reduction')\n\n# Plot the boxplots for Alpaca model\naxs[1].boxplot([data_story_alpaca, data_rule_alpaca], patch_artist=True, boxprops=dict(facecolor='sandybrown'), medianprops=dict(color='brown'))\naxs[1].set_title('Model = Alpaca')\naxs[1].set_xticklabels(['story', 'rule'])\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "HR_9", "width": 10.0, "height": 4.0}
{"file": "tree_2", "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# Define the data and labels\nsizes = [27, 23, 20, 12, 10, 8]\nlabels = ['Javascript\\n27%', 'C++\\n23%', 'Python\\n20%', 'C#\\n12%', 'Java\\n10%', 'Other\\n8%']\ncolors = ['#E57373', '#BA68C8', '#9575CD', '#FFB74D', '#A1887F', '#FFD54F']\n\n# Create a figure with the specified size\nplt.figure(figsize=(12.0, 8.0))\n\n# Create a treemap\nsquarify.plot(sizes=sizes, label=labels, color=colors, alpha=0.7)\n\n# Remove the axes\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "tree_2", "width": 12.0, "height": 8.0}
{"file": "multidiff_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar charts\naccuracy = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52]\nrobust_accuracy = [60.5, 59.3, 59.1, 58.35, 55.95, 55.5]\nmodels = ['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019']\n\n# Data for the heatmaps\naccuracy_diff = np.array([[0.0, 1.79, 1.71, 1.54, 0.02, -0.8],\n                          [-1.79, 0.0, 0.08, -0.17, -1.69, -2.51],\n                          [-1.71, -0.08, 0.0, 0.17, -1.52, -2.34],\n                          [-1.54, 0.17, -0.17, 0.0, -1.52, -2.34],\n                          [0.02, 1.69, 1.52, 1.52, 0.0, -0.82],\n                          [0.8, 2.51, 2.34, 2.34, 0.82, 0.0]])\n\nnfr = np.array([[0.0, 4.09, 4.17, 3.57, 3.33, 3.26],\n                [-4.09, 0.0, 0.08, -0.17, -0.25, -3.03],\n                [-4.17, -0.08, 0.0, -0.25, -0.17, -2.13],\n                [-3.57, 0.17, 0.25, 0.0, -0.02, -2.64],\n                [-3.33, -0.25, 0.17, 0.02, 0.0, -3.62],\n                [-3.26, -3.03, -2.13, -2.34, -3.62, 0.0]])\n\n# Create a figure with subplots\nfig, axs = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# Bar chart for Accuracy\naxs[0, 0].barh(models, accuracy, color='green')\naxs[0, 0].set_title('Accuracy (%)')\naxs[0, 0].set_xlim(0, 100)\n\n# Bar chart for Robust Accuracy\naxs[1, 0].barh(models, robust_accuracy, color='red')\naxs[1, 0].set_title('Robust Accuracy (%)')\naxs[1, 0].set_xlim(0, 100)\n\n# Heatmap for Accuracy Diff.\nim1 = axs[0, 1].imshow(accuracy_diff, cmap='RdYlGn', vmin=-3, vmax=3)\naxs[0, 1].set_title('Accuracy Diff. (%)')\nplt.colorbar(im1, ax=axs[0, 1])\n\n# Heatmap for Robust Accuracy Diff.\nim2 = axs[1, 1].imshow(accuracy_diff, cmap='RdYlGn', vmin=-3, vmax=3)\naxs[1, 1].set_title('Robust Accuracy Diff. (%)')\nplt.colorbar(im2, ax=axs[1, 1])\n\n# Heatmap for NFR\nim3 = axs[0, 2].imshow(nfr, cmap='RdYlGn', vmin=-7, vmax=7)\naxs[0, 2].set_title('NFR (%)')\nplt.colorbar(im3, ax=axs[0, 2])\n\n# Heatmap for Robust NFR\nim4 = axs[1, 2].imshow(nfr, cmap='RdYlGn', vmin=-7, vmax=7)\naxs[1, 2].set_title('Robust NFR (%)')\nplt.colorbar(im4, ax=axs[1, 2])\n\n# Adjust layout\nplt.tight_layout()\nplt.show()", "idx": "multidiff_7", "width": 10.0, "height": 7.0}
{"file": "line_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx1 = np.array([0.7, 0.75, 0.8, 0.85, 0.9])\ny1 = np.array([78, 80, 82, 80, 78])\nerror1 = np.array([3, 2, 4, 3, 2])\n\nx2 = np.array([0.1, 0.2, 0.3, 0.4])\ny2 = np.array([78, 76, 74, 72])\nerror2 = np.array([2, 3, 2, 4])\n\nx3 = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\ny3 = np.array([55, 60, 65, 70, 75, 80])\nerror3 = np.array([5, 4, 3, 4, 5, 6])\n\nx4 = np.array([400, 600, 800, 1000, 1200])\ny4 = np.array([82.5, 80, 77.5, 75, 72.5])\nerror4 = np.array([2.5, 2, 2.5, 3, 2])\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(1, 4, figsize=(12.0, 4.0))\n\n# Plot each graph with error bars and fill_between for the shaded error region\naxs[0].errorbar(x1, y1, yerr=error1, fmt='-o', color='blue', ecolor='lightblue', capsize=5)\naxs[0].fill_between(x1, y1-error1, y1+error1, color='lightblue', alpha=0.5)\naxs[0].set_title('(a) Positive bound.')\n\naxs[1].errorbar(x2, y2, yerr=error2, fmt='-o', color='blue', ecolor='lightblue', capsize=5)\naxs[1].fill_between(x2, y2-error2, y2+error2, color='lightblue', alpha=0.5)\naxs[1].set_title('(b) Negative bound.')\n\naxs[2].errorbar(x3, y3, yerr=error3, fmt='-o', color='blue', ecolor='lightblue', capsize=5)\naxs[2].fill_between(x3, y3-error3, y3+error3, color='lightblue', alpha=0.5)\naxs[2].set_title('(d) Contrastive loss weight.')\n\naxs[3].errorbar(x4, y4, yerr=error4, fmt='-o', color='blue', ecolor='lightblue', capsize=5)\naxs[3].fill_between(x4, y4-error4, y4+error4, color='lightblue', alpha=0.5)\naxs[3].set_title('(c) Fuzzy coefficient.')\n\n# Adjust layout to prevent overlapping\nplt.tight_layout()\nplt.show()", "idx": "line_7", "width": 12.0, "height": 4.0}
{"file": "heatmap_20", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar charts\nemotions = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Colors for the bars\ncolors = ['blue', 'blue', 'salmon', 'blue', 'red', 'red', 'blue', 'blue']\n\n# Create a figure with specified size\nfig, axs = plt.subplots(2, 1, figsize=(10.0, 8.0))\n\n# Plot the original bar chart\naxs[0].bar(emotions, original_values, color=colors)\naxs[0].set_title('Original')\n# Add text labels on the bars\nfor i, v in enumerate(original_values):\n    axs[0].text(i, v + 0.01, str(v), color='black', ha='center')\n\n# Plot the adjusted bar chart\naxs[1].bar(emotions, adjusted_values, color=colors)\naxs[1].set_title('Adjusted')\n# Add text labels on the bars\nfor i, v in enumerate(adjusted_values):\n    axs[1].text(i, v + 0.01, str(v), color='black', ha='center')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "heatmap_20", "width": 10.0, "height": 8.0}
{"file": "errorbar_27", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 85, 80, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 17, 10, 8]\nerror = [5, 4, 5, 3, 4, 3, 2]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.5\nbar_positions = range(len(categories))\n\n# Agree bars\nagree_bars = ax.bar(bar_positions, agree_rates, bar_width, label='Agree Rates', color=['#FF9999', '#FFB266', '#FFB266', '#FF6666', '#FFCC66', '#FFCC66', '#FFCC99'], edgecolor='black', yerr=error, capsize=5)\n\n# Disagree bars\ndisagree_bars = ax.bar(bar_positions, disagree_rates, bar_width, label='Disagree Rates', bottom=agree_rates, color=['#FFCCCC', '#FFD9B3', '#FFD9B3', '#FF9999', '#FFE0B3', '#FFE0B3', '#FFE5CC'], edgecolor='black', yerr=error, capsize=5)\n\n# Adding percentages on bars\nfor bar in agree_bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval - 10, f'{yval}%', ha='center', va='bottom', color='black', fontweight='bold')\n\nfor bar in disagree_bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + agree_rates[bar_positions[disagree_bars.index(bar)]] - 10, f'{yval}%', ha='center', va='bottom', color='black', fontweight='bold')\n\n# Setting the x-axis labels\nax.set_xticks(bar_positions)\nax.set_xticklabels(categories)\n\n# Setting the y-axis labels\nax.set_yticks([])\nax.set_ylabel('Rates')\n\n# Adding custom legend\nax.legend(loc='upper left')\n\n# Removing top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Show plot\nplt.show()", "idx": "errorbar_27", "width": 10.0, "height": 6.0}
{"file": "heatmap_11", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap (randomly generated to match the color pattern)\ndata = np.array([\n    [0.8, 0.4, 0.6, 0.2, 1.0],\n    [0.6, 0.8, 0.4, 0.6, 0.2],\n    [0.4, 0.6, 0.8, 0.4, 0.6],\n    [0.2, 0.4, 0.6, 0.8, 0.4],\n    [1.0, 0.2, 0.4, 0.6, 0.8]\n])\n\n# Players' names\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set the ticks and labels\nax.set_xticks(np.arange(len(players)))\nax.set_yticks(np.arange(len(players)))\nax.set_xticklabels(players)\nax.set_yticklabels(players)\n\n# Rotate the tick labels for x-axis to match the picture\nplt.xticks(rotation=45)\n\n# Set the labels for axes\nax.set_xlabel('Players')\nax.set_ylabel('Players')\n\n# Show the plot\nplt.show()", "idx": "heatmap_11", "width": 8.0, "height": 6.0}
{"file": "errorpoint_2", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nmeans = [0.27, 0.21, 0.19, 0.18, 0.17]\nerrors = [(0.01, 0.01), (0.02, 0.02), (0.01, 0.01), (0.01, 0.01), (0.02, 0.02)]\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(means, categories, xerr=errors, fmt='o', color='brown', ecolor='red', capsize=5, label='Mean')\n\n# Add a dashed line for the dataset mean\ndataset_mean = 0.2\nax.axvline(x=dataset_mean, color='blue', linestyle='--', label='Dataset mean')\n\n# Set the labels and title\nax.set_xlabel('Incivility (Fraction of Videos)')\nax.set_title('')\n\n# Add the legend\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "errorpoint_2", "width": 8.0, "height": 6.0}
{"file": "heatmap_16", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to create a heatmap similar to the one in the picture\ndata = np.array([\n    [5, 2, 6, 8, 3, 4],\n    [2, 9, 3, 3, 4, 2],\n    [7, 1, 8, 2, 9, 3],\n    [8, 6, 5, 5, 5, 9],\n    [3, 3, 2, 9, 6, 6],\n    [9, 7, 1, 7, 2, 1],\n    [6, 4, 7, 4, 1, 7],\n    [4, 8, 9, 1, 7, 8],\n    [1, 5, 4, 6, 8, 5]\n])\n\n# Set the figure size as required\nplt.figure(figsize=(4.0, 8.0))\n\n# Create the heatmap\nheatmap = plt.imshow(data, cmap='coolwarm', aspect='auto')\n\n# Add color bar on the right\ncbar = plt.colorbar(heatmap)\ncbar.set_label('ItemID')\n\n# Add labels for x and y axis\nplt.xlabel('Model and Condition')\nplt.ylabel('Rank')\n\n# Set the x-axis labels\nx_labels = ['GPT Baseline', 'GPT Reversed IDs', 'GPT Reversed Order',\n            'LLaMA Baseline', 'LLaMA Reversed IDs', 'LLaMA Reversed Order']\nplt.xticks(np.arange(len(x_labels)), x_labels, rotation=45, ha='right')\n\n# Set the y-axis labels\ny_labels = np.arange(1, 10)\nplt.yticks(np.arange(len(y_labels)), y_labels)\n\n# Add text annotations on each cell\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        plt.text(j, i, f'#{data[i, j]}', ha='center', va='center', color='white')\n\n# Add title\nplt.title('Model Comparison Heatmap')\n\n# Adjust layout to prevent clipping of tick-labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "heatmap_16", "width": 4.0, "height": 8.0}
{"file": "line_30", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nlayers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\noutside_code_diff = [0.0051, 0.0050, 0.0052, 0.0051, 0.0051, 0.0051, 0.0051, 0.0051, 0.0051, 0.0051, 0.0051]\ninside_code_diff = [0.0035, 0.0037, 0.0039, 0.0040, 0.0041, 0.0041, 0.0040, 0.0039, 0.0038, 0.0037, 0.0036]\n\n# Create the plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(layers, outside_code_diff, marker='o', color='blue', label='outside-code-diff')\nplt.plot(layers, inside_code_diff, marker='o', color='orange', label='inside-code-diff')\n\n# Add title and labels\nplt.title('Android')\nplt.xlabel('Layer')\nplt.ylabel('')\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_30", "width": 6.0, "height": 4.0}
{"file": "radar_19", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each brand\nlabels=np.array(['Creativity', 'Longevity', 'Sillage', 'Packaging', 'Popularity', 'Value', 'Projection', 'Versatility'])\nChanel=np.array([6, 7, 8, 5, 6, 7, 8, 6])\nDior=np.array([5, 6, 7, 4, 5, 6, 7, 5])\nGucci=np.array([7, 8, 9, 6, 7, 8, 9, 7])\n\n# Number of variables\nnum_vars = len(labels)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is made circular, so we need to \"complete the loop\" and append the start to the end.\nChanel=np.concatenate((Chanel,[Chanel[0]]))\nDior=np.concatenate((Dior,[Dior[0]]))\nGucci=np.concatenate((Gucci,[Gucci[0]]))\nangles+=angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([1,3,5,7,9], [\"1\",\"3\",\"5\",\"7\",\"9\"], color=\"grey\", size=7)\nplt.ylim(0,10)\n\n# Plot data\nax.plot(angles, Chanel, linewidth=2, linestyle='dashed', label='Chanel')\nax.fill(angles, Chanel, 'yellow', alpha=0.25)\n\nax.plot(angles, Dior, linewidth=2, linestyle='dashed', label='Dior')\nax.fill(angles, Dior, 'grey', alpha=0.25)\n\nax.plot(angles, Gucci, linewidth=2, linestyle='solid', label='Gucci')\nax.fill(angles, Gucci, 'green', alpha=0.25)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_19", "width": 6.0, "height": 6.0}
{"file": "bar_28", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndatasets = ['VOC 2012', 'COCO 2017']\njpeg = [3.5, 1.5]\ndeepjscc = [1.0, 2.5]\nours = [0.5, 1.0]\n\n# X-axis positions for each group\nx = np.arange(len(datasets))\n\n# Bar width\nbar_width = 0.25\n\n# Figure size\nplt.figure(figsize=(6.0, 5.0))\n\n# Plotting bars\nplt.bar(x - bar_width, jpeg, bar_width, label='JPEG', hatch='/', edgecolor='black')\nplt.bar(x, deepjscc, bar_width, label='DEEPJSCC w/ ofdm', hatch='.', edgecolor='black')\nplt.bar(x + bar_width, ours, bar_width, label='OURS', hatch='x', edgecolor='black')\n\n# Labels and title\nplt.xlabel('Datasets')\nplt.ylabel('Transmission Delay (ms)')\nplt.title('')\n\n# X-axis tick labels\nplt.xticks(x, datasets)\n\n# Legend\nplt.legend()\n\n# Show grid\nplt.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Show plot\nplt.show()", "idx": "bar_28", "width": 6.0, "height": 5.0}
{"file": "line_28", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nx = [25, 50, 75, 100, 125, 150, 175, 200]\npilote_y = [0.8, 0.85, 0.9, 0.92, 0.93, 0.92, 0.9, 0.7]\nretrained_y = [0.78, 0.82, 0.85, 0.87, 0.88, 0.89, 0.88, 0.88]\n\n# Plotting the lines\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, pilote_y, marker='s', color='r', label='PILOTE')\nplt.plot(x, retrained_y, marker='D', color='b', label='Re-trained model')\n\n# Adding a horizontal line for pre-trained model accuracy\nplt.axhline(y=0.7, color='g', linestyle='--', label='Pre-trained model accuracy')\n\n# Adding labels and title\nplt.xlabel('Number of exemplars in class \\'Run\\'')\nplt.ylabel('avg. accuracy of five rounds')\nplt.title('')\n\n# Adding legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "line_28", "width": 6.0, "height": 4.0}
{"file": "bar_94", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nbrightness = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4])\nbrightness_ours = np.random.uniform(-30, 0, len(brightness))\nbrightness_sampling = np.random.uniform(-30, 0, len(brightness))\n\nscale = np.array([0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2])\nscale_ours = np.random.uniform(-50, 100, len(scale))\nscale_sampling = np.random.uniform(-50, 100, len(scale))\n\nrotation = np.array([-150, -120, -90, -60, -30, 0, 30, 60, 90, 120])\nrotation_ours = np.random.uniform(-20, 40, len(rotation))\nrotation_sampling = np.random.uniform(-20, 40, len(rotation))\n\n# Create subplots\nfig, axs = plt.subplots(3, 1, figsize=(10.0, 6.0))\n\n# Brightness plot\naxs[0].bar(brightness - 0.025, brightness_ours, width=0.05, color='red', label='Ours')\naxs[0].bar(brightness + 0.025, brightness_sampling, width=0.05, color='blue', label='Saliency-based Sampling')\naxs[0].set_xlabel('Brightness')\naxs[0].set_ylabel('Rate of Gain Change[%]')\naxs[0].legend()\n\n# Scale plot\naxs[1].bar(scale - 0.025, scale_ours, width=0.05, color='red', label='Ours')\naxs[1].bar(scale + 0.025, scale_sampling, width=0.05, color='blue', label='Saliency-based Sampling')\naxs[1].set_xlabel('Scale')\naxs[1].set_ylabel('Rate of Gain Change[%]')\naxs[1].legend()\n\n# Rotation plot\naxs[2].bar(rotation - 5, rotation_ours, width=10, color='red', label='Ours')\naxs[2].bar(rotation + 5, rotation_sampling, width=10, color='blue', label='Saliency-based Sampling')\naxs[2].set_xlabel('Rotation Angle [\u00b0]')\naxs[2].set_ylabel('Rate of Gain Change[%]')\naxs[2].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_94", "width": 10.0, "height": 6.0}
{"file": "line_75", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nensemble_size = np.arange(5, 31, 2)\nmodel1_mean_accuracy = np.random.uniform(75, 85, len(ensemble_size))\nmodel2_mean_accuracy = np.random.uniform(70, 80, len(ensemble_size))\nmodel1_std = np.random.uniform(1, 2, len(ensemble_size))\nmodel2_std = np.random.uniform(1, 2, len(ensemble_size))\n\n# Plotting the graph\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(ensemble_size, model1_mean_accuracy, '-o', label='Model 1 Mean Accuracy', color='blue')\nplt.fill_between(ensemble_size, model1_mean_accuracy - model1_std, model1_mean_accuracy + model1_std, color='blue', alpha=0.2)\nplt.plot(ensemble_size, model2_mean_accuracy, '-s', label='Model 2 Mean Accuracy', color='red')\nplt.fill_between(ensemble_size, model2_mean_accuracy - model2_std, model2_mean_accuracy + model2_std, color='red', alpha=0.2)\n\n# Adding labels and title\nplt.xlabel('Ensemble Size')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Model Accuracies')\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "line_75", "width": 10.0, "height": 6.0}
{"file": "CB_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmethods = ['Linear probing', 'BitFit', 'Prompt Tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ntrain_sec_img = [0.2, 0.6, 0.8, 1.0, 1.5, 1.2]\ninference_gflops = [1.0, 0.8, 0.9, 1.2, 0.7, 0.9]\nparam_log10 = [0.4, 0.5, 0.6, 0.7, 0.3, 0.4]\ntrain_memory = [0.3, 0.7, 0.8, 1.0, 0.6, 0.8]\naccuracy = [76, 78, 80, 81, 77, 79]\n\n# Bar width\nbar_width = 0.2\n\n# Set figure size\nplt.figure(figsize=(10.0, 5.0))\n\n# Set position of bar on X axis\nr1 = np.arange(len(train_sec_img))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\nr4 = [x + bar_width for x in r3]\n\n# Make the plot\nplt.bar(r1, train_sec_img, color='blue', width=bar_width, edgecolor='grey', label='Train sec / img')\nplt.bar(r2, inference_gflops, color='orange', width=bar_width, edgecolor='grey', label='Inference GFLOPs')\nplt.bar(r3, param_log10, color='green', width=bar_width, edgecolor='grey', label='Param, log10')\nplt.bar(r4, train_memory, color='red', width=bar_width, edgecolor='grey', label='Train Memory')\n\n# Add line plot for accuracy\nplt.plot(methods, accuracy, color='black', marker='o', label='Accuracy')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Methods', fontweight='bold')\nplt.xticks([r + bar_width for r in range(len(train_sec_img))], methods)\n\n# Create legend & Show graphic\nplt.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1)\n\n# Secondary y-axis for accuracy\nsecaxy = plt.gca().twinx()\nsecaxy.set_ylabel('Accuracy, iNaturalist 2021', color='black', fontsize=10)\nsecaxy.tick_params(axis='y', labelcolor='black')\n\nplt.show()", "idx": "CB_4", "width": 10.0, "height": 5.0}
{"file": "line_45", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data\nN = np.logspace(1, 2, 10)\nstandard = 1 / (N**1.5)\nconstrained = 1 / (N**1.2)\ninnovative = 1 / (N**1.8)\nexperimental = 1 / (N**1.3)\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(12.0, 8.0))\n\n# Plot data for each subplot\nfor i, ax in enumerate(axs.flatten()):\n    ax.plot(N, standard, 'o-', label='Standard')\n    ax.plot(N, constrained, 's--', label='Constrained')\n    ax.plot(N, innovative, '^-', label='Innovative')\n    ax.plot(N, experimental, 'D-', label='Experimental')\n    ax.set_xscale('log')\n    ax.set_yscale('log')\n    ax.set_title(f'Graph Variation {i+1}')\n    ax.set_xlabel('N')\n    ax.set_ylabel('Precision')\n    ax.legend()\n    ax.text(0.5, 0.5, 'Peak Performance', transform=ax.transAxes, \n            fontsize=12, color='red', ha='center')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "line_45", "width": 12.0, "height": 8.0}
{"file": "line_41", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 8.0))\n\n# Create the first subplot\nplt.subplot(2, 1, 1)\n\n# Generate data for the first subplot\nx = np.linspace(0, 200, 200)\ny1 = np.sin(x * 0.1) * 2 + 2\ny2 = 0.1 * x ** 2 / 200\n\n# Plot the first subplot\nplt.plot(x, y1, 'o-', color='purple', label='Line 1 (Sinusoidal)')\nplt.plot(x, y2, 's-', color='blue', label='Line 2 (Quadratic)')\nplt.xlabel('Gradient Steps (x 62.5K)')\nplt.ylabel('Performance Value')\nplt.legend(loc='upper left')\n\n# Create the second subplot\nplt.subplot(2, 1, 2)\n\n# Generate data for the second subplot\ny3 = np.random.normal(1, 0.2, 200)\ny4 = np.exp(0.03 * x)\n\n# Plot the second subplot\nplt.plot(x, y3, '^-', color='green', label='Line 3 (Random Noise)')\nplt.plot(x, y4, 'd-', color='red', label='Line 4 (Exponential Focus)')\nplt.xlabel('Gradient Steps (x 62.5K)')\nplt.ylabel('Exponential Scale')\nplt.legend(loc='upper left')\n\n# Adjust the layout and show the plot\nplt.tight_layout()\nplt.show()", "idx": "line_41", "width": 6.0, "height": 8.0}
{"file": "heatmap_17", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\ndata = np.random.rand(4, 32)\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap='jet')\n\n# Set the tick labels\nax.set_yticklabels(['', 'last', 'cot', 'option', 'context'])\n\n# Create the colorbar\ncbar = fig.colorbar(cax, orientation='vertical')\ncbar.set_label('Values')\n\n# Show the plot\nplt.show()", "idx": "heatmap_17", "width": 10.0, "height": 3.0}
{"file": "bar_14", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['GCN', 'RvNN', 'Hyphen Pheme', 'GET', 'WSDMS', 'DELL']\ndemocratic = [0.75, 0.8, 0.85, 0.8, 0.85, 0.9]\nmixed = [0.7, 0.75, 0.8, 0.75, 0.8, 0.85]\nrepublican = [0.7, 0.75, 0.8, 0.75, 0.8, 0.85]\n\nx = np.arange(len(models))  # the label locations\nwidth = 0.25  # the width of the bars\n\nfig, axs = plt.subplots(2, figsize=(7.0, 5.0))\n\n# First subplot\naxs[0].bar(x - width, democratic, width, label='Democratic', color='blue')\naxs[0].bar(x, mixed, width, label='Mixed', color='grey')\naxs[0].bar(x + width, republican, width, label='Republican', color='red')\n\n# Second subplot\naxs[1].bar(x - width, democratic, width, color='blue')\naxs[1].bar(x, mixed, width, color='grey')\naxs[1].bar(x + width, republican, width, color='red')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nfor ax in axs:\n    ax.set_ylabel('Macro F1-Score')\n    ax.set_xticks(x)\n    ax.set_xticklabels(models)\n    ax.legend()\n\n# Hide x labels and tick labels for top plots and y ticks for right plots.\nfor ax in axs.flat:\n    ax.label_outer()\n\nplt.tight_layout()\nplt.show()", "idx": "bar_14", "width": 7.0, "height": 5.0}
{"file": "bar_90", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\nmodels = ['GPT-4', 'OSCaR', 'LLaMA', 'BiLI', 'BiLI', 'Video-LLaMA', 'LaMDA']\nscores_A = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_B = [5, 10, 15, 20, 25, 30, 35]\ncolors_A = ['red', 'gold', 'limegreen', 'cyan', 'blue', 'purple', 'magenta']\ncolors_B = ['brown', 'olive', 'green', 'lightblue', 'blue', 'indigo', 'violet']\n\n# Create a figure with a specific size\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12.0, 8.0))\n\n# Plot the first bar chart\nax1.bar(models, scores_A, color=colors_A)\nax1.set_title('Human Study')\nax1.set_ylabel('Score A (%)')\nax1.set_ylim(0, 100)\n\n# Add text labels on the bars\nfor i, score in enumerate(scores_A):\n    ax1.text(i, score + 1, f'{score}%', ha='center', va='bottom')\n\n# Plot the second bar chart\nax2.bar(models, scores_B, color=colors_B)\nax2.set_ylabel('Score B (%)')\nax2.set_xlabel('Model')\nax2.set_ylim(0, 40)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_90", "width": 12.0, "height": 8.0}
{"file": "box_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata1 = [np.random.normal(6, 1, 100), np.random.normal(5, 1, 100)]\ndata2 = [np.random.normal(1.5, 0.2, 100), np.random.normal(1.2, 0.2, 100)]\ndata3 = [np.random.normal(0.8, 0.05, 100), np.random.normal(0.75, 0.05, 100)]\ndata4 = [np.random.normal(0.7, 0.1, 100), np.random.normal(0.6, 0.1, 100)]\ndata5 = [np.random.normal(1.5, 0.3, 100), np.random.normal(1.2, 0.3, 100)]\n\n# Create a figure with specified size\nfig, axs = plt.subplots(1, 5, figsize=(10.0, 5.0))\n\n# Plot the boxplots\nbplot1 = axs[0].boxplot(data1, patch_artist=True)\nbplot2 = axs[1].boxplot(data2, patch_artist=True)\nbplot3 = axs[2].boxplot(data3, patch_artist=True)\nbplot4 = axs[3].boxplot(data4, patch_artist=True)\nbplot5 = axs[4].boxplot(data5, patch_artist=True)\n\n# Set colors for boxplots\ncolors = ['#1f77b4', '#ff7f0e']\nfor bplot in (bplot1, bplot2, bplot3, bplot4, bplot5):\n    for patch, color in zip(bplot['boxes'], colors):\n        patch.set_facecolor(color)\n\n# Adding diamond markers for outliers\nfor bplot in (bplot1, bplot2, bplot3, bplot4, bplot5):\n    for flier in bplot['fliers']:\n        flier.set(marker='D', color='#000000', alpha=0.5)\n\n# Set x-axis labels\naxs[0].set_xticklabels(['target', 'control'])\naxs[1].set_xticklabels(['target', 'control'])\naxs[2].set_xticklabels(['target', 'control'])\naxs[3].set_xticklabels(['target', 'control'])\naxs[4].set_xticklabels(['target', 'control'])\n\n# Set y-axis labels\naxs[0].set_ylabel('Longest correct sequence')\naxs[1].set_ylabel('Correct word reaction time [s]')\naxs[2].set_ylabel('Correct response ratio')\naxs[3].set_ylabel('Reaction time [s]')\naxs[4].set_ylabel('Time per tap [s]')\n\n# Set titles\naxs[0].set_title('Digit span')\naxs[1].set_title('Lexical decision')\naxs[2].set_title('Lexical decision')\naxs[3].set_title('Reaction time')\naxs[4].set_title('Trail making')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "box_20", "width": 10.0, "height": 5.0}
{"file": "box_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(10)\ndata1 = [np.random.normal(0.85, 0.05, 100), np.random.normal(0.88, 0.04, 100), np.random.normal(0.92, 0.03, 100)]\ndata2 = [np.random.normal(0.83, 0.06, 100), np.random.normal(0.87, 0.05, 100), np.random.normal(0.91, 0.04, 100)]\ndata3 = [np.random.normal(0.82, 0.07, 100), np.random.normal(0.86, 0.06, 100), np.random.normal(0.90, 0.05, 100)]\n\n# Combine data\ndata = [data1, data2, data3]\n\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define positions for the boxplots\npositions = [1, 2, 3]\nwidth = 0.2\n\n# Create boxplots for each dataset\nfor i, dataset in enumerate(data):\n    pos = [p + (i - 1) * width for p in positions]\n    box = ax.boxplot(dataset, positions=pos, widths=width, patch_artist=True, notch=True, showfliers=True)\n\n    # Customize boxplot colors and hatch patterns\n    colors = ['#1f77b4', '#2ca02c', '#d62728']\n    hatches = ['/', '', 'o']\n    for patch, color, hatch in zip(box['boxes'], colors, hatches):\n        patch.set_facecolor(color)\n        patch.set_hatch(hatch)\n\n# Set the axis labels and title\nax.set_xticks(positions)\nax.set_xticklabels(['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality'])\nax.set_ylabel('AUC')\n\n# Create a legend\nlegend_labels = ['Hospital 1', 'Hospital 2', 'Hospital 3']\nlegend_patches = [plt.Line2D([0], [0], color=color, label=label, marker='s', markersize=10, linestyle='None', hatch=hatch)\n                  for color, label, hatch in zip(colors, legend_labels, hatches)]\nax.legend(handles=legend_patches, loc='upper left')\n\n# Show the plot\nplt.show()", "idx": "box_8", "width": 5.0, "height": 5.0}
{"file": "bar_23", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.5, 2.5, 3.0, 3.5, 3.0, 1.5]\ncompleteness = [3.0, 2.0, 2.5, 3.0, 2.5, 1.0]\nconciseness = [2.5, 1.5, 2.0, 2.5, 2.0, 0.5]\nreadability = [3.0, 2.0, 2.5, 3.0, 2.5, 1.0]\n\nx = np.arange(len(models))  # the label locations\nwidth = 0.2  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\nrects1 = ax.bar(x - width*1.5, accuracy, width, label='Accuracy')\nrects2 = ax.bar(x - width/2, completeness, width, label='Completeness')\nrects3 = ax.bar(x + width/2, conciseness, width, label='Conciseness')\nrects4 = ax.bar(x + width*1.5, readability, width, label='Readability')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.set_xticks(x)\nax.set_xticklabels(models)\nax.legend()\n\n# Function to attach a label on top of each bar\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n# Attach labels\nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\nautolabel(rects4)\n\nfig.tight_layout()\n\nplt.show()", "idx": "bar_23", "width": 9.0, "height": 5.0}
{"file": "radar_6", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each axis and the categories\nvalues = [[0.07, 0.03, 0.07, 0.07, 0.03, 0.07],\n          [0.03, 0.07, 0.03, 0.03, 0.07, 0.03],\n          [0.07, 0.03, 0.07, 0.07, 0.03, 0.07],\n          [0.03, 0.07, 0.03, 0.03, 0.07, 0.03]]\ncategories = ['fpga', 'pixel2', 'raspi4', 'everiss', 'titan_rtx_256', 'gold_6226']\nN = len(categories)\n\n# Compute angle for each axis\nangles = [n / float(N) * 2 * pi for n in range(N)]\nvalues += values[:1]\nangles += angles[:1]\n\n# Initialise the radar plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([0.03, 0.07], [\"0.03\", \"0.07\"], color=\"grey\", size=7)\nplt.ylim(0, 0.1)\n\n# Plot data and fill area\nax.plot(angles, values[0], linewidth=1, linestyle='solid', label='predicted')\nax.fill(angles, values[0], 'b', alpha=0.1)\n\nax.plot(angles, values[1], linewidth=1, linestyle='solid', label='help')\nax.fill(angles, values[1], 'r', alpha=0.1)\n\nax.plot(angles, values[2], linewidth=1, linestyle='solid', label='rs')\nax.fill(angles, values[2], 'g', alpha=0.1)\n\nax.plot(angles, values[3], linewidth=1, linestyle='solid', label='rhpn')\nax.fill(angles, values[3], 'm', alpha=0.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_6", "width": 6.0, "height": 6.0}
{"file": "density_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.linspace(0, 0.5, 100)\ny1 = 10 + 2 * np.sqrt(x)\ny2 = 6 + 2 * np.sqrt(x)\ny3 = 10 - 2 * np.sqrt(x)\ny4 = 6 - 2 * np.sqrt(x)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.fill_between(x, y1, y3, color='green', alpha=0.3, label='Gucci')\nax.fill_between(x, y2, y4, color='blue', alpha=0.3, label='Chanel')\n\n# Set labels and title\nax.set_xlabel('Density')\nax.set_ylabel('Value')\nax.set_title('Comparison of Gucci and Chanel')\n\n# Add grid and legend\nax.grid(True)\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "density_5", "width": 9.0, "height": 6.0}
{"file": "multidiff_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n# Set the figure size as required\nplt.figure(figsize=(10.0, 5.0))\n\n# Create a subplot for the left side (Violin plot)\nplt.subplot(1, 2, 1)\n\n# Sample data for the violin plot\nregion1_temp = np.random.normal(20, 2, 1000)\nregion2_temp = np.random.normal(18, 3, 1000)\n\n# Create the violin plot\nsns.violinplot(data=[region1_temp, region2_temp], inner='quartile', palette='Blues')\n\n# Set the title and labels for the left plot\nplt.title('Average Annual Temperature')\nplt.ylabel('Temperature (\u00b0C)')\nplt.xticks([0, 1], ['Region 1', 'Region 2'])\n\n# Create a subplot for the right side (Density plot)\nplt.subplot(1, 2, 2)\n\n# Sample data for the density plot\nlowland = np.random.normal(250, 100, 1000)\nhighland = np.random.normal(750, 200, 1000)\nplateau = np.random.normal(1250, 300, 1000)\n\n# Create the density plot\nsns.kdeplot(lowland, shade=True, color='blue', label='Lowland')\nsns.kdeplot(highland, shade=True, color='green', label='Highland')\nsns.kdeplot(plateau, shade=True, color='red', label='Plateau')\n\n# Set the title and labels for the right plot\nplt.title('Geographical Elevation Distribution')\nplt.xlabel('Elevation (m)')\nplt.ylabel('Density')\n\n# Show the legend\nplt.legend()\n\n# Adjust the layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()", "idx": "multidiff_20", "width": 10.0, "height": 5.0}
{"file": "CB_28", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the left plot (density plot)\nx = np.linspace(0, 0.035, 100)\ny1 = np.exp(-x**2) + 1850\ny2 = np.exp(-(x-0.01)**2) + 1900\ny3 = np.exp(-(x-0.02)**2) + 1950\n\n# Sample data for the right plot (boxplot)\ndata = [np.random.normal(1900, 50, 200), np.random.normal(1950, 50, 200), np.random.normal(2000, 50, 200)]\n\n# Create figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Left plot (density plot)\nax1.fill_between(x, y1, 1850, color='blue', alpha=0.3)\nax1.fill_between(x, y2, 1900, color='orange', alpha=0.3)\nax1.fill_between(x, y3, 1950, color='green', alpha=0.3)\nax1.plot(x, y1, color='blue', label='Early 20th Century')\nax1.plot(x, y2, color='orange', label='Mid 20th Century')\nax1.plot(x, y3, color='green', label='Turn of the Century')\nax1.set_xlabel('Density')\nax1.set_ylabel('Year')\nax1.legend()\n\n# Right plot (boxplot)\nbp = ax2.boxplot(data, patch_artist=True)\ncolors = ['blue', 'orange', 'green']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\nax2.set_xticklabels(['Early 20th Century', 'Mid 20th Century', 'Turn of the Century'])\nax2.set_ylabel('Year')\n\n# Show the plot\nplt.show()", "idx": "CB_28", "width": 10.0, "height": 5.0}
{"file": "PIP_4", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\nnp.random.seed(0)\nknown = np.random.normal(0.3, 0.1, 100000)\nunknown = np.random.normal(0.4, 0.1, 100000)\nbins = np.linspace(0, 0.6, 30)\n\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the histograms\nax.hist(known, bins=bins, alpha=0.5, label='Known', color='orange')\nax.hist(unknown, bins=bins, alpha=0.5, label='Unknown', color='blue')\n\n# Set labels and title\nax.set_xlabel('maximum predicted probability')\nax.set_ylabel('number of examples')\nax.legend()\n\n# Create inset axis for zoomed in view\nax_inset = fig.add_axes([0.5, 0.5, 0.4, 0.4])\nax_inset.hist(known, bins=bins, alpha=0.5, color='orange')\nax_inset.hist(unknown, bins=bins, alpha=0.5, color='blue')\n\n# Set inset axis limits and labels\nax_inset.set_xlim(0.2, 0.55)\nax_inset.set_ylim(0, 2000)\nax_inset.set_xticks(np.arange(0.2, 0.6, 0.05))\nax_inset.set_yticks(np.arange(0, 2001, 500))\n\n# Draw lines to connect the inset to the main plot\nx1, x2, y1, y2 = 0.2, 0.55, 0, 2000\nax.plot([x1, x1], [y1, y2], color='grey', linestyle='--')\nax.plot([x2, x2], [y1, y2], color='grey', linestyle='--')\n\n# Show the plot\nplt.show()", "idx": "PIP_4", "width": 10.0, "height": 6.0}
{"file": "scatter_25", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\nx_sc = [71, 76, 81, 86]\ny_sc = [30, 35, 40, 50]\nx_ft = [73, 78, 83]\ny_ft = [30, 35, 45]\nx_vl = [74, 79, 84, 88]\ny_vl = [30, 35, 45, 50]\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot for ViTPose (sc)\naxs[0].plot(x_sc, y_sc, marker='o', color='cyan', label='ViTPose (sc)')\naxs[0].scatter(x_sc, y_sc, color='magenta', s=100, zorder=5)\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Average Precision on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanAT (%)')\naxs[0].legend(loc='upper left')\n\n# Plot for ViTPose (ft)\naxs[1].plot(x_ft, y_ft, marker='o', color='magenta', label='ViTPose (ft)')\naxs[1].scatter(x_ft, y_ft, color='yellow', s=100, zorder=5)\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanAT (%)')\naxs[1].legend(loc='upper left')\n\n# Plot for VLPose\naxs[2].plot(x_vl, y_vl, marker='o', color='green', label='VLPose')\naxs[2].scatter(x_vl, y_vl, color='orange', s=100, zorder=5)\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanAT (%)')\naxs[2].legend(loc='upper left')\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "scatter_25", "width": 15.0, "height": 5.0}
{"file": "3d_4", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create a figure with specified size\nfig = plt.figure(figsize=(15.0, 10.0))\n\n# Create subplots with 3D projection\nax1 = fig.add_subplot(221, projection='3d')\nax2 = fig.add_subplot(222, projection='3d')\nax3 = fig.add_subplot(223, projection='3d')\nax4 = fig.add_subplot(224, projection='3d')\n\n# Define the function to plot\ndef plot_surface(ax, z_label, z_scale):\n    x = np.linspace(-100, 100, 100)\n    y = np.linspace(-100, 100, 100)\n    x, y = np.meshgrid(x, y)\n    z = np.sin(np.sqrt(x**2 + y**2))\n    \n    # Plot the surface\n    surf = ax.plot_surface(x, y, z*z_scale, cmap='viridis')\n    \n    # Set labels\n    ax.set_xlabel('m')\n    ax.set_ylabel('n')\n    ax.set_zlabel(z_label)\n    \n    # Set z-limits\n    ax.set_zlim(z.min()*z_scale, z.max()*z_scale)\n\n# Plot surfaces with different z labels and scales\nplot_surface(ax1, 'FREEDOM', 200)\nplot_surface(ax2, 'FREEDOM', 200)\nplot_surface(ax3, 'BM3', 140)\nplot_surface(ax4, 'BM3', 8)\n\n# Set titles for subplots\nax1.set_title('Origin')\nax2.set_title('MG (ours)')\nax3.set_title('Origin')\nax4.set_title('MG (ours)')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "3d_4", "width": 15.0, "height": 10.0}
{"file": "line_38", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nepochs = [3, 10, 30, 100]\nMA_3 = [0.2, 0.6, 0.7, 0.5]\nMA_5 = [0.3, 0.5, 0.6, 0.4]\nMA_7 = [0.4, 0.7, 0.5, 0.6]\nMA_10 = [0.5, 0.4, 0.3, 0.2]\nMA_30 = [0.6, 0.3, 0.2, 0.1]\n\n# Plot\nplt.figure(figsize=(6.0, 3.0))\nplt.plot(epochs, MA_3, 'r-', marker='s', label='3')\nplt.plot(epochs, MA_5, 'y-', marker='s', label='5')\nplt.plot(epochs, MA_7, 'k-', marker='s', label='7')\nplt.plot(epochs, MA_10, 'b-', marker='s', label='10')\nplt.plot(epochs, MA_30, 'g-', marker='s', label='30')\n\n# GPT-Neo reference line\nplt.axhline(y=0.7, color='k', linestyle='--', label='GPT-Neo')\n\n# Customizing the plot\nplt.xscale('log')\nplt.xlabel('# Epochs')\nplt.ylabel('MA')\nplt.title('Model Accuracy by Epochs')\nplt.legend()\n\n# Show plot\nplt.show()", "idx": "line_38", "width": 6.0, "height": 3.0}
{"file": "line_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data\nratios = np.linspace(0.1, 1.0, 10)\npna_ours_mean = np.random.uniform(0.76, 0.80, len(ratios))\ngin_ours_mean = np.random.uniform(0.74, 0.78, len(ratios))\npna_gsat_mean = np.random.uniform(0.76, 0.80, len(ratios))\ngin_gsat_mean = np.random.uniform(0.74, 0.78, len(ratios))\n\npna_ours_std = np.random.uniform(0.01, 0.02, len(ratios))\ngin_ours_std = np.random.uniform(0.01, 0.02, len(ratios))\npna_gsat_std = np.random.uniform(0.01, 0.02, len(ratios))\ngin_gsat_std = np.random.uniform(0.01, 0.02, len(ratios))\n\n# Plotting\nfig, axs = plt.subplots(2, 2, figsize=(16.0, 8.0))\n\ntitles = ['MOLHIV', 'Graph-SST2', 'MNIST-75SP', 'SPMotif-0.5']\nfor i, ax in enumerate(axs.flat):\n    ax.plot(ratios, pna_ours_mean, marker='s', color='purple', label='PNA + ours')\n    ax.fill_between(ratios, pna_ours_mean - pna_ours_std, pna_ours_mean + pna_ours_std, color='purple', alpha=0.3)\n    \n    ax.plot(ratios, gin_ours_mean, marker='s', color='orange', label='GIN + ours')\n    ax.fill_between(ratios, gin_ours_mean - gin_ours_std, gin_ours_mean + gin_ours_std, color='orange', alpha=0.3)\n    \n    ax.plot(ratios, pna_gsat_mean, linestyle='--', color='purple', label='PNA + GSAT')\n    ax.plot(ratios, gin_gsat_mean, linestyle='--', color='orange', label='GIN + GSAT')\n    \n    ax.set_title(titles[i])\n    ax.set_xlabel('Ratio r')\n    ax.set_ylabel('Performance')\n    ax.legend()\n    ax.grid(True)\n\nplt.tight_layout()\nplt.show()", "idx": "line_20", "width": 16.0, "height": 8.0}
{"file": "bar_54", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nvalues = [0.8, 0.9, 0.7, 0.6, 0.5]\ncolors = ['#FFD700', '#008000', '#20B2AA', '#0000CD', '#800080']\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.barh(categories, values, color=colors)\n\n# Set labels and title\nax.set_xlabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Remove y-axis ticks\nax.tick_params(axis='y', which='both', left=False)\n\n# Show plot\nplt.show()", "idx": "bar_54", "width": 6.0, "height": 2.0}
{"file": "CB_25", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ninstance_sizes = ['15x15', '20x15', '20x20', '30x15', '30x20', '50x15', '50x20', '100x20']\nmethods = ['PetriRL', 'GAM', 'GIN', 'DGERD']\nmakespan = np.array([\n    [2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500],\n    [2200, 2700, 3200, 3700, 4200, 4700, 5200, 5700],\n    [2400, 2900, 3400, 3900, 4400, 4900, 5400, 5900],\n    [2600, 3100, 3600, 4100, 4600, 5100, 5600, 6100]\n])\nimprovement = [18, 14, 13, 12, 9, 0, 0, -5]\n\n# Bar plot\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = np.arange(len(instance_sizes))\n\nfor i, method in enumerate(methods):\n    ax1.bar(index + i * bar_width, makespan[i], bar_width, label=method)\n\n# Line plot\nax2 = ax1.twinx()\nax2.plot(index + bar_width, improvement, 'ro-', label='Improvement %', color='orange')\n\n# Annotate improvement percentage\nfor i, imp in enumerate(improvement):\n    ax2.annotate(f'{imp}%', (index[i] + bar_width, improvement[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', color='red')\n\n# Labels and titles\nax1.set_xlabel('Instances size')\nax1.set_ylabel('Makespan (step)')\nax2.set_ylabel('Improvement %')\nplt.xticks(index + bar_width + bar_width/2, instance_sizes)\nax1.set_title('Comparison of Methods by Instance Size and Improvement')\n\n# Legend\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9))\n\n# Show plot\nplt.show()", "idx": "CB_25", "width": 8.0, "height": 5.0}
{"file": "heatmap_30", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the heatmap values\ndata = np.random.rand(9, 13)\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add colorbar\ncbar = fig.colorbar(cax)\n\n# Set axis labels\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\n# Set title\nax.set_title(\"ROC's AUC\", pad=20)\n\n# Set tick marks for both axes\nax.set_xticks(np.arange(data.shape[1]))\nax.set_yticks(np.arange(data.shape[0]))\n\n# Set grid to overlay the heatmap\nax.set_xticks(np.arange(data.shape[1]+1)-.5, minor=True)\nax.set_yticks(np.arange(data.shape[0]+1)-.5, minor=True)\nax.grid(which=\"minor\", color=\"black\", linestyle='-', linewidth=2)\nax.tick_params(which=\"minor\", size=0)\n\n# Show the plot\nplt.show()", "idx": "heatmap_30", "width": 8.0, "height": 6.0}
{"file": "errorbar_18", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\ncontinents = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nco2_emissions = [1200, 1800, 5000, 10400, 3200]\nforest_coverage = [21, 52, 34, 25, 38]\nrenewable_energy = [18, 45, 28, 25, 34]\n\n# Create a figure with 3 subplots, one for each category, and set the size\nfig, axs = plt.subplots(3, 1, figsize=(6.0, 9.0))\n\n# Plot the CO2 emissions\naxs[0].barh(continents, co2_emissions, color=['#FFD580', '#FFEDA0', '#CCEBC5', '#B3CDE3', '#FBB4AE'])\naxs[0].set_title('Annual Carbon Dioxide Emissions')\naxs[0].set_xlabel('Millions of Metric Tons')\nfor i, v in enumerate(co2_emissions):\n    axs[0].text(v + 100, i, str(v), color='black', va='center')\n\n# Plot the forest coverage\naxs[1].barh(continents, forest_coverage, color=['#FFD580', '#FFEDA0', '#CCEBC5', '#B3CDE3', '#FBB4AE'])\naxs[1].set_title('Forest Coverage Rate')\naxs[1].set_xlabel('% of Land Area')\nfor i, v in enumerate(forest_coverage):\n    axs[1].text(v + 1, i, str(v), color='black', va='center')\n\n# Plot the renewable energy usage\naxs[2].barh(continents, renewable_energy, color=['#FFD580', '#FFEDA0', '#CCEBC5', '#B3CDE3', '#FBB4AE'])\naxs[2].set_title('Renewable Energy Usage')\naxs[2].set_xlabel('% of Total Energy Consumption')\nfor i, v in enumerate(renewable_energy):\n    axs[2].text(v + 1, i, str(v), color='black', va='center')\n\n# Adjust the layout and show the plot\nplt.tight_layout()\nplt.show()", "idx": "errorbar_18", "width": 6.0, "height": 9.0}
{"file": "HR_25", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import NonUniformImage\n\n# Data\nx = np.linspace(-4, 4, 9)\ny = np.linspace(-4, 4, 9)\nz = np.sin(x) * np.cos(y)\n\nx2 = np.linspace(-60, 60, 121)\ny2 = np.linspace(-4, 4, 9)\nz2 = np.sin(x2) * np.cos(y2)\n\n# Plotting\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(8.0, 6.0))\naxs = axs.ravel()\n\n# Nearest interpolation - original scale\nim = NonUniformImage(axs[0], interpolation='nearest', extent=(-4, 4, -4, 4))\nim.set_data(x, y, z)\naxs[0].images.append(im)\naxs[0].set_xlim(-4, 4)\naxs[0].set_ylim(-4, 4)\naxs[0].set_title('nearest')\n\n# Nearest interpolation - stretched scale\nim = NonUniformImage(axs[1], interpolation='nearest', extent=(-60, 60, -4, 4))\nim.set_data(x2, y2, z2)\naxs[1].images.append(im)\naxs[1].set_xlim(-60, 60)\naxs[1].set_ylim(-4, 4)\naxs[1].set_title('nearest')\n\n# Bilinear interpolation - original scale\nim = NonUniformImage(axs[2], interpolation='bilinear', extent=(-4, 4, -4, 4))\nim.set_data(x, y, z)\naxs[2].images.append(im)\naxs[2].set_xlim(-4, 4)\naxs[2].set_ylim(-4, 4)\naxs[2].set_title('bilinear')\n\n# Bilinear interpolation - stretched scale\nim = NonUniformImage(axs[3], interpolation='bilinear', extent=(-60, 60, -4, 4))\nim.set_data(x2, y2, z2)\naxs[3].images.append(im)\naxs[3].set_xlim(-60, 60)\naxs[3].set_ylim(-4, 4)\naxs[3].set_title('bilinear')\n\n# Adjust layout\nplt.tight_layout()\nplt.suptitle('NonUniformImage class', fontsize=16, y=1.05)\n\n# Show plot\nplt.show()", "idx": "HR_25", "width": 8.0, "height": 6.0}
{"file": "errorbar_5", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nsizes = ['5%', '10%', '20%', '30%', '40%', '50%']\nsamples = ['(40 samples)', '(81 samples)', '(163 samples)', '(245 samples)', '(326 samples)', '(408 samples)']\nvalues = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\nerrors = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0]\n\n# Create the figure and bar plot\nplt.figure(figsize=(10.0, 7.0))\nbars = plt.bar(sizes, values, yerr=errors, color='skyblue', capsize=5)\n\n# Add the data labels on the bars\nfor bar, value in zip(bars, values):\n    plt.text(bar.get_x() + bar.get_width() / 2, value, f'{value:.2f}', \n             ha='center', va='bottom', fontsize=10)\n\n# Set the x-axis labels\nplt.xticks(range(len(sizes)), [f'{size}\\n{sample}' for size, sample in zip(sizes, samples)])\n\n# Set the y-axis label\nplt.ylabel('True-info (%)')\n\n# Set the title (optional, as it was not provided in the picture)\n# plt.title('Bar Plot with Error Bars')\n\n# Show the plot\nplt.show()", "idx": "errorbar_5", "width": 10.0, "height": 7.0}
{"file": "bar_11", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['0-9', '10-19', '20-29', '30-39', '40-49']\nvalues = [0.6, -0.2, -0.4, -0.6, -0.8]\n\n# Create the bar chart\nplt.figure(figsize=(6.0, 6.0))\nplt.bar(categories, values, color='blue')\n\n# Set the y-axis label\nplt.ylabel('Spearman')\n\n# Show the plot\nplt.show()", "idx": "bar_11", "width": 6.0, "height": 6.0}
{"file": "hist_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\nconfidence = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\naccuracy_bin = [0.2, 0.3, 0.4, 0.5, 0.6, 0.4, 0.5, 0.3, 0.9]\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the histogram\nax.bar(confidence, accuracy_bin, width=0.1, color='tan', edgecolor='black')\n\n# Plot the diagonal line\nax.plot([0, 1], [0, 1], color='grey', linestyle='--')\n\n# Set the axis labels\nax.set_xlabel('Confidence')\nax.set_ylabel('Accuracy / bin')\n\n# Set the title and calibration error text\nax.set_title('Cascade')\nax.text(0.5, 0.9, 'Calibration Error:\\n0.31', fontsize=12, color='orange', ha='center')\n\n# Set the axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()", "idx": "hist_7", "width": 8.0, "height": 8.0}
{"file": "bar_86", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\noriginal_synthetic = [10, 10, 10, 7, 24, 31, 8]\noriginal_human = [9, 16, 15, 5, 11, 28, 16]\nnew_synthetic = [0, 0, 0, 0, 0, 0, 0]\nnew_human = [10, 10, 10, 5, 10, 20, 10]\n\n# Colors for the bars\ncolors = ['#1f77b4', '#2ca02c', '#d62728', '#ff7f0e', '#9467bd', '#8c564b', '#e377c2']\n\n# Create the figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Plot for the original data\nax1.barh(categories, original_synthetic, color=colors, edgecolor='black', label='synthetic data')\nax1.barh(categories, original_human, left=original_synthetic, color=colors, alpha=0.5, edgecolor='black', label='human-authored data')\n\n# Add percentages on the bars\nfor i, (syn, hum) in enumerate(zip(original_synthetic, original_human)):\n    ax1.text(syn/2, i, f'{syn}%', ha='center', va='center', color='white')\n    ax1.text(syn + hum/2, i, f'{hum}%', ha='center', va='center', color='black')\n\n# Plot for the new data\nax2.barh(categories, new_synthetic, color=colors, edgecolor='black', label='synthetic data')\nax2.barh(categories, new_human, left=new_synthetic, color=colors, alpha=0.5, edgecolor='black', label='human-authored data')\n\n# Set labels and titles\nax1.set_title('Original')\nax2.set_title('New')\nax1.set_xlabel('Percentage')\nax2.set_xlabel('Percentage')\nax1.set_ylabel('Categories')\n\n# Set the legend\nax1.legend(loc='upper right')\nax2.legend(loc='upper right')\n\n# Set the grid\nax1.grid(True, linestyle='--', alpha=0.5)\nax2.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_86", "width": 10.0, "height": 6.0}
{"file": "radar_8", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each model\nlabels=np.array(['Anomaly Detection', 'Imputation', 'Long-horizon Forecasting', 'Classification', 'Short-horizon Forecasting'])\nnum_vars = len(labels)\n\n# Create a 2D array with the values for each model\nvalues=np.array([[0.8, 0.6, 0.9, 0.7, 0.75],\n                 [0.65, 0.7, 0.8, 0.6, 0.7],\n                 [0.75, 0.8, 0.7, 0.65, 0.8]])\nvalues=np.concatenate((values,values[:,[0]]),axis=1) # Repeat the first value at the end to close the circle\n\n# Compute angle for each axis\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] # Repeat the first angle to close the circle\n\n# Set up the radar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], labels)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([0.2, 0.4, 0.6, 0.8], [\"0.2\", \"0.4\", \"0.6\", \"0.8\"], color=\"grey\", size=7)\nplt.ylim(0,1)\n\n# Plot data and fill with color for each model\nax.plot(angles, values[0], linewidth=2, linestyle='solid', label='MOMENT')\nax.fill(angles, values[0], 'b', alpha=0.1)\n\nax.plot(angles, values[1], linewidth=2, linestyle='dashed', label='GPT4TS')\nax.fill(angles, values[1], 'r', alpha=0.1)\n\nax.plot(angles, values[2], linewidth=2, linestyle='dotted', label='TimesNet')\nax.fill(angles, values[2], 'g', alpha=0.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_8", "width": 5.0, "height": 5.0}
{"file": "bar_3", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['PICC', 'SROCC']\nlive_values = [0.9675, 0.9725, 0.9700, 0.9775]\ncsiq_values = [0.9350, 0.9500, 0.9550, 0.9700]\ntid2013_values = [0.8900, 0.9050, 0.9100, 0.9200]\nlive_m_values = [0.9450, 0.9500, 0.9525, 0.9550]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.2  # the width of the bars\n\nfig, axs = plt.subplots(1, 4, figsize=(10.0, 3.0))\n\n# Plotting for LIVE\naxs[0].bar(x - width*1.5, live_values, width, label='w/o DaQRN')\naxs[0].bar(x - width/2, live_values, width, label='w/o CPRN')\naxs[0].bar(x + width/2, live_values, width, label='w/o QCN')\naxs[0].bar(x + width*1.5, live_values, width, label='Full model')\naxs[0].set_title('LIVE')\naxs[0].set_xticks(x)\naxs[0].set_xticklabels(labels)\naxs[0].set_ylim(0.96, 0.98)\n\n# Plotting for CSIQ\naxs[1].bar(x - width*1.5, csiq_values, width, label='w/o DaQRN')\naxs[1].bar(x - width/2, csiq_values, width, label='w/o CPRN')\naxs[1].bar(x + width/2, csiq_values, width, label='w/o QCN')\naxs[1].bar(x + width*1.5, csiq_values, width, label='Full model')\naxs[1].set_title('CSIQ')\naxs[1].set_xticks(x)\naxs[1].set_xticklabels(labels)\naxs[1].set_ylim(0.93, 0.97)\n\n# Plotting for TID2013\naxs[2].bar(x - width*1.5, tid2013_values, width, label='w/o DaQRN')\naxs[2].bar(x - width/2, tid2013_values, width, label='w/o CPRN')\naxs[2].bar(x + width/2, tid2013_values, width, label='w/o QCN')\naxs[2].bar(x + width*1.5, tid2013_values, width, label='Full model')\naxs[2].set_title('TID2013')\naxs[2].set_xticks(x)\naxs[2].set_xticklabels(labels)\naxs[2].set_ylim(0.885, 0.92)\n\n# Plotting for LIVE-M\naxs[3].bar(x - width*1.5, live_m_values, width, label='w/o DaQRN')\naxs[3].bar(x - width/2, live_m_values, width, label='w/o CPRN')\naxs[3].bar(x + width/2, live_m_values, width, label='w/o QCN')\naxs[3].bar(x + width*1.5, live_m_values, width, label='Full model')\naxs[3].set_title('LIVE-M')\naxs[3].set_xticks(x)\naxs[3].set_xticklabels(labels)\naxs[3].set_ylim(0.94, 0.955)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nfor ax in axs:\n    ax.set_ylabel('Metric Values')\n    ax.yaxis.grid(True)\n\nfig.tight_layout()\nplt.legend(loc='upper center', bbox_to_anchor=(-0.1, -0.2), ncol=4)\nplt.show()", "idx": "bar_3", "width": 10.0, "height": 3.0}
{"file": "contour_4", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Set the figure size as required\nplt.figure(figsize=(6.0, 6.0))\n\n# Create a grid of points\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the Z values for the contour plot\nZ = np.sqrt(X**2 + Y**2)\n\n# Create the contour plot\ncontour = plt.contour(X, Y, Z, levels=range(1, 13, 2), colors='blue')\n\n# Add labels to the contours\nplt.clabel(contour, inline=True, fontsize=8)\n\n# Set the aspect of the plot to be equal\nplt.axis('equal')\n\n# Set the x and y axis limits\nplt.xlim(-6, 10)\nplt.ylim(-4, 10)\n\n# Show the plot\nplt.show()", "idx": "contour_4", "width": 6.0, "height": 6.0}
{"file": "area_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Dummy data for the populations of each continent\nyears = np.arange(1950, 2020, 10)\nafrica = np.array([230, 360, 480, 600, 720, 840, 1000])\namericas = np.array([340, 450, 560, 670, 780, 890, 1000])\nasia = np.array([1400, 1650, 1900, 2150, 2400, 2650, 2900])\neurope = np.array([550, 600, 650, 700, 750, 800, 850])\noceania = np.array([30, 36, 42, 48, 54, 60, 66])\n\n# Plotting the data\nplt.figure(figsize=(8.0, 6.0))\nplt.stackplot(years, africa, americas, asia, europe, oceania, labels=['africa', 'americas', 'asia', 'europe', 'oceania'])\nplt.legend(loc='upper left')\nplt.title('World population')\nplt.xlabel('Year')\nplt.ylabel('Number of people (millions)')\nplt.xlim(1950, 2010)\nplt.ylim(0, 8000)\n\n# Display the plot\nplt.show()", "idx": "area_5", "width": 8.0, "height": 6.0}
{"file": "hist_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data - replace with actual data from the paper\ntm_scores = np.arange(0.4, 1.05, 0.05)\nsam_dependent = np.random.randint(10, 70, len(tm_scores))\nthioredoxin_like = np.random.randint(5, 50, len(tm_scores))\ntetratricopeptide_like = np.random.randint(0, 30, len(tm_scores))\nchey_like = np.random.randint(0, 20, len(tm_scores))\n\n# Stacked bar chart\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.bar(tm_scores, sam_dependent, width=0.05, label='SAM-dependent methyltransferase', color='blue')\nax.bar(tm_scores, thioredoxin_like, width=0.05, bottom=sam_dependent, label='Thioredoxin-like', color='darkblue')\nax.bar(tm_scores, tetratricopeptide_like, width=0.05, bottom=sam_dependent+thioredoxin_like, label='Tetratricopeptide-like helical domain', color='lightblue')\nax.bar(tm_scores, chey_like, width=0.05, bottom=sam_dependent+thioredoxin_like+tetratricopeptide_like, label='CheY-like', color='green')\n\n# Labels and title\nax.set_xlabel('TM-score')\nax.set_ylabel('Frequency')\nax.set_title('Stacked Bar Chart')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()", "idx": "hist_2", "width": 9.0, "height": 6.0}
{"file": "pie_4", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['UK', 'France', 'Germany', 'Italy']\nsizes = [42, 18, 12, 28]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\npatterns = ['O', 'o', 'x', '\\\\']\n\n# Plot\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, startangle=140)\n\n# Adding pattern to the slices\nfor i, pie_wedge in enumerate(plt.gca().patches):\n    pie_wedge.set_hatch(patterns[i % len(patterns)])\n\n# Adding percentage text\nplt.text(-0.4, 0.2, 'UK 42%', fontsize=12, color='white')\nplt.text(0.4, 0.2, 'France 18%', fontsize=12, color='white')\nplt.text(0.5, -0.2, 'Germany 12%', fontsize=12, color='white')\nplt.text(-0.5, -0.2, 'Italy 28%', fontsize=12, color='white')\n\nplt.title('Countries in Europe')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()", "idx": "pie_4", "width": 5.0, "height": 5.0}
{"file": "CB_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\npredicted_prob = np.random.rand(50)\nfraction_positives = np.random.rand(50)\ncalibration_x = np.array([0, 0.25, 0.5, 0.75, 1])\ncalibration_y = np.array([0, 0.1, 0.4, 0.7, 1])\nhist_data = np.random.rand(10)\n\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Scatter plot for subgroups\nax.scatter(predicted_prob, fraction_positives, color='salmon', label='Subgroups')\n\n# Plot for calibration curve\nax.plot(calibration_x, calibration_y, 'o-', color='black', label='Calibration curve')\n\n# Add a dashed line representing perfect calibration\nax.plot([0, 1], [0, 1], 'k--')\n\n# Create a secondary axis for the histogram on top\nax_hist = ax.inset_axes([0, 1.05, 1, 0.2], transform=ax.transAxes)\nax_hist.bar(np.arange(len(hist_data)), hist_data, color='pink')\nax_hist.set_xlim(ax.get_xlim())  # Match the x-axis with the main plot\nax_hist.axis('off')  # Turn off the axis\n\n# Set labels and title\nax.set_xlabel('Predicted probability')\nax.set_ylabel('Fraction of positives')\n\n# Add legend\nax.legend(loc='upper left', frameon=False)\n\n# Show the plot\nplt.show()", "idx": "CB_20", "width": 6.0, "height": 6.0}
{"file": "heatmap_24", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nharvest = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],\n                    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],\n                    [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],\n                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],\n                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],\n                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],\n                    [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create heatmap\nim = ax.imshow(harvest, cmap='Greens')\n\n# Create colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Harvest [t/year]', rotation=-90, va=\"bottom\")\n\n# Set the labels\nfarmers = ['Farmer Joe', 'Upland Bros.', 'Smith Gardening', 'Agrifun', 'Organiculture', 'BioGoods Ltd.', 'Cornylee Corp.']\nvegetables = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley']\n\n# Label the axes\nax.set_xticks(np.arange(len(farmers)))\nax.set_yticks(np.arange(len(vegetables)))\nax.set_xticklabels(farmers)\nax.set_yticklabels(vegetables)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(vegetables)):\n    for j in range(len(farmers)):\n        text = ax.text(j, i, f'{harvest[i, j]:.1f}t',\n                       ha=\"center\", va=\"center\", color=\"black\")\n\n# Set the title\nax.set_title(\"Harvest of local farmers (in tons/year)\")\n\n# Show the plot\nplt.show()", "idx": "heatmap_24", "width": 8.0, "height": 8.0}
{"file": "3d_9", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data for the lines\ntemperature = [10, 20, 30, 40]\ntime = [10, 30, 50, 70]\ndepth = [-10, -20, -30, -40]\n\n# Create a new figure with specified figure size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the lines\nax.plot(temperature, time, depth, color='red')\nax.plot(temperature, [t+10 for t in time], [d-10 for d in depth], color='blue')\nax.plot(temperature, [t+20 for t in time], [d-20 for d in depth], color='orange')\n\n# Set labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\n# Set the view angle\nax.view_init(elev=20., azim=-35)\n\n# Show the plot\nplt.show()", "idx": "3d_9", "width": 8.0, "height": 6.0}
{"file": "scatter_23", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nmodels = ['GPT-4', 'MixaT-8B', 'MPT-7B', 'Llama-2-7B', 'Falcon-40B', 'Davinci-003', 'Claude-2', 'Claude-1']\nmodel_basedness_scores = [1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1]\nmeta_cognition_scores = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\nexploration_scores = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6]\nrisk_taking_scores = [0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7]\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot Model-Basedness\naxs[0, 0].scatter(models, model_basedness_scores, color='blue', label='Model-Basedness')\naxs[0, 0].set_title('Model-Basedness')\naxs[0, 0].set_ylim(0, 2)\naxs[0, 0].legend()\n\n# Plot Meta-Cognition\naxs[0, 1].scatter(models, meta_cognition_scores, color='orange', label='Meta-Cognition')\naxs[0, 1].set_title('Meta-Cognition')\naxs[0, 1].set_ylim(0, 2)\naxs[0, 1].legend()\n\n# Plot Exploration\naxs[1, 0].scatter(models, exploration_scores, color='green', label='Exploration')\naxs[1, 0].set_title('Exploration')\naxs[1, 0].set_ylim(0, 2)\naxs[1, 0].legend()\n\n# Plot Risk Taking\naxs[1, 1].scatter(models, risk_taking_scores, color='red', label='Risk Taking')\naxs[1, 1].set_title('Risk Taking')\naxs[1, 1].set_ylim(0, 2)\naxs[1, 1].legend()\n\n# Set labels for x-axis\nfor ax in axs.flat:\n    ax.set(xlabel='Models', ylabel='Score')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "scatter_23", "width": 8.0, "height": 8.0}
{"file": "violin_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnp.random.seed(10)\ndata1 = [np.random.normal(0, std, 100) for std in range(1, 4)]\ndata2 = [np.random.normal(0, std, 100) for std in range(1, 4)]\n\n# Create a figure with a specific size\nfig, axs = plt.subplots(1, 3, figsize=(6.0, 6.0), sharey=True)\n\n# Define the categories\ncategories = ['Efficiency', 'Comfort', 'Safety']\n\n# Plot the violin plots for both datasets\nfor i in range(len(categories)):\n    parts = axs[i].violinplot([data1[i], data2[i]], positions=[1, 2], showmeans=False, showmedians=False, showextrema=False)\n    for pc in parts['bodies']:\n        pc.set_facecolor('#D43F3A' if pc.get_paths()[0].vertices[0, 0] == 1 else '#377EB8')\n        pc.set_edgecolor('black')\n        pc.set_alpha(0.7)\n\n# Customizing the axes\nfor ax, category in zip(axs, categories):\n    ax.set_xticks([1, 2])\n    ax.set_xticklabels(['Without Memory', 'With Memory'])\n    ax.set_title(category)\n\n# Set the y-axis label\naxs[0].set_ylabel('Score')\n\n# Add a legend\nplt.figlegend(['Without Memory', 'With Memory'], loc='lower center', ncol=2, labelspacing=0. )\n\n# Adjust the layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()", "idx": "violin_2", "width": 6.0, "height": 6.0}
{"file": "heatmap_23", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata1 = np.array([[0.10, 0.08, 0.30, 0.60, 0.00, 0.50, 0.07, 0.10]])\ndata2 = np.array([[0.12, 0.22, 0.44, 0.30, 0.32, 0.44, 0.10, 0.00]])\n\n# Create a figure with specified size\nfig, axs = plt.subplots(2, 1, figsize=(10.0, 6.0))\n\n# Create the first heatmap\ncmap1 = plt.cm.Greys\nnorm1 = plt.Normalize(vmin=0, vmax=0.6)\ncolors1 = cmap1(norm1(data1))\nfor i in range(data1.shape[1]):\n    axs[0].add_patch(plt.Rectangle((i, 0), 1, 1, color=colors1[0, i]))\n    axs[0].text(i+0.5, 0.5, f'{data1[0, i]:.2f}', ha='center', va='center', color='black')\naxs[0].set_xlim(0, data1.shape[1])\naxs[0].set_ylim(0, 1)\naxs[0].axis('off')\n\n# Create the second heatmap\ncmap2 = plt.cm.Greys\nnorm2 = plt.Normalize(vmin=0, vmax=0.6)\ncolors2 = cmap2(norm2(data2))\nfor i in range(data2.shape[1]):\n    axs[1].add_patch(plt.Rectangle((i, 0), 1, 1, color=colors2[0, i]))\n    axs[1].text(i+0.5, 0.5, f'{data2[0, i]:.2f}', ha='center', va='center', color='white')\naxs[1].set_xlim(0, data2.shape[1])\naxs[1].set_ylim(0, 1)\naxs[1].axis('off')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()", "idx": "heatmap_23", "width": 10.0, "height": 6.0}
{"file": "hist_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data (randomly generated for demonstration purposes)\nnp.random.seed(0)\ncorrectly_classified = np.random.exponential(scale=1.0, size=1000)\nmisclassified = np.random.exponential(scale=0.5, size=1000)\n\n# Create histogram plot\nplt.figure(figsize=(5.0, 3.0))\nplt.hist(correctly_classified, bins=30, range=(0, 5), color='blue', alpha=0.7, label='Correctly classified')\nplt.hist(misclassified, bins=30, range=(0, 5), color='orange', alpha=0.7, label='Misclassified')\n\n# Add labels and title\nplt.xlabel('Distance to threshold')\nplt.ylabel('Frequency')\nplt.legend()\n\n# Show plot\nplt.show()", "idx": "hist_6", "width": 5.0, "height": 3.0}
{"file": "hist_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nanimal_weights = np.array([0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08])\ncamel_freq = np.array([80, 70, 60, 50, 40, 30, 20])\nkangaroo_freq = np.array([20, 30, 40, 50, 60, 70, 80])\n\n# Bar width\nbar_width = 0.01\n\n# Set the figure size\nplt.figure(figsize=(5.0, 5.0))\n\n# Plotting\nplt.bar(animal_weights - bar_width/2, camel_freq, width=bar_width, color='blue', label='Camels')\nplt.bar(animal_weights + bar_width/2, kangaroo_freq, width=bar_width, color='orange', label='Kangaroos')\n\n# Labels and Title\nplt.xlabel('Animal Weight (Tons)')\nplt.ylabel('Frequency')\nplt.title('Desert Animals in the Wild')\n\n# Log scale for y-axis\nplt.yscale('log')\n\n# Set y-axis ticks to be displayed in scientific notation\nplt.tick_params(axis='y', which='both', labelleft=True)\n\n# Legend\nplt.legend(title='Species')\n\n# Show plot\nplt.show()", "idx": "hist_13", "width": 5.0, "height": 5.0}
{"file": "heatmap_21", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 28.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 15.5, 14.3],\n    [49.2, 11.2, 0.6, 7.8, 17.3, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 13.4, 16.3]\n])\n\n# Labels\nvoter_labels = ['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\nvotee_labels = ['Werewolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain']\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create bubble chart\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        size = data[i, j]\n        ax.scatter(j, i, s=size**2, alpha=0.5, c='blue')\n\n# Add text annotations\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        ax.text(j, i, f'{data[i, j]:.1f}%', ha='center', va='center', color='white')\n\n# Set ticks and labels\nax.set_xticks(np.arange(data.shape[1]))\nax.set_yticks(np.arange(data.shape[0]))\nax.set_xticklabels(votee_labels)\nax.set_yticklabels(voter_labels)\n\n# Set axis labels\nax.set_xlabel('Votee')\nax.set_ylabel('Voter')\n\n# Set colorbar\nsm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=0.1, vmax=100))\ncbar = plt.colorbar(sm)\ncbar.set_label('Percentage')\n\n# Show plot\nplt.show()", "idx": "heatmap_21", "width": 10.0, "height": 8.0}
{"file": "multidiff_2", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\npublic_school_scores = np.random.normal(70, 10, 1000)\nprivate_school_scores = np.random.normal(80, 10, 1000)\n\n# Data for the pie chart\nlabels = 'Books', 'Staff', 'Extracurricular', 'Technology', 'Facilities'\nsizes = [20, 10, 15, 30, 25]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Histogram\nax1.hist(public_school_scores, bins=20, alpha=0.5, label='Public School', color='#1f77b4')\nax1.hist(private_school_scores, bins=20, alpha=0.5, label='Private School', color='#ff7f0e')\nax1.set_title('Student Performance in Schools')\nax1.set_xlabel('Score')\nax1.set_ylabel('Number of Students')\nax1.legend(loc='upper left')\n\n# Pie chart\nax2.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax2.set_title('Resource Allocation in Schools')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_2", "width": 10.0, "height": 5.0}
{"file": "bar_81", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ncaA_recall = [46.3, 56.9, 53.8, 19.4]\ncaB_recall = [45, 34, 40, 27]\nmisleading_recall = [30.1, 34, 43.7, 20]\n\n# X-axis positions\nx = np.arange(len(categories))\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Bar width\nwidth = 0.35\n\n# Bars for CaA and CaB Recall\nrects1 = ax1.bar(x - width/2, caA_recall, width, label='CaA Recall', color='blue')\nrects2 = ax1.bar(x + width/2, caB_recall, width, label='CaB Recall', color='green')\n\n# Secondary Y-axis for misleading recall\nax2 = ax1.twinx()\nrects3 = ax2.bar(x, misleading_recall, width, label='Misleading Recall', color='pink', alpha=0.5)\n\n# Labels and titles\nax1.set_xlabel('Model')\nax1.set_ylabel('Truthful Recall', color='blue')\nax2.set_ylabel('Misleading Recall', color='pink')\nax1.set_title('Truthful:Misleading = 2:0')\nax1.set_xticks(x)\nax1.set_xticklabels(categories)\n\n# Adding text labels on bars\ndef autolabel(rects, ax, xpos='center'):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1, ax1)\nautolabel(rects2, ax1)\nautolabel(rects3, ax2, xpos='center')\n\n# Legend\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show plot\nplt.show()", "idx": "bar_81", "width": 8.0, "height": 4.0}
{"file": "PIP_5", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nwidth_of_layer = np.array([2**6, 2**7, 2**8, 2**9, 2**10, 2**11])\ncos_n0_200 = np.array([0, 50000, 150000, 250000, 350000, 450000])\ncos_n0_400 = np.array([0, 100000, 200000, 300000, 400000, 500000])\nrelu_n0_200 = np.array([0, 2, 4, 6, 8, 10])\nrelu_n0_400 = np.array([0, 3, 6, 9, 12, 15])\n\n# Create the main figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(width_of_layer, cos_n0_200, 'o-', label='Cos | n0 = 200')\nax.plot(width_of_layer, cos_n0_400, 'x-', label='Cos | n0 = 400')\nax.plot(width_of_layer, relu_n0_200, 'o-', label='ReLU | n0 = 200')\nax.plot(width_of_layer, relu_n0_400, 'x-', label='ReLU | n0 = 400')\n\n# Create the inset figure and axis\nax_inset = fig.add_axes([0.5, 0.2, 0.3, 0.3])\nax_inset.plot(width_of_layer, relu_n0_200, 'o-', label='ReLU | n0 = 200')\nax_inset.plot(width_of_layer, relu_n0_400, 'x-', label='ReLU | n0 = 400')\n\n# Set the labels and title\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\nax.set_title('Empirical Lipschitz Constant vs Width of Layer')\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()", "idx": "PIP_5", "width": 6.0, "height": 6.0}
{"file": "bar_100", "code": "import matplotlib.pyplot as plt\n\n# Data for each region\nregion1_sales = [50, 70, 80, 45, 55]\nregion2_sales = [60, 80, 70, 90, 40]\nregion3_sales = [70, 60, 90, 30, 10]\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\n\n# Set up the figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot for Region 1\naxes[0].bar(products, region1_sales, color='green')\naxes[0].set_title('Region 1 Sales')\naxes[0].set_ylim(0, 100)\n\n# Plot for Region 2\naxes[1].bar(products, region2_sales, color='blue')\naxes[1].set_title('Region 2 Sales')\naxes[1].set_ylim(0, 100)\n\n# Plot for Region 3\naxes[2].bar(products, region3_sales, color='red')\naxes[2].set_title('Region 3 Sales')\naxes[2].set_ylim(0, 100)\n\n# Set the main title for the figure\nfig.suptitle('Average Monthly Sales by Product Across Regions')\n\n# Show the plot\nplt.show()", "idx": "bar_100", "width": 15.0, "height": 5.0}
{"file": "quiver_2", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['English', 'French', 'German']\nvalues = [-4.00, -3.22, -2.44]\nerror = [1.5, 1.2, 1.0]\n\n# Plot\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.errorbar(values, categories, xerr=error, fmt='o', color='black', ecolor='red', capsize=5, elinewidth=2, markeredgewidth=2)\n\n# Add text labels\nfor i, (value, category) in enumerate(zip(values, categories)):\n    ax.text(value, i, f'{value:.2f}', color='red', va='center', ha='right')\n\n# Customize the plot\nax.set_xlim(0, 10)\nax.set_yticks(range(len(categories)))\nax.set_yticklabels(categories)\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\nax.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=True)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Add legend\nax.legend(['Out-group bias\\n(Collectivism)'], loc='lower right', fontsize='small', fancybox=True, framealpha=1, edgecolor='black', handlelength=2)\n\nplt.show()", "idx": "quiver_2", "width": 5.0, "height": 4.0}
{"file": "bar_27", "code": "import matplotlib.pyplot as plt\n\n# Data for the stacked bar chart\ncategories = ['Success', 'Grounding Error', 'Occupancy Error', 'Gripper collision', 'Trajectory optimization Error', 'Grasping failed']\nGPT_4V = [0.6, 0.15, 0.1, 0.05, 0.05, 0.05]\nRoboCodeX = [0.5, 0.2, 0.1, 0.1, 0.05, 0.05]\n\n# Colors for each category\ncolors = ['#2ca02c', '#7f7f7f', '#ff7f0e', '#d62728', '#1f77b4', '#9467bd']\n\n# Create a figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Create the stacked bar chart\nax.barh('GPT-4V', GPT_4V, color=colors, edgecolor='black')\nax.barh('RoboCodeX', RoboCodeX, left=[sum(GPT_4V[:i]) for i in range(len(GPT_4V))], color=colors, edgecolor='black')\n\n# Add the legend\nax.legend(categories, bbox_to_anchor=(1.05, 1), loc='upper left')\n\n# Set the labels and title\nax.set_xlabel('Percentage of Total Trials')\nax.set_title('Results of Autonomous Grasping Trials')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Add grid lines\nax.xaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_27", "width": 10.0, "height": 3.0}
{"file": "HR_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\ngpt_3_5_turbo_0613 = [5.7, 5.1, 5.6, 3.1]\ngpt_3_5_turbo_instruct = [6.0, 6.2, 5.8, 3.4]\ngpt_4 = [6.6, 7.5, 7.0, 6.9]\nllama_2_13b = [7.8, 5.2, 7.6, 7.2]\nllama_2_70b = [7.5, 4.9, 7.4, 7.0]\n\nbar_width = 0.15\nindex = np.arange(len(categories))\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nbar1 = ax.bar(index - bar_width*2, gpt_3_5_turbo_0613, bar_width, label='gpt-3.5-turbo-0613', color='pink')\nbar2 = ax.bar(index - bar_width, gpt_3_5_turbo_instruct, bar_width, label='gpt-3.5-turbo-instruct', color='lightblue')\nbar3 = ax.bar(index, gpt_4, bar_width, label='gpt-4', color='lightgreen')\nbar4 = ax.bar(index + bar_width, llama_2_13b, bar_width, label='llama-2-13b', color='red')\nbar5 = ax.bar(index + bar_width*2, llama_2_70b, bar_width, label='llama-2-70b', color='lightcyan')\n\n# Adding values on top of the bars\nfor bars in [bar1, bar2, bar3, bar4, bar5]:\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Customizing the plot\nax.set_xlabel('Trustee Scenario', fontsize=12, color='green')\nax.set_ylabel('Average Amount Sent ($)', fontsize=12)\nax.set_xticks(index)\nax.set_xticklabels(categories, fontsize=10)\nax.set_ylim(3, 8)\nax.axhline(y=6, color='green', linestyle='--', linewidth=0.5)\nax.axhline(y=7, color='red', linestyle='--', linewidth=0.5)\nax.legend()\n\nplt.tight_layout()\nplt.show()", "idx": "HR_20", "width": 10.0, "height": 5.0}
{"file": "multidiff_25", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for bar chart\nsale_probabilities = np.arange(0.0, 0.6, 0.1)\nknown_sales = [20000, 15000, 10000, 5000, 2500, 1000]\nunknown_sales = [10000, 8000, 6000, 4000, 2000, 500]\n\n# Data for heatmap\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nuser_ratings = np.random.randint(40, 100, size=(5, 6))\n\n# Create figure with specific size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Create bar chart\nax1 = fig.add_subplot(121)\nax1.bar(sale_probabilities - 0.025, known_sales, width=0.05, color='green', label='Known Sales')\nax1.bar(sale_probabilities + 0.025, unknown_sales, width=0.05, color='blue', label='Unknown Sales')\nax1.set_xlabel('Sale Probability')\nax1.set_ylabel('Number of Sales')\nax1.legend()\nax1.set_title('Sales Distribution')\n\n# Create inset bar chart\nax_inset = ax1.inset_axes([0.5, 0.5, 0.47, 0.47])\nax_inset.bar(sale_probabilities - 0.025, known_sales, width=0.05, color='green')\nax_inset.bar(sale_probabilities + 0.025, unknown_sales, width=0.05, color='blue')\nax_inset.set_xlim(0.2, 0.6)\nax_inset.set_ylim(0, 5000)\n\n# Create heatmap\nax2 = fig.add_subplot(122)\ncax = ax2.matshow(user_ratings, cmap='coolwarm')\nfig.colorbar(cax, ax=ax2, orientation='vertical')\nax2.set_xticks(np.arange(len(products)))\nax2.set_yticks(np.arange(len(regions)))\nax2.set_xticklabels(products)\nax2.set_yticklabels(regions)\nax2.set_xlabel('Technology Products')\nax2.set_title('User Ratings by Region and Product')\n\nplt.tight_layout()\nplt.show()", "idx": "multidiff_25", "width": 10.0, "height": 5.0}
{"file": "radar_20", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for each perfume brand\ncategories = ['Creativity', 'Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Packaging', 'Popularity']\nN = len(categories)\n\n# Perfume brand scores (these are example values, you should replace them with the actual values from the picture)\nchanel_scores = [6, 7, 8, 5, 6, 7, 8, 6]\ndior_scores = [5, 6, 7, 4, 5, 6, 7, 5]\ngucci_scores = [7, 8, 9, 6, 7, 8, 9, 7]\n\n# We need to repeat the first value to close the circular graph:\nchanel_scores += chanel_scores[:1]\ndior_scores += dior_scores[:1]\ngucci_scores += gucci_scores[:1]\n\n# Calculate angle for each category\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n\n# Initialize the spider plot\nfig, axs = plt.subplots(1, 3, figsize=(18.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable + add labels\nfor ax in axs:\n    plt.sca(ax)\n    plt.xticks(angles[:-1], categories, color='grey', size=12)\n\n# Chanel\naxs[0].plot(angles, chanel_scores, linewidth=1, linestyle='solid', label='Chanel')\naxs[0].fill(angles, chanel_scores, 'b', alpha=0.1)\n\n# Dior\naxs[1].plot(angles, dior_scores, linewidth=1, linestyle='solid', label='Dior')\naxs[1].fill(angles, dior_scores, 'r', alpha=0.1)\n\n# Gucci\naxs[2].plot(angles, gucci_scores, linewidth=1, linestyle='solid', label='Gucci')\naxs[2].fill(angles, gucci_scores, 'g', alpha=0.1)\n\n# Add a title and a legend to the plot\nplt.sca(axs[1])\nplt.title('Perfume Brand Comparison', size=20, color='black', y=1.1)\naxs[1].legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Show the plot\nplt.show()", "idx": "radar_20", "width": 18.0, "height": 6.0}
{"file": "tree_3", "code": "import matplotlib.pyplot as plt\nimport squarify\n\n# Define the size of the figure\nplt.figure(figsize=(12.0, 8.0))\n\n# Define the data and labels\nsizes = [13.42, 30.6, 8.54, 6.26, 10.91, 14.21]\nlabels = ['Adidas', 'Nike', 'Under Armour', 'New Balance', 'Reebok', 'Puma']\ncolors = ['#a7d0db', '#a7d0db', '#f4c07a', '#f4a77a', '#f4e07a', '#a4d77a']\n\n# Create a treemap\nsquarify.plot(sizes=sizes, label=labels, color=colors, alpha=0.7, text_kwargs={'fontsize':12})\n\n# Remove the axes\nplt.axis('off')\n\n# Show the plot\nplt.show()", "idx": "tree_3", "width": 12.0, "height": 8.0}
{"file": "bar_12", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar charts\nmodels = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nbeauty_values = [2.2, 11.2, 2.4, 19.9, 14.3]\nmovielens_values = [3.0, 5.1, 4.1, 2.9, 3.1]\nyelp_values = [-0.7, -0.5, -0.5, 4.8, 19.7]\n\n# Create a figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot the bar charts\naxes[0].barh(models, beauty_values, color='black')\naxes[1].barh(models, movielens_values, color='black')\naxes[2].barh(models, yelp_values, color='black')\n\n# Add the data labels\nfor i, v in enumerate(beauty_values):\n    axes[0].text(v + 0.1, i, f'{v}%', color='black', va='center')\nfor i, v in enumerate(movielens_values):\n    axes[1].text(v + 0.1, i, f'{v}%', color='black', va='center')\nfor i, v in enumerate(yelp_values):\n    axes[2].text(v + 0.1, i, f'{v}%', color='red' if v < 0 else 'black', va='center')\n\n# Set the titles\naxes[0].set_title('Beauty')\naxes[1].set_title('MovieLens-1M')\naxes[2].set_title('Yelp')\n\n# Set the x-axis labels\naxes[0].set_xlabel('\u0394%')\naxes[1].set_xlabel('\u0394%')\naxes[2].set_xlabel('\u0394%')\n\n# Remove y-axis labels for the second and third plots\naxes[1].set_yticklabels([])\naxes[2].set_yticklabels([])\n\n# Set the limits for the x-axis\naxes[0].set_xlim(0, 20)\naxes[1].set_xlim(0, 5)\naxes[2].set_xlim(-1, 20)\n\n# Remove spines\nfor ax in axes:\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_12", "width": 10.0, "height": 4.0}
{"file": "CB_21", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.linspace(-5, 5, 100)\ny1 = np.exp(-x**2)\ny2 = np.exp(-(x-1)**2)\ny3 = np.exp(-(x-2)**2)\n\n# Plotting the density curves\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\nax1.plot(x, y1, label='Proposed', color='blue')\nax1.fill_between(x, y1, alpha=0.3, color='blue')\nax1.plot(x, y2, label='FOD-Net', color='orange')\nax1.fill_between(x, y2, alpha=0.3, color='orange')\nax1.plot(x, y3, label='SS3T', color='green')\nax1.fill_between(x, y3, alpha=0.3, color='green')\n\n# Creating a legend\nax1.legend(title='Model', loc='upper right')\n\n# Creating a boxplot below the density curves\nax2 = fig.add_axes([0.125, 0.1, 0.775, 0.2])\ndata = [np.random.normal(0, std, 100) for std in range(1, 4)]\nax2.boxplot(data, vert=False, patch_artist=True)\n\n# Setting labels for the boxplot\nax2.set_xlabel('ACC')\nax2.set_yticklabels(['O', ' ', '@'])\n\n# Removing the top and right spines\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\n\nplt.show()", "idx": "CB_21", "width": 8.0, "height": 4.0}
{"file": "errorbar_23", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Wind', 'Solar', 'Hydro', 'Nuclear']\ninstallation_efficiency = [80, 85, 78, 90]\noperational_efficiency = [75, 80, 82, 88]\nevaluation_protocol = [70, 75, 77, 85]\nmaintenance_costs = [65, 70, 73, 80]\nenvironmental_impact = [60, 65, 68, 75]\nregulatory_compliance = [55, 60, 63, 70]\nsafety_standards = [50, 55, 58, 65]\n\n# Error values\nerrors = [5, 4, 6, 3]\n\n# X-axis positions\nx = np.arange(len(categories))\n\n# Bar width\nbar_width = 0.1\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(x - 3*bar_width, installation_efficiency, bar_width, yerr=errors, label='Installation Efficiency', capsize=5)\nax.bar(x - 2*bar_width, operational_efficiency, bar_width, yerr=errors, label='Operational Efficiency', capsize=5)\nax.bar(x - bar_width, evaluation_protocol, bar_width, yerr=errors, label='Evaluation Protocol', capsize=5)\nax.bar(x, maintenance_costs, bar_width, yerr=errors, label='Maintenance Costs', capsize=5)\nax.bar(x + bar_width, environmental_impact, bar_width, yerr=errors, label='Environmental Impact', capsize=5)\nax.bar(x + 2*bar_width, regulatory_compliance, bar_width, yerr=errors, label='Regulatory Compliance', capsize=5)\nax.bar(x + 3*bar_width, safety_standards, bar_width, yerr=errors, label='Safety Standards', capsize=5)\n\n# Labels and Title\nax.set_ylabel('Efficiency and Cost Scores (%)')\nax.set_xticks(x)\nax.set_xticklabels(categories)\nax.set_title('Energy Assessment Entity')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()", "idx": "errorbar_23", "width": 10.0, "height": 5.0}
{"file": "errorbar_26", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process', 'Complaint Rates']\ndissatisfaction = [15, 18, 20, 12, 17, 10, 8]\nsatisfaction = [75, 82, 78, 85, 80, 88, 90]\nerror = [[5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5]]\n\n# Colors\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f']\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\ny_pos = range(len(categories))\nax.barh(y_pos, satisfaction, xerr=error, align='center', color=colors, ecolor='black', capsize=5)\nax.barh(y_pos, dissatisfaction, left=satisfaction, xerr=error, align='center', color='lightgrey', ecolor='black', capsize=5)\n\n# Add text labels\nfor i in range(len(categories)):\n    ax.text(satisfaction[i] + dissatisfaction[i] + 2, i, f\"{dissatisfaction[i]}%\", va='center', ha='left', color='black')\n    ax.text(satisfaction[i] - 5, i, f\"{satisfaction[i]}%\", va='center', ha='right', color='white')\n\n# Set labels and title\nax.set_yticks(y_pos)\nax.set_yticklabels(categories)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Satisfaction Scores')\nax.set_title('Customer Satisfaction Scores by Category')\n\n# Remove spines\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Show grid\nax.xaxis.grid(True)\n\n# Show plot\nplt.show()", "idx": "errorbar_26", "width": 8.0, "height": 6.0}
{"file": "scatter_20", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 6.0))\n\n# Sample data for scatter plot\nnp.random.seed(0)\nx = np.random.rand(15) * 100\ny = np.random.rand(15) * 100\ncolors = np.random.rand(15) * 100\nsizes = np.random.rand(15) * 1000\n\n# Create scatter plot\nscatter = plt.scatter(x, y, s=sizes, c=colors, cmap='viridis', alpha=0.6, edgecolors='w')\n\n# Add colorbar\nplt.colorbar(scatter)\n\n# Set title\nplt.title('Scatter plot with colorbar')\n\n# Show the plot\nplt.show()", "idx": "scatter_20", "width": 8.0, "height": 6.0}
{"file": "hist_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to simulate the histograms\nnp.random.seed(0)\nintra_class = np.random.normal(0.3, 0.1, 1000)\ninter_class = np.random.normal(0.6, 0.1, 1000)\n\n# Set the figure size as specified\nplt.figure(figsize=(10.0, 3.0))\n\n# Create the first subplot\nplt.subplot(1, 2, 1)\nplt.hist(intra_class, bins=30, alpha=0.5, label='Intra Class')\nplt.hist(inter_class, bins=30, alpha=0.5, label='Inter Class')\nplt.xlabel('Cosine Similarity')\nplt.ylabel('Frequency')\nplt.legend()\n\n# Create the second subplot with reversed data\nplt.subplot(1, 2, 2)\nplt.hist(-intra_class, bins=30, alpha=0.5, label='Intra Class')\nplt.hist(-inter_class, bins=30, alpha=0.5, label='Inter Class')\nplt.xlabel('Cosine Similarity')\nplt.ylabel('Frequency')\nplt.legend()\n\n# Adjust the layout and display the plot\nplt.tight_layout()\nplt.show()", "idx": "hist_10", "width": 10.0, "height": 3.0}
{"file": "errorbar_30", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncities = ['City A', 'City B', 'City C', 'City D']\nair_quality = [-2.0, -1.5, -1.8, -2.2]\nwater_quality = [-1.8, -1.3, -1.6, -2.0]\nerror = [0.2, 0.15, 0.25, 0.3]\n\n# Bar width\nbar_width = 0.35\n\n# X-axis positions for bars\nindex = np.arange(len(cities))\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Air Quality bars\nair_bars = ax1.bar(index, air_quality, bar_width, color='red', label='Air Quality', hatch='/', yerr=error, capsize=5)\n\n# Water Quality bars\nax2 = ax1.twinx()\nwater_bars = ax2.bar(index + bar_width, water_quality, bar_width, color='green', label='Water Quality', hatch='\\\\', yerr=error, capsize=5)\n\n# Labels, title, and legend\nax1.set_xlabel('Cities')\nax1.set_ylabel('Air Quality Score', color='red')\nax2.set_ylabel('Water Quality Score', color='green')\nplt.title('Environmental Impact Scores Across Cities')\nax1.set_xticks(index + bar_width / 2)\nax1.set_xticklabels(cities)\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Display the plot\nplt.show()", "idx": "errorbar_30", "width": 8.0, "height": 5.0}
{"file": "errorbar_25", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nproducts = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [43.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 43.7, 20.0]\nerror = [5, 4, 6, 3]\n\n# X-axis positions\nx = np.arange(len(products))\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Bar plots\nax1.bar(x - 0.2, truthful_recall, width=0.4, label='Truthful Recall', color='skyblue', yerr=error, capsize=5)\nax1.bar(x + 0.2, misleading_recall, width=0.4, label='Misleading Recall', color='salmon', yerr=error, capsize=5)\n\n# Text labels\nfor i in range(len(products)):\n    ax1.text(i - 0.2, truthful_recall[i] + 2, f'{truthful_recall[i]}%', ha='center', color='black')\n    ax1.text(i + 0.2, misleading_recall[i] + 2, f'{misleading_recall[i]}%', ha='center', color='black')\n\n# Axes labels\nax1.set_ylabel('Truthful Recall (%)', color='black')\nax1.set_ylim(0, 70)\n\n# Secondary y-axis for misleading recall\nax2 = ax1.twinx()\nax2.set_ylabel('Misleading Recall (%)', color='black')\nax2.set_ylim(0, 50)\n\n# X-axis ticks\nax1.set_xticks(x)\nax1.set_xticklabels(products)\n\n# Title\nplt.title('Comparison of Recall Rates Across Products')\n\n# Legend\nax1.legend(loc='upper left')\n\n# Grid\nax1.grid(axis='y', linestyle='--')\n\n# Show plot\nplt.show()", "idx": "errorbar_25", "width": 8.0, "height": 5.0}
{"file": "heatmap_1", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [1.00, 0.69, 0.77, 0.88, 0.62],\n    [0.69, 1.00, 0.64, 0.67, 0.45],\n    [0.77, 0.64, 1.00, 0.72, 0.69],\n    [0.88, 0.67, 0.72, 1.00, 0.54],\n    [0.62, 0.45, 0.69, 0.54, 1.00]\n])\n\n# Labels for the heatmap\ncolumn_labels = ['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\nrow_labels = ['AVG', 'CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create the heatmap\ncax = ax.matshow(data, cmap='Reds')\n\n# Add color bar\nplt.colorbar(cax)\n\n# Set the axis labels\nax.set_xticklabels([''] + column_labels, rotation=45, ha='left')\nax.set_yticklabels([''] + row_labels)\n\n# Display the data values on the heatmap\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        c = data[j,i]\n        ax.text(i, j, str(c), va='center', ha='center')\n\n# Show the plot\nplt.show()", "idx": "heatmap_1", "width": 8.0, "height": 8.0}
{"file": "HR_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the figure and subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Define the coordinates for the polygons and the rectangle\npolygon_coords = [(-1, -1), (3, 3), (4, -1)]\nrectangle_coords = [(0, 0), (1, 0), (1, 1), (0, 1)]\n\n# Define the points for the scatter plot\nscatter_points = np.random.rand(3, 2) * 2 - 1\n\n# Loop through each subplot to add the polygons, rectangle, and scatter points\nfor ax in axs:\n    # Add the polygon\n    polygon = plt.Polygon(polygon_coords, closed=True, fill=True, color='lightblue', edgecolor='blue')\n    ax.add_patch(polygon)\n    \n    # Add the rectangle\n    rectangle = plt.Polygon(rectangle_coords, closed=True, fill=True, color='red')\n    ax.add_patch(rectangle)\n    \n    # Add the scatter points\n    ax.scatter(scatter_points[:, 0], scatter_points[:, 1], color='red', label='num. of points = 3')\n    \n    # Set the labels and limits\n    ax.set_xlabel('Reactive-2 payoff')\n    ax.set_ylabel('Memory-2 mutants payoff')\n    ax.set_xlim(-2, 4)\n    ax.set_ylim(-2, 4)\n    \n    # Add the text labels for the coordinates\n    ax.text(-1, -1, '(P, P)', verticalalignment='bottom', horizontalalignment='right')\n    ax.text(3, 3, '(R, R)', verticalalignment='bottom', horizontalalignment='left')\n    ax.text(4, -1, '(T, S)', verticalalignment='top', horizontalalignment='left')\n    \n    # Add the legend\n    ax.legend(loc='upper left')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "HR_8", "width": 10.0, "height": 4.0}
{"file": "multidiff_21", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nyears = [2019, 2020, 2021, 2022]\ninvestment = np.array([[100, 200, 300, 400], [80, 160, 240, 320], [50, 100, 150, 200]])\nproducts = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\naccounts = [200, 190, 180, 170, 160, 150]\nloan_amount = np.random.randint(1000, 50000, 1000)\nurban_loans = loan_amount + np.random.randint(-5000, 5000, 1000)\nrural_loans = loan_amount + np.random.randint(-5000, 5000, 1000)\n\n# Create figure and axes\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 5.0))\n\n# Plot 1: Stacked area chart for investment growth over time\naxs[0].stackplot(years, investment, labels=['Stocks', 'Bonds', 'Real Estate'], colors=['#8dd3c7', '#ffffb3', '#bebada'])\naxs[0].set_title('Investment Growth Over Time')\naxs[0].set_xlabel('Year')\naxs[0].set_ylabel('Total Investment (%)')\naxs[0].legend(loc='upper left')\n\n# Plot 2: Bar chart for popularity of financial products\naxs[1].bar(products, accounts, color='#80b1d3')\naxs[1].set_title('Popularity of Financial Products')\naxs[1].set_xlabel('Product Type')\naxs[1].set_ylabel('Number of Accounts')\n\n# Plot 3: Histogram for loan amount distribution by region\naxs[2].hist(urban_loans, bins=30, alpha=0.5, label='Urban Loans', color='#fb8072')\naxs[2].hist(rural_loans, bins=30, alpha=0.5, label='Rural Loans', color='#80b1d3')\naxs[2].set_title('Loan Amount Distribution by Region')\naxs[2].set_xlabel('Loan Amount ($)')\naxs[2].set_ylabel('Frequency')\naxs[2].legend(loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "multidiff_21", "width": 10.0, "height": 5.0}
{"file": "bar_93", "code": "import matplotlib.pyplot as plt\n\n# Data for Eye Movement and Brainwave\neye_movement = [20.4, 29.6, 20.4, 20.4, 9.3]\nbrainwave = [23.8, 14.3, 16.7, 38.1, 7.1]\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\ncolors = ['red', 'orange', 'yellow', 'green', 'darkgreen']\n\n# Create subplots\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(6.0, 3.0))\n\n# Plot Eye Movement\naxes[0].barh(categories, eye_movement, color=colors)\naxes[0].set_xlim(-60, 60)\naxes[0].set_title('Survey Results\\nEye Movement')\naxes[0].invert_xaxis()  # Invert x-axis to match the picture\n# Add text labels\nfor i, v in enumerate(eye_movement):\n    axes[0].text(v + 3, i, f\"{v}%\", color='black', va='center')\n\n# Plot Brainwave\naxes[1].barh(categories, brainwave, color=colors)\naxes[1].set_xlim(-60, 60)\naxes[1].set_title('Brainwave')\naxes[1].invert_xaxis()  # Invert x-axis to match the picture\n# Add text labels\nfor i, v in enumerate(brainwave):\n    axes[1].text(v + 3, i, f\"{v}%\", color='black', va='center')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_93", "width": 6.0, "height": 3.0}
{"file": "scatter_1", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hf_falcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = {\n    'Model-Basedness': [1.8, 1.6, 1.4, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2],\n    'Meta-Cognition': [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8],\n    'Exploration': [1.8, 1.6, 1.4, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2],\n    'Risk Taking': [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8],\n    'Bayesian Reasoning': [1.8, 1.6, 1.4, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2],\n    'Simple Bandits': [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\n}\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\n\n# Create subplots\nfig, axes = plt.subplots(1, 6, figsize=(12.0, 4.0), sharey=True)\n\n# Plot each category\nfor ax, (category, color) in zip(axes, zip(values.keys(), colors)):\n    ax.scatter(values[category], models, color=color)\n    ax.set_title(category)\n    ax.set_xlim(0, 2)\n    ax.axvline(x=1, color='black', linestyle='--', linewidth=1)\n\n# Set y-axis labels only on the first subplot\naxes[0].set_yticks(range(len(models)))\naxes[0].set_yticklabels(models)\n\n# Remove y-axis labels for the rest of the subplots\nfor ax in axes[1:]:\n    ax.set_yticklabels([])\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "scatter_1", "width": 12.0, "height": 4.0}
{"file": "HR_12", "code": "import matplotlib.pyplot as plt\n\n# Data\ncategories = ['satisfy constraints', 'no severe errors', 'lengthy', 'contain rich info',\n              'no moderate errors', 'grammatically correct', 'no minor errors', 'clear',\n              'non-repetitive', 'support stances', '19 other features']\nvalues = [0.76, 0.11, -0.06, -0.06, 0.04, 0.02, -0.02, 0.02, 0.02, 0.01, 0]\ncolors = ['red' if v > 0 else 'blue' for v in values]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.barh(categories, values, color=colors)\n\n# Add data labels\nfor i, v in enumerate(values):\n    if v > 0:\n        ax.text(v + 0.01, i, f'+{v:.2f}', color='black', va='center', fontweight='bold')\n    else:\n        ax.text(v - 0.01, i, f'{v:.2f}', color='black', va='center', ha='right', fontweight='bold')\n\n# Add reference lines and labels\nax.axvline(0.5, color='black', linestyle='--', lw=1)\nax.text(0.5, -1, 'E[f(X)] = 0.5', color='black', ha='center')\nax.axvline(0.76, color='grey', linestyle='--', lw=1)\nax.text(0.76, 10, 'f(x) = 0.76', color='black', ha='right')\nax.text(0.76, 10, '+0.18', color='black', ha='left')\n\n# Set x-axis limits and labels\nax.set_xlim(0.45, 0.78)\nax.set_xticks([0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75])\nax.set_xticklabels(['0.45', '0.50', '0.55', '0.60', '0.65', '0.70', '0.75'])\n\n# Remove spines\nfor spine in ['top', 'right', 'left']:\n    ax.spines[spine].set_visible(False)\n\n# Set y-axis label size\nax.tick_params(axis='y', labelsize=8)\n\n# Show plot\nplt.show()", "idx": "HR_12", "width": 8.0, "height": 6.0}
{"file": "pie_14", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Fruits', 'Proteins', 'Vegetables', 'Grains', 'Dairy']\nsizes = [25, 35, 20, 10, 10]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n \n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, startangle=140, autopct='%1.1f%%', pctdistance=0.85)\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nplt.axis('equal')  \nplt.title('Nutritional Distribution')\nplt.show()", "idx": "pie_14", "width": 6.0, "height": 6.0}
{"file": "bar_65", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ngroups = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nconstraint_words = [3, 5, 7, 10]\nscores = np.array([\n    [-3.3, -2.2, -1.9, -0.6],\n    [-3.2, -2.3, -1.8, -0.7],\n    [-2.2, -1.9, -1.4, -1.1],\n    [-1.9, -1.7, -1.6, -0.8]\n])\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = np.arange(len(groups))\n\nfor i, word_count in enumerate(constraint_words):\n    ax.barh(index + i * bar_width, scores[:, i], bar_width, label=f'{word_count} Constraint Words')\n\nax.set_xlabel('Score')\nax.set_title('Scores by group and constraint word count')\nax.set_yticks(index + bar_width / 2)\nax.set_yticklabels(groups)\nax.legend()\n\n# Adding the text labels on the bars\nfor i in range(len(groups)):\n    for j, word_count in enumerate(constraint_words):\n        ax.text(scores[i, j], i + j * bar_width, f'{scores[i, j]:.1f}', va='center', ha='right', color='black')\n\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(-3.5, 0)  # set x-axis limit to match the picture\n\nplt.show()", "idx": "bar_65", "width": 10.0, "height": 6.0}
{"file": "bar_16", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['human', 'gpt4', 'gpt4-cot']\ncounts_s1 = [(200, 300, 300), (150, 350, 300), (100, 400, 300)]\ncounts_s2 = [(250, 250, 300), (200, 300, 300), (150, 350, 300)]\n\n# Create subplots with shared x-axis\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8.0, 6.0), sharex=True)\n\n# Plot for s1\nfor i, role in enumerate(roles):\n    ax1.barh(role, counts_s1[i][0], color='blue', label='O' if i == 0 else \"\")\n    ax1.barh(role, counts_s1[i][1], left=counts_s1[i][0], color='yellow', label='T' if i == 0 else \"\")\n    ax1.barh(role, counts_s1[i][2], left=counts_s1[i][0] + counts_s1[i][1], color='red', label='P' if i == 0 else \"\")\n\n# Plot for s2\nfor i, role in enumerate(roles):\n    ax2.barh(role, counts_s2[i][0], color='blue')\n    ax2.barh(role, counts_s2[i][1], left=counts_s2[i][0], color='yellow')\n    ax2.barh(role, counts_s2[i][2], left=counts_s2[i][0] + counts_s2[i][1], color='red')\n\n# Set titles and labels\nax1.set_title('Resonance Preference Plot for rich_context\\ns1')\nax2.set_title('s2')\nax1.set_ylabel('Role')\nax2.set_ylabel('Role')\nax2.set_xlabel('Count')\n\n# Set legend\nax1.legend(loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "bar_16", "width": 8.0, "height": 6.0}
{"file": "errorbar_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['[none]', '[\u0394R^-1]', '[\u0394R]', '[m]']\nvalues = [0.8, 0.75, 0.7, 0.65]\nerrors = [0.05, 0.04, 0.03, 0.02]\npercentages = ['+8.0%', '+8.3%', '+9.5%', '+10.6%']\n\n# Set the figure size\nplt.figure(figsize=(8.0, 8.0))\n\n# Plotting the bars with error bars\nfor i in range(4):\n    plt.barh(categories, values, xerr=errors, color='grey', capsize=5)\n    for j, v in enumerate(values):\n        plt.text(v + errors[j] + 0.01, j, percentages[j], color='black', va='center')\n\n# Set the y-axis labels\nplt.yticks(np.arange(4), categories)\n\n# Set the x-axis limits\nplt.xlim(0.5, 0.9)\n\n# Remove the x-axis ticks\nplt.xticks([])\n\n# Remove the spines\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# Show the plot\nplt.show()", "idx": "errorbar_13", "width": 8.0, "height": 8.0}
{"file": "bar_82", "code": "import matplotlib.pyplot as plt\n\n# Data for the bar charts\ncategories = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nvalues = [30, 20, 15, 10, 5]\nvalues_new = [25, 18, 12, 8, 3]\n\n# Create a figure with two subplots and set the size\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Plot the first bar chart\naxs[0].barh(categories[::-1], values[::-1], color=['#1f77b4', '#aec7e8', '#aec7e8', '#aec7e8', '#d62728'])\naxs[0].set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\naxs[0].set_xlim(0, 30)\n\n# Plot the second bar chart\naxs[1].barh([cat + ' New' for cat in categories[::-1]], values_new[::-1], color=['#1f77b4', '#aec7e8', '#aec7e8', '#aec7e8', '#d62728'])\naxs[1].set_xlabel('Probability of Improvement')\naxs[1].set_xlim(0, 30)\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "bar_82", "width": 6.0, "height": 6.0}
{"file": "errorbar_1", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nmethods = ['Deep Ens', 'Dropout', 'Laplace', 'SNGP', 'HET-DI', 'Baseline', 'GP', 'Shallow Ens', 'DUQ', 'Corr. Pred.']\nmeans = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\nerrors = [(0.1, 0.1)] * len(means)  # Assuming symmetric errors for simplicity\ncolors = ['green'] * 7 + ['orange'] * 3\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(methods, means, yerr=errors, color=colors, capsize=5)\n\n# Adding the text labels on the bars\nfor i, v in enumerate(means):\n    ax.text(i, v - 0.05, f\"{v:.3f}\", color='black', ha='center', va='top')\n\n# Customizing the plot\nax.set_ylabel('Log Probability \u2191')\nax.set_title('Comparison of Methods')\nax.set_ylim(-2, 0)\nax.axhline(0, color='black', linewidth=0.5)\nax.legend(['Distributional', 'Deterministic'], loc='lower left')\n\n# Display the plot\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()", "idx": "errorbar_1", "width": 6.0, "height": 4.0}
{"file": "line_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\ndry_relaxation = [1.4, 1.2, 0.8, 0.6]\nrain_relaxation = [1.2, 1.0, 0.7, 0.4]\ndry_err = [0.1, 0.1, 0.1, 0.1]\nrain_err = [0.1, 0.1, 0.1, 0.1]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nx = np.arange(len(driving_styles))\n\nax.errorbar(x, dry_relaxation, yerr=dry_err, fmt='o-', color='black', label='Dry')\nax.errorbar(x, rain_relaxation, yerr=rain_err, fmt='o-', color='red', label='Rain')\n\n# Customizing the plot\nax.set_xticks(x)\nax.set_xticklabels(driving_styles)\nax.set_ylabel('Relaxation Level')\nax.set_ylim(0, 1.5)\nax.legend(title='Weather', loc='upper right')\n\n# Show plot\nplt.show()", "idx": "line_8", "width": 6.0, "height": 6.0}
{"file": "radar_9", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for TinyLLaVA-1.0\nvalues1 = [72.9, 67.2, 62.8, 43.1, 49.5, 65.0, 56.9, 75.4]\n# Data for TinyLLaVA-1.1\nvalues2 = [66.3, 42.9, 43.1, 55.6, 49.3, 65.0, 56.9, 75.4]\n\n# Number of variables\nnum_vars = len(values1)\n\n# Compute angle for each axis\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# The plot is circular, so we need to \"complete the loop\" and append the start to the end.\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nangles += angles[:1]\n\n# Draw the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], ['VQAv2', 'GQA', 'SQA-I', 'TextVQA', 'MM-Vet', 'POPE', 'VQAv2', 'GQA'])\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([20, 40, 60, 80], [\"20\", \"40\", \"60\", \"80\"], color=\"grey\", size=7)\nplt.ylim(0, 80)\n\n# Plot data\nax.plot(angles, values1, color='red', linewidth=2, linestyle='solid', label='TinyLLaVA-1.0')\nax.fill(angles, values1, color='red', alpha=0.25)\n\nax.plot(angles, values2, color='blue', linewidth=2, linestyle='solid', label='TinyLLaVA-1.1')\nax.fill(angles, values2, color='blue', alpha=0.25)\n\n# Add a legend\nplt.legend(loc='lower right', bbox_to_anchor=(0.1, 0.1))\n\n# Add values to each point\nfor i in range(num_vars):\n    plt.text(angles[i], values1[i], str(values1[i]), horizontalalignment='center', verticalalignment='center')\n    plt.text(angles[i], values2[i], str(values2[i]), horizontalalignment='center', verticalalignment='center')\n\n# Show the plot\nplt.show()", "idx": "radar_9", "width": 8.0, "height": 7.0}
{"file": "radar_15", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for MUJI and Nestle\ncategories = ['Labeling', 'Material', 'Storage', 'Recall', 'Compliance', 'Pollution', 'Allergen', 'Purity', 'Nutrition']\nMUJI_values = [0.8, 0.9, 0.7, 0.85, 0.9, 0.75, 0.8, 0.9, 0.85]\nNestle_values = [0.7, 0.8, 0.65, 0.8, 0.85, 0.7, 0.75, 0.85, 0.8]\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each category\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]  # Complete the loop\n\n# Plotting the radar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([0.2, 0.4, 0.6, 0.8], [\"0.2\", \"0.4\", \"0.6\", \"0.8\"], color=\"grey\", size=7)\nplt.ylim(0, 1)\n\n# Plot data for MUJI and Nestle\nMUJI_values += MUJI_values[:1]\nNestle_values += Nestle_values[:1]\n\nax.plot(angles, MUJI_values, linewidth=1, linestyle='solid', label='MUJI')\nax.fill(angles, MUJI_values, 'green', alpha=0.1)\n\nax.plot(angles, Nestle_values, linewidth=1, linestyle='solid', label='Nestle')\nax.fill(angles, Nestle_values, 'red', alpha=0.1)\n\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Add title\nplt.title('MUJI vs Nestle in Food Safety')\n\n# Show the plot\nplt.show()", "idx": "radar_15", "width": 8.0, "height": 8.0}
{"file": "bar_60", "code": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nvalues = [-0.7, 4.8, -8.5, -15.9, 19.7]\ncolors = ['red' if v < 0 else 'black' for v in values]\npatterns = ['/' if v < 0 else '\\\\' for v in values]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbars = ax.barh(models, values, color=colors, hatch=patterns)\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    label_x_pos = bar.get_width() - 1 if bar.get_width() < 0 else bar.get_width() + 1\n    ax.text(label_x_pos, bar.get_y() + bar.get_height()/2, f'{width}%', va='center')\n\n# Set labels\nax.set_xlabel('%')\nax.set_title('Yelp')\n\n# Remove spines\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Show grid\nax.xaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Hide y-axis\nax.yaxis.set_visible(False)\n\n# Show plot\nplt.show()", "idx": "bar_60", "width": 10.0, "height": 8.0}
{"file": "line_47", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.linspace(0, 12, 100)\ny1 = np.sin(x) * np.exp(-x/10) + 0.5\ny2 = np.cos(x) * np.exp(-x/10) + 0.5\nerror = 0.1 + 0.1 * np.sqrt(x)\n\n# Plotting the data\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot(x, y1, label='Standard Performance', color='blue')\nax.plot(x, y2, label='Innovative Performance', color='red')\n\n# Filling the area between the lines with error\nax.fill_between(x, y1-error, y1+error, color='blue', alpha=0.2)\nax.fill_between(x, y2-error, y2+error, color='red', alpha=0.2)\n\n# Customizing the plot\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\nax.set_title('Comparative Performance Analysis Over Time')\nax.legend(loc='upper right')\nax.grid(True)\n\n# Show the plot\nplt.show()", "idx": "line_47", "width": 10.0, "height": 6.0}
{"file": "CB_16", "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Sample data\nnp.random.seed(10)\ndata_seac = np.random.normal(48, 1, 200)\ndata_sac = np.random.normal(49, 1.5, 200)\n\n# Create a figure with specified size\nplt.figure(figsize=(7.0, 5.0))\n\n# Create a violin plot for SEAC\nsns.violinplot(data=data_seac, color='teal', inner=None)\n\n# Create a boxplot with scatter points for SEAC\nsns.boxplot(data=data_seac, width=0.2, color='white', fliersize=0)\nsns.stripplot(data=data_seac, color='teal', jitter=True, size=5, alpha=0.5)\n\n# Create a violin plot for SAC(20Hz)\nsns.violinplot(data=data_sac, color='salmon', inner=None)\n\n# Create a boxplot with scatter points for SAC(20Hz)\nsns.boxplot(data=data_sac, width=0.2, color='white', fliersize=0)\nsns.stripplot(data=data_sac, color='salmon', jitter=True, size=5, alpha=0.5)\n\n# Set the x-axis labels\nplt.xticks([0, 1], ['SEAC', 'SAC(20Hz)'])\n\n# Set the y-axis label\nplt.ylabel('Time Cost (Seconds)')\n\n# Set the title for Algorithms\nplt.xlabel('Algorithms')\n\n# Show the plot\nplt.show()", "idx": "CB_16", "width": 7.0, "height": 5.0}
{"file": "bar_9", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data\ngenia_values = {\n    'Type': [50, 40, 60, 70],\n    'Span': [60, 50, 70, 80],\n    'T&S': [70, 60, 80, 90],\n    'Spurious': [40, 30, 50, 60],\n    'Total': [80, 70, 90, 100]\n}\n\nbc5cdr_values = {\n    'Type': [30, 20, 40, 50],\n    'Span': [40, 30, 50, 60],\n    'T&S': [50, 40, 60, 70],\n    'Spurious': [20, 10, 30, 40],\n    'Total': [60, 50, 70, 80]\n}\n\nlabels = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nx = np.arange(len(labels))\nwidth = 0.2\n\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(9.0, 6.0))\n\n# GENIA\nfor i, (label, values) in enumerate(genia_values.items()):\n    ax1.bar(x + i*width, values, width, label=label)\n\nax1.set_ylabel('Error correction rate (%)')\nax1.set_title('GENIA')\nax1.set_xticks(x + width)\nax1.set_xticklabels(labels)\nax1.legend()\n\n# BC5CDR\nfor i, (label, values) in enumerate(bc5cdr_values.items()):\n    ax2.bar(x + i*width, values, width, label=label)\n\nax2.set_ylabel('Error correction rate (%)')\nax2.set_title('BC5CDR')\nax2.set_xticks(x + width)\nax2.set_xticklabels(labels)\nax2.legend()\n\nplt.tight_layout()\nplt.show()", "idx": "bar_9", "width": 9.0, "height": 6.0}
{"file": "tree_4", "code": "import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Create a Rectangle patch for the largest area (50%)\nrect1 = patches.Rectangle((0, 0), 1, 0.5, linewidth=1, edgecolor='black', facecolor='salmon')\nax.add_patch(rect1)\nplt.text(0.5, 0.25, '50%', fontsize=12, ha='center', va='center')\n\n# Create three Rectangle patches for the 5% areas\ncolors = ['grey', 'peachpuff', 'lightgrey']\nfor i, color in enumerate(colors):\n    rect = patches.Rectangle((i*0.33, 0.5), 0.33, 0.05, linewidth=1, edgecolor='black', facecolor=color)\n    ax.add_patch(rect)\n    plt.text(i*0.33 + 0.165, 0.525, '5%', fontsize=12, ha='center', va='center')\n\n# Create a Rectangle patch for the 15% area\nrect2 = patches.Rectangle((0, 0.55), 1, 0.15, linewidth=1, edgecolor='black', facecolor='skyblue')\nax.add_patch(rect2)\nplt.text(0.5, 0.625, '15%', fontsize=12, ha='center', va='center')\n\n# Create a Rectangle patch for the 20% area\nrect3 = patches.Rectangle((0, 0.7), 1, 0.2, linewidth=1, edgecolor='black', facecolor='lightseagreen')\nax.add_patch(rect3)\nplt.text(0.5, 0.8, '20%', fontsize=12, ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()", "idx": "tree_4", "width": 4.0, "height": 6.0}
{"file": "heatmap_26", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a low-resolution image\nnp.random.seed(0)\ndata = np.random.rand(4, 4)\n\nfig, axs = plt.subplots(nrows=3, ncols=6, figsize=(9.0, 6.0),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\ninterpolations = ['None', 'none', 'nearest', 'bilinear', 'bicubic', 'spline16',\n                  'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric',\n                  'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos']\n\nfor ax, interp in zip(axs.flat, interpolations):\n    ax.imshow(data, interpolation=interp, cmap='viridis')\n    ax.set_title(interp, fontsize=10)\n\nplt.tight_layout()\nplt.show()", "idx": "heatmap_26", "width": 9.0, "height": 6.0}
{"file": "box_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnp.random.seed(10)\ngaming_duration = np.random.normal(50, 10, 100)\nexercise_duration = np.random.normal(40, 15, 100)\nreading_duration = np.random.normal(45, 20, 100)\nmusic_playtime = np.random.normal(60, 25, 100)\n\ndata = [gaming_duration, exercise_duration, reading_duration, music_playtime]\nlabels = ['Gaming Duration', 'Exercise Duration', 'Reading Duration', 'Music Playtime']\n\n# Create a figure and axis with the specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Create the boxplot\nbplot = ax.boxplot(data, vert=False, patch_artist=True, labels=labels)\n\n# Customizing the boxplot colors\ncolors = ['#D3D3D3', '#FFFF99', '#99FF99', '#ADD8E6']\nfor patch, color in zip(bplot['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding scatter points to represent individual data points\nfor i, line in enumerate(data):\n    y = np.random.normal(i+1, 0.04, size=len(line))\n    plt.scatter(line, y, alpha=0.5, color='green')\n\n# Adding title and labels\nplt.title('Daily Activity Durations')\nplt.xlabel('Duration (minutes)')\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "box_10", "width": 9.0, "height": 5.0}
{"file": "violin_6", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for Vanilla and CoT\nvanilla_data = np.random.normal(60, 10, 200)\ncot_data = np.random.normal(70, 15, 200)\n\ndata = [vanilla_data, cot_data]\nlabels = ['Vanilla', 'CoT']\n\n# Create the violin plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nviolin_parts = ax.violinplot(data, showmeans=False, showmedians=False, showextrema=False)\n\n# Customizing the violin plot colors\ncolors = ['#FF69B4', '#1E90FF']\nfor i, pc in enumerate(violin_parts['bodies']):\n    pc.set_facecolor(colors[i])\n    pc.set_edgecolor('black')\n    pc.set_alpha(1)\n\n# Adding horizontal lines for the quartiles and median\nfor i, d in enumerate(data):\n    quartile1, median, quartile3 = np.percentile(d, [25, 50, 75])\n    ax.hlines(median, i + 0.9, i + 1.1, color='black', linestyle='-', lw=2)\n    ax.hlines([quartile1, quartile3], i + 0.9, i + 1.1, color='black', linestyle='-', lw=1)\n    ax.scatter(i + 1, median, color='white', zorder=3)\n\n# Setting the x-axis labels\nax.set_xticks([1, 2])\nax.set_xticklabels(labels)\n\n# Setting the y-axis label\nax.set_ylabel('Accuracy')\n\n# Setting the y-axis limits\nax.set_ylim(30, 90)\n\n# Adding grid lines\nax.yaxis.grid(True)\n\nplt.show()", "idx": "violin_6", "width": 6.0, "height": 4.0}
{"file": "CB_11", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data to mimic the picture\nnp.random.seed(0)\nx = np.random.uniform(-3, 0.5, 30)\ny = x * -1.5 + np.random.normal(0, 0.5, 30)\nsizes = [50, 100, 200, 400]  # Different sizes for the scatter points\ncolors = ['orange', 'green', 'blue', 'brown']\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Scatter plot with different sizes and colors\nfor i in range(4):\n    ax.scatter(x[i*7:(i+1)*7], y[i*7:(i+1)*7], s=sizes[i], c=colors[i], label=f'{2**i}x')\n\n# Add a legend\nax.legend(loc='upper left', title=' ')\n\n# Add a line of best fit\nm, b = np.polyfit(x, y, 1)\nax.plot(x, m*x + b, color='black')\n\n# Add a shaded area around the line\nplt.fill_between(x, m*x + b - 0.5, m*x + b + 0.5, color='gray', alpha=0.5)\n\n# Add text for correlation\nax.text(0.5, -3, 'Correlation: -0.47', horizontalalignment='right')\n\n# Set labels\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show grid\nax.grid(True)\n\n# Show the plot\nplt.show()", "idx": "CB_11", "width": 7.0, "height": 5.0}
{"file": "line_42", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.array([0, 50, 100, 150, 200])\nline1 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\nline2 = np.array([0.2, 0.5, 1.0, 1.5, 2.0])\nline3 = np.array([1.7, 1.5, 1.3, 1.1, 0.9])\n\n# Polynomial fit for line2\ncoefficients = np.polyfit(x, line2, 2)\npolynomial = np.poly1d(coefficients)\npoly_trend = polynomial(x)\n\n# Create subplots with specified figsize\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot for the left subplot\nax1.plot(x, line1, 'o-', color='orange', label='Line 1')\nax1.plot(x, line2, 's-', color='blue', label='Line 2')\nax1.set_xlabel('Gradient Steps (x 62.5K)')\nax1.set_ylabel('Value')\nax1.legend()\n\n# Annotate points on line1\nfor i, txt in enumerate(line1):\n    ax1.annotate(txt, (x[i], line1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Plot for the right subplot\nax2.plot(x, line3, '^-', color='green', linestyle='dashed', label='Line 3')\nax2.plot(x, poly_trend, 'p-', color='magenta', label='Polynomial Trend (from Line 2)')\nax2.set_xlabel('Gradient Steps (x 62.5K)')\nax2.set_ylabel('Polynomial Value')\nax2.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "line_42", "width": 10.0, "height": 5.0}
{"file": "line_11", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\ndecomposition_io_norm = [0, 20, 40, 60, 80]\ncoco_10k = [0.55, 0.65, 0.70, 0.73, 0.75]\nlaion_10k = [0.57, 0.67, 0.72, 0.74, 0.75]\ncoco_5k = [0.56, 0.64, 0.68, 0.70, 0.72]\nlaion_5k = [0.58, 0.66, 0.69, 0.71, 0.73]\nclip_line = [0.75] * len(decomposition_io_norm)\n\n# Plotting the lines\nplt.figure(figsize=(6.0, 6.0))\nplt.plot(decomposition_io_norm, coco_10k, 'o-r', label='coco (10k)')\nplt.plot(decomposition_io_norm, laion_10k, 'o-g', label='laion (10k)')\nplt.plot(decomposition_io_norm, coco_5k, 'o-b', label='coco (5k)')\nplt.plot(decomposition_io_norm, laion_5k, 'o-y', label='laion (5k)')\nplt.plot(decomposition_io_norm, clip_line, '--k', label='CLIP')\n\n# Adding title and labels\nplt.title('Effect of Vocab on Zero Shot Accuracy')\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\n\n# Adding legend\nplt.legend(title='Dictionary')\n\n# Show grid\nplt.grid(True)\n\n# Display the plot\nplt.show()", "idx": "line_11", "width": 6.0, "height": 6.0}
{"file": "3d_10", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nheight = [1, 2, 3, 4]\nwidth = [0.5, 1, 1.5, 2]\ncount = [4, 3, 2, 1]\n\n# Create a 3D figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the bars\nfor i in range(len(height)):\n    ax.bar3d(x=height[i], y=width[i], z=0, dx=0.4, dy=0.4, dz=count[i], color='r')\n\n# Set labels\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\n# Show the plot\nplt.show()", "idx": "3d_10", "width": 8.0, "height": 6.0}
{"file": "line_39", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nx = [96, 192, 336, 512, 720]\ny1 = [0.135, 0.138, 0.140, 0.137, 0.130]\ny2 = [0.165, 0.162, 0.158, 0.155, 0.150]\ny3 = [0.145, 0.148, 0.143, 0.140, 0.135]\ny4 = [0.155, 0.150, 0.145, 0.142, 0.138]\n\ny5 = [0.08, 0.09, 0.10, 0.11, 0.12]\ny6 = [0.18, 0.17, 0.16, 0.15, 0.14]\ny7 = [0.12, 0.13, 0.11, 0.10, 0.09]\ny8 = [0.14, 0.13, 0.12, 0.11, 0.10]\n\ny9 = [0.22, 0.21, 0.20, 0.19, 0.18]\ny10 = [0.18, 0.17, 0.16, 0.15, 0.14]\ny11 = [0.16, 0.15, 0.14, 0.13, 0.12]\ny12 = [0.14, 0.13, 0.12, 0.11, 0.10]\n\ny13 = [0.425, 0.400, 0.375, 0.350, 0.325]\ny14 = [0.375, 0.350, 0.325, 0.300, 0.275]\ny15 = [0.325, 0.300, 0.275, 0.250, 0.225]\ny16 = [0.275, 0.250, 0.225, 0.200, 0.175]\n\n# Create subplots\nfig, axs = plt.subplots(1, 4, figsize=(15.0, 4.0))\n\n# Plot data\naxs[0].plot(x, y1, 'o-', label='pred_length=96', color='blue')\naxs[0].plot(x, y2, '^-', label='pred_length=192', color='orange')\naxs[0].plot(x, y3, 's-', label='pred_length=336', color='green')\naxs[0].plot(x, y4, '*-', label='pred_length=720', color='red')\naxs[0].set_title('Traffic')\naxs[0].set_xlabel('MSE')\n\naxs[1].plot(x, y5, 'o-', label='pred_length=96', color='blue')\naxs[1].plot(x, y6, '^-', label='pred_length=192', color='orange')\naxs[1].plot(x, y7, 's-', label='pred_length=336', color='green')\naxs[1].plot(x, y8, '*-', label='pred_length=720', color='red')\naxs[1].set_title('ETMm2')\naxs[1].set_xlabel('MSE')\n\naxs[2].plot(x, y9, 'o-', label='pred_length=96', color='blue')\naxs[2].plot(x, y10, '^-', label='pred_length=192', color='orange')\naxs[2].plot(x, y11, 's-', label='pred_length=336', color='green')\naxs[2].plot(x, y12, '*-', label='pred_length=720', color='red')\naxs[2].set_title('ETTh2')\naxs[2].set_xlabel('MSE')\n\naxs[3].plot(x, y13, 'o-', label='pred_length=96', color='blue')\naxs[3].plot(x, y14, '^-', label='pred_length=192', color='orange')\naxs[3].plot(x, y15, 's-', label='pred_length=336', color='green')\naxs[3].plot(x, y16, '*-', label='pred_length=720', color='red')\naxs[3].set_title('ECL')\naxs[3].set_xlabel('MSE')\n\n# Add legend\nfor ax in axs:\n    ax.legend()\n\n# Show plot\nplt.tight_layout()\nplt.show()", "idx": "line_39", "width": 15.0, "height": 4.0}
{"file": "3d_5", "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data for plotting\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4]\ny = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9]\nz = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create a new figure with specified figure size\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the 3D line\nax.plot(x, y, z, color='orange', marker='o', linestyle='-', linewidth=2, markersize=5)\n\n# Set plot title and labels\nax.set_title('Targets')\nax.set_xlabel('X axis')\nax.set_ylabel('Y axis')\nax.set_zlabel('Z axis')\n\n# Set the legend\nax.legend(['Targets'], loc='upper left')\n\n# Show the plot\nplt.show()", "idx": "3d_5", "width": 7.0, "height": 7.0}
{"file": "scatter_5", "code": "import matplotlib.pyplot as plt\n\n# Data points for each category\nsiren_data = [(0.06, 900), (0.1, 850)]\nwire_data = [(0.08, 800)]\nffn_data = [(0.1, 500), (0.14, 450)]\nsz3_data = [(0.12, 650), (0.16, 600)]\nnncomp_data = [(0.14, 250), (0.18, 200)]\nours_data = [(0.16, 300), (0.2, 250)]\n\n# Plotting each category with different colors and markers\nplt.scatter(*zip(*siren_data), color='blue', label='SIREN')\nplt.scatter(*zip(*wire_data), color='cyan', label='WIRE')\nplt.scatter(*zip(*ffn_data), color='red', label='FFN')\nplt.scatter(*zip(*sz3_data), color='green', label='SZ3')\nplt.scatter(*zip(*nncomp_data), color='magenta', marker='x', label='NNComp')\nplt.scatter(*zip(*ours_data), color='orange', label='Ours')\n\n# Setting the figure size as specified\nplt.figure(figsize=(6.0, 6.0))\n\n# Adding labels and title\nplt.xlabel('Bit per pixel (BPP)')\nplt.ylabel('WRMSE')\nplt.title('Scatter Plot of WRMSE vs BPP')\n\n# Adding legend\nplt.legend()\n\n# Display the plot\nplt.show()", "idx": "scatter_5", "width": 6.0, "height": 6.0}
{"file": "bar_34", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data (randomly generated for demonstration purposes)\ncategories = ['coreutils', 'gzip', 'scp', 'tar', 'exim', 'memc.', 'nginx', 'astar', 'bzip2', 'gcc', 'gobmk', 'h264.', 'libq.', 'mcf', 'omnet', 'perl', 'sjeng', 'xalan', 'PHP', 'MYSQL', 'AVG']\nreg_opt = np.random.rand(len(categories)) * 100\nbi_opt = np.random.rand(len(categories)) * 100\nloop_opt = np.random.rand(len(categories)) * 100\n\n# Set up the figure size\nplt.figure(figsize=(8.0, 4.0))\n\n# Create bar plots\nbar_width = 0.25\nindex = np.arange(len(categories))\n\nbar1 = plt.bar(index, reg_opt, bar_width, label='RegOpt', color='green', hatch='/')\nbar2 = plt.bar(index + bar_width, bi_opt, bar_width, label='BIOpt', color='yellow', hatch='\\\\')\nbar3 = plt.bar(index + 2 * bar_width, loop_opt, bar_width, label='LoopOpt', color='blue', hatch='|')\n\n# Add labels and title\nplt.xlabel('Categories')\nplt.ylabel('Percentage')\nplt.title('Optimization Comparison')\nplt.xticks(index + bar_width, categories, rotation=90)\nplt.yticks(np.arange(0, 101, 20), [f'{i}%' for i in range(0, 101, 20)])\n\n# Add legend\nplt.legend()\n\n# Show grid\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()", "idx": "bar_34", "width": 8.0, "height": 4.0}
{"file": "hist_11", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration purposes\nnp.random.seed(0)\ndata_positive = np.random.normal(1, 0.5, 1000)\ndata_negative = np.random.normal(1.5, 0.5, 1000)\n\n# Set the figure size as specified\nplt.figure(figsize=(10.0, 8.0))\n\n# Subplot 1\nplt.subplot(2, 2, 1)\nplt.hist(data_positive, bins=30, density=True, alpha=0.6, color='gold', label='V-I positive')\nplt.hist(data_negative, bins=30, density=True, alpha=0.6, color='skyblue', label='V-I negative')\nplt.title('(a) Baseline')\nplt.xlabel('Euclidean Distance')\nplt.ylabel('Density')\nplt.legend()\n\n# Subplot 2\nplt.subplot(2, 2, 2)\nplt.hist(data_positive, bins=30, density=True, alpha=0.6, color='gold', label='V-I positive')\nplt.hist(data_negative, bins=30, density=True, alpha=0.6, color='skyblue', label='V-I negative')\nplt.title('(b) MIRL w/ MULT')\nplt.xlabel('Euclidean Distance')\nplt.ylabel('Density')\nplt.legend()\n\n# Subplot 3\nplt.subplot(2, 2, 3)\nplt.hist(data_positive, bins=30, density=True, alpha=0.6, color='gold', label='V-I positive')\nplt.hist(data_negative, bins=30, density=True, alpha=0.6, color='skyblue', label='V-I negative')\nplt.title('(c) MIRL + OCLR w/ MULT')\nplt.xlabel('Euclidean Distance')\nplt.ylabel('Density')\nplt.legend()\n\n# Subplot 4\nplt.subplot(2, 2, 4)\nplt.hist(data_positive, bins=30, density=True, alpha=0.6, color='gold', label='V-I positive')\nplt.hist(data_negative, bins=30, density=True, alpha=0.6, color='skyblue', label='V-I negative')\nplt.title('(d) MIRL + OCLR w/ DOTLA')\nplt.xlabel('Euclidean Distance')\nplt.ylabel('Density')\nplt.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "hist_11", "width": 10.0, "height": 8.0}
{"file": "HR_14", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import pi\n\n# Define the data for the chart\ncategories = ['GPT4V', 'Gemini Pro-CoT', 'Qwen-VL-Max', 'GPT4V-CoT', 'InternLM-XComposer2-VL', 'Gemini Pro']\nvalues = [20, 15, 30, 25, 10, 5]\nvalues += values[:1]  # Repeat the first value to close the circular graph\n\n# Number of variables\nnum_vars = len(categories)\n\n# Compute angle for each category\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\n\n# Initialise the spider plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10, 20, 30], [\"Level 1\", \"Level 2\", \"Level 3\"], color=\"grey\", size=7)\nplt.ylim(0, 40)\n\n# Plot data\nax.plot(angles, values, linewidth=1, linestyle='solid')\n\n# Fill area\nax.fill(angles, values, 'b', alpha=0.1)\n\n# Add a legend\nlegend_labels = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\nlegend_colors = ['red', 'blue', 'green', 'purple', 'orange']\nlegend_patches = [plt.Line2D([0], [0], marker='o', color='w', label=label,\n                             markerfacecolor=color, markersize=10) for label, color in zip(legend_labels, legend_colors)]\nplt.legend(handles=legend_patches, loc='lower left', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()", "idx": "HR_14", "width": 6.0, "height": 6.0}
{"file": "HR_21", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nathlete_names = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [150, 175]\ninterrupted_times = [50, 25]\nrest_times = [75, 50]\n\n# Set the figure size as requested\nplt.figure(figsize=(7.0, 5.0))\n\n# Plot the bar chart\nbar_width = 0.35\nindex = range(len(athlete_names))\n\n# Plotting the bars for each category\nplt.bar(index, running_times, bar_width, color='blue', label='Running')\nplt.bar(index, interrupted_times, bar_width, color='red', bottom=running_times, label='Interrupted')\nplt.bar(index, rest_times, bar_width, color='green', bottom=[i+j for i,j in zip(running_times, interrupted_times)], label='Rest')\n\n# Adding labels and title\nplt.xlabel('Seconds Since Start')\nplt.ylabel('')\nplt.title('Endurance Race Performance Analysis')\nplt.xticks(index, athlete_names)\n\n# Adding a custom annotation\nplt.annotate('Race interrupted due to weather', xy=(1, 175), xytext=(1.5, 200),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Adding the legend\nplt.legend()\n\n# Show the plot\nplt.show()", "idx": "HR_21", "width": 7.0, "height": 5.0}
{"file": "bar_58", "code": "import matplotlib.pyplot as plt\n\n# Data for the chart\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [10, 20, 30, 40, 50, 60]\ngood = [20, 15, 10, 5, 10, 5]\nmoderate = [0, 0, 0, 0, 0, 0]\npoor = [10, 20, 30, 40, 50, 60]\nvery_poor = [20, 15, 10, 5, 10, 5]\n\n# Set the figure size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the horizontal bar chart\nplt.barh(cities, excellent, color='salmon', label='Excellent')\nplt.barh(cities, good, left=excellent, color='peachpuff', label='Good')\nplt.barh(cities, moderate, left=[i+j for i,j in zip(excellent, good)], color='lightgrey', label='Moderate')\nplt.barh(cities, poor, left=[i+j+k for i,j,k in zip(excellent, good, moderate)], color='lightblue', label='Poor')\nplt.barh(cities, very_poor, left=[i+j+k+l for i,j,k,l in zip(excellent, good, moderate, poor)], color='lightskyblue', label='Very Poor')\n\n# Add the legend\nplt.legend(loc='upper right')\n\n# Add the grid and set the x-axis limits\nplt.grid(axis='x', linestyle='--')\nplt.xlim(90, -90)\n\n# Invert the x-axis to match the original picture\nplt.gca().invert_xaxis()\n\n# Add labels to the y-axis to match the original picture\nplt.yticks([i for i in range(len(cities))], [city + ' -' for city in cities])\n\n# Show the plot\nplt.show()", "idx": "bar_58", "width": 10.0, "height": 6.0}
{"file": "CB_8", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size as required\nplt.figure(figsize=(8.0, 8.0))\n\n# Create a grid of subplots\ngrid = plt.GridSpec(4, 4, wspace=0.4, hspace=0.4)\n\n# Create the main hexbin plot\nmain_ax = plt.subplot(grid[1:4, 0:3])\nx = np.random.rand(100)\ny = np.random.rand(100)\nmain_ax.hexbin(x, y, gridsize=30, cmap='Blues', mincnt=1)\nmain_ax.set_xlabel('TMScore')\nmain_ax.set_ylabel('Sequence ID')\n\n# Create the top histogram\ntop_hist = plt.subplot(grid[0, 0:3], sharex=main_ax)\ntop_hist.hist(x, bins=20, histtype='bar', rwidth=0.7)\ntop_hist.axis('off')\n\n# Create the right histogram\nright_hist = plt.subplot(grid[1:4, 3], sharey=main_ax)\nright_hist.hist(y, bins=20, orientation='horizontal', histtype='bar', rwidth=0.7)\nright_hist.axis('off')\n\n# Show the plot\nplt.show()", "idx": "CB_8", "width": 8.0, "height": 8.0}
{"file": "pie_13", "code": "import matplotlib.pyplot as plt\n\n# Data for the plots\nfull_finetuning = [25.1, 12.6, 15.9, 26.4]\nqlora = [46.2, 4.6, 5.3, 23.9]\ncategories = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\ncolors = ['#FFD166', '#6C757D', '#06D6A0', '#F4F4F4']\n\n# Create a figure with custom size\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 8.0))\n\n# Full Finetuning Donut Chart\naxs[0].pie(full_finetuning, labels=full_finetuning, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=0.3))\naxs[0].set_title('Full Finetuning')\n\n# QLoRA Donut Chart\naxs[1].pie(qlora, labels=qlora, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=0.3))\naxs[1].set_title('QLoRA')\n\n# Add legend\nfig.legend(categories, loc='lower center', ncol=4)\n\n# Adjust layout to make room for the legend\nplt.tight_layout(rect=[0, 0.1, 1, 1])\n\n# Show the plot\nplt.show()", "idx": "pie_13", "width": 5.0, "height": 8.0}
{"file": "line_46", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 24, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create figure and axes with specified figsize\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 10.0))\n\n# Plot the first graph for Daytime Activity Monitoring\nax1.plot(x, y1, color='blue', label='Standard Activity')\nax1.set_title('Daytime Activity Monitoring')\nax1.set_xlabel('Time (Hours)')\nax1.set_ylabel('Activity Level')\nax1.legend(loc='upper right')\n\n# Plot the second graph for Nighttime Activity Monitoring\nax2.plot(x, y2, color='red', linestyle='--', label='Innovative Activity')\nax2.set_title('Nighttime Activity Monitoring')\nax2.set_xlabel('Time (Hours)')\nax2.set_ylabel('Activity Level')\nax2.legend(loc='upper right')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()", "idx": "line_46", "width": 6.0, "height": 10.0}
{"file": "pie_3", "code": "import matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [40, 29, 20, 11]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nexplode = (0, 0, 0, 0)  # explode a slice if required\n\n# Plot\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=False, startangle=140)\n\nplt.axis('equal')\nplt.legend(labels, loc=\"upper right\")\nplt.show()", "idx": "pie_3", "width": 5.0, "height": 5.0}
{"file": "line_48", "code": "import matplotlib.pyplot as plt\n\n# Data for plotting\nmonths = range(1, 13)\nsales = [1200, 1350, 1600, 1450, 1550, 950, 1250, 1100, 1200, 1300, 1400, 1500]\ntemperature = [21, 21.5, 22, 22.5, 23, 23.5, 24, 24.5, 25, 24.5, 24, 23.5]\n\n# Create figure and axis objects with a shared x-axis\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot sales data\ncolor = 'tab:blue'\nax1.set_xlabel('Month')\nax1.set_ylabel('Sales', color=color)\nax1.plot(months, sales, 'o-', color=color, label='Monthly Sales')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the temperature data\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Temperature (\u00b0C)', color=color)\nax2.plot(months, temperature, 's--', color=color, label='Average Temperature')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a legend with a specific location\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.9))\n\n# Add a title\nplt.title('Sales and Temperature Correlation Over a Year')\n\n# Show the plot\nplt.show()", "idx": "line_48", "width": 10.0, "height": 6.0}
{"file": "bar_7", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [-84.3, -37.9, -3.67]\nobserved_fgt = [-9.44, -9.12, -3.51]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create figure and axes\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Bar plot for Probing FGT and Observed FGT\nbar_width = 0.35\nindex = np.arange(len(categories))\nbar1 = ax1.bar(index, probing_fgt, bar_width, label='Probing FGT', color='darkgrey')\nbar2 = ax1.bar(index + bar_width, observed_fgt, bar_width, label='Observed FGT', color='lightgrey')\n\n# Line plot for Feature Embedding Distance\nax2 = ax1.twinx()\nline1 = ax2.plot(index + bar_width/2, feature_embedding_distance, label='Feature Embedding Distance', color='black', marker='o')\n\n# Adding values on top of the bars\nfor rect in bar1 + bar2:\n    height = rect.get_height()\n    ax1.text(rect.get_x() + rect.get_width()/2., height, '%.2f' % height, ha='center', va='bottom')\n\n# Axes labels, title, and legend\nax1.set_xlabel('Categories')\nax1.set_ylabel('Accuracy (%)')\nax2.set_ylabel('Feature Embedding Distance')\nax1.set_xticks(index + bar_width / 2)\nax1.set_xticklabels(categories)\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show grid\nax1.grid(True)\n\n# Show plot\nplt.show()", "idx": "bar_7", "width": 8.0, "height": 6.0}
{"file": "line_23", "code": "import matplotlib.pyplot as plt\n\n# Data\nx = [2**1, 2**3, 2**5, 2**7]\ny = [67.32, 82.98, 88.23, 96.75]\nlabels = ['67.32', '82.98', '88.23', '96.75']\n\n# Plot\nfig, ax = plt.subplots(figsize=(5.0, 2.0))\nax.plot(x, y, marker='o', color='blue', markersize=10, markerfacecolor='orange', markeredgewidth=0)\nax.set_xticks(x)\nax.set_xticklabels(['2^1', '2^3', '2^5', '2^7'])\nax.set_yticks(range(70, 101, 5))\nax.set_yticklabels([f'{i}%' for i in range(70, 101, 5)])\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Annotate points with labels\nfor i, label in enumerate(labels):\n    ax.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nplt.show()", "idx": "line_23", "width": 5.0, "height": 2.0}
{"file": "multidiff_22", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ntasks = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nsuccess_rates = [80, 85, 75, 90]\nsuccess_std = [5, 7, 6, 8]\n\nalgorithms = ['Alg1', 'Alg2', 'Alg3', 'Alg4']\nefficiency_scores = [100, 95, 90, 85]\nefficiency_std = [3, 4, 5, 2]\n\nmodels = ['Model A', 'Model B', 'Model C', 'Model D']\nadaptability_scores = {\n    'Dry Conditions': [90, 85, 95, 80],\n    'Wet Conditions': [80, 75, 85, 90]\n}\nadaptability_std = {\n    'Dry Conditions': [4, 5, 3, 6],\n    'Wet Conditions': [5, 6, 4, 7]\n}\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 10.0))\n\n# Plot 1: AI Task Success Rates\naxs[0, 0].bar(tasks, success_rates, yerr=success_std, color='skyblue', capsize=5)\naxs[0, 0].set_title('AI Task Success Rates')\naxs[0, 0].set_ylim(0, 100)\naxs[0, 0].set_ylabel('Success Rate (%)')\n\n# Plot 2: Algorithm Efficiency Scores\naxs[1, 0].errorbar(algorithms, efficiency_scores, yerr=efficiency_std, fmt='o', color='pink', capsize=5)\naxs[1, 0].set_title('Algorithm Efficiency Scores')\naxs[1, 0].set_ylim(60, 110)\naxs[1, 0].set_ylabel('Efficiency (%)')\n\n# Plot 3: AI Model Adaptability Under Conditions\nfor condition, color in zip(['Dry Conditions', 'Wet Conditions'], ['green', 'blue']):\n    axs[1, 1].errorbar(models, adaptability_scores[condition], yerr=adaptability_std[condition], \n                       fmt='o-', label=condition, color=color, capsize=5)\naxs[1, 1].set_title('AI Model Adaptability Under Conditions')\naxs[1, 1].set_ylim(75, 100)\naxs[1, 1].set_ylabel('Adaptability Score (%)')\naxs[1, 1].legend(title='Conditions')\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()", "idx": "multidiff_22", "width": 10.0, "height": 10.0}
{"file": "errorbar_11", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\nbaseline1 = [0.748, 0.762, 0.709]\nbaseline2 = [0.715, 0.748, 0.687]\nfedMM = [0.759, 0.78, 0.713]\nerrors = [0.05, 0.04, 0.03]\n\n# X-axis positions\nx = np.arange(len(hospitals))\n\n# Plot size\nplt.figure(figsize=(8.0, 5.0))\n\n# Bar width\nbar_width = 0.25\n\n# Plotting bars\nplt.bar(x - bar_width, baseline1, width=bar_width, color='blue', label='Baseline 1', hatch='/')\nplt.bar(x, baseline2, width=bar_width, color='orange', label='Baseline 2', hatch='\\\\')\nplt.bar(x + bar_width, fedMM, width=bar_width, color='green', label='FedMM', hatch='o')\n\n# Adding error bars\nplt.errorbar(x - bar_width, baseline1, yerr=errors, fmt='k.', capsize=5)\nplt.errorbar(x, baseline2, yerr=errors, fmt='k.', capsize=5)\nplt.errorbar(x + bar_width, fedMM, yerr=errors, fmt='k.', capsize=5)\n\n# Adding text labels\nfor i in range(len(hospitals)):\n    plt.text(x[i] - bar_width, baseline1[i] + errors[i], f'{baseline1[i]:.3f}', ha='center')\n    plt.text(x[i], baseline2[i] + errors[i], f'{baseline2[i]:.3f}', ha='center')\n    plt.text(x[i] + bar_width, fedMM[i] + errors[i], f'{fedMM[i]:.3f}', ha='center')\n\n# Setting x-axis labels and title\nplt.xticks(x, hospitals)\nplt.title('Accuracy by hospital and method')\n\n# Adding y-axis label\nplt.ylabel('Accuracy')\n\n# Adding legend\nplt.legend()\n\n# Show plot\nplt.show()", "idx": "errorbar_11", "width": 8.0, "height": 5.0}
{"file": "CB_7", "code": "import matplotlib.pyplot as plt\n\n# Data points\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120]\ny = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120]\npercentages = ['99.6%', '99.9%', '96.0%', '92.3%', '90.9%', '99.5%', '90.9%', '91.3%', '92.5%', '93.3%', '98.7%']\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data points and line\nax.plot(x, y, marker='o', color='blue', linestyle='-')\nfor i, txt in enumerate(percentages):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the x and y axis labels\nax.set_xlabel('HC_first (before aging)')\nax.set_ylabel('HC_first (after aging)')\n\n# Set the x and y axis limits\nax.set_xlim(0, 128)\nax.set_ylim(0, 128)\n\n# Set the x and y axis tick labels\nax.set_xticklabels(['0K', '8K', '16K', '24K', '32K', '40K', '48K', '56K', '64K', '72K', '80K', '88K', '96K', '104K', '112K', '120K'])\nax.set_yticklabels(['0K', '8K', '16K', '24K', '32K', '40K', '48K', '56K', '64K', '72K', '80K', '88K', '96K', '104K', '112K', '120K'])\n\n# Show grid\nax.grid(True)\n\n# Show the plot\nplt.show()", "idx": "CB_7", "width": 8.0, "height": 6.0}
{"file": "bar_29", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poisson', 'Burgers', 'N-S']\nrbf_int = [0.05, 0.0008, 0.02, 0.02, 0.008, 0.05]\nrbf_pol = [0.08, 0.001, 0.03, 0.03, 0.01, 0.08]\nrbf_com = [0.09, 0.0012, 0.04, 0.04, 0.012, 0.09]\n\nbar_width = 0.25\nindex = np.arange(len(categories))\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar1 = ax.bar(index, rbf_int, bar_width, label='RBF-INT', color='purple')\nbar2 = ax.bar(index + bar_width, rbf_pol, bar_width, label='RBF-POL', color='red')\nbar3 = ax.bar(index + 2*bar_width, rbf_com, bar_width, label='RBF-COM', color='orange')\n\n# Labels, Title and Custom x-axis\nax.set_xlabel('PDEs')\nax.set_ylabel('log L2')\nax.set_title('Comparison of RBF Methods')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\nax.set_yscale('log')\nax.legend()\n\n# Show plot\nplt.show()", "idx": "bar_29", "width": 10.0, "height": 6.0}
{"file": "line_44", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data (assuming some example values based on the picture)\nN = np.array([10, 20, 30, 40, 50, 60])\nstandard = np.array([1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5])\nconstrained = np.array([1e-11, 1e-11, 1e-11, 1e-11, 1e-11, 1e-11])\nexperimental = np.array([1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8])\nhypothetical = np.array([1e-2, 1e-3, 1e-4, 1e-5, 1e-4, 1e-3])\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(N, standard, marker='o', color='blue', label='Standard')\nplt.plot(N, constrained, marker='x', color='orange', label='Constrained')\nplt.plot(N, experimental, marker='s', color='green', linestyle='--', label='Experimental')\nplt.plot(N, hypothetical, marker='^', color='purple', label='Hypothetical')\n\n# Setting the y-axis to log scale\nplt.yscale('log')\n\n# Labels and title\nplt.xlabel('N')\nplt.ylabel('Precision')\nplt.title('Comparison of Precision')\n\n# Legend\nplt.legend()\n\n# Show grid\nplt.grid(True, which=\"both\", ls=\"--\")\n\n# Show the plot\nplt.show()", "idx": "line_44", "width": 10.0, "height": 6.0}
{"file": "box_24", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Nutrition', 'Environment']\nmean_values = [2.0, 2.5, 2.2, 2.8, 2.4, 2.6]\nmedian_values = [1.8, 2.2, 1.6, 2.4, 1.4, 2.0]\niqr_mean = [1.8, 2.0, 1.9, 2.2, 2.1, 2.3]\niqr_median = [1.6, 1.8, 1.7, 2.0, 1.9, 2.1]\n\n# Create subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot Mean Value\naxs[0, 0].bar(categories, mean_values, color=['cyan', 'purple', 'red', 'blue', 'yellow', 'orange'])\naxs[0, 0].set_title('Mean Value')\n\n# Plot Median Value\naxs[0, 1].bar(categories, median_values, color=['cyan', 'purple', 'red', 'blue', 'yellow', 'orange'])\naxs[0, 1].set_title('Median Value')\n\n# Plot IQR Mean\naxs[1, 0].bar(categories, iqr_mean, color=['cyan', 'purple', 'red', 'blue', 'yellow', 'orange'])\naxs[1, 0].set_title('IQR Mean')\n\n# Plot IQR Median\naxs[1, 1].bar(categories, iqr_median, color=['cyan', 'purple', 'red', 'blue', 'yellow', 'orange'])\naxs[1, 1].set_title('IQR Median')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "box_24", "width": 8.0, "height": 8.0}
{"file": "multidiff_13", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Replace this with the actual data from the STEM paper\ndata = np.random.rand(10, 10) - 0.5\n\n# Set the attributes for the y-axis\nattributes = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'BigNose', 'NoBeard', 'HeavyMakeup']\n\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), gridspec_kw={'width_ratios': [3, 1], 'height_ratios': [1, 3]})\n\n# Top left empty plot\naxes[0, 0].axis('off')\n\n# Top right bar plot\nbar_data = np.random.rand(12) - 0.5\naxes[0, 1].barh(attributes, bar_data, color='lightblue')\naxes[0, 1].set_xlim(-0.5, 0.5)\naxes[0, 1].set_title('I_o(Y,Z)')\n\n# Bottom left heatmap\nim = axes[1, 0].imshow(data, cmap='coolwarm', aspect='auto')\naxes[1, 0].set_yticks(np.arange(len(attributes)))\naxes[1, 0].set_yticklabels(attributes)\naxes[1, 0].set_xticklabels([])\naxes[1, 0].set_xlabel('sensitive attribute')\n\n# Bottom right empty plot\naxes[1, 1].axis('off')\n\n# Colorbar\ncbar = fig.colorbar(im, ax=axes.ravel().tolist(), shrink=0.75)\ncbar.set_label('Value')\n\nplt.tight_layout()\nplt.show()", "idx": "multidiff_13", "width": 8.0, "height": 8.0}
{"file": "HR_15", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Placeholder data\nm_values = np.logspace(1, 2, 100)\ns_values = [19, 50, 76, 142, 232]\ncolors = ['purple', 'pink', 'darkviolet', 'orange', 'gold']\nerror_band = [0.1, 0.05, 0.02, 0.01, 0.005]\n\n# Create subplots with specified figsize\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Left subplot\nfor s, color, band in zip(s_values, colors, error_band):\n    error = np.random.normal(0, band, m_values.shape)\n    axs[0].loglog(m_values, 1/m_values + error, 'o', color=color, label=f's = {s}')\n    axs[0].fill_between(m_values, (1/m_values - band), (1/m_values + band), color=color, alpha=0.2)\n\naxs[0].set_xlabel('number of matvecs m')\naxs[0].set_ylabel('approximation error: ||A - A^||_F')\naxs[0].set_title('Left Plot')\n\n# Right subplot\nfor s, color, band in zip(s_values, colors, error_band):\n    error = np.random.normal(0, band, m_values.shape)\n    axs[1].loglog(m_values, 1/m_values**2 + error, 'o', color=color, label=f's = {s}')\n    axs[1].fill_between(m_values, (1/m_values**2 - band), (1/m_values**2 + band), color=color, alpha=0.2)\n\naxs[1].set_xlabel('number of matvecs m')\naxs[1].set_ylabel('sparse recovery error: ||S_0 A - A^||_F')\naxs[1].set_title('Right Plot')\n\n# Add legend to the right subplot\naxs[1].legend(loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()", "idx": "HR_15", "width": 10.0, "height": 4.0}
